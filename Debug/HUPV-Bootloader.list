
HUPV-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  080e0000  080e0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004edc  080e02cc  080e02cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080e51a8  080e51a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080e5214  080e5214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080e5218  080e5218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080e521c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000188  24000010  080e522c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000198  080e522c  00020198  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014cff  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002800  00000000  00000000  00034d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001288  00000000  00000000  00037540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001160  00000000  00000000  000387c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000335cc  00000000  00000000  00039928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014ab7  00000000  00000000  0006cef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014ec17  00000000  00000000  000819ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d05c2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004f20  00000000  00000000  001d0614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080e02cc <__do_global_dtors_aux>:
 80e02cc:	b510      	push	{r4, lr}
 80e02ce:	4c05      	ldr	r4, [pc, #20]	; (80e02e4 <__do_global_dtors_aux+0x18>)
 80e02d0:	7823      	ldrb	r3, [r4, #0]
 80e02d2:	b933      	cbnz	r3, 80e02e2 <__do_global_dtors_aux+0x16>
 80e02d4:	4b04      	ldr	r3, [pc, #16]	; (80e02e8 <__do_global_dtors_aux+0x1c>)
 80e02d6:	b113      	cbz	r3, 80e02de <__do_global_dtors_aux+0x12>
 80e02d8:	4804      	ldr	r0, [pc, #16]	; (80e02ec <__do_global_dtors_aux+0x20>)
 80e02da:	f3af 8000 	nop.w
 80e02de:	2301      	movs	r3, #1
 80e02e0:	7023      	strb	r3, [r4, #0]
 80e02e2:	bd10      	pop	{r4, pc}
 80e02e4:	24000010 	.word	0x24000010
 80e02e8:	00000000 	.word	0x00000000
 80e02ec:	080e5190 	.word	0x080e5190

080e02f0 <frame_dummy>:
 80e02f0:	b508      	push	{r3, lr}
 80e02f2:	4b03      	ldr	r3, [pc, #12]	; (80e0300 <frame_dummy+0x10>)
 80e02f4:	b11b      	cbz	r3, 80e02fe <frame_dummy+0xe>
 80e02f6:	4903      	ldr	r1, [pc, #12]	; (80e0304 <frame_dummy+0x14>)
 80e02f8:	4803      	ldr	r0, [pc, #12]	; (80e0308 <frame_dummy+0x18>)
 80e02fa:	f3af 8000 	nop.w
 80e02fe:	bd08      	pop	{r3, pc}
 80e0300:	00000000 	.word	0x00000000
 80e0304:	24000014 	.word	0x24000014
 80e0308:	080e5190 	.word	0x080e5190

080e030c <bootloader_start>:
void const __b_write_memory(fdcan_packet_t* packet);
void const __b_erase_memory(fdcan_packet_t* packet);
void const __b_go(fdcan_packet_t* packet);


void bootloader_start(){
 80e030c:	b580      	push	{r7, lr}
 80e030e:	b092      	sub	sp, #72	; 0x48
 80e0310:	af00      	add	r7, sp, #0
	fdcan_packet_t packet;
	__b_clean_fdcan_packet_all(&packet);
 80e0312:	1d3b      	adds	r3, r7, #4
 80e0314:	4618      	mov	r0, r3
 80e0316:	f000 fad9 	bl	80e08cc <__b_clean_fdcan_packet_all>

	while(1){
		if (__b_wait_until_fdcan_message_received() != BOOTLOADER_OK) {
 80e031a:	f000 faf3 	bl	80e0904 <__b_wait_until_fdcan_message_received>
 80e031e:	4603      	mov	r3, r0
 80e0320:	2b00      	cmp	r3, #0
 80e0322:	d138      	bne.n	80e0396 <bootloader_start+0x8a>
			continue;
		}

		fdcan_read(&packet);
 80e0324:	1d3b      	adds	r3, r7, #4
 80e0326:	4618      	mov	r0, r3
 80e0328:	f000 fb40 	bl	80e09ac <fdcan_read>

		switch (packet.identifier) {
 80e032c:	88bb      	ldrh	r3, [r7, #4]
 80e032e:	2b50      	cmp	r3, #80	; 0x50
 80e0330:	d00e      	beq.n	80e0350 <bootloader_start+0x44>
 80e0332:	2b50      	cmp	r3, #80	; 0x50
 80e0334:	dc25      	bgt.n	80e0382 <bootloader_start+0x76>
 80e0336:	2b40      	cmp	r3, #64	; 0x40
 80e0338:	d00f      	beq.n	80e035a <bootloader_start+0x4e>
 80e033a:	2b40      	cmp	r3, #64	; 0x40
 80e033c:	dc21      	bgt.n	80e0382 <bootloader_start+0x76>
 80e033e:	2b30      	cmp	r3, #48	; 0x30
 80e0340:	d010      	beq.n	80e0364 <bootloader_start+0x58>
 80e0342:	2b30      	cmp	r3, #48	; 0x30
 80e0344:	dc1d      	bgt.n	80e0382 <bootloader_start+0x76>
 80e0346:	2b10      	cmp	r3, #16
 80e0348:	d016      	beq.n	80e0378 <bootloader_start+0x6c>
 80e034a:	2b20      	cmp	r3, #32
 80e034c:	d00f      	beq.n	80e036e <bootloader_start+0x62>
 80e034e:	e018      	b.n	80e0382 <bootloader_start+0x76>
			case GET_VERSION_ORDER:
				__b_get_version(&packet);
 80e0350:	1d3b      	adds	r3, r7, #4
 80e0352:	4618      	mov	r0, r3
 80e0354:	f000 f821 	bl	80e039a <__b_get_version>
				break;
 80e0358:	e018      	b.n	80e038c <bootloader_start+0x80>
			case READ_MEMORY_ORDER:
				__b_read_memory(&packet);
 80e035a:	1d3b      	adds	r3, r7, #4
 80e035c:	4618      	mov	r0, r3
 80e035e:	f000 f837 	bl	80e03d0 <__b_read_memory>
				break;
 80e0362:	e013      	b.n	80e038c <bootloader_start+0x80>
			case WRITE_MEMORY_ORDER:
				__b_write_memory(&packet);
 80e0364:	1d3b      	adds	r3, r7, #4
 80e0366:	4618      	mov	r0, r3
 80e0368:	f000 f904 	bl	80e0574 <__b_write_memory>
				break;
 80e036c:	e00e      	b.n	80e038c <bootloader_start+0x80>
			case ERASE_MEMORY_ORDER:
				__b_erase_memory(&packet);
 80e036e:	1d3b      	adds	r3, r7, #4
 80e0370:	4618      	mov	r0, r3
 80e0372:	f000 f9df 	bl	80e0734 <__b_erase_memory>
				break;
 80e0376:	e009      	b.n	80e038c <bootloader_start+0x80>
			case GO_ORDER:
				__b_go(&packet);
 80e0378:	1d3b      	adds	r3, r7, #4
 80e037a:	4618      	mov	r0, r3
 80e037c:	f000 fa03 	bl	80e0786 <__b_go>
				break;
 80e0380:	e004      	b.n	80e038c <bootloader_start+0x80>
			default:
				__b_send_nack(&packet);
 80e0382:	1d3b      	adds	r3, r7, #4
 80e0384:	4618      	mov	r0, r3
 80e0386:	f000 fa77 	bl	80e0878 <__b_send_nack>
				break;
 80e038a:	bf00      	nop
		}

		__b_clean_fdcan_packet_all(&packet);
 80e038c:	1d3b      	adds	r3, r7, #4
 80e038e:	4618      	mov	r0, r3
 80e0390:	f000 fa9c 	bl	80e08cc <__b_clean_fdcan_packet_all>
 80e0394:	e7c1      	b.n	80e031a <bootloader_start+0xe>
			continue;
 80e0396:	bf00      	nop
		if (__b_wait_until_fdcan_message_received() != BOOTLOADER_OK) {
 80e0398:	e7bf      	b.n	80e031a <bootloader_start+0xe>

080e039a <__b_get_version>:
	}
}

void const __b_get_version(fdcan_packet_t* packet){
 80e039a:	b580      	push	{r7, lr}
 80e039c:	b082      	sub	sp, #8
 80e039e:	af00      	add	r7, sp, #0
 80e03a0:	6078      	str	r0, [r7, #4]
	__b_send_ack(packet);
 80e03a2:	6878      	ldr	r0, [r7, #4]
 80e03a4:	f000 fa57 	bl	80e0856 <__b_send_ack>

	packet->data[0] = BOOTLOADER_VERSION;
 80e03a8:	687b      	ldr	r3, [r7, #4]
 80e03aa:	2205      	movs	r2, #5
 80e03ac:	709a      	strb	r2, [r3, #2]
	if (fdcan_transmit(packet) != FDCAN_OK) {
 80e03ae:	6878      	ldr	r0, [r7, #4]
 80e03b0:	f000 fac2 	bl	80e0938 <fdcan_transmit>
 80e03b4:	4603      	mov	r3, r0
 80e03b6:	2b00      	cmp	r3, #0
 80e03b8:	d003      	beq.n	80e03c2 <__b_get_version+0x28>
		__b_send_nack(packet);
 80e03ba:	6878      	ldr	r0, [r7, #4]
 80e03bc:	f000 fa5c 	bl	80e0878 <__b_send_nack>
		return;
 80e03c0:	e002      	b.n	80e03c8 <__b_get_version+0x2e>
	}

	__b_send_ack(packet);
 80e03c2:	6878      	ldr	r0, [r7, #4]
 80e03c4:	f000 fa47 	bl	80e0856 <__b_send_ack>
}
 80e03c8:	3708      	adds	r7, #8
 80e03ca:	46bd      	mov	sp, r7
 80e03cc:	bd80      	pop	{r7, pc}
	...

080e03d0 <__b_read_memory>:

void const __b_read_memory(fdcan_packet_t* packet){
 80e03d0:	b580      	push	{r7, lr}
 80e03d2:	f5ad 3d00 	sub.w	sp, sp, #131072	; 0x20000
 80e03d6:	b086      	sub	sp, #24
 80e03d8:	af00      	add	r7, sp, #0
 80e03da:	f107 0318 	add.w	r3, r7, #24
 80e03de:	f843 0c14 	str.w	r0, [r3, #-20]
	uint32_t buffer[SECTOR_SIZE_IN_32BITS_WORDS];
	sector_t sector;
	uint32_t address;
	uint16_t i, counter = 0;
 80e03e2:	2300      	movs	r3, #0
 80e03e4:	4a5e      	ldr	r2, [pc, #376]	; (80e0560 <__b_read_memory+0x190>)
 80e03e6:	443a      	add	r2, r7
 80e03e8:	8013      	strh	r3, [r2, #0]

	sector = packet->data[0];
 80e03ea:	f107 0318 	add.w	r3, r7, #24
 80e03ee:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e03f2:	789b      	ldrb	r3, [r3, #2]
 80e03f4:	4a5b      	ldr	r2, [pc, #364]	; (80e0564 <__b_read_memory+0x194>)
 80e03f6:	443a      	add	r2, r7
 80e03f8:	6013      	str	r3, [r2, #0]
	address = flash_get_sector_starting_address(sector);
 80e03fa:	4b5a      	ldr	r3, [pc, #360]	; (80e0564 <__b_read_memory+0x194>)
 80e03fc:	443b      	add	r3, r7
 80e03fe:	6818      	ldr	r0, [r3, #0]
 80e0400:	f000 fc3a 	bl	80e0c78 <flash_get_sector_starting_address>
 80e0404:	4b58      	ldr	r3, [pc, #352]	; (80e0568 <__b_read_memory+0x198>)
 80e0406:	443b      	add	r3, r7
 80e0408:	6018      	str	r0, [r3, #0]

	if (address == FLASH_SECTOR_ERROR || sector >= FLASH_PROTECTED_SECTOR2) {
 80e040a:	4b57      	ldr	r3, [pc, #348]	; (80e0568 <__b_read_memory+0x198>)
 80e040c:	443b      	add	r3, r7
 80e040e:	681b      	ldr	r3, [r3, #0]
 80e0410:	f1b3 3fff 	cmp.w	r3, #4294967295
 80e0414:	d004      	beq.n	80e0420 <__b_read_memory+0x50>
 80e0416:	4b53      	ldr	r3, [pc, #332]	; (80e0564 <__b_read_memory+0x194>)
 80e0418:	443b      	add	r3, r7
 80e041a:	681b      	ldr	r3, [r3, #0]
 80e041c:	2b06      	cmp	r3, #6
 80e041e:	d906      	bls.n	80e042e <__b_read_memory+0x5e>
		__b_send_nack(packet);
 80e0420:	f107 0318 	add.w	r3, r7, #24
 80e0424:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0428:	f000 fa26 	bl	80e0878 <__b_send_nack>
		return;
 80e042c:	e093      	b.n	80e0556 <__b_read_memory+0x186>
	}

	if (flash_read(address, buffer, SECTOR_SIZE_IN_32BITS_WORDS) != FLASH_OK) {
 80e042e:	4b4f      	ldr	r3, [pc, #316]	; (80e056c <__b_read_memory+0x19c>)
 80e0430:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80e0434:	f103 0318 	add.w	r3, r3, #24
 80e0438:	443b      	add	r3, r7
 80e043a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80e043e:	4619      	mov	r1, r3
 80e0440:	4b49      	ldr	r3, [pc, #292]	; (80e0568 <__b_read_memory+0x198>)
 80e0442:	443b      	add	r3, r7
 80e0444:	6818      	ldr	r0, [r3, #0]
 80e0446:	f000 fae5 	bl	80e0a14 <flash_read>
 80e044a:	4603      	mov	r3, r0
 80e044c:	2b00      	cmp	r3, #0
 80e044e:	d006      	beq.n	80e045e <__b_read_memory+0x8e>
		__b_send_nack(packet);
 80e0450:	f107 0318 	add.w	r3, r7, #24
 80e0454:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0458:	f000 fa0e 	bl	80e0878 <__b_send_nack>
		return;
 80e045c:	e07b      	b.n	80e0556 <__b_read_memory+0x186>
	}

	__b_send_ack(packet);
 80e045e:	f107 0318 	add.w	r3, r7, #24
 80e0462:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0466:	f000 f9f6 	bl	80e0856 <__b_send_ack>

	if (__b_wait_for_ack(packet->identifier) != BOOTLOADER_OK) {
 80e046a:	f107 0318 	add.w	r3, r7, #24
 80e046e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e0472:	881b      	ldrh	r3, [r3, #0]
 80e0474:	b2db      	uxtb	r3, r3
 80e0476:	4618      	mov	r0, r3
 80e0478:	f000 f9cb 	bl	80e0812 <__b_wait_for_ack>
 80e047c:	4603      	mov	r3, r0
 80e047e:	2b00      	cmp	r3, #0
 80e0480:	d006      	beq.n	80e0490 <__b_read_memory+0xc0>
		__b_send_nack(packet);
 80e0482:	f107 0318 	add.w	r3, r7, #24
 80e0486:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e048a:	f000 f9f5 	bl	80e0878 <__b_send_nack>
		return;
 80e048e:	e062      	b.n	80e0556 <__b_read_memory+0x186>
	}

	for (i = 0; i < SECTOR_SIZE_IN_32BITS_WORDS; i +=16) {
 80e0490:	2300      	movs	r3, #0
 80e0492:	4a37      	ldr	r2, [pc, #220]	; (80e0570 <__b_read_memory+0x1a0>)
 80e0494:	443a      	add	r2, r7
 80e0496:	8013      	strh	r3, [r2, #0]
 80e0498:	e051      	b.n	80e053e <__b_read_memory+0x16e>
		__b_data_copy_to_packet(packet, ((uint8_t*)&(buffer[i])));
 80e049a:	4b35      	ldr	r3, [pc, #212]	; (80e0570 <__b_read_memory+0x1a0>)
 80e049c:	443b      	add	r3, r7
 80e049e:	881a      	ldrh	r2, [r3, #0]
 80e04a0:	4b32      	ldr	r3, [pc, #200]	; (80e056c <__b_read_memory+0x19c>)
 80e04a2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80e04a6:	f103 0318 	add.w	r3, r3, #24
 80e04aa:	443b      	add	r3, r7
 80e04ac:	0092      	lsls	r2, r2, #2
 80e04ae:	4413      	add	r3, r2
 80e04b0:	f107 0218 	add.w	r2, r7, #24
 80e04b4:	4619      	mov	r1, r3
 80e04b6:	f852 0c14 	ldr.w	r0, [r2, #-20]
 80e04ba:	f000 f96f 	bl	80e079c <__b_data_copy_to_packet>
		if (fdcan_transmit(packet) != FDCAN_OK) {
 80e04be:	f107 0318 	add.w	r3, r7, #24
 80e04c2:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e04c6:	f000 fa37 	bl	80e0938 <fdcan_transmit>
 80e04ca:	4603      	mov	r3, r0
 80e04cc:	2b00      	cmp	r3, #0
 80e04ce:	d006      	beq.n	80e04de <__b_read_memory+0x10e>
			__b_send_nack(packet);
 80e04d0:	f107 0318 	add.w	r3, r7, #24
 80e04d4:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e04d8:	f000 f9ce 	bl	80e0878 <__b_send_nack>
			return;
 80e04dc:	e03b      	b.n	80e0556 <__b_read_memory+0x186>
		}
		if (counter >= BOOTLOADER_BLOCK_SIZE) {
 80e04de:	4b20      	ldr	r3, [pc, #128]	; (80e0560 <__b_read_memory+0x190>)
 80e04e0:	443b      	add	r3, r7
 80e04e2:	881b      	ldrh	r3, [r3, #0]
 80e04e4:	2b07      	cmp	r3, #7
 80e04e6:	d91c      	bls.n	80e0522 <__b_read_memory+0x152>
			__b_send_ack(packet);
 80e04e8:	f107 0318 	add.w	r3, r7, #24
 80e04ec:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e04f0:	f000 f9b1 	bl	80e0856 <__b_send_ack>
			if (__b_wait_for_ack(packet->identifier) != BOOTLOADER_OK) {
 80e04f4:	f107 0318 	add.w	r3, r7, #24
 80e04f8:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e04fc:	881b      	ldrh	r3, [r3, #0]
 80e04fe:	b2db      	uxtb	r3, r3
 80e0500:	4618      	mov	r0, r3
 80e0502:	f000 f986 	bl	80e0812 <__b_wait_for_ack>
 80e0506:	4603      	mov	r3, r0
 80e0508:	2b00      	cmp	r3, #0
 80e050a:	d006      	beq.n	80e051a <__b_read_memory+0x14a>
				__b_send_nack(packet);
 80e050c:	f107 0318 	add.w	r3, r7, #24
 80e0510:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0514:	f000 f9b0 	bl	80e0878 <__b_send_nack>
				return;
 80e0518:	e01d      	b.n	80e0556 <__b_read_memory+0x186>
			}
			counter = 0;
 80e051a:	2300      	movs	r3, #0
 80e051c:	4a10      	ldr	r2, [pc, #64]	; (80e0560 <__b_read_memory+0x190>)
 80e051e:	443a      	add	r2, r7
 80e0520:	8013      	strh	r3, [r2, #0]
		}
		counter++;
 80e0522:	4b0f      	ldr	r3, [pc, #60]	; (80e0560 <__b_read_memory+0x190>)
 80e0524:	443b      	add	r3, r7
 80e0526:	881b      	ldrh	r3, [r3, #0]
 80e0528:	3301      	adds	r3, #1
 80e052a:	4a0d      	ldr	r2, [pc, #52]	; (80e0560 <__b_read_memory+0x190>)
 80e052c:	443a      	add	r2, r7
 80e052e:	8013      	strh	r3, [r2, #0]
	for (i = 0; i < SECTOR_SIZE_IN_32BITS_WORDS; i +=16) {
 80e0530:	4b0f      	ldr	r3, [pc, #60]	; (80e0570 <__b_read_memory+0x1a0>)
 80e0532:	443b      	add	r3, r7
 80e0534:	881b      	ldrh	r3, [r3, #0]
 80e0536:	3310      	adds	r3, #16
 80e0538:	4a0d      	ldr	r2, [pc, #52]	; (80e0570 <__b_read_memory+0x1a0>)
 80e053a:	443a      	add	r2, r7
 80e053c:	8013      	strh	r3, [r2, #0]
 80e053e:	4b0c      	ldr	r3, [pc, #48]	; (80e0570 <__b_read_memory+0x1a0>)
 80e0540:	443b      	add	r3, r7
 80e0542:	f9b3 3000 	ldrsh.w	r3, [r3]
 80e0546:	2b00      	cmp	r3, #0
 80e0548:	daa7      	bge.n	80e049a <__b_read_memory+0xca>
		//HAL_Delay(1);
	}

	__b_send_ack(packet);
 80e054a:	f107 0318 	add.w	r3, r7, #24
 80e054e:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0552:	f000 f980 	bl	80e0856 <__b_send_ack>
}
 80e0556:	f507 3700 	add.w	r7, r7, #131072	; 0x20000
 80e055a:	3718      	adds	r7, #24
 80e055c:	46bd      	mov	sp, r7
 80e055e:	bd80      	pop	{r7, pc}
 80e0560:	00020014 	.word	0x00020014
 80e0564:	00020010 	.word	0x00020010
 80e0568:	0002000c 	.word	0x0002000c
 80e056c:	fffdfff4 	.word	0xfffdfff4
 80e0570:	00020016 	.word	0x00020016

080e0574 <__b_write_memory>:

void const __b_write_memory(fdcan_packet_t* packet){
 80e0574:	b580      	push	{r7, lr}
 80e0576:	f5ad 3d00 	sub.w	sp, sp, #131072	; 0x20000
 80e057a:	b086      	sub	sp, #24
 80e057c:	af00      	add	r7, sp, #0
 80e057e:	f107 0318 	add.w	r3, r7, #24
 80e0582:	f843 0c14 	str.w	r0, [r3, #-20]
	uint32_t buffer[SECTOR_SIZE_IN_32BITS_WORDS];
	sector_t sector;
	uint32_t address;
	uint16_t i, counter = 1;
 80e0586:	2301      	movs	r3, #1
 80e0588:	4a65      	ldr	r2, [pc, #404]	; (80e0720 <__b_write_memory+0x1ac>)
 80e058a:	443a      	add	r2, r7
 80e058c:	8013      	strh	r3, [r2, #0]

	sector = packet->data[0];
 80e058e:	f107 0318 	add.w	r3, r7, #24
 80e0592:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e0596:	789b      	ldrb	r3, [r3, #2]
 80e0598:	4a62      	ldr	r2, [pc, #392]	; (80e0724 <__b_write_memory+0x1b0>)
 80e059a:	443a      	add	r2, r7
 80e059c:	6013      	str	r3, [r2, #0]
	address = flash_get_sector_starting_address(sector);
 80e059e:	4b61      	ldr	r3, [pc, #388]	; (80e0724 <__b_write_memory+0x1b0>)
 80e05a0:	443b      	add	r3, r7
 80e05a2:	6818      	ldr	r0, [r3, #0]
 80e05a4:	f000 fb68 	bl	80e0c78 <flash_get_sector_starting_address>
 80e05a8:	4b5f      	ldr	r3, [pc, #380]	; (80e0728 <__b_write_memory+0x1b4>)
 80e05aa:	443b      	add	r3, r7
 80e05ac:	6018      	str	r0, [r3, #0]

	if (address == FLASH_SECTOR_ERROR || sector >= FLASH_PROTECTED_SECTOR1) {
 80e05ae:	4b5e      	ldr	r3, [pc, #376]	; (80e0728 <__b_write_memory+0x1b4>)
 80e05b0:	443b      	add	r3, r7
 80e05b2:	681b      	ldr	r3, [r3, #0]
 80e05b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80e05b8:	d004      	beq.n	80e05c4 <__b_write_memory+0x50>
 80e05ba:	4b5a      	ldr	r3, [pc, #360]	; (80e0724 <__b_write_memory+0x1b0>)
 80e05bc:	443b      	add	r3, r7
 80e05be:	681b      	ldr	r3, [r3, #0]
 80e05c0:	2b05      	cmp	r3, #5
 80e05c2:	d906      	bls.n	80e05d2 <__b_write_memory+0x5e>
		__b_send_nack(packet);
 80e05c4:	f107 0318 	add.w	r3, r7, #24
 80e05c8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e05cc:	f000 f954 	bl	80e0878 <__b_send_nack>
		return;
 80e05d0:	e0a0      	b.n	80e0714 <__b_write_memory+0x1a0>
	}

	__b_send_ack(packet);
 80e05d2:	f107 0318 	add.w	r3, r7, #24
 80e05d6:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e05da:	f000 f93c 	bl	80e0856 <__b_send_ack>

	if (__b_wait_for_ack(packet->identifier) != BOOTLOADER_OK) {
 80e05de:	f107 0318 	add.w	r3, r7, #24
 80e05e2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e05e6:	881b      	ldrh	r3, [r3, #0]
 80e05e8:	b2db      	uxtb	r3, r3
 80e05ea:	4618      	mov	r0, r3
 80e05ec:	f000 f911 	bl	80e0812 <__b_wait_for_ack>
 80e05f0:	4603      	mov	r3, r0
 80e05f2:	2b00      	cmp	r3, #0
 80e05f4:	d006      	beq.n	80e0604 <__b_write_memory+0x90>
		__b_send_nack(packet);
 80e05f6:	f107 0318 	add.w	r3, r7, #24
 80e05fa:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e05fe:	f000 f93b 	bl	80e0878 <__b_send_nack>
		return;
 80e0602:	e087      	b.n	80e0714 <__b_write_memory+0x1a0>
	}

	for (i = 0; i < SECTOR_SIZE_IN_32BITS_WORDS; i +=16) {
 80e0604:	2300      	movs	r3, #0
 80e0606:	4a49      	ldr	r2, [pc, #292]	; (80e072c <__b_write_memory+0x1b8>)
 80e0608:	443a      	add	r2, r7
 80e060a:	8013      	strh	r3, [r2, #0]
 80e060c:	e068      	b.n	80e06e0 <__b_write_memory+0x16c>
		__b_wait_until_fdcan_message_received();
 80e060e:	f000 f979 	bl	80e0904 <__b_wait_until_fdcan_message_received>
		if (fdcan_read(packet) != FDCAN_OK) {
 80e0612:	f107 0318 	add.w	r3, r7, #24
 80e0616:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e061a:	f000 f9c7 	bl	80e09ac <fdcan_read>
 80e061e:	4603      	mov	r3, r0
 80e0620:	2b00      	cmp	r3, #0
 80e0622:	d006      	beq.n	80e0632 <__b_write_memory+0xbe>
			__b_send_nack(packet);
 80e0624:	f107 0318 	add.w	r3, r7, #24
 80e0628:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e062c:	f000 f924 	bl	80e0878 <__b_send_nack>
			return;
 80e0630:	e070      	b.n	80e0714 <__b_write_memory+0x1a0>
		}

		if (packet->identifier != WRITE_MEMORY_ORDER) {
 80e0632:	f107 0318 	add.w	r3, r7, #24
 80e0636:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e063a:	881b      	ldrh	r3, [r3, #0]
 80e063c:	2b30      	cmp	r3, #48	; 0x30
 80e063e:	d00c      	beq.n	80e065a <__b_write_memory+0xe6>
			packet->identifier = WRITE_MEMORY_ORDER;
 80e0640:	f107 0318 	add.w	r3, r7, #24
 80e0644:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e0648:	2230      	movs	r2, #48	; 0x30
 80e064a:	801a      	strh	r2, [r3, #0]
			__b_send_nack(packet);
 80e064c:	f107 0318 	add.w	r3, r7, #24
 80e0650:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0654:	f000 f910 	bl	80e0878 <__b_send_nack>
			return;
 80e0658:	e05c      	b.n	80e0714 <__b_write_memory+0x1a0>
		}

		__b_data_copy_from_packet(packet, ((uint8_t*)&(buffer[i])));
 80e065a:	4b34      	ldr	r3, [pc, #208]	; (80e072c <__b_write_memory+0x1b8>)
 80e065c:	443b      	add	r3, r7
 80e065e:	881a      	ldrh	r2, [r3, #0]
 80e0660:	4b33      	ldr	r3, [pc, #204]	; (80e0730 <__b_write_memory+0x1bc>)
 80e0662:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80e0666:	f103 0318 	add.w	r3, r3, #24
 80e066a:	443b      	add	r3, r7
 80e066c:	0092      	lsls	r2, r2, #2
 80e066e:	4413      	add	r3, r2
 80e0670:	f107 0218 	add.w	r2, r7, #24
 80e0674:	4619      	mov	r1, r3
 80e0676:	f852 0c14 	ldr.w	r0, [r2, #-20]
 80e067a:	f000 f8ad 	bl	80e07d8 <__b_data_copy_from_packet>

		if (counter >= BOOTLOADER_BLOCK_SIZE) {
 80e067e:	4b28      	ldr	r3, [pc, #160]	; (80e0720 <__b_write_memory+0x1ac>)
 80e0680:	443b      	add	r3, r7
 80e0682:	881b      	ldrh	r3, [r3, #0]
 80e0684:	2b07      	cmp	r3, #7
 80e0686:	d91d      	bls.n	80e06c4 <__b_write_memory+0x150>
			__b_send_ack(packet);
 80e0688:	f107 0318 	add.w	r3, r7, #24
 80e068c:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0690:	f000 f8e1 	bl	80e0856 <__b_send_ack>
			if (__b_wait_for_ack(packet->identifier) != BOOTLOADER_OK) {
 80e0694:	f107 0318 	add.w	r3, r7, #24
 80e0698:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e069c:	881b      	ldrh	r3, [r3, #0]
 80e069e:	b2db      	uxtb	r3, r3
 80e06a0:	4618      	mov	r0, r3
 80e06a2:	f000 f8b6 	bl	80e0812 <__b_wait_for_ack>
 80e06a6:	4603      	mov	r3, r0
 80e06a8:	2b00      	cmp	r3, #0
 80e06aa:	d006      	beq.n	80e06ba <__b_write_memory+0x146>
				__b_send_nack(packet);
 80e06ac:	f107 0318 	add.w	r3, r7, #24
 80e06b0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e06b4:	f000 f8e0 	bl	80e0878 <__b_send_nack>
				return;
 80e06b8:	e02c      	b.n	80e0714 <__b_write_memory+0x1a0>
			}
			counter = 1;
 80e06ba:	2301      	movs	r3, #1
 80e06bc:	4a18      	ldr	r2, [pc, #96]	; (80e0720 <__b_write_memory+0x1ac>)
 80e06be:	443a      	add	r2, r7
 80e06c0:	8013      	strh	r3, [r2, #0]
 80e06c2:	e006      	b.n	80e06d2 <__b_write_memory+0x15e>
		}else{
			counter++;
 80e06c4:	4b16      	ldr	r3, [pc, #88]	; (80e0720 <__b_write_memory+0x1ac>)
 80e06c6:	443b      	add	r3, r7
 80e06c8:	881b      	ldrh	r3, [r3, #0]
 80e06ca:	3301      	adds	r3, #1
 80e06cc:	4a14      	ldr	r2, [pc, #80]	; (80e0720 <__b_write_memory+0x1ac>)
 80e06ce:	443a      	add	r2, r7
 80e06d0:	8013      	strh	r3, [r2, #0]
	for (i = 0; i < SECTOR_SIZE_IN_32BITS_WORDS; i +=16) {
 80e06d2:	4b16      	ldr	r3, [pc, #88]	; (80e072c <__b_write_memory+0x1b8>)
 80e06d4:	443b      	add	r3, r7
 80e06d6:	881b      	ldrh	r3, [r3, #0]
 80e06d8:	3310      	adds	r3, #16
 80e06da:	4a14      	ldr	r2, [pc, #80]	; (80e072c <__b_write_memory+0x1b8>)
 80e06dc:	443a      	add	r2, r7
 80e06de:	8013      	strh	r3, [r2, #0]
 80e06e0:	4b12      	ldr	r3, [pc, #72]	; (80e072c <__b_write_memory+0x1b8>)
 80e06e2:	443b      	add	r3, r7
 80e06e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80e06e8:	2b00      	cmp	r3, #0
 80e06ea:	da90      	bge.n	80e060e <__b_write_memory+0x9a>
		}

	}

	flash_write(address, buffer, SECTOR_SIZE_IN_32BITS_WORDS);
 80e06ec:	4b10      	ldr	r3, [pc, #64]	; (80e0730 <__b_write_memory+0x1bc>)
 80e06ee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80e06f2:	f103 0318 	add.w	r3, r3, #24
 80e06f6:	443b      	add	r3, r7
 80e06f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80e06fc:	4619      	mov	r1, r3
 80e06fe:	4b0a      	ldr	r3, [pc, #40]	; (80e0728 <__b_write_memory+0x1b4>)
 80e0700:	443b      	add	r3, r7
 80e0702:	6818      	ldr	r0, [r3, #0]
 80e0704:	f000 f9b6 	bl	80e0a74 <flash_write>

	__b_send_ack(packet);
 80e0708:	f107 0318 	add.w	r3, r7, #24
 80e070c:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0710:	f000 f8a1 	bl	80e0856 <__b_send_ack>
}
 80e0714:	f507 3700 	add.w	r7, r7, #131072	; 0x20000
 80e0718:	3718      	adds	r7, #24
 80e071a:	46bd      	mov	sp, r7
 80e071c:	bd80      	pop	{r7, pc}
 80e071e:	bf00      	nop
 80e0720:	00020014 	.word	0x00020014
 80e0724:	00020010 	.word	0x00020010
 80e0728:	0002000c 	.word	0x0002000c
 80e072c:	00020016 	.word	0x00020016
 80e0730:	fffdfff4 	.word	0xfffdfff4

080e0734 <__b_erase_memory>:

void const __b_erase_memory(fdcan_packet_t* packet){
 80e0734:	b580      	push	{r7, lr}
 80e0736:	b084      	sub	sp, #16
 80e0738:	af00      	add	r7, sp, #0
 80e073a:	6078      	str	r0, [r7, #4]
	sector_t sector1, sector2;

	sector1 = packet->data[0];
 80e073c:	687b      	ldr	r3, [r7, #4]
 80e073e:	789b      	ldrb	r3, [r3, #2]
 80e0740:	60fb      	str	r3, [r7, #12]
	sector2 = packet->data[1];
 80e0742:	687b      	ldr	r3, [r7, #4]
 80e0744:	78db      	ldrb	r3, [r3, #3]
 80e0746:	60bb      	str	r3, [r7, #8]

	if (sector1 > sector2 || sector1 < FLASH_SECTOR_0 || sector2 > FLASH_MAX_SECTOR) {
 80e0748:	68fa      	ldr	r2, [r7, #12]
 80e074a:	68bb      	ldr	r3, [r7, #8]
 80e074c:	429a      	cmp	r2, r3
 80e074e:	d802      	bhi.n	80e0756 <__b_erase_memory+0x22>
 80e0750:	68bb      	ldr	r3, [r7, #8]
 80e0752:	2b05      	cmp	r3, #5
 80e0754:	d903      	bls.n	80e075e <__b_erase_memory+0x2a>
		__b_send_nack(packet);
 80e0756:	6878      	ldr	r0, [r7, #4]
 80e0758:	f000 f88e 	bl	80e0878 <__b_send_nack>
		return;
 80e075c:	e010      	b.n	80e0780 <__b_erase_memory+0x4c>
	}

	__b_send_ack(packet);
 80e075e:	6878      	ldr	r0, [r7, #4]
 80e0760:	f000 f879 	bl	80e0856 <__b_send_ack>


	if(flash_erase(sector1, sector2) != FLASH_OK){
 80e0764:	68b9      	ldr	r1, [r7, #8]
 80e0766:	68f8      	ldr	r0, [r7, #12]
 80e0768:	f000 f9e0 	bl	80e0b2c <flash_erase>
 80e076c:	4603      	mov	r3, r0
 80e076e:	2b00      	cmp	r3, #0
 80e0770:	d003      	beq.n	80e077a <__b_erase_memory+0x46>
		__b_send_nack(packet);
 80e0772:	6878      	ldr	r0, [r7, #4]
 80e0774:	f000 f880 	bl	80e0878 <__b_send_nack>
		return;
 80e0778:	e002      	b.n	80e0780 <__b_erase_memory+0x4c>
	}

	__b_send_ack(packet);
 80e077a:	6878      	ldr	r0, [r7, #4]
 80e077c:	f000 f86b 	bl	80e0856 <__b_send_ack>
}
 80e0780:	3710      	adds	r7, #16
 80e0782:	46bd      	mov	sp, r7
 80e0784:	bd80      	pop	{r7, pc}

080e0786 <__b_go>:

void const __b_go(fdcan_packet_t* packet){
 80e0786:	b580      	push	{r7, lr}
 80e0788:	b082      	sub	sp, #8
 80e078a:	af00      	add	r7, sp, #0
 80e078c:	6078      	str	r0, [r7, #4]
	__b_send_nack(packet);
 80e078e:	6878      	ldr	r0, [r7, #4]
 80e0790:	f000 f872 	bl	80e0878 <__b_send_nack>
}
 80e0794:	bf00      	nop
 80e0796:	3708      	adds	r7, #8
 80e0798:	46bd      	mov	sp, r7
 80e079a:	bd80      	pop	{r7, pc}

080e079c <__b_data_copy_to_packet>:

void const __b_data_copy_to_packet(fdcan_packet_t* packet, uint8_t* data){
 80e079c:	b480      	push	{r7}
 80e079e:	b085      	sub	sp, #20
 80e07a0:	af00      	add	r7, sp, #0
 80e07a2:	6078      	str	r0, [r7, #4]
 80e07a4:	6039      	str	r1, [r7, #0]
	uint8_t i;

	for (i = 0; i < 64; ++i) {
 80e07a6:	2300      	movs	r3, #0
 80e07a8:	73fb      	strb	r3, [r7, #15]
 80e07aa:	e00b      	b.n	80e07c4 <__b_data_copy_to_packet+0x28>
		packet->data[i] = data[i];
 80e07ac:	7bfb      	ldrb	r3, [r7, #15]
 80e07ae:	683a      	ldr	r2, [r7, #0]
 80e07b0:	441a      	add	r2, r3
 80e07b2:	7bfb      	ldrb	r3, [r7, #15]
 80e07b4:	7811      	ldrb	r1, [r2, #0]
 80e07b6:	687a      	ldr	r2, [r7, #4]
 80e07b8:	4413      	add	r3, r2
 80e07ba:	460a      	mov	r2, r1
 80e07bc:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 64; ++i) {
 80e07be:	7bfb      	ldrb	r3, [r7, #15]
 80e07c0:	3301      	adds	r3, #1
 80e07c2:	73fb      	strb	r3, [r7, #15]
 80e07c4:	7bfb      	ldrb	r3, [r7, #15]
 80e07c6:	2b3f      	cmp	r3, #63	; 0x3f
 80e07c8:	d9f0      	bls.n	80e07ac <__b_data_copy_to_packet+0x10>
	}
}
 80e07ca:	bf00      	nop
 80e07cc:	bf00      	nop
 80e07ce:	3714      	adds	r7, #20
 80e07d0:	46bd      	mov	sp, r7
 80e07d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e07d6:	4770      	bx	lr

080e07d8 <__b_data_copy_from_packet>:

void const __b_data_copy_from_packet(fdcan_packet_t* packet, uint8_t* data){
 80e07d8:	b480      	push	{r7}
 80e07da:	b085      	sub	sp, #20
 80e07dc:	af00      	add	r7, sp, #0
 80e07de:	6078      	str	r0, [r7, #4]
 80e07e0:	6039      	str	r1, [r7, #0]
	uint8_t i;

	for (i = 0; i < 64; ++i) {
 80e07e2:	2300      	movs	r3, #0
 80e07e4:	73fb      	strb	r3, [r7, #15]
 80e07e6:	e00a      	b.n	80e07fe <__b_data_copy_from_packet+0x26>
		data[i] = packet->data[i];
 80e07e8:	7bfa      	ldrb	r2, [r7, #15]
 80e07ea:	7bfb      	ldrb	r3, [r7, #15]
 80e07ec:	6839      	ldr	r1, [r7, #0]
 80e07ee:	440b      	add	r3, r1
 80e07f0:	6879      	ldr	r1, [r7, #4]
 80e07f2:	440a      	add	r2, r1
 80e07f4:	7892      	ldrb	r2, [r2, #2]
 80e07f6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 64; ++i) {
 80e07f8:	7bfb      	ldrb	r3, [r7, #15]
 80e07fa:	3301      	adds	r3, #1
 80e07fc:	73fb      	strb	r3, [r7, #15]
 80e07fe:	7bfb      	ldrb	r3, [r7, #15]
 80e0800:	2b3f      	cmp	r3, #63	; 0x3f
 80e0802:	d9f1      	bls.n	80e07e8 <__b_data_copy_from_packet+0x10>
	}
}
 80e0804:	bf00      	nop
 80e0806:	bf00      	nop
 80e0808:	3714      	adds	r7, #20
 80e080a:	46bd      	mov	sp, r7
 80e080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0810:	4770      	bx	lr

080e0812 <__b_wait_for_ack>:

bootloader_error_t const __b_wait_for_ack(bootloader_order_t order){
 80e0812:	b580      	push	{r7, lr}
 80e0814:	b094      	sub	sp, #80	; 0x50
 80e0816:	af00      	add	r7, sp, #0
 80e0818:	4603      	mov	r3, r0
 80e081a:	71fb      	strb	r3, [r7, #7]
	if (__b_wait_until_fdcan_message_received() != BOOTLOADER_OK) {
 80e081c:	f000 f872 	bl	80e0904 <__b_wait_until_fdcan_message_received>
 80e0820:	4603      	mov	r3, r0
 80e0822:	2b00      	cmp	r3, #0
 80e0824:	d001      	beq.n	80e082a <__b_wait_for_ack+0x18>
		return BOOTLOADER_ERROR;
 80e0826:	2301      	movs	r3, #1
 80e0828:	e011      	b.n	80e084e <__b_wait_for_ack+0x3c>
	}

	fdcan_packet_t packet;
	fdcan_read(&packet);
 80e082a:	f107 030c 	add.w	r3, r7, #12
 80e082e:	4618      	mov	r0, r3
 80e0830:	f000 f8bc 	bl	80e09ac <fdcan_read>
	if (packet.identifier != order) {
 80e0834:	89ba      	ldrh	r2, [r7, #12]
 80e0836:	79fb      	ldrb	r3, [r7, #7]
 80e0838:	b29b      	uxth	r3, r3
 80e083a:	429a      	cmp	r2, r3
 80e083c:	d001      	beq.n	80e0842 <__b_wait_for_ack+0x30>
		return BOOTLOADER_ERROR;
 80e083e:	2301      	movs	r3, #1
 80e0840:	e005      	b.n	80e084e <__b_wait_for_ack+0x3c>
	}

	if (packet.data[0] != BOOTLOADER_ACK) {
 80e0842:	7bbb      	ldrb	r3, [r7, #14]
 80e0844:	2b79      	cmp	r3, #121	; 0x79
 80e0846:	d001      	beq.n	80e084c <__b_wait_for_ack+0x3a>
		return BOOTLOADER_ERROR;
 80e0848:	2301      	movs	r3, #1
 80e084a:	e000      	b.n	80e084e <__b_wait_for_ack+0x3c>
	}

	return BOOTLOADER_OK;
 80e084c:	2300      	movs	r3, #0
}
 80e084e:	4618      	mov	r0, r3
 80e0850:	3750      	adds	r7, #80	; 0x50
 80e0852:	46bd      	mov	sp, r7
 80e0854:	bd80      	pop	{r7, pc}

080e0856 <__b_send_ack>:

void const __b_send_ack(fdcan_packet_t* packet){
 80e0856:	b580      	push	{r7, lr}
 80e0858:	b082      	sub	sp, #8
 80e085a:	af00      	add	r7, sp, #0
 80e085c:	6078      	str	r0, [r7, #4]
	__b_clean_fdcan_packet_data(packet);
 80e085e:	6878      	ldr	r0, [r7, #4]
 80e0860:	f000 f81b 	bl	80e089a <__b_clean_fdcan_packet_data>
	packet->data[0] = BOOTLOADER_ACK;
 80e0864:	687b      	ldr	r3, [r7, #4]
 80e0866:	2279      	movs	r2, #121	; 0x79
 80e0868:	709a      	strb	r2, [r3, #2]
	fdcan_transmit(packet);
 80e086a:	6878      	ldr	r0, [r7, #4]
 80e086c:	f000 f864 	bl	80e0938 <fdcan_transmit>
}
 80e0870:	bf00      	nop
 80e0872:	3708      	adds	r7, #8
 80e0874:	46bd      	mov	sp, r7
 80e0876:	bd80      	pop	{r7, pc}

080e0878 <__b_send_nack>:

void const __b_send_nack(fdcan_packet_t* packet){
 80e0878:	b580      	push	{r7, lr}
 80e087a:	b082      	sub	sp, #8
 80e087c:	af00      	add	r7, sp, #0
 80e087e:	6078      	str	r0, [r7, #4]
	__b_clean_fdcan_packet_data(packet);
 80e0880:	6878      	ldr	r0, [r7, #4]
 80e0882:	f000 f80a 	bl	80e089a <__b_clean_fdcan_packet_data>
	packet->data[0] = BOOTLOADER_NACK;
 80e0886:	687b      	ldr	r3, [r7, #4]
 80e0888:	221f      	movs	r2, #31
 80e088a:	709a      	strb	r2, [r3, #2]
	fdcan_transmit(packet);
 80e088c:	6878      	ldr	r0, [r7, #4]
 80e088e:	f000 f853 	bl	80e0938 <fdcan_transmit>
}
 80e0892:	bf00      	nop
 80e0894:	3708      	adds	r7, #8
 80e0896:	46bd      	mov	sp, r7
 80e0898:	bd80      	pop	{r7, pc}

080e089a <__b_clean_fdcan_packet_data>:
	uint32_t address = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];

	return address;
}

void const __b_clean_fdcan_packet_data(fdcan_packet_t* packet){
 80e089a:	b480      	push	{r7}
 80e089c:	b085      	sub	sp, #20
 80e089e:	af00      	add	r7, sp, #0
 80e08a0:	6078      	str	r0, [r7, #4]
	uint16_t i;

	for (i = 0; i < 64; ++i) {
 80e08a2:	2300      	movs	r3, #0
 80e08a4:	81fb      	strh	r3, [r7, #14]
 80e08a6:	e007      	b.n	80e08b8 <__b_clean_fdcan_packet_data+0x1e>
		packet->data[i] = 0;
 80e08a8:	89fb      	ldrh	r3, [r7, #14]
 80e08aa:	687a      	ldr	r2, [r7, #4]
 80e08ac:	4413      	add	r3, r2
 80e08ae:	2200      	movs	r2, #0
 80e08b0:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 64; ++i) {
 80e08b2:	89fb      	ldrh	r3, [r7, #14]
 80e08b4:	3301      	adds	r3, #1
 80e08b6:	81fb      	strh	r3, [r7, #14]
 80e08b8:	89fb      	ldrh	r3, [r7, #14]
 80e08ba:	2b3f      	cmp	r3, #63	; 0x3f
 80e08bc:	d9f4      	bls.n	80e08a8 <__b_clean_fdcan_packet_data+0xe>
	}
}
 80e08be:	bf00      	nop
 80e08c0:	bf00      	nop
 80e08c2:	3714      	adds	r7, #20
 80e08c4:	46bd      	mov	sp, r7
 80e08c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e08ca:	4770      	bx	lr

080e08cc <__b_clean_fdcan_packet_all>:

void const __b_clean_fdcan_packet_all(fdcan_packet_t* packet){
 80e08cc:	b480      	push	{r7}
 80e08ce:	b085      	sub	sp, #20
 80e08d0:	af00      	add	r7, sp, #0
 80e08d2:	6078      	str	r0, [r7, #4]
	uint16_t i;

	for (i = 0; i < 64; ++i) {
 80e08d4:	2300      	movs	r3, #0
 80e08d6:	81fb      	strh	r3, [r7, #14]
 80e08d8:	e007      	b.n	80e08ea <__b_clean_fdcan_packet_all+0x1e>
		packet->data[i] = 0;
 80e08da:	89fb      	ldrh	r3, [r7, #14]
 80e08dc:	687a      	ldr	r2, [r7, #4]
 80e08de:	4413      	add	r3, r2
 80e08e0:	2200      	movs	r2, #0
 80e08e2:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 64; ++i) {
 80e08e4:	89fb      	ldrh	r3, [r7, #14]
 80e08e6:	3301      	adds	r3, #1
 80e08e8:	81fb      	strh	r3, [r7, #14]
 80e08ea:	89fb      	ldrh	r3, [r7, #14]
 80e08ec:	2b3f      	cmp	r3, #63	; 0x3f
 80e08ee:	d9f4      	bls.n	80e08da <__b_clean_fdcan_packet_all+0xe>
	}

	packet->identifier = 0;
 80e08f0:	687b      	ldr	r3, [r7, #4]
 80e08f2:	2200      	movs	r2, #0
 80e08f4:	801a      	strh	r2, [r3, #0]
}
 80e08f6:	bf00      	nop
 80e08f8:	3714      	adds	r7, #20
 80e08fa:	46bd      	mov	sp, r7
 80e08fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0900:	4770      	bx	lr
	...

080e0904 <__b_wait_until_fdcan_message_received>:


bootloader_error_t const __b_wait_until_fdcan_message_received(void){
 80e0904:	b580      	push	{r7, lr}
 80e0906:	af00      	add	r7, sp, #0
	htim23.Instance->CNT = 0;
 80e0908:	4b0a      	ldr	r3, [pc, #40]	; (80e0934 <__b_wait_until_fdcan_message_received+0x30>)
 80e090a:	681b      	ldr	r3, [r3, #0]
 80e090c:	2200      	movs	r2, #0
 80e090e:	625a      	str	r2, [r3, #36]	; 0x24
	while(!fdcan_test()){
 80e0910:	e008      	b.n	80e0924 <__b_wait_until_fdcan_message_received+0x20>
		if (htim23.Instance->CNT > BOOTLOADER_MAX_TIMEOUT * 10) {
 80e0912:	4b08      	ldr	r3, [pc, #32]	; (80e0934 <__b_wait_until_fdcan_message_received+0x30>)
 80e0914:	681b      	ldr	r3, [r3, #0]
 80e0916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e0918:	f644 6220 	movw	r2, #20000	; 0x4e20
 80e091c:	4293      	cmp	r3, r2
 80e091e:	d901      	bls.n	80e0924 <__b_wait_until_fdcan_message_received+0x20>
			return BOOTLOADER_ERROR;
 80e0920:	2301      	movs	r3, #1
 80e0922:	e005      	b.n	80e0930 <__b_wait_until_fdcan_message_received+0x2c>
	while(!fdcan_test()){
 80e0924:	f000 f862 	bl	80e09ec <fdcan_test>
 80e0928:	4603      	mov	r3, r0
 80e092a:	2b00      	cmp	r3, #0
 80e092c:	d0f1      	beq.n	80e0912 <__b_wait_until_fdcan_message_received+0xe>
		}
	}

	return BOOTLOADER_OK;
 80e092e:	2300      	movs	r3, #0
}
 80e0930:	4618      	mov	r0, r3
 80e0932:	bd80      	pop	{r7, pc}
 80e0934:	2400012c 	.word	0x2400012c

080e0938 <fdcan_transmit>:

extern FDCAN_HandleTypeDef hfdcan1;
FDCAN_TxHeaderTypeDef tx_header;
FDCAN_RxHeaderTypeDef rx_header_buffer;

fdcan_error_t const fdcan_transmit(fdcan_packet_t* packet){
 80e0938:	b580      	push	{r7, lr}
 80e093a:	b082      	sub	sp, #8
 80e093c:	af00      	add	r7, sp, #0
 80e093e:	6078      	str	r0, [r7, #4]

	tx_header.Identifier = (uint32_t)packet->identifier;
 80e0940:	687b      	ldr	r3, [r7, #4]
 80e0942:	881b      	ldrh	r3, [r3, #0]
 80e0944:	461a      	mov	r2, r3
 80e0946:	4b17      	ldr	r3, [pc, #92]	; (80e09a4 <fdcan_transmit+0x6c>)
 80e0948:	601a      	str	r2, [r3, #0]
	tx_header.IdType = FDCAN_STANDARD_ID;
 80e094a:	4b16      	ldr	r3, [pc, #88]	; (80e09a4 <fdcan_transmit+0x6c>)
 80e094c:	2200      	movs	r2, #0
 80e094e:	605a      	str	r2, [r3, #4]
	tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80e0950:	4b14      	ldr	r3, [pc, #80]	; (80e09a4 <fdcan_transmit+0x6c>)
 80e0952:	2200      	movs	r2, #0
 80e0954:	609a      	str	r2, [r3, #8]
	tx_header.DataLength = FDCAN_DLC_BYTES_64;
 80e0956:	4b13      	ldr	r3, [pc, #76]	; (80e09a4 <fdcan_transmit+0x6c>)
 80e0958:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80e095c:	60da      	str	r2, [r3, #12]
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80e095e:	4b11      	ldr	r3, [pc, #68]	; (80e09a4 <fdcan_transmit+0x6c>)
 80e0960:	2200      	movs	r2, #0
 80e0962:	611a      	str	r2, [r3, #16]
	tx_header.BitRateSwitch = FDCAN_BRS_ON;
 80e0964:	4b0f      	ldr	r3, [pc, #60]	; (80e09a4 <fdcan_transmit+0x6c>)
 80e0966:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80e096a:	615a      	str	r2, [r3, #20]
	tx_header.FDFormat = FDCAN_FD_CAN;
 80e096c:	4b0d      	ldr	r3, [pc, #52]	; (80e09a4 <fdcan_transmit+0x6c>)
 80e096e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80e0972:	619a      	str	r2, [r3, #24]
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80e0974:	4b0b      	ldr	r3, [pc, #44]	; (80e09a4 <fdcan_transmit+0x6c>)
 80e0976:	2200      	movs	r2, #0
 80e0978:	61da      	str	r2, [r3, #28]
	tx_header.MessageMarker = 0;
 80e097a:	4b0a      	ldr	r3, [pc, #40]	; (80e09a4 <fdcan_transmit+0x6c>)
 80e097c:	2200      	movs	r2, #0
 80e097e:	621a      	str	r2, [r3, #32]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, packet->data) != HAL_OK) {
 80e0980:	687b      	ldr	r3, [r7, #4]
 80e0982:	3302      	adds	r3, #2
 80e0984:	461a      	mov	r2, r3
 80e0986:	4907      	ldr	r1, [pc, #28]	; (80e09a4 <fdcan_transmit+0x6c>)
 80e0988:	4807      	ldr	r0, [pc, #28]	; (80e09a8 <fdcan_transmit+0x70>)
 80e098a:	f001 f8ae 	bl	80e1aea <HAL_FDCAN_AddMessageToTxFifoQ>
 80e098e:	4603      	mov	r3, r0
 80e0990:	2b00      	cmp	r3, #0
 80e0992:	d001      	beq.n	80e0998 <fdcan_transmit+0x60>
		return FDCAN_ERROR;
 80e0994:	23ff      	movs	r3, #255	; 0xff
 80e0996:	e000      	b.n	80e099a <fdcan_transmit+0x62>
	}

	return FDCAN_OK;
 80e0998:	2300      	movs	r3, #0
}
 80e099a:	4618      	mov	r0, r3
 80e099c:	3708      	adds	r7, #8
 80e099e:	46bd      	mov	sp, r7
 80e09a0:	bd80      	pop	{r7, pc}
 80e09a2:	bf00      	nop
 80e09a4:	2400002c 	.word	0x2400002c
 80e09a8:	2400008c 	.word	0x2400008c

080e09ac <fdcan_read>:

fdcan_error_t const fdcan_read(fdcan_packet_t* packet){
 80e09ac:	b580      	push	{r7, lr}
 80e09ae:	b082      	sub	sp, #8
 80e09b0:	af00      	add	r7, sp, #0
 80e09b2:	6078      	str	r0, [r7, #4]
	if(!fdcan_test()) {
 80e09b4:	f000 f81a 	bl	80e09ec <fdcan_test>
 80e09b8:	4603      	mov	r3, r0
 80e09ba:	2b00      	cmp	r3, #0
 80e09bc:	d101      	bne.n	80e09c2 <fdcan_read+0x16>
		return FDCAN_EMPTY;
 80e09be:	2301      	movs	r3, #1
 80e09c0:	e00c      	b.n	80e09dc <fdcan_read+0x30>
	}

	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header_buffer, packet->data);
 80e09c2:	687b      	ldr	r3, [r7, #4]
 80e09c4:	3302      	adds	r3, #2
 80e09c6:	4a07      	ldr	r2, [pc, #28]	; (80e09e4 <fdcan_read+0x38>)
 80e09c8:	2140      	movs	r1, #64	; 0x40
 80e09ca:	4807      	ldr	r0, [pc, #28]	; (80e09e8 <fdcan_read+0x3c>)
 80e09cc:	f001 f8e8 	bl	80e1ba0 <HAL_FDCAN_GetRxMessage>

	packet->identifier = rx_header_buffer.Identifier;
 80e09d0:	4b04      	ldr	r3, [pc, #16]	; (80e09e4 <fdcan_read+0x38>)
 80e09d2:	681b      	ldr	r3, [r3, #0]
 80e09d4:	b29a      	uxth	r2, r3
 80e09d6:	687b      	ldr	r3, [r7, #4]
 80e09d8:	801a      	strh	r2, [r3, #0]
	return FDCAN_OK;
 80e09da:	2300      	movs	r3, #0
}
 80e09dc:	4618      	mov	r0, r3
 80e09de:	3708      	adds	r7, #8
 80e09e0:	46bd      	mov	sp, r7
 80e09e2:	bd80      	pop	{r7, pc}
 80e09e4:	24000050 	.word	0x24000050
 80e09e8:	2400008c 	.word	0x2400008c

080e09ec <fdcan_test>:

int const fdcan_test(void){
 80e09ec:	b480      	push	{r7}
 80e09ee:	af00      	add	r7, sp, #0
	return !((hfdcan1.Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U);
 80e09f0:	4b07      	ldr	r3, [pc, #28]	; (80e0a10 <fdcan_test+0x24>)
 80e09f2:	681b      	ldr	r3, [r3, #0]
 80e09f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e09f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e09fc:	2b00      	cmp	r3, #0
 80e09fe:	bf14      	ite	ne
 80e0a00:	2301      	movne	r3, #1
 80e0a02:	2300      	moveq	r3, #0
 80e0a04:	b2db      	uxtb	r3, r3
}
 80e0a06:	4618      	mov	r0, r3
 80e0a08:	46bd      	mov	sp, r7
 80e0a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0a0e:	4770      	bx	lr
 80e0a10:	2400008c 	.word	0x2400008c

080e0a14 <flash_read>:
* Function prototypes
****************************************************************************************/
sector_t const __flash_get_sector(const uint32_t address);
uint32_t const flash_get_sector_starting_address(const sector_t sector);

flash_error const flash_read(uint32_t source_addr, uint32_t* result, uint32_t number_of_words){
 80e0a14:	b580      	push	{r7, lr}
 80e0a16:	b086      	sub	sp, #24
 80e0a18:	af00      	add	r7, sp, #0
 80e0a1a:	60f8      	str	r0, [r7, #12]
 80e0a1c:	60b9      	str	r1, [r7, #8]
 80e0a1e:	607a      	str	r2, [r7, #4]
	if (source_addr < FLASH_START_ADDRESS || source_addr > FLASH_CODE_END_ADDRESS) {
 80e0a20:	68fb      	ldr	r3, [r7, #12]
 80e0a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80e0a26:	d303      	bcc.n	80e0a30 <flash_read+0x1c>
 80e0a28:	68fb      	ldr	r3, [r7, #12]
 80e0a2a:	4a11      	ldr	r2, [pc, #68]	; (80e0a70 <flash_read+0x5c>)
 80e0a2c:	4293      	cmp	r3, r2
 80e0a2e:	d901      	bls.n	80e0a34 <flash_read+0x20>
		return FLASH_PROTECTED_MEM;
 80e0a30:	2301      	movs	r3, #1
 80e0a32:	e018      	b.n	80e0a66 <flash_read+0x52>
	}

	HAL_FLASH_Unlock();
 80e0a34:	f001 fd0e 	bl	80e2454 <HAL_FLASH_Unlock>
	uint32_t i;
	for (i = 0; i < number_of_words; i++) {
 80e0a38:	2300      	movs	r3, #0
 80e0a3a:	617b      	str	r3, [r7, #20]
 80e0a3c:	e00c      	b.n	80e0a58 <flash_read+0x44>
		*result = *(__IO uint32_t *)(source_addr);
 80e0a3e:	68fb      	ldr	r3, [r7, #12]
 80e0a40:	681a      	ldr	r2, [r3, #0]
 80e0a42:	68bb      	ldr	r3, [r7, #8]
 80e0a44:	601a      	str	r2, [r3, #0]
		source_addr += 4;
 80e0a46:	68fb      	ldr	r3, [r7, #12]
 80e0a48:	3304      	adds	r3, #4
 80e0a4a:	60fb      	str	r3, [r7, #12]
		result++;
 80e0a4c:	68bb      	ldr	r3, [r7, #8]
 80e0a4e:	3304      	adds	r3, #4
 80e0a50:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < number_of_words; i++) {
 80e0a52:	697b      	ldr	r3, [r7, #20]
 80e0a54:	3301      	adds	r3, #1
 80e0a56:	617b      	str	r3, [r7, #20]
 80e0a58:	697a      	ldr	r2, [r7, #20]
 80e0a5a:	687b      	ldr	r3, [r7, #4]
 80e0a5c:	429a      	cmp	r2, r3
 80e0a5e:	d3ee      	bcc.n	80e0a3e <flash_read+0x2a>
	}
	HAL_FLASH_Lock();
 80e0a60:	f001 fd1a 	bl	80e2498 <HAL_FLASH_Lock>

	return FLASH_OK;
 80e0a64:	2300      	movs	r3, #0
}
 80e0a66:	4618      	mov	r0, r3
 80e0a68:	3718      	adds	r7, #24
 80e0a6a:	46bd      	mov	sp, r7
 80e0a6c:	bd80      	pop	{r7, pc}
 80e0a6e:	bf00      	nop
 80e0a70:	080bffff 	.word	0x080bffff

080e0a74 <flash_write>:

flash_error const flash_write(uint32_t dest_addr, uint32_t* data, uint32_t number_of_words){
 80e0a74:	b580      	push	{r7, lr}
 80e0a76:	b08a      	sub	sp, #40	; 0x28
 80e0a78:	af00      	add	r7, sp, #0
 80e0a7a:	60f8      	str	r0, [r7, #12]
 80e0a7c:	60b9      	str	r1, [r7, #8]
 80e0a7e:	607a      	str	r2, [r7, #4]
	if (dest_addr < FLASH_SECTOR0_START_ADDRESS || dest_addr > FLASH_CODE_END_ADDRESS) {
 80e0a80:	68fb      	ldr	r3, [r7, #12]
 80e0a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80e0a86:	d303      	bcc.n	80e0a90 <flash_write+0x1c>
 80e0a88:	68fb      	ldr	r3, [r7, #12]
 80e0a8a:	4a27      	ldr	r2, [pc, #156]	; (80e0b28 <flash_write+0xb4>)
 80e0a8c:	4293      	cmp	r3, r2
 80e0a8e:	d901      	bls.n	80e0a94 <flash_write+0x20>
		return FLASH_PROTECTED_MEM;
 80e0a90:	2301      	movs	r3, #1
 80e0a92:	e045      	b.n	80e0b20 <flash_write+0xac>
	}

	uint32_t index = 0;
 80e0a94:	2300      	movs	r3, #0
 80e0a96:	627b      	str	r3, [r7, #36]	; 0x24

	sector_t start_sector =__flash_get_sector(dest_addr);;
 80e0a98:	68f8      	ldr	r0, [r7, #12]
 80e0a9a:	f000 f87b 	bl	80e0b94 <__flash_get_sector>
 80e0a9e:	61f8      	str	r0, [r7, #28]
	uint32_t start_sector_addr = flash_get_sector_starting_address(start_sector);
 80e0aa0:	69f8      	ldr	r0, [r7, #28]
 80e0aa2:	f000 f8e9 	bl	80e0c78 <flash_get_sector_starting_address>
 80e0aa6:	6238      	str	r0, [r7, #32]

	uint32_t end_address = dest_addr + ((number_of_words * FLASH_32BITS_WORLD) - FLASH_32BITS_WORLD);
 80e0aa8:	687a      	ldr	r2, [r7, #4]
 80e0aaa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80e0aae:	4413      	add	r3, r2
 80e0ab0:	009b      	lsls	r3, r3, #2
 80e0ab2:	68fa      	ldr	r2, [r7, #12]
 80e0ab4:	4413      	add	r3, r2
 80e0ab6:	61bb      	str	r3, [r7, #24]
	uint32_t end_sector = __flash_get_sector(end_address);
 80e0ab8:	69b8      	ldr	r0, [r7, #24]
 80e0aba:	f000 f86b 	bl	80e0b94 <__flash_get_sector>
 80e0abe:	6178      	str	r0, [r7, #20]

	if (flash_erase(start_sector, end_sector) != FLASH_OK) {
 80e0ac0:	6979      	ldr	r1, [r7, #20]
 80e0ac2:	69f8      	ldr	r0, [r7, #28]
 80e0ac4:	f000 f832 	bl	80e0b2c <flash_erase>
 80e0ac8:	4603      	mov	r3, r0
 80e0aca:	2b00      	cmp	r3, #0
 80e0acc:	d001      	beq.n	80e0ad2 <flash_write+0x5e>
		return FLASH_ERROR;
 80e0ace:	23ff      	movs	r3, #255	; 0xff
 80e0ad0:	e026      	b.n	80e0b20 <flash_write+0xac>
	}

	HAL_FLASH_Unlock();
 80e0ad2:	f001 fcbf 	bl	80e2454 <HAL_FLASH_Unlock>
	while(index < (uint32_t)SECTOR_SIZE_IN_32BITS_WORDS){
 80e0ad6:	e01c      	b.n	80e0b12 <flash_write+0x9e>
		if (start_sector_addr > FLASH_CODE_END_ADDRESS) {
 80e0ad8:	6a3b      	ldr	r3, [r7, #32]
 80e0ada:	4a13      	ldr	r2, [pc, #76]	; (80e0b28 <flash_write+0xb4>)
 80e0adc:	4293      	cmp	r3, r2
 80e0ade:	d901      	bls.n	80e0ae4 <flash_write+0x70>
			return FLASH_PROTECTED_MEM;
 80e0ae0:	2301      	movs	r3, #1
 80e0ae2:	e01d      	b.n	80e0b20 <flash_write+0xac>
		}

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, start_sector_addr, (uint32_t)&data[index]) == HAL_OK) {
 80e0ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e0ae6:	009b      	lsls	r3, r3, #2
 80e0ae8:	68ba      	ldr	r2, [r7, #8]
 80e0aea:	4413      	add	r3, r2
 80e0aec:	461a      	mov	r2, r3
 80e0aee:	6a39      	ldr	r1, [r7, #32]
 80e0af0:	2001      	movs	r0, #1
 80e0af2:	f001 fc41 	bl	80e2378 <HAL_FLASH_Program>
 80e0af6:	4603      	mov	r3, r0
 80e0af8:	2b00      	cmp	r3, #0
 80e0afa:	d106      	bne.n	80e0b0a <flash_write+0x96>
			start_sector_addr += FLASH_WORD_SIZE;
 80e0afc:	6a3b      	ldr	r3, [r7, #32]
 80e0afe:	3320      	adds	r3, #32
 80e0b00:	623b      	str	r3, [r7, #32]
			index += FLASH_WORD_SIZE / FLASH_32BITS_WORLD;
 80e0b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e0b04:	3308      	adds	r3, #8
 80e0b06:	627b      	str	r3, [r7, #36]	; 0x24
 80e0b08:	e003      	b.n	80e0b12 <flash_write+0x9e>
		}else{
			HAL_FLASH_Lock();
 80e0b0a:	f001 fcc5 	bl	80e2498 <HAL_FLASH_Lock>
			return FLASH_ERROR;;
 80e0b0e:	23ff      	movs	r3, #255	; 0xff
 80e0b10:	e006      	b.n	80e0b20 <flash_write+0xac>
	while(index < (uint32_t)SECTOR_SIZE_IN_32BITS_WORDS){
 80e0b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e0b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80e0b18:	d3de      	bcc.n	80e0ad8 <flash_write+0x64>
		}
	}
	HAL_FLASH_Lock();
 80e0b1a:	f001 fcbd 	bl	80e2498 <HAL_FLASH_Lock>

	return FLASH_OK;
 80e0b1e:	2300      	movs	r3, #0
}
 80e0b20:	4618      	mov	r0, r3
 80e0b22:	3728      	adds	r7, #40	; 0x28
 80e0b24:	46bd      	mov	sp, r7
 80e0b26:	bd80      	pop	{r7, pc}
 80e0b28:	080bffff 	.word	0x080bffff

080e0b2c <flash_erase>:

flash_error const flash_erase(const sector_t start_sector, const sector_t end_sector){
 80e0b2c:	b580      	push	{r7, lr}
 80e0b2e:	b084      	sub	sp, #16
 80e0b30:	af00      	add	r7, sp, #0
 80e0b32:	6078      	str	r0, [r7, #4]
 80e0b34:	6039      	str	r1, [r7, #0]
	if (start_sector < FLASH_SECTOR_0 || end_sector >= FLASH_PROTECTED_SECTOR1) {
 80e0b36:	683b      	ldr	r3, [r7, #0]
 80e0b38:	2b05      	cmp	r3, #5
 80e0b3a:	d901      	bls.n	80e0b40 <flash_erase+0x14>
		return FLASH_PROTECTED_MEM;
 80e0b3c:	2301      	movs	r3, #1
 80e0b3e:	e023      	b.n	80e0b88 <flash_erase+0x5c>
	}

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t sectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80e0b40:	4b13      	ldr	r3, [pc, #76]	; (80e0b90 <flash_erase+0x64>)
 80e0b42:	2200      	movs	r2, #0
 80e0b44:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80e0b46:	4b12      	ldr	r3, [pc, #72]	; (80e0b90 <flash_erase+0x64>)
 80e0b48:	2220      	movs	r2, #32
 80e0b4a:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = start_sector;
 80e0b4c:	4a10      	ldr	r2, [pc, #64]	; (80e0b90 <flash_erase+0x64>)
 80e0b4e:	687b      	ldr	r3, [r7, #4]
 80e0b50:	6093      	str	r3, [r2, #8]
	EraseInitStruct.Banks    	  = FLASH_BANK_1;
 80e0b52:	4b0f      	ldr	r3, [pc, #60]	; (80e0b90 <flash_erase+0x64>)
 80e0b54:	2201      	movs	r2, #1
 80e0b56:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbSectors     = (end_sector - start_sector) + 1;
 80e0b58:	683a      	ldr	r2, [r7, #0]
 80e0b5a:	687b      	ldr	r3, [r7, #4]
 80e0b5c:	1ad3      	subs	r3, r2, r3
 80e0b5e:	3301      	adds	r3, #1
 80e0b60:	4a0b      	ldr	r2, [pc, #44]	; (80e0b90 <flash_erase+0x64>)
 80e0b62:	60d3      	str	r3, [r2, #12]

	HAL_FLASH_Unlock();
 80e0b64:	f001 fc76 	bl	80e2454 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError) != HAL_OK)
 80e0b68:	f107 030c 	add.w	r3, r7, #12
 80e0b6c:	4619      	mov	r1, r3
 80e0b6e:	4808      	ldr	r0, [pc, #32]	; (80e0b90 <flash_erase+0x64>)
 80e0b70:	f001 fd00 	bl	80e2574 <HAL_FLASHEx_Erase>
 80e0b74:	4603      	mov	r3, r0
 80e0b76:	2b00      	cmp	r3, #0
 80e0b78:	d003      	beq.n	80e0b82 <flash_erase+0x56>
	{
		HAL_FLASH_Lock();
 80e0b7a:	f001 fc8d 	bl	80e2498 <HAL_FLASH_Lock>
		return FLASH_ERROR;
 80e0b7e:	23ff      	movs	r3, #255	; 0xff
 80e0b80:	e002      	b.n	80e0b88 <flash_erase+0x5c>
	}

	HAL_FLASH_Lock();
 80e0b82:	f001 fc89 	bl	80e2498 <HAL_FLASH_Lock>

	return FLASH_OK;
 80e0b86:	2300      	movs	r3, #0
}
 80e0b88:	4618      	mov	r0, r3
 80e0b8a:	3710      	adds	r7, #16
 80e0b8c:	46bd      	mov	sp, r7
 80e0b8e:	bd80      	pop	{r7, pc}
 80e0b90:	24000078 	.word	0x24000078

080e0b94 <__flash_get_sector>:


sector_t const __flash_get_sector(const uint32_t address){
 80e0b94:	b480      	push	{r7}
 80e0b96:	b085      	sub	sp, #20
 80e0b98:	af00      	add	r7, sp, #0
 80e0b9a:	6078      	str	r0, [r7, #4]
	sector_t sector = (sector_t)FLASH_SECTOR_0;
 80e0b9c:	2300      	movs	r3, #0
 80e0b9e:	60fb      	str	r3, [r7, #12]

	/* BANK 1 */
	if((address >= 0x08000000) && (address < 0x08020000))
 80e0ba0:	687b      	ldr	r3, [r7, #4]
 80e0ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80e0ba6:	d306      	bcc.n	80e0bb6 <__flash_get_sector+0x22>
 80e0ba8:	687b      	ldr	r3, [r7, #4]
 80e0baa:	4a2c      	ldr	r2, [pc, #176]	; (80e0c5c <__flash_get_sector+0xc8>)
 80e0bac:	4293      	cmp	r3, r2
 80e0bae:	d802      	bhi.n	80e0bb6 <__flash_get_sector+0x22>
	{
		sector = FLASH_SECTOR_0;
 80e0bb0:	2300      	movs	r3, #0
 80e0bb2:	60fb      	str	r3, [r7, #12]
 80e0bb4:	e04b      	b.n	80e0c4e <__flash_get_sector+0xba>
	}
	else if((address >= 0x08020000) && (address < 0x08040000))
 80e0bb6:	687b      	ldr	r3, [r7, #4]
 80e0bb8:	4a28      	ldr	r2, [pc, #160]	; (80e0c5c <__flash_get_sector+0xc8>)
 80e0bba:	4293      	cmp	r3, r2
 80e0bbc:	d906      	bls.n	80e0bcc <__flash_get_sector+0x38>
 80e0bbe:	687b      	ldr	r3, [r7, #4]
 80e0bc0:	4a27      	ldr	r2, [pc, #156]	; (80e0c60 <__flash_get_sector+0xcc>)
 80e0bc2:	4293      	cmp	r3, r2
 80e0bc4:	d802      	bhi.n	80e0bcc <__flash_get_sector+0x38>
	{
		sector = FLASH_SECTOR_1;
 80e0bc6:	2301      	movs	r3, #1
 80e0bc8:	60fb      	str	r3, [r7, #12]
 80e0bca:	e040      	b.n	80e0c4e <__flash_get_sector+0xba>
	}
	else if((address >= 0x08040000) && (address < 0x08060000))
 80e0bcc:	687b      	ldr	r3, [r7, #4]
 80e0bce:	4a24      	ldr	r2, [pc, #144]	; (80e0c60 <__flash_get_sector+0xcc>)
 80e0bd0:	4293      	cmp	r3, r2
 80e0bd2:	d906      	bls.n	80e0be2 <__flash_get_sector+0x4e>
 80e0bd4:	687b      	ldr	r3, [r7, #4]
 80e0bd6:	4a23      	ldr	r2, [pc, #140]	; (80e0c64 <__flash_get_sector+0xd0>)
 80e0bd8:	4293      	cmp	r3, r2
 80e0bda:	d802      	bhi.n	80e0be2 <__flash_get_sector+0x4e>
	{
		sector = FLASH_SECTOR_2;
 80e0bdc:	2302      	movs	r3, #2
 80e0bde:	60fb      	str	r3, [r7, #12]
 80e0be0:	e035      	b.n	80e0c4e <__flash_get_sector+0xba>
	}
	else if((address >= 0x08060000) && (address < 0x08080000))
 80e0be2:	687b      	ldr	r3, [r7, #4]
 80e0be4:	4a1f      	ldr	r2, [pc, #124]	; (80e0c64 <__flash_get_sector+0xd0>)
 80e0be6:	4293      	cmp	r3, r2
 80e0be8:	d906      	bls.n	80e0bf8 <__flash_get_sector+0x64>
 80e0bea:	687b      	ldr	r3, [r7, #4]
 80e0bec:	4a1e      	ldr	r2, [pc, #120]	; (80e0c68 <__flash_get_sector+0xd4>)
 80e0bee:	4293      	cmp	r3, r2
 80e0bf0:	d802      	bhi.n	80e0bf8 <__flash_get_sector+0x64>
	{
		sector = FLASH_SECTOR_3;
 80e0bf2:	2303      	movs	r3, #3
 80e0bf4:	60fb      	str	r3, [r7, #12]
 80e0bf6:	e02a      	b.n	80e0c4e <__flash_get_sector+0xba>
	}
	else if((address >= 0x08080000) && (address < 0x080A0000))
 80e0bf8:	687b      	ldr	r3, [r7, #4]
 80e0bfa:	4a1b      	ldr	r2, [pc, #108]	; (80e0c68 <__flash_get_sector+0xd4>)
 80e0bfc:	4293      	cmp	r3, r2
 80e0bfe:	d906      	bls.n	80e0c0e <__flash_get_sector+0x7a>
 80e0c00:	687b      	ldr	r3, [r7, #4]
 80e0c02:	4a1a      	ldr	r2, [pc, #104]	; (80e0c6c <__flash_get_sector+0xd8>)
 80e0c04:	4293      	cmp	r3, r2
 80e0c06:	d802      	bhi.n	80e0c0e <__flash_get_sector+0x7a>
	{
		sector = FLASH_SECTOR_4;
 80e0c08:	2304      	movs	r3, #4
 80e0c0a:	60fb      	str	r3, [r7, #12]
 80e0c0c:	e01f      	b.n	80e0c4e <__flash_get_sector+0xba>
	}
	else if((address >= 0x080A0000) && (address < 0x080C0000))
 80e0c0e:	687b      	ldr	r3, [r7, #4]
 80e0c10:	4a16      	ldr	r2, [pc, #88]	; (80e0c6c <__flash_get_sector+0xd8>)
 80e0c12:	4293      	cmp	r3, r2
 80e0c14:	d906      	bls.n	80e0c24 <__flash_get_sector+0x90>
 80e0c16:	687b      	ldr	r3, [r7, #4]
 80e0c18:	4a15      	ldr	r2, [pc, #84]	; (80e0c70 <__flash_get_sector+0xdc>)
 80e0c1a:	4293      	cmp	r3, r2
 80e0c1c:	d802      	bhi.n	80e0c24 <__flash_get_sector+0x90>
	{
		sector = FLASH_SECTOR_5;
 80e0c1e:	2305      	movs	r3, #5
 80e0c20:	60fb      	str	r3, [r7, #12]
 80e0c22:	e014      	b.n	80e0c4e <__flash_get_sector+0xba>
	}
	else if((address >= 0x080C0000) && (address < 0x080E0000))
 80e0c24:	687b      	ldr	r3, [r7, #4]
 80e0c26:	4a12      	ldr	r2, [pc, #72]	; (80e0c70 <__flash_get_sector+0xdc>)
 80e0c28:	4293      	cmp	r3, r2
 80e0c2a:	d906      	bls.n	80e0c3a <__flash_get_sector+0xa6>
 80e0c2c:	687b      	ldr	r3, [r7, #4]
 80e0c2e:	4a11      	ldr	r2, [pc, #68]	; (80e0c74 <__flash_get_sector+0xe0>)
 80e0c30:	4293      	cmp	r3, r2
 80e0c32:	d802      	bhi.n	80e0c3a <__flash_get_sector+0xa6>
	{
		sector = FLASH_SECTOR_6;
 80e0c34:	2306      	movs	r3, #6
 80e0c36:	60fb      	str	r3, [r7, #12]
 80e0c38:	e009      	b.n	80e0c4e <__flash_get_sector+0xba>
	}
	else if((address >= 0x080E0000) && (address < 0x08100000))
 80e0c3a:	687b      	ldr	r3, [r7, #4]
 80e0c3c:	4a0d      	ldr	r2, [pc, #52]	; (80e0c74 <__flash_get_sector+0xe0>)
 80e0c3e:	4293      	cmp	r3, r2
 80e0c40:	d905      	bls.n	80e0c4e <__flash_get_sector+0xba>
 80e0c42:	687b      	ldr	r3, [r7, #4]
 80e0c44:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80e0c48:	d201      	bcs.n	80e0c4e <__flash_get_sector+0xba>
	{
		sector = FLASH_SECTOR_7;
 80e0c4a:	2307      	movs	r3, #7
 80e0c4c:	60fb      	str	r3, [r7, #12]
	}

	return sector;
 80e0c4e:	68fb      	ldr	r3, [r7, #12]
}
 80e0c50:	4618      	mov	r0, r3
 80e0c52:	3714      	adds	r7, #20
 80e0c54:	46bd      	mov	sp, r7
 80e0c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0c5a:	4770      	bx	lr
 80e0c5c:	0801ffff 	.word	0x0801ffff
 80e0c60:	0803ffff 	.word	0x0803ffff
 80e0c64:	0805ffff 	.word	0x0805ffff
 80e0c68:	0807ffff 	.word	0x0807ffff
 80e0c6c:	0809ffff 	.word	0x0809ffff
 80e0c70:	080bffff 	.word	0x080bffff
 80e0c74:	080dffff 	.word	0x080dffff

080e0c78 <flash_get_sector_starting_address>:

uint32_t const flash_get_sector_starting_address(const sector_t sector){
 80e0c78:	b480      	push	{r7}
 80e0c7a:	b085      	sub	sp, #20
 80e0c7c:	af00      	add	r7, sp, #0
 80e0c7e:	6078      	str	r0, [r7, #4]
	uint32_t address;
	switch ((uint32_t)sector) {
 80e0c80:	687b      	ldr	r3, [r7, #4]
 80e0c82:	2b07      	cmp	r3, #7
 80e0c84:	d82b      	bhi.n	80e0cde <flash_get_sector_starting_address+0x66>
 80e0c86:	a201      	add	r2, pc, #4	; (adr r2, 80e0c8c <flash_get_sector_starting_address+0x14>)
 80e0c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e0c8c:	080e0cad 	.word	0x080e0cad
 80e0c90:	080e0cb5 	.word	0x080e0cb5
 80e0c94:	080e0cbb 	.word	0x080e0cbb
 80e0c98:	080e0cc1 	.word	0x080e0cc1
 80e0c9c:	080e0cc7 	.word	0x080e0cc7
 80e0ca0:	080e0ccd 	.word	0x080e0ccd
 80e0ca4:	080e0cd3 	.word	0x080e0cd3
 80e0ca8:	080e0cd9 	.word	0x080e0cd9
		case FLASH_SECTOR_0:
			address = FLASH_SECTOR0_START_ADDRESS;
 80e0cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80e0cb0:	60fb      	str	r3, [r7, #12]
			break;
 80e0cb2:	e018      	b.n	80e0ce6 <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_1:
			address = FLASH_SECTOR1_START_ADDRESS;
 80e0cb4:	4b0f      	ldr	r3, [pc, #60]	; (80e0cf4 <flash_get_sector_starting_address+0x7c>)
 80e0cb6:	60fb      	str	r3, [r7, #12]
			break;
 80e0cb8:	e015      	b.n	80e0ce6 <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_2:
			address = FLASH_SECTOR2_START_ADDRESS;
 80e0cba:	4b0f      	ldr	r3, [pc, #60]	; (80e0cf8 <flash_get_sector_starting_address+0x80>)
 80e0cbc:	60fb      	str	r3, [r7, #12]
			break;
 80e0cbe:	e012      	b.n	80e0ce6 <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_3:
			address = FLASH_SECTOR3_START_ADDRESS;
 80e0cc0:	4b0e      	ldr	r3, [pc, #56]	; (80e0cfc <flash_get_sector_starting_address+0x84>)
 80e0cc2:	60fb      	str	r3, [r7, #12]
			break;
 80e0cc4:	e00f      	b.n	80e0ce6 <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_4:
			address = FLASH_SECTOR4_START_ADDRESS;
 80e0cc6:	4b0e      	ldr	r3, [pc, #56]	; (80e0d00 <flash_get_sector_starting_address+0x88>)
 80e0cc8:	60fb      	str	r3, [r7, #12]
			break;
 80e0cca:	e00c      	b.n	80e0ce6 <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_5:
			address = FLASH_SECTOR5_START_ADDRESS;
 80e0ccc:	4b0d      	ldr	r3, [pc, #52]	; (80e0d04 <flash_get_sector_starting_address+0x8c>)
 80e0cce:	60fb      	str	r3, [r7, #12]
			break;
 80e0cd0:	e009      	b.n	80e0ce6 <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_6:
			address = FLASH_SECTOR6_START_ADDRESS;
 80e0cd2:	4b0d      	ldr	r3, [pc, #52]	; (80e0d08 <flash_get_sector_starting_address+0x90>)
 80e0cd4:	60fb      	str	r3, [r7, #12]
			break;
 80e0cd6:	e006      	b.n	80e0ce6 <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_7:
			address = FLASH_SECTOR7_START_ADDRESS;
 80e0cd8:	4b0c      	ldr	r3, [pc, #48]	; (80e0d0c <flash_get_sector_starting_address+0x94>)
 80e0cda:	60fb      	str	r3, [r7, #12]
			break;
 80e0cdc:	e003      	b.n	80e0ce6 <flash_get_sector_starting_address+0x6e>
		default:
			address = FLASH_SECTOR_ERROR;
 80e0cde:	f04f 33ff 	mov.w	r3, #4294967295
 80e0ce2:	60fb      	str	r3, [r7, #12]
			break;
 80e0ce4:	bf00      	nop
	}

	return address;
 80e0ce6:	68fb      	ldr	r3, [r7, #12]
}
 80e0ce8:	4618      	mov	r0, r3
 80e0cea:	3714      	adds	r7, #20
 80e0cec:	46bd      	mov	sp, r7
 80e0cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0cf2:	4770      	bx	lr
 80e0cf4:	08020000 	.word	0x08020000
 80e0cf8:	08040000 	.word	0x08040000
 80e0cfc:	08060000 	.word	0x08060000
 80e0d00:	08080000 	.word	0x08080000
 80e0d04:	080a0000 	.word	0x080a0000
 80e0d08:	080c0000 	.word	0x080c0000
 80e0d0c:	080e0000 	.word	0x080e0000

080e0d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80e0d10:	b580      	push	{r7, lr}
 80e0d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80e0d14:	f000 fb6a 	bl	80e13ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80e0d18:	f000 f818 	bl	80e0d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80e0d1c:	f000 f944 	bl	80e0fa8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80e0d20:	f000 f88c 	bl	80e0e3c <MX_FDCAN1_Init>
  MX_TIM23_Init();
 80e0d24:	f000 f8f0 	bl	80e0f08 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim23);
 80e0d28:	4806      	ldr	r0, [pc, #24]	; (80e0d44 <main+0x34>)
 80e0d2a:	f003 fea1 	bl	80e4a70 <HAL_TIM_Base_Start>
  HAL_FDCAN_Start(&hfdcan1);
 80e0d2e:	4806      	ldr	r0, [pc, #24]	; (80e0d48 <main+0x38>)
 80e0d30:	f000 feb0 	bl	80e1a94 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80e0d34:	2200      	movs	r2, #0
 80e0d36:	2101      	movs	r1, #1
 80e0d38:	4803      	ldr	r0, [pc, #12]	; (80e0d48 <main+0x38>)
 80e0d3a:	f001 f89f 	bl	80e1e7c <HAL_FDCAN_ActivateNotification>

  bootloader_start();
 80e0d3e:	f7ff fae5 	bl	80e030c <bootloader_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80e0d42:	e7fe      	b.n	80e0d42 <main+0x32>
 80e0d44:	2400012c 	.word	0x2400012c
 80e0d48:	2400008c 	.word	0x2400008c

080e0d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80e0d4c:	b580      	push	{r7, lr}
 80e0d4e:	b09c      	sub	sp, #112	; 0x70
 80e0d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80e0d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80e0d56:	224c      	movs	r2, #76	; 0x4c
 80e0d58:	2100      	movs	r1, #0
 80e0d5a:	4618      	mov	r0, r3
 80e0d5c:	f004 fa10 	bl	80e5180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80e0d60:	1d3b      	adds	r3, r7, #4
 80e0d62:	2220      	movs	r2, #32
 80e0d64:	2100      	movs	r1, #0
 80e0d66:	4618      	mov	r0, r3
 80e0d68:	f004 fa0a 	bl	80e5180 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80e0d6c:	2002      	movs	r0, #2
 80e0d6e:	f001 feb1 	bl	80e2ad4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80e0d72:	2300      	movs	r3, #0
 80e0d74:	603b      	str	r3, [r7, #0]
 80e0d76:	4b2f      	ldr	r3, [pc, #188]	; (80e0e34 <SystemClock_Config+0xe8>)
 80e0d78:	699b      	ldr	r3, [r3, #24]
 80e0d7a:	4a2e      	ldr	r2, [pc, #184]	; (80e0e34 <SystemClock_Config+0xe8>)
 80e0d7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80e0d80:	6193      	str	r3, [r2, #24]
 80e0d82:	4b2c      	ldr	r3, [pc, #176]	; (80e0e34 <SystemClock_Config+0xe8>)
 80e0d84:	699b      	ldr	r3, [r3, #24]
 80e0d86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80e0d8a:	603b      	str	r3, [r7, #0]
 80e0d8c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80e0d8e:	bf00      	nop
 80e0d90:	4b28      	ldr	r3, [pc, #160]	; (80e0e34 <SystemClock_Config+0xe8>)
 80e0d92:	699b      	ldr	r3, [r3, #24]
 80e0d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e0d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e0d9c:	d1f8      	bne.n	80e0d90 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80e0d9e:	4b26      	ldr	r3, [pc, #152]	; (80e0e38 <SystemClock_Config+0xec>)
 80e0da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e0da2:	f023 0303 	bic.w	r3, r3, #3
 80e0da6:	4a24      	ldr	r2, [pc, #144]	; (80e0e38 <SystemClock_Config+0xec>)
 80e0da8:	f043 0302 	orr.w	r3, r3, #2
 80e0dac:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80e0dae:	2301      	movs	r3, #1
 80e0db0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80e0db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80e0db6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80e0db8:	2302      	movs	r3, #2
 80e0dba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80e0dbc:	2302      	movs	r3, #2
 80e0dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80e0dc0:	2302      	movs	r3, #2
 80e0dc2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80e0dc4:	232c      	movs	r3, #44	; 0x2c
 80e0dc6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80e0dc8:	2301      	movs	r3, #1
 80e0dca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80e0dcc:	2304      	movs	r3, #4
 80e0dce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80e0dd0:	2302      	movs	r3, #2
 80e0dd2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80e0dd4:	230c      	movs	r3, #12
 80e0dd6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80e0dd8:	2300      	movs	r3, #0
 80e0dda:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80e0ddc:	2300      	movs	r3, #0
 80e0dde:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80e0de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80e0de4:	4618      	mov	r0, r3
 80e0de6:	f001 feaf 	bl	80e2b48 <HAL_RCC_OscConfig>
 80e0dea:	4603      	mov	r3, r0
 80e0dec:	2b00      	cmp	r3, #0
 80e0dee:	d001      	beq.n	80e0df4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80e0df0:	f000 f95c 	bl	80e10ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80e0df4:	233f      	movs	r3, #63	; 0x3f
 80e0df6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80e0df8:	2303      	movs	r3, #3
 80e0dfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80e0dfc:	2300      	movs	r3, #0
 80e0dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80e0e00:	2308      	movs	r3, #8
 80e0e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80e0e04:	2340      	movs	r3, #64	; 0x40
 80e0e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80e0e08:	2340      	movs	r3, #64	; 0x40
 80e0e0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80e0e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80e0e10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80e0e12:	2340      	movs	r3, #64	; 0x40
 80e0e14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80e0e16:	1d3b      	adds	r3, r7, #4
 80e0e18:	2103      	movs	r1, #3
 80e0e1a:	4618      	mov	r0, r3
 80e0e1c:	f002 fa42 	bl	80e32a4 <HAL_RCC_ClockConfig>
 80e0e20:	4603      	mov	r3, r0
 80e0e22:	2b00      	cmp	r3, #0
 80e0e24:	d001      	beq.n	80e0e2a <SystemClock_Config+0xde>
  {
    Error_Handler();
 80e0e26:	f000 f941 	bl	80e10ac <Error_Handler>
  }
}
 80e0e2a:	bf00      	nop
 80e0e2c:	3770      	adds	r7, #112	; 0x70
 80e0e2e:	46bd      	mov	sp, r7
 80e0e30:	bd80      	pop	{r7, pc}
 80e0e32:	bf00      	nop
 80e0e34:	58024800 	.word	0x58024800
 80e0e38:	58024400 	.word	0x58024400

080e0e3c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80e0e3c:	b580      	push	{r7, lr}
 80e0e3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80e0e40:	4b2f      	ldr	r3, [pc, #188]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e42:	4a30      	ldr	r2, [pc, #192]	; (80e0f04 <MX_FDCAN1_Init+0xc8>)
 80e0e44:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80e0e46:	4b2e      	ldr	r3, [pc, #184]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e48:	f44f 7240 	mov.w	r2, #768	; 0x300
 80e0e4c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80e0e4e:	4b2c      	ldr	r3, [pc, #176]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e50:	2200      	movs	r2, #0
 80e0e52:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80e0e54:	4b2a      	ldr	r3, [pc, #168]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e56:	2201      	movs	r2, #1
 80e0e58:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80e0e5a:	4b29      	ldr	r3, [pc, #164]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e5c:	2200      	movs	r2, #0
 80e0e5e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80e0e60:	4b27      	ldr	r3, [pc, #156]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e62:	2200      	movs	r2, #0
 80e0e64:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80e0e66:	4b26      	ldr	r3, [pc, #152]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e68:	2201      	movs	r2, #1
 80e0e6a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80e0e6c:	4b24      	ldr	r3, [pc, #144]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e6e:	2210      	movs	r2, #16
 80e0e70:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 59;
 80e0e72:	4b23      	ldr	r3, [pc, #140]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e74:	223b      	movs	r2, #59	; 0x3b
 80e0e76:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 80e0e78:	4b21      	ldr	r3, [pc, #132]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e7a:	2214      	movs	r2, #20
 80e0e7c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80e0e7e:	4b20      	ldr	r3, [pc, #128]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e80:	2201      	movs	r2, #1
 80e0e82:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80e0e84:	4b1e      	ldr	r3, [pc, #120]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e86:	2204      	movs	r2, #4
 80e0e88:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80e0e8a:	4b1d      	ldr	r3, [pc, #116]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e8c:	220e      	movs	r2, #14
 80e0e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80e0e90:	4b1b      	ldr	r3, [pc, #108]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e92:	2205      	movs	r2, #5
 80e0e94:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80e0e96:	4b1a      	ldr	r3, [pc, #104]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e98:	2200      	movs	r2, #0
 80e0e9a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80e0e9c:	4b18      	ldr	r3, [pc, #96]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0e9e:	2201      	movs	r2, #1
 80e0ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80e0ea2:	4b17      	ldr	r3, [pc, #92]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0ea4:	2200      	movs	r2, #0
 80e0ea6:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 16;
 80e0ea8:	4b15      	ldr	r3, [pc, #84]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0eaa:	2210      	movs	r2, #16
 80e0eac:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80e0eae:	4b14      	ldr	r3, [pc, #80]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0eb0:	2212      	movs	r2, #18
 80e0eb2:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80e0eb4:	4b12      	ldr	r3, [pc, #72]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0eb6:	2200      	movs	r2, #0
 80e0eb8:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 80e0eba:	4b11      	ldr	r3, [pc, #68]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0ebc:	2212      	movs	r2, #18
 80e0ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80e0ec0:	4b0f      	ldr	r3, [pc, #60]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0ec2:	2200      	movs	r2, #0
 80e0ec4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 80e0ec6:	4b0e      	ldr	r3, [pc, #56]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0ec8:	2212      	movs	r2, #18
 80e0eca:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80e0ecc:	4b0c      	ldr	r3, [pc, #48]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0ece:	2200      	movs	r2, #0
 80e0ed0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80e0ed2:	4b0b      	ldr	r3, [pc, #44]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0ed4:	2200      	movs	r2, #0
 80e0ed6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 80e0ed8:	4b09      	ldr	r3, [pc, #36]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0eda:	2210      	movs	r2, #16
 80e0edc:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80e0ede:	4b08      	ldr	r3, [pc, #32]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0ee0:	2200      	movs	r2, #0
 80e0ee2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80e0ee4:	4b06      	ldr	r3, [pc, #24]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0ee6:	2212      	movs	r2, #18
 80e0ee8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80e0eea:	4805      	ldr	r0, [pc, #20]	; (80e0f00 <MX_FDCAN1_Init+0xc4>)
 80e0eec:	f000 fbf4 	bl	80e16d8 <HAL_FDCAN_Init>
 80e0ef0:	4603      	mov	r3, r0
 80e0ef2:	2b00      	cmp	r3, #0
 80e0ef4:	d001      	beq.n	80e0efa <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80e0ef6:	f000 f8d9 	bl	80e10ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80e0efa:	bf00      	nop
 80e0efc:	bd80      	pop	{r7, pc}
 80e0efe:	bf00      	nop
 80e0f00:	2400008c 	.word	0x2400008c
 80e0f04:	4000a000 	.word	0x4000a000

080e0f08 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80e0f08:	b580      	push	{r7, lr}
 80e0f0a:	b088      	sub	sp, #32
 80e0f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80e0f0e:	f107 0310 	add.w	r3, r7, #16
 80e0f12:	2200      	movs	r2, #0
 80e0f14:	601a      	str	r2, [r3, #0]
 80e0f16:	605a      	str	r2, [r3, #4]
 80e0f18:	609a      	str	r2, [r3, #8]
 80e0f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80e0f1c:	1d3b      	adds	r3, r7, #4
 80e0f1e:	2200      	movs	r2, #0
 80e0f20:	601a      	str	r2, [r3, #0]
 80e0f22:	605a      	str	r2, [r3, #4]
 80e0f24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80e0f26:	4b1e      	ldr	r3, [pc, #120]	; (80e0fa0 <MX_TIM23_Init+0x98>)
 80e0f28:	4a1e      	ldr	r2, [pc, #120]	; (80e0fa4 <MX_TIM23_Init+0x9c>)
 80e0f2a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 55000;
 80e0f2c:	4b1c      	ldr	r3, [pc, #112]	; (80e0fa0 <MX_TIM23_Init+0x98>)
 80e0f2e:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 80e0f32:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80e0f34:	4b1a      	ldr	r3, [pc, #104]	; (80e0fa0 <MX_TIM23_Init+0x98>)
 80e0f36:	2200      	movs	r2, #0
 80e0f38:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80e0f3a:	4b19      	ldr	r3, [pc, #100]	; (80e0fa0 <MX_TIM23_Init+0x98>)
 80e0f3c:	f04f 32ff 	mov.w	r2, #4294967295
 80e0f40:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80e0f42:	4b17      	ldr	r3, [pc, #92]	; (80e0fa0 <MX_TIM23_Init+0x98>)
 80e0f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 80e0f48:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80e0f4a:	4b15      	ldr	r3, [pc, #84]	; (80e0fa0 <MX_TIM23_Init+0x98>)
 80e0f4c:	2200      	movs	r2, #0
 80e0f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80e0f50:	4813      	ldr	r0, [pc, #76]	; (80e0fa0 <MX_TIM23_Init+0x98>)
 80e0f52:	f003 fd35 	bl	80e49c0 <HAL_TIM_Base_Init>
 80e0f56:	4603      	mov	r3, r0
 80e0f58:	2b00      	cmp	r3, #0
 80e0f5a:	d001      	beq.n	80e0f60 <MX_TIM23_Init+0x58>
  {
    Error_Handler();
 80e0f5c:	f000 f8a6 	bl	80e10ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80e0f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80e0f64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80e0f66:	f107 0310 	add.w	r3, r7, #16
 80e0f6a:	4619      	mov	r1, r3
 80e0f6c:	480c      	ldr	r0, [pc, #48]	; (80e0fa0 <MX_TIM23_Init+0x98>)
 80e0f6e:	f003 fdfd 	bl	80e4b6c <HAL_TIM_ConfigClockSource>
 80e0f72:	4603      	mov	r3, r0
 80e0f74:	2b00      	cmp	r3, #0
 80e0f76:	d001      	beq.n	80e0f7c <MX_TIM23_Init+0x74>
  {
    Error_Handler();
 80e0f78:	f000 f898 	bl	80e10ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80e0f7c:	2300      	movs	r3, #0
 80e0f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80e0f80:	2300      	movs	r3, #0
 80e0f82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80e0f84:	1d3b      	adds	r3, r7, #4
 80e0f86:	4619      	mov	r1, r3
 80e0f88:	4805      	ldr	r0, [pc, #20]	; (80e0fa0 <MX_TIM23_Init+0x98>)
 80e0f8a:	f004 f82b 	bl	80e4fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80e0f8e:	4603      	mov	r3, r0
 80e0f90:	2b00      	cmp	r3, #0
 80e0f92:	d001      	beq.n	80e0f98 <MX_TIM23_Init+0x90>
  {
    Error_Handler();
 80e0f94:	f000 f88a 	bl	80e10ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80e0f98:	bf00      	nop
 80e0f9a:	3720      	adds	r7, #32
 80e0f9c:	46bd      	mov	sp, r7
 80e0f9e:	bd80      	pop	{r7, pc}
 80e0fa0:	2400012c 	.word	0x2400012c
 80e0fa4:	4000e000 	.word	0x4000e000

080e0fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80e0fa8:	b580      	push	{r7, lr}
 80e0faa:	b08c      	sub	sp, #48	; 0x30
 80e0fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e0fae:	f107 031c 	add.w	r3, r7, #28
 80e0fb2:	2200      	movs	r2, #0
 80e0fb4:	601a      	str	r2, [r3, #0]
 80e0fb6:	605a      	str	r2, [r3, #4]
 80e0fb8:	609a      	str	r2, [r3, #8]
 80e0fba:	60da      	str	r2, [r3, #12]
 80e0fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80e0fbe:	4b39      	ldr	r3, [pc, #228]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e0fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0fc4:	4a37      	ldr	r2, [pc, #220]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e0fc6:	f043 0304 	orr.w	r3, r3, #4
 80e0fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0fce:	4b35      	ldr	r3, [pc, #212]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e0fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0fd4:	f003 0304 	and.w	r3, r3, #4
 80e0fd8:	61bb      	str	r3, [r7, #24]
 80e0fda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80e0fdc:	4b31      	ldr	r3, [pc, #196]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e0fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0fe2:	4a30      	ldr	r2, [pc, #192]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e0fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80e0fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0fec:	4b2d      	ldr	r3, [pc, #180]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e0fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80e0ff6:	617b      	str	r3, [r7, #20]
 80e0ff8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80e0ffa:	4b2a      	ldr	r3, [pc, #168]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e0ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e1000:	4a28      	ldr	r2, [pc, #160]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e1002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80e1006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e100a:	4b26      	ldr	r3, [pc, #152]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e1010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80e1014:	613b      	str	r3, [r7, #16]
 80e1016:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80e1018:	4b22      	ldr	r3, [pc, #136]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e101e:	4a21      	ldr	r2, [pc, #132]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e1020:	f043 0301 	orr.w	r3, r3, #1
 80e1024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e1028:	4b1e      	ldr	r3, [pc, #120]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e102e:	f003 0301 	and.w	r3, r3, #1
 80e1032:	60fb      	str	r3, [r7, #12]
 80e1034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80e1036:	4b1b      	ldr	r3, [pc, #108]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e1038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e103c:	4a19      	ldr	r2, [pc, #100]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e103e:	f043 0308 	orr.w	r3, r3, #8
 80e1042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e1046:	4b17      	ldr	r3, [pc, #92]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e1048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e104c:	f003 0308 	and.w	r3, r3, #8
 80e1050:	60bb      	str	r3, [r7, #8]
 80e1052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80e1054:	4b13      	ldr	r3, [pc, #76]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e1056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e105a:	4a12      	ldr	r2, [pc, #72]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e105c:	f043 0302 	orr.w	r3, r3, #2
 80e1060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e1064:	4b0f      	ldr	r3, [pc, #60]	; (80e10a4 <MX_GPIO_Init+0xfc>)
 80e1066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e106a:	f003 0302 	and.w	r3, r3, #2
 80e106e:	607b      	str	r3, [r7, #4]
 80e1070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_SLEEP_Pin|LED_FLASH_Pin|LED_CAN_Pin|LED_FAULT_Pin
 80e1072:	2200      	movs	r2, #0
 80e1074:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80e1078:	480b      	ldr	r0, [pc, #44]	; (80e10a8 <MX_GPIO_Init+0x100>)
 80e107a:	f001 fcf7 	bl	80e2a6c <HAL_GPIO_WritePin>
                          |LED_OPERATIONAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_SLEEP_Pin LED_FLASH_Pin LED_CAN_Pin LED_FAULT_Pin
                           LED_OPERATIONAL_Pin */
  GPIO_InitStruct.Pin = LED_SLEEP_Pin|LED_FLASH_Pin|LED_CAN_Pin|LED_FAULT_Pin
 80e107e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80e1082:	61fb      	str	r3, [r7, #28]
                          |LED_OPERATIONAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80e1084:	2301      	movs	r3, #1
 80e1086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e1088:	2300      	movs	r3, #0
 80e108a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e108c:	2300      	movs	r3, #0
 80e108e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80e1090:	f107 031c 	add.w	r3, r7, #28
 80e1094:	4619      	mov	r1, r3
 80e1096:	4804      	ldr	r0, [pc, #16]	; (80e10a8 <MX_GPIO_Init+0x100>)
 80e1098:	f001 fb40 	bl	80e271c <HAL_GPIO_Init>

}
 80e109c:	bf00      	nop
 80e109e:	3730      	adds	r7, #48	; 0x30
 80e10a0:	46bd      	mov	sp, r7
 80e10a2:	bd80      	pop	{r7, pc}
 80e10a4:	58024400 	.word	0x58024400
 80e10a8:	58021800 	.word	0x58021800

080e10ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80e10ac:	b580      	push	{r7, lr}
 80e10ae:	b082      	sub	sp, #8
 80e10b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80e10b2:	b672      	cpsid	i
}
 80e10b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin);
 80e10b6:	2180      	movs	r1, #128	; 0x80
 80e10b8:	4807      	ldr	r0, [pc, #28]	; (80e10d8 <Error_Handler+0x2c>)
 80e10ba:	f001 fcf0 	bl	80e2a9e <HAL_GPIO_TogglePin>
	  uint32_t i;
	  for (i = 0; i < 10000000; ++i) {
 80e10be:	2300      	movs	r3, #0
 80e10c0:	607b      	str	r3, [r7, #4]
 80e10c2:	e003      	b.n	80e10cc <Error_Handler+0x20>
		  __NOP();
 80e10c4:	bf00      	nop
	  for (i = 0; i < 10000000; ++i) {
 80e10c6:	687b      	ldr	r3, [r7, #4]
 80e10c8:	3301      	adds	r3, #1
 80e10ca:	607b      	str	r3, [r7, #4]
 80e10cc:	687b      	ldr	r3, [r7, #4]
 80e10ce:	4a03      	ldr	r2, [pc, #12]	; (80e10dc <Error_Handler+0x30>)
 80e10d0:	4293      	cmp	r3, r2
 80e10d2:	d3f7      	bcc.n	80e10c4 <Error_Handler+0x18>
  {
 80e10d4:	e7ef      	b.n	80e10b6 <Error_Handler+0xa>
 80e10d6:	bf00      	nop
 80e10d8:	58021800 	.word	0x58021800
 80e10dc:	00989680 	.word	0x00989680

080e10e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80e10e0:	b480      	push	{r7}
 80e10e2:	b083      	sub	sp, #12
 80e10e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80e10e6:	4b0a      	ldr	r3, [pc, #40]	; (80e1110 <HAL_MspInit+0x30>)
 80e10e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e10ec:	4a08      	ldr	r2, [pc, #32]	; (80e1110 <HAL_MspInit+0x30>)
 80e10ee:	f043 0302 	orr.w	r3, r3, #2
 80e10f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80e10f6:	4b06      	ldr	r3, [pc, #24]	; (80e1110 <HAL_MspInit+0x30>)
 80e10f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e10fc:	f003 0302 	and.w	r3, r3, #2
 80e1100:	607b      	str	r3, [r7, #4]
 80e1102:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80e1104:	bf00      	nop
 80e1106:	370c      	adds	r7, #12
 80e1108:	46bd      	mov	sp, r7
 80e110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e110e:	4770      	bx	lr
 80e1110:	58024400 	.word	0x58024400

080e1114 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80e1114:	b580      	push	{r7, lr}
 80e1116:	b0b6      	sub	sp, #216	; 0xd8
 80e1118:	af00      	add	r7, sp, #0
 80e111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e111c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80e1120:	2200      	movs	r2, #0
 80e1122:	601a      	str	r2, [r3, #0]
 80e1124:	605a      	str	r2, [r3, #4]
 80e1126:	609a      	str	r2, [r3, #8]
 80e1128:	60da      	str	r2, [r3, #12]
 80e112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80e112c:	f107 0310 	add.w	r3, r7, #16
 80e1130:	22b4      	movs	r2, #180	; 0xb4
 80e1132:	2100      	movs	r1, #0
 80e1134:	4618      	mov	r0, r3
 80e1136:	f004 f823 	bl	80e5180 <memset>
  if(hfdcan->Instance==FDCAN1)
 80e113a:	687b      	ldr	r3, [r7, #4]
 80e113c:	681b      	ldr	r3, [r3, #0]
 80e113e:	4a2d      	ldr	r2, [pc, #180]	; (80e11f4 <HAL_FDCAN_MspInit+0xe0>)
 80e1140:	4293      	cmp	r3, r2
 80e1142:	d152      	bne.n	80e11ea <HAL_FDCAN_MspInit+0xd6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80e1144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80e1148:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80e114a:	2319      	movs	r3, #25
 80e114c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 80e114e:	23c8      	movs	r3, #200	; 0xc8
 80e1150:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80e1152:	2302      	movs	r3, #2
 80e1154:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80e1156:	230a      	movs	r3, #10
 80e1158:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80e115a:	2302      	movs	r3, #2
 80e115c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80e115e:	2300      	movs	r3, #0
 80e1160:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80e1162:	2320      	movs	r3, #32
 80e1164:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80e1166:	2300      	movs	r3, #0
 80e1168:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80e116a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80e116e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80e1170:	f107 0310 	add.w	r3, r7, #16
 80e1174:	4618      	mov	r0, r3
 80e1176:	f002 fbc5 	bl	80e3904 <HAL_RCCEx_PeriphCLKConfig>
 80e117a:	4603      	mov	r3, r0
 80e117c:	2b00      	cmp	r3, #0
 80e117e:	d001      	beq.n	80e1184 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 80e1180:	f7ff ff94 	bl	80e10ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80e1184:	4b1c      	ldr	r3, [pc, #112]	; (80e11f8 <HAL_FDCAN_MspInit+0xe4>)
 80e1186:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80e118a:	4a1b      	ldr	r2, [pc, #108]	; (80e11f8 <HAL_FDCAN_MspInit+0xe4>)
 80e118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e1190:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80e1194:	4b18      	ldr	r3, [pc, #96]	; (80e11f8 <HAL_FDCAN_MspInit+0xe4>)
 80e1196:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80e119a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e119e:	60fb      	str	r3, [r7, #12]
 80e11a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80e11a2:	4b15      	ldr	r3, [pc, #84]	; (80e11f8 <HAL_FDCAN_MspInit+0xe4>)
 80e11a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e11a8:	4a13      	ldr	r2, [pc, #76]	; (80e11f8 <HAL_FDCAN_MspInit+0xe4>)
 80e11aa:	f043 0308 	orr.w	r3, r3, #8
 80e11ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e11b2:	4b11      	ldr	r3, [pc, #68]	; (80e11f8 <HAL_FDCAN_MspInit+0xe4>)
 80e11b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e11b8:	f003 0308 	and.w	r3, r3, #8
 80e11bc:	60bb      	str	r3, [r7, #8]
 80e11be:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80e11c0:	2303      	movs	r3, #3
 80e11c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80e11c6:	2302      	movs	r3, #2
 80e11c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e11cc:	2300      	movs	r3, #0
 80e11ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e11d2:	2300      	movs	r3, #0
 80e11d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80e11d8:	2309      	movs	r3, #9
 80e11da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80e11de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80e11e2:	4619      	mov	r1, r3
 80e11e4:	4805      	ldr	r0, [pc, #20]	; (80e11fc <HAL_FDCAN_MspInit+0xe8>)
 80e11e6:	f001 fa99 	bl	80e271c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80e11ea:	bf00      	nop
 80e11ec:	37d8      	adds	r7, #216	; 0xd8
 80e11ee:	46bd      	mov	sp, r7
 80e11f0:	bd80      	pop	{r7, pc}
 80e11f2:	bf00      	nop
 80e11f4:	4000a000 	.word	0x4000a000
 80e11f8:	58024400 	.word	0x58024400
 80e11fc:	58020c00 	.word	0x58020c00

080e1200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80e1200:	b480      	push	{r7}
 80e1202:	b085      	sub	sp, #20
 80e1204:	af00      	add	r7, sp, #0
 80e1206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM23)
 80e1208:	687b      	ldr	r3, [r7, #4]
 80e120a:	681b      	ldr	r3, [r3, #0]
 80e120c:	4a0b      	ldr	r2, [pc, #44]	; (80e123c <HAL_TIM_Base_MspInit+0x3c>)
 80e120e:	4293      	cmp	r3, r2
 80e1210:	d10e      	bne.n	80e1230 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 80e1212:	4b0b      	ldr	r3, [pc, #44]	; (80e1240 <HAL_TIM_Base_MspInit+0x40>)
 80e1214:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80e1218:	4a09      	ldr	r2, [pc, #36]	; (80e1240 <HAL_TIM_Base_MspInit+0x40>)
 80e121a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80e121e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80e1222:	4b07      	ldr	r3, [pc, #28]	; (80e1240 <HAL_TIM_Base_MspInit+0x40>)
 80e1224:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80e1228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80e122c:	60fb      	str	r3, [r7, #12]
 80e122e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 80e1230:	bf00      	nop
 80e1232:	3714      	adds	r7, #20
 80e1234:	46bd      	mov	sp, r7
 80e1236:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e123a:	4770      	bx	lr
 80e123c:	4000e000 	.word	0x4000e000
 80e1240:	58024400 	.word	0x58024400

080e1244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80e1244:	b480      	push	{r7}
 80e1246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80e1248:	e7fe      	b.n	80e1248 <NMI_Handler+0x4>
	...

080e124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80e124c:	b580      	push	{r7, lr}
 80e124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin, GPIO_PIN_SET);
 80e1250:	2201      	movs	r2, #1
 80e1252:	2180      	movs	r1, #128	; 0x80
 80e1254:	4801      	ldr	r0, [pc, #4]	; (80e125c <HardFault_Handler+0x10>)
 80e1256:	f001 fc09 	bl	80e2a6c <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80e125a:	e7fe      	b.n	80e125a <HardFault_Handler+0xe>
 80e125c:	58021800 	.word	0x58021800

080e1260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80e1260:	b480      	push	{r7}
 80e1262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80e1264:	e7fe      	b.n	80e1264 <MemManage_Handler+0x4>

080e1266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80e1266:	b480      	push	{r7}
 80e1268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80e126a:	e7fe      	b.n	80e126a <BusFault_Handler+0x4>

080e126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80e126c:	b480      	push	{r7}
 80e126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80e1270:	e7fe      	b.n	80e1270 <UsageFault_Handler+0x4>

080e1272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80e1272:	b480      	push	{r7}
 80e1274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80e1276:	bf00      	nop
 80e1278:	46bd      	mov	sp, r7
 80e127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e127e:	4770      	bx	lr

080e1280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80e1280:	b480      	push	{r7}
 80e1282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80e1284:	bf00      	nop
 80e1286:	46bd      	mov	sp, r7
 80e1288:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e128c:	4770      	bx	lr

080e128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80e128e:	b480      	push	{r7}
 80e1290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80e1292:	bf00      	nop
 80e1294:	46bd      	mov	sp, r7
 80e1296:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e129a:	4770      	bx	lr

080e129c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80e129c:	b580      	push	{r7, lr}
 80e129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80e12a0:	f000 f916 	bl	80e14d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80e12a4:	bf00      	nop
 80e12a6:	bd80      	pop	{r7, pc}

080e12a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80e12a8:	b480      	push	{r7}
 80e12aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80e12ac:	4b32      	ldr	r3, [pc, #200]	; (80e1378 <SystemInit+0xd0>)
 80e12ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e12b2:	4a31      	ldr	r2, [pc, #196]	; (80e1378 <SystemInit+0xd0>)
 80e12b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80e12b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80e12bc:	4b2f      	ldr	r3, [pc, #188]	; (80e137c <SystemInit+0xd4>)
 80e12be:	681b      	ldr	r3, [r3, #0]
 80e12c0:	f003 030f 	and.w	r3, r3, #15
 80e12c4:	2b06      	cmp	r3, #6
 80e12c6:	d807      	bhi.n	80e12d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80e12c8:	4b2c      	ldr	r3, [pc, #176]	; (80e137c <SystemInit+0xd4>)
 80e12ca:	681b      	ldr	r3, [r3, #0]
 80e12cc:	f023 030f 	bic.w	r3, r3, #15
 80e12d0:	4a2a      	ldr	r2, [pc, #168]	; (80e137c <SystemInit+0xd4>)
 80e12d2:	f043 0307 	orr.w	r3, r3, #7
 80e12d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80e12d8:	4b29      	ldr	r3, [pc, #164]	; (80e1380 <SystemInit+0xd8>)
 80e12da:	681b      	ldr	r3, [r3, #0]
 80e12dc:	4a28      	ldr	r2, [pc, #160]	; (80e1380 <SystemInit+0xd8>)
 80e12de:	f043 0301 	orr.w	r3, r3, #1
 80e12e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80e12e4:	4b26      	ldr	r3, [pc, #152]	; (80e1380 <SystemInit+0xd8>)
 80e12e6:	2200      	movs	r2, #0
 80e12e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80e12ea:	4b25      	ldr	r3, [pc, #148]	; (80e1380 <SystemInit+0xd8>)
 80e12ec:	681a      	ldr	r2, [r3, #0]
 80e12ee:	4924      	ldr	r1, [pc, #144]	; (80e1380 <SystemInit+0xd8>)
 80e12f0:	4b24      	ldr	r3, [pc, #144]	; (80e1384 <SystemInit+0xdc>)
 80e12f2:	4013      	ands	r3, r2
 80e12f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80e12f6:	4b21      	ldr	r3, [pc, #132]	; (80e137c <SystemInit+0xd4>)
 80e12f8:	681b      	ldr	r3, [r3, #0]
 80e12fa:	f003 0308 	and.w	r3, r3, #8
 80e12fe:	2b00      	cmp	r3, #0
 80e1300:	d007      	beq.n	80e1312 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80e1302:	4b1e      	ldr	r3, [pc, #120]	; (80e137c <SystemInit+0xd4>)
 80e1304:	681b      	ldr	r3, [r3, #0]
 80e1306:	f023 030f 	bic.w	r3, r3, #15
 80e130a:	4a1c      	ldr	r2, [pc, #112]	; (80e137c <SystemInit+0xd4>)
 80e130c:	f043 0307 	orr.w	r3, r3, #7
 80e1310:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80e1312:	4b1b      	ldr	r3, [pc, #108]	; (80e1380 <SystemInit+0xd8>)
 80e1314:	2200      	movs	r2, #0
 80e1316:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80e1318:	4b19      	ldr	r3, [pc, #100]	; (80e1380 <SystemInit+0xd8>)
 80e131a:	2200      	movs	r2, #0
 80e131c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80e131e:	4b18      	ldr	r3, [pc, #96]	; (80e1380 <SystemInit+0xd8>)
 80e1320:	2200      	movs	r2, #0
 80e1322:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80e1324:	4b16      	ldr	r3, [pc, #88]	; (80e1380 <SystemInit+0xd8>)
 80e1326:	4a18      	ldr	r2, [pc, #96]	; (80e1388 <SystemInit+0xe0>)
 80e1328:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80e132a:	4b15      	ldr	r3, [pc, #84]	; (80e1380 <SystemInit+0xd8>)
 80e132c:	4a17      	ldr	r2, [pc, #92]	; (80e138c <SystemInit+0xe4>)
 80e132e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80e1330:	4b13      	ldr	r3, [pc, #76]	; (80e1380 <SystemInit+0xd8>)
 80e1332:	4a17      	ldr	r2, [pc, #92]	; (80e1390 <SystemInit+0xe8>)
 80e1334:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80e1336:	4b12      	ldr	r3, [pc, #72]	; (80e1380 <SystemInit+0xd8>)
 80e1338:	2200      	movs	r2, #0
 80e133a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80e133c:	4b10      	ldr	r3, [pc, #64]	; (80e1380 <SystemInit+0xd8>)
 80e133e:	4a14      	ldr	r2, [pc, #80]	; (80e1390 <SystemInit+0xe8>)
 80e1340:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80e1342:	4b0f      	ldr	r3, [pc, #60]	; (80e1380 <SystemInit+0xd8>)
 80e1344:	2200      	movs	r2, #0
 80e1346:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80e1348:	4b0d      	ldr	r3, [pc, #52]	; (80e1380 <SystemInit+0xd8>)
 80e134a:	4a11      	ldr	r2, [pc, #68]	; (80e1390 <SystemInit+0xe8>)
 80e134c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80e134e:	4b0c      	ldr	r3, [pc, #48]	; (80e1380 <SystemInit+0xd8>)
 80e1350:	2200      	movs	r2, #0
 80e1352:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80e1354:	4b0a      	ldr	r3, [pc, #40]	; (80e1380 <SystemInit+0xd8>)
 80e1356:	681b      	ldr	r3, [r3, #0]
 80e1358:	4a09      	ldr	r2, [pc, #36]	; (80e1380 <SystemInit+0xd8>)
 80e135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e135e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80e1360:	4b07      	ldr	r3, [pc, #28]	; (80e1380 <SystemInit+0xd8>)
 80e1362:	2200      	movs	r2, #0
 80e1364:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80e1366:	4b0b      	ldr	r3, [pc, #44]	; (80e1394 <SystemInit+0xec>)
 80e1368:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80e136c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80e136e:	bf00      	nop
 80e1370:	46bd      	mov	sp, r7
 80e1372:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1376:	4770      	bx	lr
 80e1378:	e000ed00 	.word	0xe000ed00
 80e137c:	52002000 	.word	0x52002000
 80e1380:	58024400 	.word	0x58024400
 80e1384:	eaf6ed7f 	.word	0xeaf6ed7f
 80e1388:	02020200 	.word	0x02020200
 80e138c:	01ff0000 	.word	0x01ff0000
 80e1390:	01010280 	.word	0x01010280
 80e1394:	52004000 	.word	0x52004000

080e1398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80e1398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80e13d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80e139c:	f7ff ff84 	bl	80e12a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80e13a0:	480c      	ldr	r0, [pc, #48]	; (80e13d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80e13a2:	490d      	ldr	r1, [pc, #52]	; (80e13d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80e13a4:	4a0d      	ldr	r2, [pc, #52]	; (80e13dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80e13a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80e13a8:	e002      	b.n	80e13b0 <LoopCopyDataInit>

080e13aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80e13aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80e13ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80e13ae:	3304      	adds	r3, #4

080e13b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80e13b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80e13b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80e13b4:	d3f9      	bcc.n	80e13aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80e13b6:	4a0a      	ldr	r2, [pc, #40]	; (80e13e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80e13b8:	4c0a      	ldr	r4, [pc, #40]	; (80e13e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80e13ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80e13bc:	e001      	b.n	80e13c2 <LoopFillZerobss>

080e13be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80e13be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80e13c0:	3204      	adds	r2, #4

080e13c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80e13c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80e13c4:	d3fb      	bcc.n	80e13be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80e13c6:	f003 fea9 	bl	80e511c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80e13ca:	f7ff fca1 	bl	80e0d10 <main>
  bx  lr
 80e13ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80e13d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80e13d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80e13d8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80e13dc:	080e521c 	.word	0x080e521c
  ldr r2, =_sbss
 80e13e0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80e13e4:	24000198 	.word	0x24000198

080e13e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80e13e8:	e7fe      	b.n	80e13e8 <ADC3_IRQHandler>
	...

080e13ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80e13ec:	b580      	push	{r7, lr}
 80e13ee:	b082      	sub	sp, #8
 80e13f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80e13f2:	2003      	movs	r0, #3
 80e13f4:	f000 f93e 	bl	80e1674 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80e13f8:	f002 f90a 	bl	80e3610 <HAL_RCC_GetSysClockFreq>
 80e13fc:	4602      	mov	r2, r0
 80e13fe:	4b15      	ldr	r3, [pc, #84]	; (80e1454 <HAL_Init+0x68>)
 80e1400:	699b      	ldr	r3, [r3, #24]
 80e1402:	0a1b      	lsrs	r3, r3, #8
 80e1404:	f003 030f 	and.w	r3, r3, #15
 80e1408:	4913      	ldr	r1, [pc, #76]	; (80e1458 <HAL_Init+0x6c>)
 80e140a:	5ccb      	ldrb	r3, [r1, r3]
 80e140c:	f003 031f 	and.w	r3, r3, #31
 80e1410:	fa22 f303 	lsr.w	r3, r2, r3
 80e1414:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80e1416:	4b0f      	ldr	r3, [pc, #60]	; (80e1454 <HAL_Init+0x68>)
 80e1418:	699b      	ldr	r3, [r3, #24]
 80e141a:	f003 030f 	and.w	r3, r3, #15
 80e141e:	4a0e      	ldr	r2, [pc, #56]	; (80e1458 <HAL_Init+0x6c>)
 80e1420:	5cd3      	ldrb	r3, [r2, r3]
 80e1422:	f003 031f 	and.w	r3, r3, #31
 80e1426:	687a      	ldr	r2, [r7, #4]
 80e1428:	fa22 f303 	lsr.w	r3, r2, r3
 80e142c:	4a0b      	ldr	r2, [pc, #44]	; (80e145c <HAL_Init+0x70>)
 80e142e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80e1430:	4a0b      	ldr	r2, [pc, #44]	; (80e1460 <HAL_Init+0x74>)
 80e1432:	687b      	ldr	r3, [r7, #4]
 80e1434:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80e1436:	2000      	movs	r0, #0
 80e1438:	f000 f814 	bl	80e1464 <HAL_InitTick>
 80e143c:	4603      	mov	r3, r0
 80e143e:	2b00      	cmp	r3, #0
 80e1440:	d001      	beq.n	80e1446 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80e1442:	2301      	movs	r3, #1
 80e1444:	e002      	b.n	80e144c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80e1446:	f7ff fe4b 	bl	80e10e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80e144a:	2300      	movs	r3, #0
}
 80e144c:	4618      	mov	r0, r3
 80e144e:	3708      	adds	r7, #8
 80e1450:	46bd      	mov	sp, r7
 80e1452:	bd80      	pop	{r7, pc}
 80e1454:	58024400 	.word	0x58024400
 80e1458:	080e51f4 	.word	0x080e51f4
 80e145c:	24000004 	.word	0x24000004
 80e1460:	24000000 	.word	0x24000000

080e1464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80e1464:	b580      	push	{r7, lr}
 80e1466:	b082      	sub	sp, #8
 80e1468:	af00      	add	r7, sp, #0
 80e146a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80e146c:	4b15      	ldr	r3, [pc, #84]	; (80e14c4 <HAL_InitTick+0x60>)
 80e146e:	781b      	ldrb	r3, [r3, #0]
 80e1470:	2b00      	cmp	r3, #0
 80e1472:	d101      	bne.n	80e1478 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80e1474:	2301      	movs	r3, #1
 80e1476:	e021      	b.n	80e14bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80e1478:	4b13      	ldr	r3, [pc, #76]	; (80e14c8 <HAL_InitTick+0x64>)
 80e147a:	681a      	ldr	r2, [r3, #0]
 80e147c:	4b11      	ldr	r3, [pc, #68]	; (80e14c4 <HAL_InitTick+0x60>)
 80e147e:	781b      	ldrb	r3, [r3, #0]
 80e1480:	4619      	mov	r1, r3
 80e1482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80e1486:	fbb3 f3f1 	udiv	r3, r3, r1
 80e148a:	fbb2 f3f3 	udiv	r3, r2, r3
 80e148e:	4618      	mov	r0, r3
 80e1490:	f000 f915 	bl	80e16be <HAL_SYSTICK_Config>
 80e1494:	4603      	mov	r3, r0
 80e1496:	2b00      	cmp	r3, #0
 80e1498:	d001      	beq.n	80e149e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80e149a:	2301      	movs	r3, #1
 80e149c:	e00e      	b.n	80e14bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80e149e:	687b      	ldr	r3, [r7, #4]
 80e14a0:	2b0f      	cmp	r3, #15
 80e14a2:	d80a      	bhi.n	80e14ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80e14a4:	2200      	movs	r2, #0
 80e14a6:	6879      	ldr	r1, [r7, #4]
 80e14a8:	f04f 30ff 	mov.w	r0, #4294967295
 80e14ac:	f000 f8ed 	bl	80e168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80e14b0:	4a06      	ldr	r2, [pc, #24]	; (80e14cc <HAL_InitTick+0x68>)
 80e14b2:	687b      	ldr	r3, [r7, #4]
 80e14b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80e14b6:	2300      	movs	r3, #0
 80e14b8:	e000      	b.n	80e14bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80e14ba:	2301      	movs	r3, #1
}
 80e14bc:	4618      	mov	r0, r3
 80e14be:	3708      	adds	r7, #8
 80e14c0:	46bd      	mov	sp, r7
 80e14c2:	bd80      	pop	{r7, pc}
 80e14c4:	2400000c 	.word	0x2400000c
 80e14c8:	24000000 	.word	0x24000000
 80e14cc:	24000008 	.word	0x24000008

080e14d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80e14d0:	b480      	push	{r7}
 80e14d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80e14d4:	4b06      	ldr	r3, [pc, #24]	; (80e14f0 <HAL_IncTick+0x20>)
 80e14d6:	781b      	ldrb	r3, [r3, #0]
 80e14d8:	461a      	mov	r2, r3
 80e14da:	4b06      	ldr	r3, [pc, #24]	; (80e14f4 <HAL_IncTick+0x24>)
 80e14dc:	681b      	ldr	r3, [r3, #0]
 80e14de:	4413      	add	r3, r2
 80e14e0:	4a04      	ldr	r2, [pc, #16]	; (80e14f4 <HAL_IncTick+0x24>)
 80e14e2:	6013      	str	r3, [r2, #0]
}
 80e14e4:	bf00      	nop
 80e14e6:	46bd      	mov	sp, r7
 80e14e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e14ec:	4770      	bx	lr
 80e14ee:	bf00      	nop
 80e14f0:	2400000c 	.word	0x2400000c
 80e14f4:	24000178 	.word	0x24000178

080e14f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80e14f8:	b480      	push	{r7}
 80e14fa:	af00      	add	r7, sp, #0
  return uwTick;
 80e14fc:	4b03      	ldr	r3, [pc, #12]	; (80e150c <HAL_GetTick+0x14>)
 80e14fe:	681b      	ldr	r3, [r3, #0]
}
 80e1500:	4618      	mov	r0, r3
 80e1502:	46bd      	mov	sp, r7
 80e1504:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1508:	4770      	bx	lr
 80e150a:	bf00      	nop
 80e150c:	24000178 	.word	0x24000178

080e1510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80e1510:	b480      	push	{r7}
 80e1512:	b085      	sub	sp, #20
 80e1514:	af00      	add	r7, sp, #0
 80e1516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80e1518:	687b      	ldr	r3, [r7, #4]
 80e151a:	f003 0307 	and.w	r3, r3, #7
 80e151e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80e1520:	4b0b      	ldr	r3, [pc, #44]	; (80e1550 <__NVIC_SetPriorityGrouping+0x40>)
 80e1522:	68db      	ldr	r3, [r3, #12]
 80e1524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80e1526:	68ba      	ldr	r2, [r7, #8]
 80e1528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80e152c:	4013      	ands	r3, r2
 80e152e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80e1530:	68fb      	ldr	r3, [r7, #12]
 80e1532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80e1534:	68bb      	ldr	r3, [r7, #8]
 80e1536:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80e1538:	4b06      	ldr	r3, [pc, #24]	; (80e1554 <__NVIC_SetPriorityGrouping+0x44>)
 80e153a:	4313      	orrs	r3, r2
 80e153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80e153e:	4a04      	ldr	r2, [pc, #16]	; (80e1550 <__NVIC_SetPriorityGrouping+0x40>)
 80e1540:	68bb      	ldr	r3, [r7, #8]
 80e1542:	60d3      	str	r3, [r2, #12]
}
 80e1544:	bf00      	nop
 80e1546:	3714      	adds	r7, #20
 80e1548:	46bd      	mov	sp, r7
 80e154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e154e:	4770      	bx	lr
 80e1550:	e000ed00 	.word	0xe000ed00
 80e1554:	05fa0000 	.word	0x05fa0000

080e1558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80e1558:	b480      	push	{r7}
 80e155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80e155c:	4b04      	ldr	r3, [pc, #16]	; (80e1570 <__NVIC_GetPriorityGrouping+0x18>)
 80e155e:	68db      	ldr	r3, [r3, #12]
 80e1560:	0a1b      	lsrs	r3, r3, #8
 80e1562:	f003 0307 	and.w	r3, r3, #7
}
 80e1566:	4618      	mov	r0, r3
 80e1568:	46bd      	mov	sp, r7
 80e156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e156e:	4770      	bx	lr
 80e1570:	e000ed00 	.word	0xe000ed00

080e1574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80e1574:	b480      	push	{r7}
 80e1576:	b083      	sub	sp, #12
 80e1578:	af00      	add	r7, sp, #0
 80e157a:	4603      	mov	r3, r0
 80e157c:	6039      	str	r1, [r7, #0]
 80e157e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80e1580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e1584:	2b00      	cmp	r3, #0
 80e1586:	db0a      	blt.n	80e159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80e1588:	683b      	ldr	r3, [r7, #0]
 80e158a:	b2da      	uxtb	r2, r3
 80e158c:	490c      	ldr	r1, [pc, #48]	; (80e15c0 <__NVIC_SetPriority+0x4c>)
 80e158e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e1592:	0112      	lsls	r2, r2, #4
 80e1594:	b2d2      	uxtb	r2, r2
 80e1596:	440b      	add	r3, r1
 80e1598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80e159c:	e00a      	b.n	80e15b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80e159e:	683b      	ldr	r3, [r7, #0]
 80e15a0:	b2da      	uxtb	r2, r3
 80e15a2:	4908      	ldr	r1, [pc, #32]	; (80e15c4 <__NVIC_SetPriority+0x50>)
 80e15a4:	88fb      	ldrh	r3, [r7, #6]
 80e15a6:	f003 030f 	and.w	r3, r3, #15
 80e15aa:	3b04      	subs	r3, #4
 80e15ac:	0112      	lsls	r2, r2, #4
 80e15ae:	b2d2      	uxtb	r2, r2
 80e15b0:	440b      	add	r3, r1
 80e15b2:	761a      	strb	r2, [r3, #24]
}
 80e15b4:	bf00      	nop
 80e15b6:	370c      	adds	r7, #12
 80e15b8:	46bd      	mov	sp, r7
 80e15ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e15be:	4770      	bx	lr
 80e15c0:	e000e100 	.word	0xe000e100
 80e15c4:	e000ed00 	.word	0xe000ed00

080e15c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80e15c8:	b480      	push	{r7}
 80e15ca:	b089      	sub	sp, #36	; 0x24
 80e15cc:	af00      	add	r7, sp, #0
 80e15ce:	60f8      	str	r0, [r7, #12]
 80e15d0:	60b9      	str	r1, [r7, #8]
 80e15d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80e15d4:	68fb      	ldr	r3, [r7, #12]
 80e15d6:	f003 0307 	and.w	r3, r3, #7
 80e15da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80e15dc:	69fb      	ldr	r3, [r7, #28]
 80e15de:	f1c3 0307 	rsb	r3, r3, #7
 80e15e2:	2b04      	cmp	r3, #4
 80e15e4:	bf28      	it	cs
 80e15e6:	2304      	movcs	r3, #4
 80e15e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80e15ea:	69fb      	ldr	r3, [r7, #28]
 80e15ec:	3304      	adds	r3, #4
 80e15ee:	2b06      	cmp	r3, #6
 80e15f0:	d902      	bls.n	80e15f8 <NVIC_EncodePriority+0x30>
 80e15f2:	69fb      	ldr	r3, [r7, #28]
 80e15f4:	3b03      	subs	r3, #3
 80e15f6:	e000      	b.n	80e15fa <NVIC_EncodePriority+0x32>
 80e15f8:	2300      	movs	r3, #0
 80e15fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80e15fc:	f04f 32ff 	mov.w	r2, #4294967295
 80e1600:	69bb      	ldr	r3, [r7, #24]
 80e1602:	fa02 f303 	lsl.w	r3, r2, r3
 80e1606:	43da      	mvns	r2, r3
 80e1608:	68bb      	ldr	r3, [r7, #8]
 80e160a:	401a      	ands	r2, r3
 80e160c:	697b      	ldr	r3, [r7, #20]
 80e160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80e1610:	f04f 31ff 	mov.w	r1, #4294967295
 80e1614:	697b      	ldr	r3, [r7, #20]
 80e1616:	fa01 f303 	lsl.w	r3, r1, r3
 80e161a:	43d9      	mvns	r1, r3
 80e161c:	687b      	ldr	r3, [r7, #4]
 80e161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80e1620:	4313      	orrs	r3, r2
         );
}
 80e1622:	4618      	mov	r0, r3
 80e1624:	3724      	adds	r7, #36	; 0x24
 80e1626:	46bd      	mov	sp, r7
 80e1628:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e162c:	4770      	bx	lr
	...

080e1630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80e1630:	b580      	push	{r7, lr}
 80e1632:	b082      	sub	sp, #8
 80e1634:	af00      	add	r7, sp, #0
 80e1636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80e1638:	687b      	ldr	r3, [r7, #4]
 80e163a:	3b01      	subs	r3, #1
 80e163c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80e1640:	d301      	bcc.n	80e1646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80e1642:	2301      	movs	r3, #1
 80e1644:	e00f      	b.n	80e1666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80e1646:	4a0a      	ldr	r2, [pc, #40]	; (80e1670 <SysTick_Config+0x40>)
 80e1648:	687b      	ldr	r3, [r7, #4]
 80e164a:	3b01      	subs	r3, #1
 80e164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80e164e:	210f      	movs	r1, #15
 80e1650:	f04f 30ff 	mov.w	r0, #4294967295
 80e1654:	f7ff ff8e 	bl	80e1574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80e1658:	4b05      	ldr	r3, [pc, #20]	; (80e1670 <SysTick_Config+0x40>)
 80e165a:	2200      	movs	r2, #0
 80e165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80e165e:	4b04      	ldr	r3, [pc, #16]	; (80e1670 <SysTick_Config+0x40>)
 80e1660:	2207      	movs	r2, #7
 80e1662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80e1664:	2300      	movs	r3, #0
}
 80e1666:	4618      	mov	r0, r3
 80e1668:	3708      	adds	r7, #8
 80e166a:	46bd      	mov	sp, r7
 80e166c:	bd80      	pop	{r7, pc}
 80e166e:	bf00      	nop
 80e1670:	e000e010 	.word	0xe000e010

080e1674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80e1674:	b580      	push	{r7, lr}
 80e1676:	b082      	sub	sp, #8
 80e1678:	af00      	add	r7, sp, #0
 80e167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80e167c:	6878      	ldr	r0, [r7, #4]
 80e167e:	f7ff ff47 	bl	80e1510 <__NVIC_SetPriorityGrouping>
}
 80e1682:	bf00      	nop
 80e1684:	3708      	adds	r7, #8
 80e1686:	46bd      	mov	sp, r7
 80e1688:	bd80      	pop	{r7, pc}

080e168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80e168a:	b580      	push	{r7, lr}
 80e168c:	b086      	sub	sp, #24
 80e168e:	af00      	add	r7, sp, #0
 80e1690:	4603      	mov	r3, r0
 80e1692:	60b9      	str	r1, [r7, #8]
 80e1694:	607a      	str	r2, [r7, #4]
 80e1696:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80e1698:	f7ff ff5e 	bl	80e1558 <__NVIC_GetPriorityGrouping>
 80e169c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80e169e:	687a      	ldr	r2, [r7, #4]
 80e16a0:	68b9      	ldr	r1, [r7, #8]
 80e16a2:	6978      	ldr	r0, [r7, #20]
 80e16a4:	f7ff ff90 	bl	80e15c8 <NVIC_EncodePriority>
 80e16a8:	4602      	mov	r2, r0
 80e16aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80e16ae:	4611      	mov	r1, r2
 80e16b0:	4618      	mov	r0, r3
 80e16b2:	f7ff ff5f 	bl	80e1574 <__NVIC_SetPriority>
}
 80e16b6:	bf00      	nop
 80e16b8:	3718      	adds	r7, #24
 80e16ba:	46bd      	mov	sp, r7
 80e16bc:	bd80      	pop	{r7, pc}

080e16be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80e16be:	b580      	push	{r7, lr}
 80e16c0:	b082      	sub	sp, #8
 80e16c2:	af00      	add	r7, sp, #0
 80e16c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80e16c6:	6878      	ldr	r0, [r7, #4]
 80e16c8:	f7ff ffb2 	bl	80e1630 <SysTick_Config>
 80e16cc:	4603      	mov	r3, r0
}
 80e16ce:	4618      	mov	r0, r3
 80e16d0:	3708      	adds	r7, #8
 80e16d2:	46bd      	mov	sp, r7
 80e16d4:	bd80      	pop	{r7, pc}
	...

080e16d8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80e16d8:	b580      	push	{r7, lr}
 80e16da:	b098      	sub	sp, #96	; 0x60
 80e16dc:	af00      	add	r7, sp, #0
 80e16de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80e16e0:	4a84      	ldr	r2, [pc, #528]	; (80e18f4 <HAL_FDCAN_Init+0x21c>)
 80e16e2:	f107 030c 	add.w	r3, r7, #12
 80e16e6:	4611      	mov	r1, r2
 80e16e8:	224c      	movs	r2, #76	; 0x4c
 80e16ea:	4618      	mov	r0, r3
 80e16ec:	f003 fd3a 	bl	80e5164 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80e16f0:	687b      	ldr	r3, [r7, #4]
 80e16f2:	2b00      	cmp	r3, #0
 80e16f4:	d101      	bne.n	80e16fa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80e16f6:	2301      	movs	r3, #1
 80e16f8:	e1c6      	b.n	80e1a88 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80e16fa:	687b      	ldr	r3, [r7, #4]
 80e16fc:	681b      	ldr	r3, [r3, #0]
 80e16fe:	4a7e      	ldr	r2, [pc, #504]	; (80e18f8 <HAL_FDCAN_Init+0x220>)
 80e1700:	4293      	cmp	r3, r2
 80e1702:	d106      	bne.n	80e1712 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80e1704:	687b      	ldr	r3, [r7, #4]
 80e1706:	681b      	ldr	r3, [r3, #0]
 80e1708:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80e170c:	461a      	mov	r2, r3
 80e170e:	687b      	ldr	r3, [r7, #4]
 80e1710:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80e1712:	687b      	ldr	r3, [r7, #4]
 80e1714:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1718:	b2db      	uxtb	r3, r3
 80e171a:	2b00      	cmp	r3, #0
 80e171c:	d106      	bne.n	80e172c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80e171e:	687b      	ldr	r3, [r7, #4]
 80e1720:	2200      	movs	r2, #0
 80e1722:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80e1726:	6878      	ldr	r0, [r7, #4]
 80e1728:	f7ff fcf4 	bl	80e1114 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80e172c:	687b      	ldr	r3, [r7, #4]
 80e172e:	681b      	ldr	r3, [r3, #0]
 80e1730:	699a      	ldr	r2, [r3, #24]
 80e1732:	687b      	ldr	r3, [r7, #4]
 80e1734:	681b      	ldr	r3, [r3, #0]
 80e1736:	f022 0210 	bic.w	r2, r2, #16
 80e173a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80e173c:	f7ff fedc 	bl	80e14f8 <HAL_GetTick>
 80e1740:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80e1742:	e014      	b.n	80e176e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80e1744:	f7ff fed8 	bl	80e14f8 <HAL_GetTick>
 80e1748:	4602      	mov	r2, r0
 80e174a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80e174c:	1ad3      	subs	r3, r2, r3
 80e174e:	2b0a      	cmp	r3, #10
 80e1750:	d90d      	bls.n	80e176e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80e1752:	687b      	ldr	r3, [r7, #4]
 80e1754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1758:	f043 0201 	orr.w	r2, r3, #1
 80e175c:	687b      	ldr	r3, [r7, #4]
 80e175e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e1762:	687b      	ldr	r3, [r7, #4]
 80e1764:	2203      	movs	r2, #3
 80e1766:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80e176a:	2301      	movs	r3, #1
 80e176c:	e18c      	b.n	80e1a88 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80e176e:	687b      	ldr	r3, [r7, #4]
 80e1770:	681b      	ldr	r3, [r3, #0]
 80e1772:	699b      	ldr	r3, [r3, #24]
 80e1774:	f003 0308 	and.w	r3, r3, #8
 80e1778:	2b08      	cmp	r3, #8
 80e177a:	d0e3      	beq.n	80e1744 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80e177c:	687b      	ldr	r3, [r7, #4]
 80e177e:	681b      	ldr	r3, [r3, #0]
 80e1780:	699a      	ldr	r2, [r3, #24]
 80e1782:	687b      	ldr	r3, [r7, #4]
 80e1784:	681b      	ldr	r3, [r3, #0]
 80e1786:	f042 0201 	orr.w	r2, r2, #1
 80e178a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80e178c:	f7ff feb4 	bl	80e14f8 <HAL_GetTick>
 80e1790:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80e1792:	e014      	b.n	80e17be <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80e1794:	f7ff feb0 	bl	80e14f8 <HAL_GetTick>
 80e1798:	4602      	mov	r2, r0
 80e179a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80e179c:	1ad3      	subs	r3, r2, r3
 80e179e:	2b0a      	cmp	r3, #10
 80e17a0:	d90d      	bls.n	80e17be <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80e17a2:	687b      	ldr	r3, [r7, #4]
 80e17a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e17a8:	f043 0201 	orr.w	r2, r3, #1
 80e17ac:	687b      	ldr	r3, [r7, #4]
 80e17ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e17b2:	687b      	ldr	r3, [r7, #4]
 80e17b4:	2203      	movs	r2, #3
 80e17b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80e17ba:	2301      	movs	r3, #1
 80e17bc:	e164      	b.n	80e1a88 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80e17be:	687b      	ldr	r3, [r7, #4]
 80e17c0:	681b      	ldr	r3, [r3, #0]
 80e17c2:	699b      	ldr	r3, [r3, #24]
 80e17c4:	f003 0301 	and.w	r3, r3, #1
 80e17c8:	2b00      	cmp	r3, #0
 80e17ca:	d0e3      	beq.n	80e1794 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80e17cc:	687b      	ldr	r3, [r7, #4]
 80e17ce:	681b      	ldr	r3, [r3, #0]
 80e17d0:	699a      	ldr	r2, [r3, #24]
 80e17d2:	687b      	ldr	r3, [r7, #4]
 80e17d4:	681b      	ldr	r3, [r3, #0]
 80e17d6:	f042 0202 	orr.w	r2, r2, #2
 80e17da:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80e17dc:	687b      	ldr	r3, [r7, #4]
 80e17de:	7c1b      	ldrb	r3, [r3, #16]
 80e17e0:	2b01      	cmp	r3, #1
 80e17e2:	d108      	bne.n	80e17f6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80e17e4:	687b      	ldr	r3, [r7, #4]
 80e17e6:	681b      	ldr	r3, [r3, #0]
 80e17e8:	699a      	ldr	r2, [r3, #24]
 80e17ea:	687b      	ldr	r3, [r7, #4]
 80e17ec:	681b      	ldr	r3, [r3, #0]
 80e17ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80e17f2:	619a      	str	r2, [r3, #24]
 80e17f4:	e007      	b.n	80e1806 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80e17f6:	687b      	ldr	r3, [r7, #4]
 80e17f8:	681b      	ldr	r3, [r3, #0]
 80e17fa:	699a      	ldr	r2, [r3, #24]
 80e17fc:	687b      	ldr	r3, [r7, #4]
 80e17fe:	681b      	ldr	r3, [r3, #0]
 80e1800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80e1804:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80e1806:	687b      	ldr	r3, [r7, #4]
 80e1808:	7c5b      	ldrb	r3, [r3, #17]
 80e180a:	2b01      	cmp	r3, #1
 80e180c:	d108      	bne.n	80e1820 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80e180e:	687b      	ldr	r3, [r7, #4]
 80e1810:	681b      	ldr	r3, [r3, #0]
 80e1812:	699a      	ldr	r2, [r3, #24]
 80e1814:	687b      	ldr	r3, [r7, #4]
 80e1816:	681b      	ldr	r3, [r3, #0]
 80e1818:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80e181c:	619a      	str	r2, [r3, #24]
 80e181e:	e007      	b.n	80e1830 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80e1820:	687b      	ldr	r3, [r7, #4]
 80e1822:	681b      	ldr	r3, [r3, #0]
 80e1824:	699a      	ldr	r2, [r3, #24]
 80e1826:	687b      	ldr	r3, [r7, #4]
 80e1828:	681b      	ldr	r3, [r3, #0]
 80e182a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80e182e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80e1830:	687b      	ldr	r3, [r7, #4]
 80e1832:	7c9b      	ldrb	r3, [r3, #18]
 80e1834:	2b01      	cmp	r3, #1
 80e1836:	d108      	bne.n	80e184a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80e1838:	687b      	ldr	r3, [r7, #4]
 80e183a:	681b      	ldr	r3, [r3, #0]
 80e183c:	699a      	ldr	r2, [r3, #24]
 80e183e:	687b      	ldr	r3, [r7, #4]
 80e1840:	681b      	ldr	r3, [r3, #0]
 80e1842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80e1846:	619a      	str	r2, [r3, #24]
 80e1848:	e007      	b.n	80e185a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80e184a:	687b      	ldr	r3, [r7, #4]
 80e184c:	681b      	ldr	r3, [r3, #0]
 80e184e:	699a      	ldr	r2, [r3, #24]
 80e1850:	687b      	ldr	r3, [r7, #4]
 80e1852:	681b      	ldr	r3, [r3, #0]
 80e1854:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80e1858:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80e185a:	687b      	ldr	r3, [r7, #4]
 80e185c:	681b      	ldr	r3, [r3, #0]
 80e185e:	699b      	ldr	r3, [r3, #24]
 80e1860:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80e1864:	687b      	ldr	r3, [r7, #4]
 80e1866:	689a      	ldr	r2, [r3, #8]
 80e1868:	687b      	ldr	r3, [r7, #4]
 80e186a:	681b      	ldr	r3, [r3, #0]
 80e186c:	430a      	orrs	r2, r1
 80e186e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80e1870:	687b      	ldr	r3, [r7, #4]
 80e1872:	681b      	ldr	r3, [r3, #0]
 80e1874:	699a      	ldr	r2, [r3, #24]
 80e1876:	687b      	ldr	r3, [r7, #4]
 80e1878:	681b      	ldr	r3, [r3, #0]
 80e187a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80e187e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80e1880:	687b      	ldr	r3, [r7, #4]
 80e1882:	681b      	ldr	r3, [r3, #0]
 80e1884:	691a      	ldr	r2, [r3, #16]
 80e1886:	687b      	ldr	r3, [r7, #4]
 80e1888:	681b      	ldr	r3, [r3, #0]
 80e188a:	f022 0210 	bic.w	r2, r2, #16
 80e188e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80e1890:	687b      	ldr	r3, [r7, #4]
 80e1892:	68db      	ldr	r3, [r3, #12]
 80e1894:	2b01      	cmp	r3, #1
 80e1896:	d108      	bne.n	80e18aa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80e1898:	687b      	ldr	r3, [r7, #4]
 80e189a:	681b      	ldr	r3, [r3, #0]
 80e189c:	699a      	ldr	r2, [r3, #24]
 80e189e:	687b      	ldr	r3, [r7, #4]
 80e18a0:	681b      	ldr	r3, [r3, #0]
 80e18a2:	f042 0204 	orr.w	r2, r2, #4
 80e18a6:	619a      	str	r2, [r3, #24]
 80e18a8:	e030      	b.n	80e190c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80e18aa:	687b      	ldr	r3, [r7, #4]
 80e18ac:	68db      	ldr	r3, [r3, #12]
 80e18ae:	2b00      	cmp	r3, #0
 80e18b0:	d02c      	beq.n	80e190c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80e18b2:	687b      	ldr	r3, [r7, #4]
 80e18b4:	68db      	ldr	r3, [r3, #12]
 80e18b6:	2b02      	cmp	r3, #2
 80e18b8:	d020      	beq.n	80e18fc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80e18ba:	687b      	ldr	r3, [r7, #4]
 80e18bc:	681b      	ldr	r3, [r3, #0]
 80e18be:	699a      	ldr	r2, [r3, #24]
 80e18c0:	687b      	ldr	r3, [r7, #4]
 80e18c2:	681b      	ldr	r3, [r3, #0]
 80e18c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80e18c8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80e18ca:	687b      	ldr	r3, [r7, #4]
 80e18cc:	681b      	ldr	r3, [r3, #0]
 80e18ce:	691a      	ldr	r2, [r3, #16]
 80e18d0:	687b      	ldr	r3, [r7, #4]
 80e18d2:	681b      	ldr	r3, [r3, #0]
 80e18d4:	f042 0210 	orr.w	r2, r2, #16
 80e18d8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80e18da:	687b      	ldr	r3, [r7, #4]
 80e18dc:	68db      	ldr	r3, [r3, #12]
 80e18de:	2b03      	cmp	r3, #3
 80e18e0:	d114      	bne.n	80e190c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80e18e2:	687b      	ldr	r3, [r7, #4]
 80e18e4:	681b      	ldr	r3, [r3, #0]
 80e18e6:	699a      	ldr	r2, [r3, #24]
 80e18e8:	687b      	ldr	r3, [r7, #4]
 80e18ea:	681b      	ldr	r3, [r3, #0]
 80e18ec:	f042 0220 	orr.w	r2, r2, #32
 80e18f0:	619a      	str	r2, [r3, #24]
 80e18f2:	e00b      	b.n	80e190c <HAL_FDCAN_Init+0x234>
 80e18f4:	080e51a8 	.word	0x080e51a8
 80e18f8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80e18fc:	687b      	ldr	r3, [r7, #4]
 80e18fe:	681b      	ldr	r3, [r3, #0]
 80e1900:	699a      	ldr	r2, [r3, #24]
 80e1902:	687b      	ldr	r3, [r7, #4]
 80e1904:	681b      	ldr	r3, [r3, #0]
 80e1906:	f042 0220 	orr.w	r2, r2, #32
 80e190a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e190c:	687b      	ldr	r3, [r7, #4]
 80e190e:	699b      	ldr	r3, [r3, #24]
 80e1910:	3b01      	subs	r3, #1
 80e1912:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80e1914:	687b      	ldr	r3, [r7, #4]
 80e1916:	69db      	ldr	r3, [r3, #28]
 80e1918:	3b01      	subs	r3, #1
 80e191a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e191c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80e191e:	687b      	ldr	r3, [r7, #4]
 80e1920:	6a1b      	ldr	r3, [r3, #32]
 80e1922:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80e1924:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80e1928:	687b      	ldr	r3, [r7, #4]
 80e192a:	695b      	ldr	r3, [r3, #20]
 80e192c:	3b01      	subs	r3, #1
 80e192e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e1930:	687b      	ldr	r3, [r7, #4]
 80e1932:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80e1934:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e1936:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80e1938:	687b      	ldr	r3, [r7, #4]
 80e193a:	689b      	ldr	r3, [r3, #8]
 80e193c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e1940:	d115      	bne.n	80e196e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e1942:	687b      	ldr	r3, [r7, #4]
 80e1944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e1946:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80e1948:	687b      	ldr	r3, [r7, #4]
 80e194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e194c:	3b01      	subs	r3, #1
 80e194e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e1950:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80e1952:	687b      	ldr	r3, [r7, #4]
 80e1954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e1956:	3b01      	subs	r3, #1
 80e1958:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80e195a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80e195e:	687b      	ldr	r3, [r7, #4]
 80e1960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e1962:	3b01      	subs	r3, #1
 80e1964:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e1966:	687b      	ldr	r3, [r7, #4]
 80e1968:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80e196a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e196c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80e196e:	687b      	ldr	r3, [r7, #4]
 80e1970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e1972:	2b00      	cmp	r3, #0
 80e1974:	d00a      	beq.n	80e198c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80e1976:	687b      	ldr	r3, [r7, #4]
 80e1978:	681b      	ldr	r3, [r3, #0]
 80e197a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80e197e:	687b      	ldr	r3, [r7, #4]
 80e1980:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80e1982:	687b      	ldr	r3, [r7, #4]
 80e1984:	681b      	ldr	r3, [r3, #0]
 80e1986:	430a      	orrs	r2, r1
 80e1988:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80e198c:	687b      	ldr	r3, [r7, #4]
 80e198e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e1990:	687b      	ldr	r3, [r7, #4]
 80e1992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e1994:	4413      	add	r3, r2
 80e1996:	2b00      	cmp	r3, #0
 80e1998:	d011      	beq.n	80e19be <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80e199a:	687b      	ldr	r3, [r7, #4]
 80e199c:	681b      	ldr	r3, [r3, #0]
 80e199e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80e19a2:	f023 0107 	bic.w	r1, r3, #7
 80e19a6:	687b      	ldr	r3, [r7, #4]
 80e19a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e19aa:	009b      	lsls	r3, r3, #2
 80e19ac:	3360      	adds	r3, #96	; 0x60
 80e19ae:	443b      	add	r3, r7
 80e19b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80e19b4:	687b      	ldr	r3, [r7, #4]
 80e19b6:	681b      	ldr	r3, [r3, #0]
 80e19b8:	430a      	orrs	r2, r1
 80e19ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80e19be:	687b      	ldr	r3, [r7, #4]
 80e19c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e19c2:	2b00      	cmp	r3, #0
 80e19c4:	d011      	beq.n	80e19ea <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80e19c6:	687b      	ldr	r3, [r7, #4]
 80e19c8:	681b      	ldr	r3, [r3, #0]
 80e19ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e19ce:	f023 0107 	bic.w	r1, r3, #7
 80e19d2:	687b      	ldr	r3, [r7, #4]
 80e19d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e19d6:	009b      	lsls	r3, r3, #2
 80e19d8:	3360      	adds	r3, #96	; 0x60
 80e19da:	443b      	add	r3, r7
 80e19dc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80e19e0:	687b      	ldr	r3, [r7, #4]
 80e19e2:	681b      	ldr	r3, [r3, #0]
 80e19e4:	430a      	orrs	r2, r1
 80e19e6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80e19ea:	687b      	ldr	r3, [r7, #4]
 80e19ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e19ee:	2b00      	cmp	r3, #0
 80e19f0:	d012      	beq.n	80e1a18 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80e19f2:	687b      	ldr	r3, [r7, #4]
 80e19f4:	681b      	ldr	r3, [r3, #0]
 80e19f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e19fa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80e19fe:	687b      	ldr	r3, [r7, #4]
 80e1a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e1a02:	009b      	lsls	r3, r3, #2
 80e1a04:	3360      	adds	r3, #96	; 0x60
 80e1a06:	443b      	add	r3, r7
 80e1a08:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80e1a0c:	011a      	lsls	r2, r3, #4
 80e1a0e:	687b      	ldr	r3, [r7, #4]
 80e1a10:	681b      	ldr	r3, [r3, #0]
 80e1a12:	430a      	orrs	r2, r1
 80e1a14:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80e1a18:	687b      	ldr	r3, [r7, #4]
 80e1a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e1a1c:	2b00      	cmp	r3, #0
 80e1a1e:	d012      	beq.n	80e1a46 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80e1a20:	687b      	ldr	r3, [r7, #4]
 80e1a22:	681b      	ldr	r3, [r3, #0]
 80e1a24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e1a28:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80e1a2c:	687b      	ldr	r3, [r7, #4]
 80e1a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e1a30:	009b      	lsls	r3, r3, #2
 80e1a32:	3360      	adds	r3, #96	; 0x60
 80e1a34:	443b      	add	r3, r7
 80e1a36:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80e1a3a:	021a      	lsls	r2, r3, #8
 80e1a3c:	687b      	ldr	r3, [r7, #4]
 80e1a3e:	681b      	ldr	r3, [r3, #0]
 80e1a40:	430a      	orrs	r2, r1
 80e1a42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80e1a46:	687b      	ldr	r3, [r7, #4]
 80e1a48:	681b      	ldr	r3, [r3, #0]
 80e1a4a:	4a11      	ldr	r2, [pc, #68]	; (80e1a90 <HAL_FDCAN_Init+0x3b8>)
 80e1a4c:	4293      	cmp	r3, r2
 80e1a4e:	d107      	bne.n	80e1a60 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80e1a50:	687b      	ldr	r3, [r7, #4]
 80e1a52:	685b      	ldr	r3, [r3, #4]
 80e1a54:	689a      	ldr	r2, [r3, #8]
 80e1a56:	687b      	ldr	r3, [r7, #4]
 80e1a58:	685b      	ldr	r3, [r3, #4]
 80e1a5a:	f022 0203 	bic.w	r2, r2, #3
 80e1a5e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80e1a60:	687b      	ldr	r3, [r7, #4]
 80e1a62:	2200      	movs	r2, #0
 80e1a64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80e1a68:	687b      	ldr	r3, [r7, #4]
 80e1a6a:	2200      	movs	r2, #0
 80e1a6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80e1a70:	687b      	ldr	r3, [r7, #4]
 80e1a72:	2201      	movs	r2, #1
 80e1a74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80e1a78:	6878      	ldr	r0, [r7, #4]
 80e1a7a:	f000 fa79 	bl	80e1f70 <FDCAN_CalcultateRamBlockAddresses>
 80e1a7e:	4603      	mov	r3, r0
 80e1a80:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80e1a84:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80e1a88:	4618      	mov	r0, r3
 80e1a8a:	3760      	adds	r7, #96	; 0x60
 80e1a8c:	46bd      	mov	sp, r7
 80e1a8e:	bd80      	pop	{r7, pc}
 80e1a90:	4000a000 	.word	0x4000a000

080e1a94 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80e1a94:	b480      	push	{r7}
 80e1a96:	b083      	sub	sp, #12
 80e1a98:	af00      	add	r7, sp, #0
 80e1a9a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80e1a9c:	687b      	ldr	r3, [r7, #4]
 80e1a9e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1aa2:	b2db      	uxtb	r3, r3
 80e1aa4:	2b01      	cmp	r3, #1
 80e1aa6:	d111      	bne.n	80e1acc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80e1aa8:	687b      	ldr	r3, [r7, #4]
 80e1aaa:	2202      	movs	r2, #2
 80e1aac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80e1ab0:	687b      	ldr	r3, [r7, #4]
 80e1ab2:	681b      	ldr	r3, [r3, #0]
 80e1ab4:	699a      	ldr	r2, [r3, #24]
 80e1ab6:	687b      	ldr	r3, [r7, #4]
 80e1ab8:	681b      	ldr	r3, [r3, #0]
 80e1aba:	f022 0201 	bic.w	r2, r2, #1
 80e1abe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80e1ac0:	687b      	ldr	r3, [r7, #4]
 80e1ac2:	2200      	movs	r2, #0
 80e1ac4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80e1ac8:	2300      	movs	r3, #0
 80e1aca:	e008      	b.n	80e1ade <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80e1acc:	687b      	ldr	r3, [r7, #4]
 80e1ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1ad2:	f043 0204 	orr.w	r2, r3, #4
 80e1ad6:	687b      	ldr	r3, [r7, #4]
 80e1ad8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1adc:	2301      	movs	r3, #1
  }
}
 80e1ade:	4618      	mov	r0, r3
 80e1ae0:	370c      	adds	r7, #12
 80e1ae2:	46bd      	mov	sp, r7
 80e1ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1ae8:	4770      	bx	lr

080e1aea <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80e1aea:	b580      	push	{r7, lr}
 80e1aec:	b086      	sub	sp, #24
 80e1aee:	af00      	add	r7, sp, #0
 80e1af0:	60f8      	str	r0, [r7, #12]
 80e1af2:	60b9      	str	r1, [r7, #8]
 80e1af4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80e1af6:	68fb      	ldr	r3, [r7, #12]
 80e1af8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1afc:	b2db      	uxtb	r3, r3
 80e1afe:	2b02      	cmp	r3, #2
 80e1b00:	d141      	bne.n	80e1b86 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80e1b02:	68fb      	ldr	r3, [r7, #12]
 80e1b04:	681b      	ldr	r3, [r3, #0]
 80e1b06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e1b0a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80e1b0e:	2b00      	cmp	r3, #0
 80e1b10:	d109      	bne.n	80e1b26 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e1b12:	68fb      	ldr	r3, [r7, #12]
 80e1b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1b18:	f043 0220 	orr.w	r2, r3, #32
 80e1b1c:	68fb      	ldr	r3, [r7, #12]
 80e1b1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80e1b22:	2301      	movs	r3, #1
 80e1b24:	e038      	b.n	80e1b98 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80e1b26:	68fb      	ldr	r3, [r7, #12]
 80e1b28:	681b      	ldr	r3, [r3, #0]
 80e1b2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80e1b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e1b32:	2b00      	cmp	r3, #0
 80e1b34:	d009      	beq.n	80e1b4a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80e1b36:	68fb      	ldr	r3, [r7, #12]
 80e1b38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1b3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80e1b40:	68fb      	ldr	r3, [r7, #12]
 80e1b42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80e1b46:	2301      	movs	r3, #1
 80e1b48:	e026      	b.n	80e1b98 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80e1b4a:	68fb      	ldr	r3, [r7, #12]
 80e1b4c:	681b      	ldr	r3, [r3, #0]
 80e1b4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80e1b52:	0c1b      	lsrs	r3, r3, #16
 80e1b54:	f003 031f 	and.w	r3, r3, #31
 80e1b58:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80e1b5a:	697b      	ldr	r3, [r7, #20]
 80e1b5c:	687a      	ldr	r2, [r7, #4]
 80e1b5e:	68b9      	ldr	r1, [r7, #8]
 80e1b60:	68f8      	ldr	r0, [r7, #12]
 80e1b62:	f000 fb8b 	bl	80e227c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80e1b66:	68fb      	ldr	r3, [r7, #12]
 80e1b68:	681b      	ldr	r3, [r3, #0]
 80e1b6a:	2101      	movs	r1, #1
 80e1b6c:	697a      	ldr	r2, [r7, #20]
 80e1b6e:	fa01 f202 	lsl.w	r2, r1, r2
 80e1b72:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80e1b76:	2201      	movs	r2, #1
 80e1b78:	697b      	ldr	r3, [r7, #20]
 80e1b7a:	409a      	lsls	r2, r3
 80e1b7c:	68fb      	ldr	r3, [r7, #12]
 80e1b7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80e1b82:	2300      	movs	r3, #0
 80e1b84:	e008      	b.n	80e1b98 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80e1b86:	68fb      	ldr	r3, [r7, #12]
 80e1b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1b8c:	f043 0208 	orr.w	r2, r3, #8
 80e1b90:	68fb      	ldr	r3, [r7, #12]
 80e1b92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1b96:	2301      	movs	r3, #1
  }
}
 80e1b98:	4618      	mov	r0, r3
 80e1b9a:	3718      	adds	r7, #24
 80e1b9c:	46bd      	mov	sp, r7
 80e1b9e:	bd80      	pop	{r7, pc}

080e1ba0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80e1ba0:	b480      	push	{r7}
 80e1ba2:	b08b      	sub	sp, #44	; 0x2c
 80e1ba4:	af00      	add	r7, sp, #0
 80e1ba6:	60f8      	str	r0, [r7, #12]
 80e1ba8:	60b9      	str	r1, [r7, #8]
 80e1baa:	607a      	str	r2, [r7, #4]
 80e1bac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80e1bae:	2300      	movs	r3, #0
 80e1bb0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80e1bb2:	68fb      	ldr	r3, [r7, #12]
 80e1bb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1bb8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80e1bba:	7efb      	ldrb	r3, [r7, #27]
 80e1bbc:	2b02      	cmp	r3, #2
 80e1bbe:	f040 814b 	bne.w	80e1e58 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80e1bc2:	68bb      	ldr	r3, [r7, #8]
 80e1bc4:	2b40      	cmp	r3, #64	; 0x40
 80e1bc6:	d14d      	bne.n	80e1c64 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80e1bc8:	68fb      	ldr	r3, [r7, #12]
 80e1bca:	681b      	ldr	r3, [r3, #0]
 80e1bcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e1bd0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e1bd4:	2b00      	cmp	r3, #0
 80e1bd6:	d109      	bne.n	80e1bec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e1bd8:	68fb      	ldr	r3, [r7, #12]
 80e1bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1bde:	f043 0220 	orr.w	r2, r3, #32
 80e1be2:	68fb      	ldr	r3, [r7, #12]
 80e1be4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e1be8:	2301      	movs	r3, #1
 80e1bea:	e13e      	b.n	80e1e6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80e1bec:	68fb      	ldr	r3, [r7, #12]
 80e1bee:	681b      	ldr	r3, [r3, #0]
 80e1bf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e1bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e1bf8:	2b00      	cmp	r3, #0
 80e1bfa:	d109      	bne.n	80e1c10 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80e1bfc:	68fb      	ldr	r3, [r7, #12]
 80e1bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1c02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80e1c06:	68fb      	ldr	r3, [r7, #12]
 80e1c08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e1c0c:	2301      	movs	r3, #1
 80e1c0e:	e12c      	b.n	80e1e6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80e1c10:	68fb      	ldr	r3, [r7, #12]
 80e1c12:	681b      	ldr	r3, [r3, #0]
 80e1c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e1c18:	0e1b      	lsrs	r3, r3, #24
 80e1c1a:	f003 0301 	and.w	r3, r3, #1
 80e1c1e:	2b01      	cmp	r3, #1
 80e1c20:	d10b      	bne.n	80e1c3a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80e1c22:	68fb      	ldr	r3, [r7, #12]
 80e1c24:	681b      	ldr	r3, [r3, #0]
 80e1c26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e1c2a:	0fdb      	lsrs	r3, r3, #31
 80e1c2c:	f003 0301 	and.w	r3, r3, #1
 80e1c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80e1c34:	d101      	bne.n	80e1c3a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80e1c36:	2301      	movs	r3, #1
 80e1c38:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80e1c3a:	68fb      	ldr	r3, [r7, #12]
 80e1c3c:	681b      	ldr	r3, [r3, #0]
 80e1c3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e1c42:	0a1b      	lsrs	r3, r3, #8
 80e1c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e1c48:	69fa      	ldr	r2, [r7, #28]
 80e1c4a:	4413      	add	r3, r2
 80e1c4c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80e1c4e:	68fb      	ldr	r3, [r7, #12]
 80e1c50:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80e1c52:	68fb      	ldr	r3, [r7, #12]
 80e1c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e1c56:	69f9      	ldr	r1, [r7, #28]
 80e1c58:	fb01 f303 	mul.w	r3, r1, r3
 80e1c5c:	009b      	lsls	r3, r3, #2
 80e1c5e:	4413      	add	r3, r2
 80e1c60:	627b      	str	r3, [r7, #36]	; 0x24
 80e1c62:	e069      	b.n	80e1d38 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80e1c64:	68bb      	ldr	r3, [r7, #8]
 80e1c66:	2b41      	cmp	r3, #65	; 0x41
 80e1c68:	d14d      	bne.n	80e1d06 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80e1c6a:	68fb      	ldr	r3, [r7, #12]
 80e1c6c:	681b      	ldr	r3, [r3, #0]
 80e1c6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e1c72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e1c76:	2b00      	cmp	r3, #0
 80e1c78:	d109      	bne.n	80e1c8e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e1c7a:	68fb      	ldr	r3, [r7, #12]
 80e1c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1c80:	f043 0220 	orr.w	r2, r3, #32
 80e1c84:	68fb      	ldr	r3, [r7, #12]
 80e1c86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e1c8a:	2301      	movs	r3, #1
 80e1c8c:	e0ed      	b.n	80e1e6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80e1c8e:	68fb      	ldr	r3, [r7, #12]
 80e1c90:	681b      	ldr	r3, [r3, #0]
 80e1c92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80e1c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e1c9a:	2b00      	cmp	r3, #0
 80e1c9c:	d109      	bne.n	80e1cb2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80e1c9e:	68fb      	ldr	r3, [r7, #12]
 80e1ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1ca4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80e1ca8:	68fb      	ldr	r3, [r7, #12]
 80e1caa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e1cae:	2301      	movs	r3, #1
 80e1cb0:	e0db      	b.n	80e1e6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80e1cb2:	68fb      	ldr	r3, [r7, #12]
 80e1cb4:	681b      	ldr	r3, [r3, #0]
 80e1cb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80e1cba:	0e1b      	lsrs	r3, r3, #24
 80e1cbc:	f003 0301 	and.w	r3, r3, #1
 80e1cc0:	2b01      	cmp	r3, #1
 80e1cc2:	d10b      	bne.n	80e1cdc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80e1cc4:	68fb      	ldr	r3, [r7, #12]
 80e1cc6:	681b      	ldr	r3, [r3, #0]
 80e1cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e1ccc:	0fdb      	lsrs	r3, r3, #31
 80e1cce:	f003 0301 	and.w	r3, r3, #1
 80e1cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80e1cd6:	d101      	bne.n	80e1cdc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80e1cd8:	2301      	movs	r3, #1
 80e1cda:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80e1cdc:	68fb      	ldr	r3, [r7, #12]
 80e1cde:	681b      	ldr	r3, [r3, #0]
 80e1ce0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80e1ce4:	0a1b      	lsrs	r3, r3, #8
 80e1ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e1cea:	69fa      	ldr	r2, [r7, #28]
 80e1cec:	4413      	add	r3, r2
 80e1cee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80e1cf0:	68fb      	ldr	r3, [r7, #12]
 80e1cf2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80e1cf4:	68fb      	ldr	r3, [r7, #12]
 80e1cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e1cf8:	69f9      	ldr	r1, [r7, #28]
 80e1cfa:	fb01 f303 	mul.w	r3, r1, r3
 80e1cfe:	009b      	lsls	r3, r3, #2
 80e1d00:	4413      	add	r3, r2
 80e1d02:	627b      	str	r3, [r7, #36]	; 0x24
 80e1d04:	e018      	b.n	80e1d38 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80e1d06:	68fb      	ldr	r3, [r7, #12]
 80e1d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e1d0a:	68ba      	ldr	r2, [r7, #8]
 80e1d0c:	429a      	cmp	r2, r3
 80e1d0e:	d309      	bcc.n	80e1d24 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e1d10:	68fb      	ldr	r3, [r7, #12]
 80e1d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1d16:	f043 0220 	orr.w	r2, r3, #32
 80e1d1a:	68fb      	ldr	r3, [r7, #12]
 80e1d1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e1d20:	2301      	movs	r3, #1
 80e1d22:	e0a2      	b.n	80e1e6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80e1d24:	68fb      	ldr	r3, [r7, #12]
 80e1d26:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80e1d28:	68fb      	ldr	r3, [r7, #12]
 80e1d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e1d2c:	68b9      	ldr	r1, [r7, #8]
 80e1d2e:	fb01 f303 	mul.w	r3, r1, r3
 80e1d32:	009b      	lsls	r3, r3, #2
 80e1d34:	4413      	add	r3, r2
 80e1d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80e1d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1d3a:	681b      	ldr	r3, [r3, #0]
 80e1d3c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80e1d40:	687b      	ldr	r3, [r7, #4]
 80e1d42:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80e1d44:	687b      	ldr	r3, [r7, #4]
 80e1d46:	685b      	ldr	r3, [r3, #4]
 80e1d48:	2b00      	cmp	r3, #0
 80e1d4a:	d107      	bne.n	80e1d5c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80e1d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1d4e:	681b      	ldr	r3, [r3, #0]
 80e1d50:	0c9b      	lsrs	r3, r3, #18
 80e1d52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80e1d56:	687b      	ldr	r3, [r7, #4]
 80e1d58:	601a      	str	r2, [r3, #0]
 80e1d5a:	e005      	b.n	80e1d68 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80e1d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1d5e:	681b      	ldr	r3, [r3, #0]
 80e1d60:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80e1d64:	687b      	ldr	r3, [r7, #4]
 80e1d66:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80e1d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1d6a:	681b      	ldr	r3, [r3, #0]
 80e1d6c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80e1d70:	687b      	ldr	r3, [r7, #4]
 80e1d72:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80e1d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1d76:	681b      	ldr	r3, [r3, #0]
 80e1d78:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80e1d7c:	687b      	ldr	r3, [r7, #4]
 80e1d7e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80e1d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1d82:	3304      	adds	r3, #4
 80e1d84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80e1d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1d88:	681b      	ldr	r3, [r3, #0]
 80e1d8a:	b29a      	uxth	r2, r3
 80e1d8c:	687b      	ldr	r3, [r7, #4]
 80e1d8e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80e1d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1d92:	681b      	ldr	r3, [r3, #0]
 80e1d94:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80e1d98:	687b      	ldr	r3, [r7, #4]
 80e1d9a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80e1d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1d9e:	681b      	ldr	r3, [r3, #0]
 80e1da0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80e1da4:	687b      	ldr	r3, [r7, #4]
 80e1da6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80e1da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1daa:	681b      	ldr	r3, [r3, #0]
 80e1dac:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80e1db0:	687b      	ldr	r3, [r7, #4]
 80e1db2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80e1db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1db6:	681b      	ldr	r3, [r3, #0]
 80e1db8:	0e1b      	lsrs	r3, r3, #24
 80e1dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e1dbe:	687b      	ldr	r3, [r7, #4]
 80e1dc0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80e1dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1dc4:	681b      	ldr	r3, [r3, #0]
 80e1dc6:	0fda      	lsrs	r2, r3, #31
 80e1dc8:	687b      	ldr	r3, [r7, #4]
 80e1dca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80e1dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1dce:	3304      	adds	r3, #4
 80e1dd0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80e1dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1dd4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80e1dd6:	2300      	movs	r3, #0
 80e1dd8:	623b      	str	r3, [r7, #32]
 80e1dda:	e00a      	b.n	80e1df2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80e1ddc:	697a      	ldr	r2, [r7, #20]
 80e1dde:	6a3b      	ldr	r3, [r7, #32]
 80e1de0:	441a      	add	r2, r3
 80e1de2:	6839      	ldr	r1, [r7, #0]
 80e1de4:	6a3b      	ldr	r3, [r7, #32]
 80e1de6:	440b      	add	r3, r1
 80e1de8:	7812      	ldrb	r2, [r2, #0]
 80e1dea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80e1dec:	6a3b      	ldr	r3, [r7, #32]
 80e1dee:	3301      	adds	r3, #1
 80e1df0:	623b      	str	r3, [r7, #32]
 80e1df2:	687b      	ldr	r3, [r7, #4]
 80e1df4:	68db      	ldr	r3, [r3, #12]
 80e1df6:	0c1b      	lsrs	r3, r3, #16
 80e1df8:	4a1f      	ldr	r2, [pc, #124]	; (80e1e78 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80e1dfa:	5cd3      	ldrb	r3, [r2, r3]
 80e1dfc:	461a      	mov	r2, r3
 80e1dfe:	6a3b      	ldr	r3, [r7, #32]
 80e1e00:	4293      	cmp	r3, r2
 80e1e02:	d3eb      	bcc.n	80e1ddc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80e1e04:	68bb      	ldr	r3, [r7, #8]
 80e1e06:	2b40      	cmp	r3, #64	; 0x40
 80e1e08:	d105      	bne.n	80e1e16 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80e1e0a:	68fb      	ldr	r3, [r7, #12]
 80e1e0c:	681b      	ldr	r3, [r3, #0]
 80e1e0e:	69fa      	ldr	r2, [r7, #28]
 80e1e10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80e1e14:	e01e      	b.n	80e1e54 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80e1e16:	68bb      	ldr	r3, [r7, #8]
 80e1e18:	2b41      	cmp	r3, #65	; 0x41
 80e1e1a:	d105      	bne.n	80e1e28 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80e1e1c:	68fb      	ldr	r3, [r7, #12]
 80e1e1e:	681b      	ldr	r3, [r3, #0]
 80e1e20:	69fa      	ldr	r2, [r7, #28]
 80e1e22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80e1e26:	e015      	b.n	80e1e54 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80e1e28:	68bb      	ldr	r3, [r7, #8]
 80e1e2a:	2b1f      	cmp	r3, #31
 80e1e2c:	d808      	bhi.n	80e1e40 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80e1e2e:	68fb      	ldr	r3, [r7, #12]
 80e1e30:	681b      	ldr	r3, [r3, #0]
 80e1e32:	2101      	movs	r1, #1
 80e1e34:	68ba      	ldr	r2, [r7, #8]
 80e1e36:	fa01 f202 	lsl.w	r2, r1, r2
 80e1e3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80e1e3e:	e009      	b.n	80e1e54 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80e1e40:	68bb      	ldr	r3, [r7, #8]
 80e1e42:	f003 021f 	and.w	r2, r3, #31
 80e1e46:	68fb      	ldr	r3, [r7, #12]
 80e1e48:	681b      	ldr	r3, [r3, #0]
 80e1e4a:	2101      	movs	r1, #1
 80e1e4c:	fa01 f202 	lsl.w	r2, r1, r2
 80e1e50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80e1e54:	2300      	movs	r3, #0
 80e1e56:	e008      	b.n	80e1e6a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80e1e58:	68fb      	ldr	r3, [r7, #12]
 80e1e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1e5e:	f043 0208 	orr.w	r2, r3, #8
 80e1e62:	68fb      	ldr	r3, [r7, #12]
 80e1e64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1e68:	2301      	movs	r3, #1
  }
}
 80e1e6a:	4618      	mov	r0, r3
 80e1e6c:	372c      	adds	r7, #44	; 0x2c
 80e1e6e:	46bd      	mov	sp, r7
 80e1e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1e74:	4770      	bx	lr
 80e1e76:	bf00      	nop
 80e1e78:	080e5204 	.word	0x080e5204

080e1e7c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80e1e7c:	b480      	push	{r7}
 80e1e7e:	b087      	sub	sp, #28
 80e1e80:	af00      	add	r7, sp, #0
 80e1e82:	60f8      	str	r0, [r7, #12]
 80e1e84:	60b9      	str	r1, [r7, #8]
 80e1e86:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80e1e88:	68fb      	ldr	r3, [r7, #12]
 80e1e8a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1e8e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80e1e90:	7dfb      	ldrb	r3, [r7, #23]
 80e1e92:	2b01      	cmp	r3, #1
 80e1e94:	d002      	beq.n	80e1e9c <HAL_FDCAN_ActivateNotification+0x20>
 80e1e96:	7dfb      	ldrb	r3, [r7, #23]
 80e1e98:	2b02      	cmp	r3, #2
 80e1e9a:	d155      	bne.n	80e1f48 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80e1e9c:	68fb      	ldr	r3, [r7, #12]
 80e1e9e:	681b      	ldr	r3, [r3, #0]
 80e1ea0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80e1ea2:	68bb      	ldr	r3, [r7, #8]
 80e1ea4:	4013      	ands	r3, r2
 80e1ea6:	2b00      	cmp	r3, #0
 80e1ea8:	d108      	bne.n	80e1ebc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80e1eaa:	68fb      	ldr	r3, [r7, #12]
 80e1eac:	681b      	ldr	r3, [r3, #0]
 80e1eae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e1eb0:	68fb      	ldr	r3, [r7, #12]
 80e1eb2:	681b      	ldr	r3, [r3, #0]
 80e1eb4:	f042 0201 	orr.w	r2, r2, #1
 80e1eb8:	65da      	str	r2, [r3, #92]	; 0x5c
 80e1eba:	e014      	b.n	80e1ee6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80e1ebc:	68fb      	ldr	r3, [r7, #12]
 80e1ebe:	681b      	ldr	r3, [r3, #0]
 80e1ec0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80e1ec2:	68bb      	ldr	r3, [r7, #8]
 80e1ec4:	4013      	ands	r3, r2
 80e1ec6:	68ba      	ldr	r2, [r7, #8]
 80e1ec8:	429a      	cmp	r2, r3
 80e1eca:	d108      	bne.n	80e1ede <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80e1ecc:	68fb      	ldr	r3, [r7, #12]
 80e1ece:	681b      	ldr	r3, [r3, #0]
 80e1ed0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e1ed2:	68fb      	ldr	r3, [r7, #12]
 80e1ed4:	681b      	ldr	r3, [r3, #0]
 80e1ed6:	f042 0202 	orr.w	r2, r2, #2
 80e1eda:	65da      	str	r2, [r3, #92]	; 0x5c
 80e1edc:	e003      	b.n	80e1ee6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80e1ede:	68fb      	ldr	r3, [r7, #12]
 80e1ee0:	681b      	ldr	r3, [r3, #0]
 80e1ee2:	2203      	movs	r2, #3
 80e1ee4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80e1ee6:	68bb      	ldr	r3, [r7, #8]
 80e1ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80e1eec:	2b00      	cmp	r3, #0
 80e1eee:	d009      	beq.n	80e1f04 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80e1ef0:	68fb      	ldr	r3, [r7, #12]
 80e1ef2:	681b      	ldr	r3, [r3, #0]
 80e1ef4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80e1ef8:	68fb      	ldr	r3, [r7, #12]
 80e1efa:	681b      	ldr	r3, [r3, #0]
 80e1efc:	687a      	ldr	r2, [r7, #4]
 80e1efe:	430a      	orrs	r2, r1
 80e1f00:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80e1f04:	68bb      	ldr	r3, [r7, #8]
 80e1f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80e1f0a:	2b00      	cmp	r3, #0
 80e1f0c:	d009      	beq.n	80e1f22 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80e1f0e:	68fb      	ldr	r3, [r7, #12]
 80e1f10:	681b      	ldr	r3, [r3, #0]
 80e1f12:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80e1f16:	68fb      	ldr	r3, [r7, #12]
 80e1f18:	681b      	ldr	r3, [r3, #0]
 80e1f1a:	687a      	ldr	r2, [r7, #4]
 80e1f1c:	430a      	orrs	r2, r1
 80e1f1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80e1f22:	68fb      	ldr	r3, [r7, #12]
 80e1f24:	681b      	ldr	r3, [r3, #0]
 80e1f26:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80e1f28:	68ba      	ldr	r2, [r7, #8]
 80e1f2a:	4b0f      	ldr	r3, [pc, #60]	; (80e1f68 <HAL_FDCAN_ActivateNotification+0xec>)
 80e1f2c:	4013      	ands	r3, r2
 80e1f2e:	68fa      	ldr	r2, [r7, #12]
 80e1f30:	6812      	ldr	r2, [r2, #0]
 80e1f32:	430b      	orrs	r3, r1
 80e1f34:	6553      	str	r3, [r2, #84]	; 0x54
 80e1f36:	4b0d      	ldr	r3, [pc, #52]	; (80e1f6c <HAL_FDCAN_ActivateNotification+0xf0>)
 80e1f38:	695a      	ldr	r2, [r3, #20]
 80e1f3a:	68bb      	ldr	r3, [r7, #8]
 80e1f3c:	0f9b      	lsrs	r3, r3, #30
 80e1f3e:	490b      	ldr	r1, [pc, #44]	; (80e1f6c <HAL_FDCAN_ActivateNotification+0xf0>)
 80e1f40:	4313      	orrs	r3, r2
 80e1f42:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80e1f44:	2300      	movs	r3, #0
 80e1f46:	e008      	b.n	80e1f5a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80e1f48:	68fb      	ldr	r3, [r7, #12]
 80e1f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1f4e:	f043 0202 	orr.w	r2, r3, #2
 80e1f52:	68fb      	ldr	r3, [r7, #12]
 80e1f54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1f58:	2301      	movs	r3, #1
  }
}
 80e1f5a:	4618      	mov	r0, r3
 80e1f5c:	371c      	adds	r7, #28
 80e1f5e:	46bd      	mov	sp, r7
 80e1f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1f64:	4770      	bx	lr
 80e1f66:	bf00      	nop
 80e1f68:	3fcfffff 	.word	0x3fcfffff
 80e1f6c:	4000a800 	.word	0x4000a800

080e1f70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80e1f70:	b480      	push	{r7}
 80e1f72:	b085      	sub	sp, #20
 80e1f74:	af00      	add	r7, sp, #0
 80e1f76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80e1f78:	687b      	ldr	r3, [r7, #4]
 80e1f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e1f7c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80e1f7e:	687b      	ldr	r3, [r7, #4]
 80e1f80:	681b      	ldr	r3, [r3, #0]
 80e1f82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e1f86:	4ba7      	ldr	r3, [pc, #668]	; (80e2224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1f88:	4013      	ands	r3, r2
 80e1f8a:	68ba      	ldr	r2, [r7, #8]
 80e1f8c:	0091      	lsls	r1, r2, #2
 80e1f8e:	687a      	ldr	r2, [r7, #4]
 80e1f90:	6812      	ldr	r2, [r2, #0]
 80e1f92:	430b      	orrs	r3, r1
 80e1f94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80e1f98:	687b      	ldr	r3, [r7, #4]
 80e1f9a:	681b      	ldr	r3, [r3, #0]
 80e1f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80e1fa0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80e1fa4:	687b      	ldr	r3, [r7, #4]
 80e1fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e1fa8:	041a      	lsls	r2, r3, #16
 80e1faa:	687b      	ldr	r3, [r7, #4]
 80e1fac:	681b      	ldr	r3, [r3, #0]
 80e1fae:	430a      	orrs	r2, r1
 80e1fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80e1fb4:	687b      	ldr	r3, [r7, #4]
 80e1fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e1fb8:	68ba      	ldr	r2, [r7, #8]
 80e1fba:	4413      	add	r3, r2
 80e1fbc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80e1fbe:	687b      	ldr	r3, [r7, #4]
 80e1fc0:	681b      	ldr	r3, [r3, #0]
 80e1fc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80e1fc6:	4b97      	ldr	r3, [pc, #604]	; (80e2224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1fc8:	4013      	ands	r3, r2
 80e1fca:	68ba      	ldr	r2, [r7, #8]
 80e1fcc:	0091      	lsls	r1, r2, #2
 80e1fce:	687a      	ldr	r2, [r7, #4]
 80e1fd0:	6812      	ldr	r2, [r2, #0]
 80e1fd2:	430b      	orrs	r3, r1
 80e1fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80e1fd8:	687b      	ldr	r3, [r7, #4]
 80e1fda:	681b      	ldr	r3, [r3, #0]
 80e1fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e1fe0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e1fe4:	687b      	ldr	r3, [r7, #4]
 80e1fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e1fe8:	041a      	lsls	r2, r3, #16
 80e1fea:	687b      	ldr	r3, [r7, #4]
 80e1fec:	681b      	ldr	r3, [r3, #0]
 80e1fee:	430a      	orrs	r2, r1
 80e1ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80e1ff4:	687b      	ldr	r3, [r7, #4]
 80e1ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e1ff8:	005b      	lsls	r3, r3, #1
 80e1ffa:	68ba      	ldr	r2, [r7, #8]
 80e1ffc:	4413      	add	r3, r2
 80e1ffe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80e2000:	687b      	ldr	r3, [r7, #4]
 80e2002:	681b      	ldr	r3, [r3, #0]
 80e2004:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80e2008:	4b86      	ldr	r3, [pc, #536]	; (80e2224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e200a:	4013      	ands	r3, r2
 80e200c:	68ba      	ldr	r2, [r7, #8]
 80e200e:	0091      	lsls	r1, r2, #2
 80e2010:	687a      	ldr	r2, [r7, #4]
 80e2012:	6812      	ldr	r2, [r2, #0]
 80e2014:	430b      	orrs	r3, r1
 80e2016:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80e201a:	687b      	ldr	r3, [r7, #4]
 80e201c:	681b      	ldr	r3, [r3, #0]
 80e201e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e2022:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e2026:	687b      	ldr	r3, [r7, #4]
 80e2028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e202a:	041a      	lsls	r2, r3, #16
 80e202c:	687b      	ldr	r3, [r7, #4]
 80e202e:	681b      	ldr	r3, [r3, #0]
 80e2030:	430a      	orrs	r2, r1
 80e2032:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80e2036:	687b      	ldr	r3, [r7, #4]
 80e2038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e203a:	687a      	ldr	r2, [r7, #4]
 80e203c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80e203e:	fb02 f303 	mul.w	r3, r2, r3
 80e2042:	68ba      	ldr	r2, [r7, #8]
 80e2044:	4413      	add	r3, r2
 80e2046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80e2048:	687b      	ldr	r3, [r7, #4]
 80e204a:	681b      	ldr	r3, [r3, #0]
 80e204c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80e2050:	4b74      	ldr	r3, [pc, #464]	; (80e2224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e2052:	4013      	ands	r3, r2
 80e2054:	68ba      	ldr	r2, [r7, #8]
 80e2056:	0091      	lsls	r1, r2, #2
 80e2058:	687a      	ldr	r2, [r7, #4]
 80e205a:	6812      	ldr	r2, [r2, #0]
 80e205c:	430b      	orrs	r3, r1
 80e205e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80e2062:	687b      	ldr	r3, [r7, #4]
 80e2064:	681b      	ldr	r3, [r3, #0]
 80e2066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e206a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e206e:	687b      	ldr	r3, [r7, #4]
 80e2070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e2072:	041a      	lsls	r2, r3, #16
 80e2074:	687b      	ldr	r3, [r7, #4]
 80e2076:	681b      	ldr	r3, [r3, #0]
 80e2078:	430a      	orrs	r2, r1
 80e207a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80e207e:	687b      	ldr	r3, [r7, #4]
 80e2080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e2082:	687a      	ldr	r2, [r7, #4]
 80e2084:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80e2086:	fb02 f303 	mul.w	r3, r2, r3
 80e208a:	68ba      	ldr	r2, [r7, #8]
 80e208c:	4413      	add	r3, r2
 80e208e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80e2090:	687b      	ldr	r3, [r7, #4]
 80e2092:	681b      	ldr	r3, [r3, #0]
 80e2094:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80e2098:	4b62      	ldr	r3, [pc, #392]	; (80e2224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e209a:	4013      	ands	r3, r2
 80e209c:	68ba      	ldr	r2, [r7, #8]
 80e209e:	0091      	lsls	r1, r2, #2
 80e20a0:	687a      	ldr	r2, [r7, #4]
 80e20a2:	6812      	ldr	r2, [r2, #0]
 80e20a4:	430b      	orrs	r3, r1
 80e20a6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80e20aa:	687b      	ldr	r3, [r7, #4]
 80e20ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e20ae:	687a      	ldr	r2, [r7, #4]
 80e20b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80e20b2:	fb02 f303 	mul.w	r3, r2, r3
 80e20b6:	68ba      	ldr	r2, [r7, #8]
 80e20b8:	4413      	add	r3, r2
 80e20ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80e20bc:	687b      	ldr	r3, [r7, #4]
 80e20be:	681b      	ldr	r3, [r3, #0]
 80e20c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80e20c4:	4b57      	ldr	r3, [pc, #348]	; (80e2224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e20c6:	4013      	ands	r3, r2
 80e20c8:	68ba      	ldr	r2, [r7, #8]
 80e20ca:	0091      	lsls	r1, r2, #2
 80e20cc:	687a      	ldr	r2, [r7, #4]
 80e20ce:	6812      	ldr	r2, [r2, #0]
 80e20d0:	430b      	orrs	r3, r1
 80e20d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80e20d6:	687b      	ldr	r3, [r7, #4]
 80e20d8:	681b      	ldr	r3, [r3, #0]
 80e20da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80e20de:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80e20e2:	687b      	ldr	r3, [r7, #4]
 80e20e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e20e6:	041a      	lsls	r2, r3, #16
 80e20e8:	687b      	ldr	r3, [r7, #4]
 80e20ea:	681b      	ldr	r3, [r3, #0]
 80e20ec:	430a      	orrs	r2, r1
 80e20ee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80e20f2:	687b      	ldr	r3, [r7, #4]
 80e20f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e20f6:	005b      	lsls	r3, r3, #1
 80e20f8:	68ba      	ldr	r2, [r7, #8]
 80e20fa:	4413      	add	r3, r2
 80e20fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80e20fe:	687b      	ldr	r3, [r7, #4]
 80e2100:	681b      	ldr	r3, [r3, #0]
 80e2102:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80e2106:	4b47      	ldr	r3, [pc, #284]	; (80e2224 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e2108:	4013      	ands	r3, r2
 80e210a:	68ba      	ldr	r2, [r7, #8]
 80e210c:	0091      	lsls	r1, r2, #2
 80e210e:	687a      	ldr	r2, [r7, #4]
 80e2110:	6812      	ldr	r2, [r2, #0]
 80e2112:	430b      	orrs	r3, r1
 80e2114:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80e2118:	687b      	ldr	r3, [r7, #4]
 80e211a:	681b      	ldr	r3, [r3, #0]
 80e211c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e2120:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80e2124:	687b      	ldr	r3, [r7, #4]
 80e2126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e2128:	041a      	lsls	r2, r3, #16
 80e212a:	687b      	ldr	r3, [r7, #4]
 80e212c:	681b      	ldr	r3, [r3, #0]
 80e212e:	430a      	orrs	r2, r1
 80e2130:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80e2134:	687b      	ldr	r3, [r7, #4]
 80e2136:	681b      	ldr	r3, [r3, #0]
 80e2138:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e213c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80e2140:	687b      	ldr	r3, [r7, #4]
 80e2142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e2144:	061a      	lsls	r2, r3, #24
 80e2146:	687b      	ldr	r3, [r7, #4]
 80e2148:	681b      	ldr	r3, [r3, #0]
 80e214a:	430a      	orrs	r2, r1
 80e214c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80e2150:	687b      	ldr	r3, [r7, #4]
 80e2152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80e2154:	4b34      	ldr	r3, [pc, #208]	; (80e2228 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80e2156:	4413      	add	r3, r2
 80e2158:	009a      	lsls	r2, r3, #2
 80e215a:	687b      	ldr	r3, [r7, #4]
 80e215c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80e215e:	687b      	ldr	r3, [r7, #4]
 80e2160:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80e2162:	687b      	ldr	r3, [r7, #4]
 80e2164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e2166:	009b      	lsls	r3, r3, #2
 80e2168:	441a      	add	r2, r3
 80e216a:	687b      	ldr	r3, [r7, #4]
 80e216c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80e216e:	687b      	ldr	r3, [r7, #4]
 80e2170:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e2172:	687b      	ldr	r3, [r7, #4]
 80e2174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e2176:	00db      	lsls	r3, r3, #3
 80e2178:	441a      	add	r2, r3
 80e217a:	687b      	ldr	r3, [r7, #4]
 80e217c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80e217e:	687b      	ldr	r3, [r7, #4]
 80e2180:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80e2182:	687b      	ldr	r3, [r7, #4]
 80e2184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e2186:	6879      	ldr	r1, [r7, #4]
 80e2188:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80e218a:	fb01 f303 	mul.w	r3, r1, r3
 80e218e:	009b      	lsls	r3, r3, #2
 80e2190:	441a      	add	r2, r3
 80e2192:	687b      	ldr	r3, [r7, #4]
 80e2194:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80e2196:	687b      	ldr	r3, [r7, #4]
 80e2198:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80e219a:	687b      	ldr	r3, [r7, #4]
 80e219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e219e:	6879      	ldr	r1, [r7, #4]
 80e21a0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80e21a2:	fb01 f303 	mul.w	r3, r1, r3
 80e21a6:	009b      	lsls	r3, r3, #2
 80e21a8:	441a      	add	r2, r3
 80e21aa:	687b      	ldr	r3, [r7, #4]
 80e21ac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80e21ae:	687b      	ldr	r3, [r7, #4]
 80e21b0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80e21b2:	687b      	ldr	r3, [r7, #4]
 80e21b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e21b6:	6879      	ldr	r1, [r7, #4]
 80e21b8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80e21ba:	fb01 f303 	mul.w	r3, r1, r3
 80e21be:	009b      	lsls	r3, r3, #2
 80e21c0:	441a      	add	r2, r3
 80e21c2:	687b      	ldr	r3, [r7, #4]
 80e21c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80e21c8:	687b      	ldr	r3, [r7, #4]
 80e21ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80e21ce:	687b      	ldr	r3, [r7, #4]
 80e21d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e21d2:	00db      	lsls	r3, r3, #3
 80e21d4:	441a      	add	r2, r3
 80e21d6:	687b      	ldr	r3, [r7, #4]
 80e21d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80e21dc:	687b      	ldr	r3, [r7, #4]
 80e21de:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e21e2:	687b      	ldr	r3, [r7, #4]
 80e21e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e21e6:	6879      	ldr	r1, [r7, #4]
 80e21e8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80e21ea:	fb01 f303 	mul.w	r3, r1, r3
 80e21ee:	009b      	lsls	r3, r3, #2
 80e21f0:	441a      	add	r2, r3
 80e21f2:	687b      	ldr	r3, [r7, #4]
 80e21f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80e21f8:	687b      	ldr	r3, [r7, #4]
 80e21fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80e21fe:	687b      	ldr	r3, [r7, #4]
 80e2200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e2202:	6879      	ldr	r1, [r7, #4]
 80e2204:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80e2206:	fb01 f303 	mul.w	r3, r1, r3
 80e220a:	009b      	lsls	r3, r3, #2
 80e220c:	441a      	add	r2, r3
 80e220e:	687b      	ldr	r3, [r7, #4]
 80e2210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80e2214:	687b      	ldr	r3, [r7, #4]
 80e2216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e221a:	4a04      	ldr	r2, [pc, #16]	; (80e222c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80e221c:	4293      	cmp	r3, r2
 80e221e:	d915      	bls.n	80e224c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80e2220:	e006      	b.n	80e2230 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80e2222:	bf00      	nop
 80e2224:	ffff0003 	.word	0xffff0003
 80e2228:	10002b00 	.word	0x10002b00
 80e222c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e2230:	687b      	ldr	r3, [r7, #4]
 80e2232:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e2236:	f043 0220 	orr.w	r2, r3, #32
 80e223a:	687b      	ldr	r3, [r7, #4]
 80e223c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e2240:	687b      	ldr	r3, [r7, #4]
 80e2242:	2203      	movs	r2, #3
 80e2244:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80e2248:	2301      	movs	r3, #1
 80e224a:	e010      	b.n	80e226e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80e224c:	687b      	ldr	r3, [r7, #4]
 80e224e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80e2250:	60fb      	str	r3, [r7, #12]
 80e2252:	e005      	b.n	80e2260 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80e2254:	68fb      	ldr	r3, [r7, #12]
 80e2256:	2200      	movs	r2, #0
 80e2258:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80e225a:	68fb      	ldr	r3, [r7, #12]
 80e225c:	3304      	adds	r3, #4
 80e225e:	60fb      	str	r3, [r7, #12]
 80e2260:	687b      	ldr	r3, [r7, #4]
 80e2262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e2266:	68fa      	ldr	r2, [r7, #12]
 80e2268:	429a      	cmp	r2, r3
 80e226a:	d3f3      	bcc.n	80e2254 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80e226c:	2300      	movs	r3, #0
}
 80e226e:	4618      	mov	r0, r3
 80e2270:	3714      	adds	r7, #20
 80e2272:	46bd      	mov	sp, r7
 80e2274:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2278:	4770      	bx	lr
 80e227a:	bf00      	nop

080e227c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80e227c:	b480      	push	{r7}
 80e227e:	b089      	sub	sp, #36	; 0x24
 80e2280:	af00      	add	r7, sp, #0
 80e2282:	60f8      	str	r0, [r7, #12]
 80e2284:	60b9      	str	r1, [r7, #8]
 80e2286:	607a      	str	r2, [r7, #4]
 80e2288:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80e228a:	68bb      	ldr	r3, [r7, #8]
 80e228c:	685b      	ldr	r3, [r3, #4]
 80e228e:	2b00      	cmp	r3, #0
 80e2290:	d10a      	bne.n	80e22a8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e2292:	68bb      	ldr	r3, [r7, #8]
 80e2294:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80e2296:	68bb      	ldr	r3, [r7, #8]
 80e2298:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80e229a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80e229c:	68bb      	ldr	r3, [r7, #8]
 80e229e:	681b      	ldr	r3, [r3, #0]
 80e22a0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e22a2:	4313      	orrs	r3, r2
 80e22a4:	61fb      	str	r3, [r7, #28]
 80e22a6:	e00a      	b.n	80e22be <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e22a8:	68bb      	ldr	r3, [r7, #8]
 80e22aa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80e22ac:	68bb      	ldr	r3, [r7, #8]
 80e22ae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80e22b0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80e22b2:	68bb      	ldr	r3, [r7, #8]
 80e22b4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80e22b6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e22b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80e22bc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e22be:	68bb      	ldr	r3, [r7, #8]
 80e22c0:	6a1b      	ldr	r3, [r3, #32]
 80e22c2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80e22c4:	68bb      	ldr	r3, [r7, #8]
 80e22c6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e22c8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80e22ca:	68bb      	ldr	r3, [r7, #8]
 80e22cc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80e22ce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80e22d0:	68bb      	ldr	r3, [r7, #8]
 80e22d2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80e22d4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80e22d6:	68bb      	ldr	r3, [r7, #8]
 80e22d8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e22da:	4313      	orrs	r3, r2
 80e22dc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80e22de:	68fb      	ldr	r3, [r7, #12]
 80e22e0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e22e4:	68fb      	ldr	r3, [r7, #12]
 80e22e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e22e8:	6839      	ldr	r1, [r7, #0]
 80e22ea:	fb01 f303 	mul.w	r3, r1, r3
 80e22ee:	009b      	lsls	r3, r3, #2
 80e22f0:	4413      	add	r3, r2
 80e22f2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80e22f4:	69bb      	ldr	r3, [r7, #24]
 80e22f6:	69fa      	ldr	r2, [r7, #28]
 80e22f8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80e22fa:	69bb      	ldr	r3, [r7, #24]
 80e22fc:	3304      	adds	r3, #4
 80e22fe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80e2300:	69bb      	ldr	r3, [r7, #24]
 80e2302:	693a      	ldr	r2, [r7, #16]
 80e2304:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80e2306:	69bb      	ldr	r3, [r7, #24]
 80e2308:	3304      	adds	r3, #4
 80e230a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80e230c:	2300      	movs	r3, #0
 80e230e:	617b      	str	r3, [r7, #20]
 80e2310:	e020      	b.n	80e2354 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e2312:	697b      	ldr	r3, [r7, #20]
 80e2314:	3303      	adds	r3, #3
 80e2316:	687a      	ldr	r2, [r7, #4]
 80e2318:	4413      	add	r3, r2
 80e231a:	781b      	ldrb	r3, [r3, #0]
 80e231c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80e231e:	697b      	ldr	r3, [r7, #20]
 80e2320:	3302      	adds	r3, #2
 80e2322:	6879      	ldr	r1, [r7, #4]
 80e2324:	440b      	add	r3, r1
 80e2326:	781b      	ldrb	r3, [r3, #0]
 80e2328:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e232a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80e232c:	697b      	ldr	r3, [r7, #20]
 80e232e:	3301      	adds	r3, #1
 80e2330:	6879      	ldr	r1, [r7, #4]
 80e2332:	440b      	add	r3, r1
 80e2334:	781b      	ldrb	r3, [r3, #0]
 80e2336:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80e2338:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80e233a:	6879      	ldr	r1, [r7, #4]
 80e233c:	697a      	ldr	r2, [r7, #20]
 80e233e:	440a      	add	r2, r1
 80e2340:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80e2342:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e2344:	69bb      	ldr	r3, [r7, #24]
 80e2346:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80e2348:	69bb      	ldr	r3, [r7, #24]
 80e234a:	3304      	adds	r3, #4
 80e234c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80e234e:	697b      	ldr	r3, [r7, #20]
 80e2350:	3304      	adds	r3, #4
 80e2352:	617b      	str	r3, [r7, #20]
 80e2354:	68bb      	ldr	r3, [r7, #8]
 80e2356:	68db      	ldr	r3, [r3, #12]
 80e2358:	0c1b      	lsrs	r3, r3, #16
 80e235a:	4a06      	ldr	r2, [pc, #24]	; (80e2374 <FDCAN_CopyMessageToRAM+0xf8>)
 80e235c:	5cd3      	ldrb	r3, [r2, r3]
 80e235e:	461a      	mov	r2, r3
 80e2360:	697b      	ldr	r3, [r7, #20]
 80e2362:	4293      	cmp	r3, r2
 80e2364:	d3d5      	bcc.n	80e2312 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80e2366:	bf00      	nop
 80e2368:	bf00      	nop
 80e236a:	3724      	adds	r7, #36	; 0x24
 80e236c:	46bd      	mov	sp, r7
 80e236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2372:	4770      	bx	lr
 80e2374:	080e5204 	.word	0x080e5204

080e2378 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80e2378:	b580      	push	{r7, lr}
 80e237a:	b08a      	sub	sp, #40	; 0x28
 80e237c:	af00      	add	r7, sp, #0
 80e237e:	60f8      	str	r0, [r7, #12]
 80e2380:	60b9      	str	r1, [r7, #8]
 80e2382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80e2384:	68bb      	ldr	r3, [r7, #8]
 80e2386:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80e2388:	687b      	ldr	r3, [r7, #4]
 80e238a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80e238c:	2308      	movs	r3, #8
 80e238e:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80e2390:	4b2e      	ldr	r3, [pc, #184]	; (80e244c <HAL_FLASH_Program+0xd4>)
 80e2392:	7d1b      	ldrb	r3, [r3, #20]
 80e2394:	2b01      	cmp	r3, #1
 80e2396:	d101      	bne.n	80e239c <HAL_FLASH_Program+0x24>
 80e2398:	2302      	movs	r3, #2
 80e239a:	e053      	b.n	80e2444 <HAL_FLASH_Program+0xcc>
 80e239c:	4b2b      	ldr	r3, [pc, #172]	; (80e244c <HAL_FLASH_Program+0xd4>)
 80e239e:	2201      	movs	r2, #1
 80e23a0:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80e23a2:	68bb      	ldr	r3, [r7, #8]
 80e23a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80e23a8:	d315      	bcc.n	80e23d6 <HAL_FLASH_Program+0x5e>
 80e23aa:	68bb      	ldr	r3, [r7, #8]
 80e23ac:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80e23b0:	d211      	bcs.n	80e23d6 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80e23b2:	2301      	movs	r3, #1
 80e23b4:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80e23b6:	4b25      	ldr	r3, [pc, #148]	; (80e244c <HAL_FLASH_Program+0xd4>)
 80e23b8:	2200      	movs	r2, #0
 80e23ba:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80e23bc:	6979      	ldr	r1, [r7, #20]
 80e23be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80e23c2:	f000 f881 	bl	80e24c8 <FLASH_WaitForLastOperation>
 80e23c6:	4603      	mov	r3, r0
 80e23c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 80e23cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80e23d0:	2b00      	cmp	r3, #0
 80e23d2:	d002      	beq.n	80e23da <HAL_FLASH_Program+0x62>
 80e23d4:	e031      	b.n	80e243a <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 80e23d6:	2301      	movs	r3, #1
 80e23d8:	e034      	b.n	80e2444 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80e23da:	4b1d      	ldr	r3, [pc, #116]	; (80e2450 <HAL_FLASH_Program+0xd8>)
 80e23dc:	68db      	ldr	r3, [r3, #12]
 80e23de:	4a1c      	ldr	r2, [pc, #112]	; (80e2450 <HAL_FLASH_Program+0xd8>)
 80e23e0:	f043 0302 	orr.w	r3, r3, #2
 80e23e4:	60d3      	str	r3, [r2, #12]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80e23e6:	f3bf 8f6f 	isb	sy
}
 80e23ea:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80e23ec:	f3bf 8f4f 	dsb	sy
}
 80e23f0:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80e23f2:	69fb      	ldr	r3, [r7, #28]
 80e23f4:	681a      	ldr	r2, [r3, #0]
 80e23f6:	6a3b      	ldr	r3, [r7, #32]
 80e23f8:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80e23fa:	6a3b      	ldr	r3, [r7, #32]
 80e23fc:	3304      	adds	r3, #4
 80e23fe:	623b      	str	r3, [r7, #32]
        src_addr++;
 80e2400:	69fb      	ldr	r3, [r7, #28]
 80e2402:	3304      	adds	r3, #4
 80e2404:	61fb      	str	r3, [r7, #28]
        row_index--;
 80e2406:	7efb      	ldrb	r3, [r7, #27]
 80e2408:	3b01      	subs	r3, #1
 80e240a:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 80e240c:	7efb      	ldrb	r3, [r7, #27]
 80e240e:	2b00      	cmp	r3, #0
 80e2410:	d1ef      	bne.n	80e23f2 <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 80e2412:	f3bf 8f6f 	isb	sy
}
 80e2416:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80e2418:	f3bf 8f4f 	dsb	sy
}
 80e241c:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80e241e:	6979      	ldr	r1, [r7, #20]
 80e2420:	f24c 3050 	movw	r0, #50000	; 0xc350
 80e2424:	f000 f850 	bl	80e24c8 <FLASH_WaitForLastOperation>
 80e2428:	4603      	mov	r3, r0
 80e242a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80e242e:	4b08      	ldr	r3, [pc, #32]	; (80e2450 <HAL_FLASH_Program+0xd8>)
 80e2430:	68db      	ldr	r3, [r3, #12]
 80e2432:	4a07      	ldr	r2, [pc, #28]	; (80e2450 <HAL_FLASH_Program+0xd8>)
 80e2434:	f023 0302 	bic.w	r3, r3, #2
 80e2438:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80e243a:	4b04      	ldr	r3, [pc, #16]	; (80e244c <HAL_FLASH_Program+0xd4>)
 80e243c:	2200      	movs	r2, #0
 80e243e:	751a      	strb	r2, [r3, #20]

  return status;
 80e2440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80e2444:	4618      	mov	r0, r3
 80e2446:	3728      	adds	r7, #40	; 0x28
 80e2448:	46bd      	mov	sp, r7
 80e244a:	bd80      	pop	{r7, pc}
 80e244c:	2400017c 	.word	0x2400017c
 80e2450:	52002000 	.word	0x52002000

080e2454 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80e2454:	b480      	push	{r7}
 80e2456:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80e2458:	4b0c      	ldr	r3, [pc, #48]	; (80e248c <HAL_FLASH_Unlock+0x38>)
 80e245a:	68db      	ldr	r3, [r3, #12]
 80e245c:	f003 0301 	and.w	r3, r3, #1
 80e2460:	2b00      	cmp	r3, #0
 80e2462:	d00d      	beq.n	80e2480 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80e2464:	4b09      	ldr	r3, [pc, #36]	; (80e248c <HAL_FLASH_Unlock+0x38>)
 80e2466:	4a0a      	ldr	r2, [pc, #40]	; (80e2490 <HAL_FLASH_Unlock+0x3c>)
 80e2468:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80e246a:	4b08      	ldr	r3, [pc, #32]	; (80e248c <HAL_FLASH_Unlock+0x38>)
 80e246c:	4a09      	ldr	r2, [pc, #36]	; (80e2494 <HAL_FLASH_Unlock+0x40>)
 80e246e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80e2470:	4b06      	ldr	r3, [pc, #24]	; (80e248c <HAL_FLASH_Unlock+0x38>)
 80e2472:	68db      	ldr	r3, [r3, #12]
 80e2474:	f003 0301 	and.w	r3, r3, #1
 80e2478:	2b00      	cmp	r3, #0
 80e247a:	d001      	beq.n	80e2480 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80e247c:	2301      	movs	r3, #1
 80e247e:	e000      	b.n	80e2482 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80e2480:	2300      	movs	r3, #0
}
 80e2482:	4618      	mov	r0, r3
 80e2484:	46bd      	mov	sp, r7
 80e2486:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e248a:	4770      	bx	lr
 80e248c:	52002000 	.word	0x52002000
 80e2490:	45670123 	.word	0x45670123
 80e2494:	cdef89ab 	.word	0xcdef89ab

080e2498 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80e2498:	b480      	push	{r7}
 80e249a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80e249c:	4b09      	ldr	r3, [pc, #36]	; (80e24c4 <HAL_FLASH_Lock+0x2c>)
 80e249e:	68db      	ldr	r3, [r3, #12]
 80e24a0:	4a08      	ldr	r2, [pc, #32]	; (80e24c4 <HAL_FLASH_Lock+0x2c>)
 80e24a2:	f043 0301 	orr.w	r3, r3, #1
 80e24a6:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80e24a8:	4b06      	ldr	r3, [pc, #24]	; (80e24c4 <HAL_FLASH_Lock+0x2c>)
 80e24aa:	68db      	ldr	r3, [r3, #12]
 80e24ac:	f003 0301 	and.w	r3, r3, #1
 80e24b0:	2b00      	cmp	r3, #0
 80e24b2:	d101      	bne.n	80e24b8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80e24b4:	2301      	movs	r3, #1
 80e24b6:	e000      	b.n	80e24ba <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80e24b8:	2300      	movs	r3, #0
}
 80e24ba:	4618      	mov	r0, r3
 80e24bc:	46bd      	mov	sp, r7
 80e24be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e24c2:	4770      	bx	lr
 80e24c4:	52002000 	.word	0x52002000

080e24c8 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80e24c8:	b580      	push	{r7, lr}
 80e24ca:	b086      	sub	sp, #24
 80e24cc:	af00      	add	r7, sp, #0
 80e24ce:	6078      	str	r0, [r7, #4]
 80e24d0:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80e24d2:	2304      	movs	r3, #4
 80e24d4:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 80e24d6:	2300      	movs	r3, #0
 80e24d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80e24da:	f7ff f80d 	bl	80e14f8 <HAL_GetTick>
 80e24de:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80e24e0:	e010      	b.n	80e2504 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80e24e2:	687b      	ldr	r3, [r7, #4]
 80e24e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80e24e8:	d00c      	beq.n	80e2504 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80e24ea:	f7ff f805 	bl	80e14f8 <HAL_GetTick>
 80e24ee:	4602      	mov	r2, r0
 80e24f0:	68fb      	ldr	r3, [r7, #12]
 80e24f2:	1ad3      	subs	r3, r2, r3
 80e24f4:	687a      	ldr	r2, [r7, #4]
 80e24f6:	429a      	cmp	r2, r3
 80e24f8:	d302      	bcc.n	80e2500 <FLASH_WaitForLastOperation+0x38>
 80e24fa:	687b      	ldr	r3, [r7, #4]
 80e24fc:	2b00      	cmp	r3, #0
 80e24fe:	d101      	bne.n	80e2504 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80e2500:	2303      	movs	r3, #3
 80e2502:	e02d      	b.n	80e2560 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80e2504:	4b18      	ldr	r3, [pc, #96]	; (80e2568 <FLASH_WaitForLastOperation+0xa0>)
 80e2506:	691a      	ldr	r2, [r3, #16]
 80e2508:	693b      	ldr	r3, [r7, #16]
 80e250a:	4013      	ands	r3, r2
 80e250c:	693a      	ldr	r2, [r7, #16]
 80e250e:	429a      	cmp	r2, r3
 80e2510:	d0e7      	beq.n	80e24e2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80e2512:	683b      	ldr	r3, [r7, #0]
 80e2514:	2b01      	cmp	r3, #1
 80e2516:	d104      	bne.n	80e2522 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80e2518:	4b13      	ldr	r3, [pc, #76]	; (80e2568 <FLASH_WaitForLastOperation+0xa0>)
 80e251a:	691a      	ldr	r2, [r3, #16]
 80e251c:	4b13      	ldr	r3, [pc, #76]	; (80e256c <FLASH_WaitForLastOperation+0xa4>)
 80e251e:	4013      	ands	r3, r2
 80e2520:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80e2522:	697b      	ldr	r3, [r7, #20]
 80e2524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80e2528:	2b00      	cmp	r3, #0
 80e252a:	d00a      	beq.n	80e2542 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80e252c:	4b10      	ldr	r3, [pc, #64]	; (80e2570 <FLASH_WaitForLastOperation+0xa8>)
 80e252e:	699a      	ldr	r2, [r3, #24]
 80e2530:	697b      	ldr	r3, [r7, #20]
 80e2532:	4313      	orrs	r3, r2
 80e2534:	4a0e      	ldr	r2, [pc, #56]	; (80e2570 <FLASH_WaitForLastOperation+0xa8>)
 80e2536:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80e2538:	4a0b      	ldr	r2, [pc, #44]	; (80e2568 <FLASH_WaitForLastOperation+0xa0>)
 80e253a:	697b      	ldr	r3, [r7, #20]
 80e253c:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 80e253e:	2301      	movs	r3, #1
 80e2540:	e00e      	b.n	80e2560 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80e2542:	683b      	ldr	r3, [r7, #0]
 80e2544:	2b01      	cmp	r3, #1
 80e2546:	d10a      	bne.n	80e255e <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80e2548:	4b07      	ldr	r3, [pc, #28]	; (80e2568 <FLASH_WaitForLastOperation+0xa0>)
 80e254a:	691b      	ldr	r3, [r3, #16]
 80e254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80e2550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e2554:	d103      	bne.n	80e255e <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80e2556:	4b04      	ldr	r3, [pc, #16]	; (80e2568 <FLASH_WaitForLastOperation+0xa0>)
 80e2558:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80e255c:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80e255e:	2300      	movs	r3, #0
}
 80e2560:	4618      	mov	r0, r3
 80e2562:	3718      	adds	r7, #24
 80e2564:	46bd      	mov	sp, r7
 80e2566:	bd80      	pop	{r7, pc}
 80e2568:	52002000 	.word	0x52002000
 80e256c:	17ee0000 	.word	0x17ee0000
 80e2570:	2400017c 	.word	0x2400017c

080e2574 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80e2574:	b580      	push	{r7, lr}
 80e2576:	b084      	sub	sp, #16
 80e2578:	af00      	add	r7, sp, #0
 80e257a:	6078      	str	r0, [r7, #4]
 80e257c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80e257e:	2300      	movs	r3, #0
 80e2580:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80e2582:	4b3f      	ldr	r3, [pc, #252]	; (80e2680 <HAL_FLASHEx_Erase+0x10c>)
 80e2584:	7d1b      	ldrb	r3, [r3, #20]
 80e2586:	2b01      	cmp	r3, #1
 80e2588:	d101      	bne.n	80e258e <HAL_FLASHEx_Erase+0x1a>
 80e258a:	2302      	movs	r3, #2
 80e258c:	e074      	b.n	80e2678 <HAL_FLASHEx_Erase+0x104>
 80e258e:	4b3c      	ldr	r3, [pc, #240]	; (80e2680 <HAL_FLASHEx_Erase+0x10c>)
 80e2590:	2201      	movs	r2, #1
 80e2592:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80e2594:	4b3a      	ldr	r3, [pc, #232]	; (80e2680 <HAL_FLASHEx_Erase+0x10c>)
 80e2596:	2200      	movs	r2, #0
 80e2598:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80e259a:	687b      	ldr	r3, [r7, #4]
 80e259c:	685b      	ldr	r3, [r3, #4]
 80e259e:	f003 0301 	and.w	r3, r3, #1
 80e25a2:	2b00      	cmp	r3, #0
 80e25a4:	d009      	beq.n	80e25ba <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80e25a6:	2101      	movs	r1, #1
 80e25a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80e25ac:	f7ff ff8c 	bl	80e24c8 <FLASH_WaitForLastOperation>
 80e25b0:	4603      	mov	r3, r0
 80e25b2:	2b00      	cmp	r3, #0
 80e25b4:	d001      	beq.n	80e25ba <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 80e25b6:	2301      	movs	r3, #1
 80e25b8:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 80e25ba:	7bfb      	ldrb	r3, [r7, #15]
 80e25bc:	2b00      	cmp	r3, #0
 80e25be:	d157      	bne.n	80e2670 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80e25c0:	687b      	ldr	r3, [r7, #4]
 80e25c2:	681b      	ldr	r3, [r3, #0]
 80e25c4:	2b01      	cmp	r3, #1
 80e25c6:	d11e      	bne.n	80e2606 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80e25c8:	687b      	ldr	r3, [r7, #4]
 80e25ca:	691a      	ldr	r2, [r3, #16]
 80e25cc:	687b      	ldr	r3, [r7, #4]
 80e25ce:	685b      	ldr	r3, [r3, #4]
 80e25d0:	4619      	mov	r1, r3
 80e25d2:	4610      	mov	r0, r2
 80e25d4:	f000 f85a 	bl	80e268c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80e25d8:	687b      	ldr	r3, [r7, #4]
 80e25da:	685b      	ldr	r3, [r3, #4]
 80e25dc:	f003 0301 	and.w	r3, r3, #1
 80e25e0:	2b00      	cmp	r3, #0
 80e25e2:	d045      	beq.n	80e2670 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80e25e4:	2101      	movs	r1, #1
 80e25e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80e25ea:	f7ff ff6d 	bl	80e24c8 <FLASH_WaitForLastOperation>
 80e25ee:	4603      	mov	r3, r0
 80e25f0:	2b00      	cmp	r3, #0
 80e25f2:	d001      	beq.n	80e25f8 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 80e25f4:	2301      	movs	r3, #1
 80e25f6:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80e25f8:	4b22      	ldr	r3, [pc, #136]	; (80e2684 <HAL_FLASHEx_Erase+0x110>)
 80e25fa:	68db      	ldr	r3, [r3, #12]
 80e25fc:	4a21      	ldr	r2, [pc, #132]	; (80e2684 <HAL_FLASHEx_Erase+0x110>)
 80e25fe:	f023 0308 	bic.w	r3, r3, #8
 80e2602:	60d3      	str	r3, [r2, #12]
 80e2604:	e034      	b.n	80e2670 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80e2606:	683b      	ldr	r3, [r7, #0]
 80e2608:	f04f 32ff 	mov.w	r2, #4294967295
 80e260c:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80e260e:	687b      	ldr	r3, [r7, #4]
 80e2610:	689b      	ldr	r3, [r3, #8]
 80e2612:	60bb      	str	r3, [r7, #8]
 80e2614:	e024      	b.n	80e2660 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80e2616:	687b      	ldr	r3, [r7, #4]
 80e2618:	6859      	ldr	r1, [r3, #4]
 80e261a:	687b      	ldr	r3, [r7, #4]
 80e261c:	691b      	ldr	r3, [r3, #16]
 80e261e:	461a      	mov	r2, r3
 80e2620:	68b8      	ldr	r0, [r7, #8]
 80e2622:	f000 f857 	bl	80e26d4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80e2626:	687b      	ldr	r3, [r7, #4]
 80e2628:	685b      	ldr	r3, [r3, #4]
 80e262a:	f003 0301 	and.w	r3, r3, #1
 80e262e:	2b00      	cmp	r3, #0
 80e2630:	d00c      	beq.n	80e264c <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80e2632:	2101      	movs	r1, #1
 80e2634:	f24c 3050 	movw	r0, #50000	; 0xc350
 80e2638:	f7ff ff46 	bl	80e24c8 <FLASH_WaitForLastOperation>
 80e263c:	4603      	mov	r3, r0
 80e263e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80e2640:	4b10      	ldr	r3, [pc, #64]	; (80e2684 <HAL_FLASHEx_Erase+0x110>)
 80e2642:	68da      	ldr	r2, [r3, #12]
 80e2644:	490f      	ldr	r1, [pc, #60]	; (80e2684 <HAL_FLASHEx_Erase+0x110>)
 80e2646:	4b10      	ldr	r3, [pc, #64]	; (80e2688 <HAL_FLASHEx_Erase+0x114>)
 80e2648:	4013      	ands	r3, r2
 80e264a:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80e264c:	7bfb      	ldrb	r3, [r7, #15]
 80e264e:	2b00      	cmp	r3, #0
 80e2650:	d003      	beq.n	80e265a <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80e2652:	683b      	ldr	r3, [r7, #0]
 80e2654:	68ba      	ldr	r2, [r7, #8]
 80e2656:	601a      	str	r2, [r3, #0]
          break;
 80e2658:	e00a      	b.n	80e2670 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80e265a:	68bb      	ldr	r3, [r7, #8]
 80e265c:	3301      	adds	r3, #1
 80e265e:	60bb      	str	r3, [r7, #8]
 80e2660:	687b      	ldr	r3, [r7, #4]
 80e2662:	68da      	ldr	r2, [r3, #12]
 80e2664:	687b      	ldr	r3, [r7, #4]
 80e2666:	689b      	ldr	r3, [r3, #8]
 80e2668:	4413      	add	r3, r2
 80e266a:	68ba      	ldr	r2, [r7, #8]
 80e266c:	429a      	cmp	r2, r3
 80e266e:	d3d2      	bcc.n	80e2616 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80e2670:	4b03      	ldr	r3, [pc, #12]	; (80e2680 <HAL_FLASHEx_Erase+0x10c>)
 80e2672:	2200      	movs	r2, #0
 80e2674:	751a      	strb	r2, [r3, #20]

  return status;
 80e2676:	7bfb      	ldrb	r3, [r7, #15]
}
 80e2678:	4618      	mov	r0, r3
 80e267a:	3710      	adds	r7, #16
 80e267c:	46bd      	mov	sp, r7
 80e267e:	bd80      	pop	{r7, pc}
 80e2680:	2400017c 	.word	0x2400017c
 80e2684:	52002000 	.word	0x52002000
 80e2688:	fffff8fb 	.word	0xfffff8fb

080e268c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80e268c:	b480      	push	{r7}
 80e268e:	b083      	sub	sp, #12
 80e2690:	af00      	add	r7, sp, #0
 80e2692:	6078      	str	r0, [r7, #4]
 80e2694:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80e2696:	683b      	ldr	r3, [r7, #0]
 80e2698:	f003 0301 	and.w	r3, r3, #1
 80e269c:	2b00      	cmp	r3, #0
 80e269e:	d011      	beq.n	80e26c4 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80e26a0:	4b0b      	ldr	r3, [pc, #44]	; (80e26d0 <FLASH_MassErase+0x44>)
 80e26a2:	68db      	ldr	r3, [r3, #12]
 80e26a4:	4a0a      	ldr	r2, [pc, #40]	; (80e26d0 <FLASH_MassErase+0x44>)
 80e26a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80e26aa:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 80e26ac:	4b08      	ldr	r3, [pc, #32]	; (80e26d0 <FLASH_MassErase+0x44>)
 80e26ae:	68da      	ldr	r2, [r3, #12]
 80e26b0:	4907      	ldr	r1, [pc, #28]	; (80e26d0 <FLASH_MassErase+0x44>)
 80e26b2:	687b      	ldr	r3, [r7, #4]
 80e26b4:	4313      	orrs	r3, r2
 80e26b6:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 80e26b8:	4b05      	ldr	r3, [pc, #20]	; (80e26d0 <FLASH_MassErase+0x44>)
 80e26ba:	68db      	ldr	r3, [r3, #12]
 80e26bc:	4a04      	ldr	r2, [pc, #16]	; (80e26d0 <FLASH_MassErase+0x44>)
 80e26be:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80e26c2:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80e26c4:	bf00      	nop
 80e26c6:	370c      	adds	r7, #12
 80e26c8:	46bd      	mov	sp, r7
 80e26ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e26ce:	4770      	bx	lr
 80e26d0:	52002000 	.word	0x52002000

080e26d4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80e26d4:	b480      	push	{r7}
 80e26d6:	b085      	sub	sp, #20
 80e26d8:	af00      	add	r7, sp, #0
 80e26da:	60f8      	str	r0, [r7, #12]
 80e26dc:	60b9      	str	r1, [r7, #8]
 80e26de:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80e26e0:	68bb      	ldr	r3, [r7, #8]
 80e26e2:	f003 0301 	and.w	r3, r3, #1
 80e26e6:	2b00      	cmp	r3, #0
 80e26e8:	d010      	beq.n	80e270c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80e26ea:	4b0b      	ldr	r3, [pc, #44]	; (80e2718 <FLASH_Erase_Sector+0x44>)
 80e26ec:	68db      	ldr	r3, [r3, #12]
 80e26ee:	4a0a      	ldr	r2, [pc, #40]	; (80e2718 <FLASH_Erase_Sector+0x44>)
 80e26f0:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80e26f4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80e26f6:	4b08      	ldr	r3, [pc, #32]	; (80e2718 <FLASH_Erase_Sector+0x44>)
 80e26f8:	68da      	ldr	r2, [r3, #12]
 80e26fa:	68fb      	ldr	r3, [r7, #12]
 80e26fc:	0219      	lsls	r1, r3, #8
 80e26fe:	687b      	ldr	r3, [r7, #4]
 80e2700:	430b      	orrs	r3, r1
 80e2702:	4313      	orrs	r3, r2
 80e2704:	4a04      	ldr	r2, [pc, #16]	; (80e2718 <FLASH_Erase_Sector+0x44>)
 80e2706:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80e270a:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80e270c:	bf00      	nop
 80e270e:	3714      	adds	r7, #20
 80e2710:	46bd      	mov	sp, r7
 80e2712:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2716:	4770      	bx	lr
 80e2718:	52002000 	.word	0x52002000

080e271c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80e271c:	b480      	push	{r7}
 80e271e:	b089      	sub	sp, #36	; 0x24
 80e2720:	af00      	add	r7, sp, #0
 80e2722:	6078      	str	r0, [r7, #4]
 80e2724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80e2726:	2300      	movs	r3, #0
 80e2728:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80e272a:	4b86      	ldr	r3, [pc, #536]	; (80e2944 <HAL_GPIO_Init+0x228>)
 80e272c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80e272e:	e18c      	b.n	80e2a4a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80e2730:	683b      	ldr	r3, [r7, #0]
 80e2732:	681a      	ldr	r2, [r3, #0]
 80e2734:	2101      	movs	r1, #1
 80e2736:	69fb      	ldr	r3, [r7, #28]
 80e2738:	fa01 f303 	lsl.w	r3, r1, r3
 80e273c:	4013      	ands	r3, r2
 80e273e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80e2740:	693b      	ldr	r3, [r7, #16]
 80e2742:	2b00      	cmp	r3, #0
 80e2744:	f000 817e 	beq.w	80e2a44 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80e2748:	683b      	ldr	r3, [r7, #0]
 80e274a:	685b      	ldr	r3, [r3, #4]
 80e274c:	f003 0303 	and.w	r3, r3, #3
 80e2750:	2b01      	cmp	r3, #1
 80e2752:	d005      	beq.n	80e2760 <HAL_GPIO_Init+0x44>
 80e2754:	683b      	ldr	r3, [r7, #0]
 80e2756:	685b      	ldr	r3, [r3, #4]
 80e2758:	f003 0303 	and.w	r3, r3, #3
 80e275c:	2b02      	cmp	r3, #2
 80e275e:	d130      	bne.n	80e27c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80e2760:	687b      	ldr	r3, [r7, #4]
 80e2762:	689b      	ldr	r3, [r3, #8]
 80e2764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80e2766:	69fb      	ldr	r3, [r7, #28]
 80e2768:	005b      	lsls	r3, r3, #1
 80e276a:	2203      	movs	r2, #3
 80e276c:	fa02 f303 	lsl.w	r3, r2, r3
 80e2770:	43db      	mvns	r3, r3
 80e2772:	69ba      	ldr	r2, [r7, #24]
 80e2774:	4013      	ands	r3, r2
 80e2776:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80e2778:	683b      	ldr	r3, [r7, #0]
 80e277a:	68da      	ldr	r2, [r3, #12]
 80e277c:	69fb      	ldr	r3, [r7, #28]
 80e277e:	005b      	lsls	r3, r3, #1
 80e2780:	fa02 f303 	lsl.w	r3, r2, r3
 80e2784:	69ba      	ldr	r2, [r7, #24]
 80e2786:	4313      	orrs	r3, r2
 80e2788:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80e278a:	687b      	ldr	r3, [r7, #4]
 80e278c:	69ba      	ldr	r2, [r7, #24]
 80e278e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80e2790:	687b      	ldr	r3, [r7, #4]
 80e2792:	685b      	ldr	r3, [r3, #4]
 80e2794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80e2796:	2201      	movs	r2, #1
 80e2798:	69fb      	ldr	r3, [r7, #28]
 80e279a:	fa02 f303 	lsl.w	r3, r2, r3
 80e279e:	43db      	mvns	r3, r3
 80e27a0:	69ba      	ldr	r2, [r7, #24]
 80e27a2:	4013      	ands	r3, r2
 80e27a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80e27a6:	683b      	ldr	r3, [r7, #0]
 80e27a8:	685b      	ldr	r3, [r3, #4]
 80e27aa:	091b      	lsrs	r3, r3, #4
 80e27ac:	f003 0201 	and.w	r2, r3, #1
 80e27b0:	69fb      	ldr	r3, [r7, #28]
 80e27b2:	fa02 f303 	lsl.w	r3, r2, r3
 80e27b6:	69ba      	ldr	r2, [r7, #24]
 80e27b8:	4313      	orrs	r3, r2
 80e27ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80e27bc:	687b      	ldr	r3, [r7, #4]
 80e27be:	69ba      	ldr	r2, [r7, #24]
 80e27c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80e27c2:	683b      	ldr	r3, [r7, #0]
 80e27c4:	685b      	ldr	r3, [r3, #4]
 80e27c6:	f003 0303 	and.w	r3, r3, #3
 80e27ca:	2b03      	cmp	r3, #3
 80e27cc:	d017      	beq.n	80e27fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80e27ce:	687b      	ldr	r3, [r7, #4]
 80e27d0:	68db      	ldr	r3, [r3, #12]
 80e27d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80e27d4:	69fb      	ldr	r3, [r7, #28]
 80e27d6:	005b      	lsls	r3, r3, #1
 80e27d8:	2203      	movs	r2, #3
 80e27da:	fa02 f303 	lsl.w	r3, r2, r3
 80e27de:	43db      	mvns	r3, r3
 80e27e0:	69ba      	ldr	r2, [r7, #24]
 80e27e2:	4013      	ands	r3, r2
 80e27e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80e27e6:	683b      	ldr	r3, [r7, #0]
 80e27e8:	689a      	ldr	r2, [r3, #8]
 80e27ea:	69fb      	ldr	r3, [r7, #28]
 80e27ec:	005b      	lsls	r3, r3, #1
 80e27ee:	fa02 f303 	lsl.w	r3, r2, r3
 80e27f2:	69ba      	ldr	r2, [r7, #24]
 80e27f4:	4313      	orrs	r3, r2
 80e27f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80e27f8:	687b      	ldr	r3, [r7, #4]
 80e27fa:	69ba      	ldr	r2, [r7, #24]
 80e27fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80e27fe:	683b      	ldr	r3, [r7, #0]
 80e2800:	685b      	ldr	r3, [r3, #4]
 80e2802:	f003 0303 	and.w	r3, r3, #3
 80e2806:	2b02      	cmp	r3, #2
 80e2808:	d123      	bne.n	80e2852 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80e280a:	69fb      	ldr	r3, [r7, #28]
 80e280c:	08da      	lsrs	r2, r3, #3
 80e280e:	687b      	ldr	r3, [r7, #4]
 80e2810:	3208      	adds	r2, #8
 80e2812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80e2816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80e2818:	69fb      	ldr	r3, [r7, #28]
 80e281a:	f003 0307 	and.w	r3, r3, #7
 80e281e:	009b      	lsls	r3, r3, #2
 80e2820:	220f      	movs	r2, #15
 80e2822:	fa02 f303 	lsl.w	r3, r2, r3
 80e2826:	43db      	mvns	r3, r3
 80e2828:	69ba      	ldr	r2, [r7, #24]
 80e282a:	4013      	ands	r3, r2
 80e282c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80e282e:	683b      	ldr	r3, [r7, #0]
 80e2830:	691a      	ldr	r2, [r3, #16]
 80e2832:	69fb      	ldr	r3, [r7, #28]
 80e2834:	f003 0307 	and.w	r3, r3, #7
 80e2838:	009b      	lsls	r3, r3, #2
 80e283a:	fa02 f303 	lsl.w	r3, r2, r3
 80e283e:	69ba      	ldr	r2, [r7, #24]
 80e2840:	4313      	orrs	r3, r2
 80e2842:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80e2844:	69fb      	ldr	r3, [r7, #28]
 80e2846:	08da      	lsrs	r2, r3, #3
 80e2848:	687b      	ldr	r3, [r7, #4]
 80e284a:	3208      	adds	r2, #8
 80e284c:	69b9      	ldr	r1, [r7, #24]
 80e284e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80e2852:	687b      	ldr	r3, [r7, #4]
 80e2854:	681b      	ldr	r3, [r3, #0]
 80e2856:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80e2858:	69fb      	ldr	r3, [r7, #28]
 80e285a:	005b      	lsls	r3, r3, #1
 80e285c:	2203      	movs	r2, #3
 80e285e:	fa02 f303 	lsl.w	r3, r2, r3
 80e2862:	43db      	mvns	r3, r3
 80e2864:	69ba      	ldr	r2, [r7, #24]
 80e2866:	4013      	ands	r3, r2
 80e2868:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80e286a:	683b      	ldr	r3, [r7, #0]
 80e286c:	685b      	ldr	r3, [r3, #4]
 80e286e:	f003 0203 	and.w	r2, r3, #3
 80e2872:	69fb      	ldr	r3, [r7, #28]
 80e2874:	005b      	lsls	r3, r3, #1
 80e2876:	fa02 f303 	lsl.w	r3, r2, r3
 80e287a:	69ba      	ldr	r2, [r7, #24]
 80e287c:	4313      	orrs	r3, r2
 80e287e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80e2880:	687b      	ldr	r3, [r7, #4]
 80e2882:	69ba      	ldr	r2, [r7, #24]
 80e2884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80e2886:	683b      	ldr	r3, [r7, #0]
 80e2888:	685b      	ldr	r3, [r3, #4]
 80e288a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80e288e:	2b00      	cmp	r3, #0
 80e2890:	f000 80d8 	beq.w	80e2a44 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80e2894:	4b2c      	ldr	r3, [pc, #176]	; (80e2948 <HAL_GPIO_Init+0x22c>)
 80e2896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e289a:	4a2b      	ldr	r2, [pc, #172]	; (80e2948 <HAL_GPIO_Init+0x22c>)
 80e289c:	f043 0302 	orr.w	r3, r3, #2
 80e28a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80e28a4:	4b28      	ldr	r3, [pc, #160]	; (80e2948 <HAL_GPIO_Init+0x22c>)
 80e28a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e28aa:	f003 0302 	and.w	r3, r3, #2
 80e28ae:	60fb      	str	r3, [r7, #12]
 80e28b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80e28b2:	4a26      	ldr	r2, [pc, #152]	; (80e294c <HAL_GPIO_Init+0x230>)
 80e28b4:	69fb      	ldr	r3, [r7, #28]
 80e28b6:	089b      	lsrs	r3, r3, #2
 80e28b8:	3302      	adds	r3, #2
 80e28ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80e28be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80e28c0:	69fb      	ldr	r3, [r7, #28]
 80e28c2:	f003 0303 	and.w	r3, r3, #3
 80e28c6:	009b      	lsls	r3, r3, #2
 80e28c8:	220f      	movs	r2, #15
 80e28ca:	fa02 f303 	lsl.w	r3, r2, r3
 80e28ce:	43db      	mvns	r3, r3
 80e28d0:	69ba      	ldr	r2, [r7, #24]
 80e28d2:	4013      	ands	r3, r2
 80e28d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80e28d6:	687b      	ldr	r3, [r7, #4]
 80e28d8:	4a1d      	ldr	r2, [pc, #116]	; (80e2950 <HAL_GPIO_Init+0x234>)
 80e28da:	4293      	cmp	r3, r2
 80e28dc:	d04a      	beq.n	80e2974 <HAL_GPIO_Init+0x258>
 80e28de:	687b      	ldr	r3, [r7, #4]
 80e28e0:	4a1c      	ldr	r2, [pc, #112]	; (80e2954 <HAL_GPIO_Init+0x238>)
 80e28e2:	4293      	cmp	r3, r2
 80e28e4:	d02b      	beq.n	80e293e <HAL_GPIO_Init+0x222>
 80e28e6:	687b      	ldr	r3, [r7, #4]
 80e28e8:	4a1b      	ldr	r2, [pc, #108]	; (80e2958 <HAL_GPIO_Init+0x23c>)
 80e28ea:	4293      	cmp	r3, r2
 80e28ec:	d025      	beq.n	80e293a <HAL_GPIO_Init+0x21e>
 80e28ee:	687b      	ldr	r3, [r7, #4]
 80e28f0:	4a1a      	ldr	r2, [pc, #104]	; (80e295c <HAL_GPIO_Init+0x240>)
 80e28f2:	4293      	cmp	r3, r2
 80e28f4:	d01f      	beq.n	80e2936 <HAL_GPIO_Init+0x21a>
 80e28f6:	687b      	ldr	r3, [r7, #4]
 80e28f8:	4a19      	ldr	r2, [pc, #100]	; (80e2960 <HAL_GPIO_Init+0x244>)
 80e28fa:	4293      	cmp	r3, r2
 80e28fc:	d019      	beq.n	80e2932 <HAL_GPIO_Init+0x216>
 80e28fe:	687b      	ldr	r3, [r7, #4]
 80e2900:	4a18      	ldr	r2, [pc, #96]	; (80e2964 <HAL_GPIO_Init+0x248>)
 80e2902:	4293      	cmp	r3, r2
 80e2904:	d013      	beq.n	80e292e <HAL_GPIO_Init+0x212>
 80e2906:	687b      	ldr	r3, [r7, #4]
 80e2908:	4a17      	ldr	r2, [pc, #92]	; (80e2968 <HAL_GPIO_Init+0x24c>)
 80e290a:	4293      	cmp	r3, r2
 80e290c:	d00d      	beq.n	80e292a <HAL_GPIO_Init+0x20e>
 80e290e:	687b      	ldr	r3, [r7, #4]
 80e2910:	4a16      	ldr	r2, [pc, #88]	; (80e296c <HAL_GPIO_Init+0x250>)
 80e2912:	4293      	cmp	r3, r2
 80e2914:	d007      	beq.n	80e2926 <HAL_GPIO_Init+0x20a>
 80e2916:	687b      	ldr	r3, [r7, #4]
 80e2918:	4a15      	ldr	r2, [pc, #84]	; (80e2970 <HAL_GPIO_Init+0x254>)
 80e291a:	4293      	cmp	r3, r2
 80e291c:	d101      	bne.n	80e2922 <HAL_GPIO_Init+0x206>
 80e291e:	2309      	movs	r3, #9
 80e2920:	e029      	b.n	80e2976 <HAL_GPIO_Init+0x25a>
 80e2922:	230a      	movs	r3, #10
 80e2924:	e027      	b.n	80e2976 <HAL_GPIO_Init+0x25a>
 80e2926:	2307      	movs	r3, #7
 80e2928:	e025      	b.n	80e2976 <HAL_GPIO_Init+0x25a>
 80e292a:	2306      	movs	r3, #6
 80e292c:	e023      	b.n	80e2976 <HAL_GPIO_Init+0x25a>
 80e292e:	2305      	movs	r3, #5
 80e2930:	e021      	b.n	80e2976 <HAL_GPIO_Init+0x25a>
 80e2932:	2304      	movs	r3, #4
 80e2934:	e01f      	b.n	80e2976 <HAL_GPIO_Init+0x25a>
 80e2936:	2303      	movs	r3, #3
 80e2938:	e01d      	b.n	80e2976 <HAL_GPIO_Init+0x25a>
 80e293a:	2302      	movs	r3, #2
 80e293c:	e01b      	b.n	80e2976 <HAL_GPIO_Init+0x25a>
 80e293e:	2301      	movs	r3, #1
 80e2940:	e019      	b.n	80e2976 <HAL_GPIO_Init+0x25a>
 80e2942:	bf00      	nop
 80e2944:	58000080 	.word	0x58000080
 80e2948:	58024400 	.word	0x58024400
 80e294c:	58000400 	.word	0x58000400
 80e2950:	58020000 	.word	0x58020000
 80e2954:	58020400 	.word	0x58020400
 80e2958:	58020800 	.word	0x58020800
 80e295c:	58020c00 	.word	0x58020c00
 80e2960:	58021000 	.word	0x58021000
 80e2964:	58021400 	.word	0x58021400
 80e2968:	58021800 	.word	0x58021800
 80e296c:	58021c00 	.word	0x58021c00
 80e2970:	58022400 	.word	0x58022400
 80e2974:	2300      	movs	r3, #0
 80e2976:	69fa      	ldr	r2, [r7, #28]
 80e2978:	f002 0203 	and.w	r2, r2, #3
 80e297c:	0092      	lsls	r2, r2, #2
 80e297e:	4093      	lsls	r3, r2
 80e2980:	69ba      	ldr	r2, [r7, #24]
 80e2982:	4313      	orrs	r3, r2
 80e2984:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80e2986:	4938      	ldr	r1, [pc, #224]	; (80e2a68 <HAL_GPIO_Init+0x34c>)
 80e2988:	69fb      	ldr	r3, [r7, #28]
 80e298a:	089b      	lsrs	r3, r3, #2
 80e298c:	3302      	adds	r3, #2
 80e298e:	69ba      	ldr	r2, [r7, #24]
 80e2990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80e2994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80e2998:	681b      	ldr	r3, [r3, #0]
 80e299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e299c:	693b      	ldr	r3, [r7, #16]
 80e299e:	43db      	mvns	r3, r3
 80e29a0:	69ba      	ldr	r2, [r7, #24]
 80e29a2:	4013      	ands	r3, r2
 80e29a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80e29a6:	683b      	ldr	r3, [r7, #0]
 80e29a8:	685b      	ldr	r3, [r3, #4]
 80e29aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80e29ae:	2b00      	cmp	r3, #0
 80e29b0:	d003      	beq.n	80e29ba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80e29b2:	69ba      	ldr	r2, [r7, #24]
 80e29b4:	693b      	ldr	r3, [r7, #16]
 80e29b6:	4313      	orrs	r3, r2
 80e29b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80e29ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80e29be:	69bb      	ldr	r3, [r7, #24]
 80e29c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80e29c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80e29c6:	685b      	ldr	r3, [r3, #4]
 80e29c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e29ca:	693b      	ldr	r3, [r7, #16]
 80e29cc:	43db      	mvns	r3, r3
 80e29ce:	69ba      	ldr	r2, [r7, #24]
 80e29d0:	4013      	ands	r3, r2
 80e29d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80e29d4:	683b      	ldr	r3, [r7, #0]
 80e29d6:	685b      	ldr	r3, [r3, #4]
 80e29d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e29dc:	2b00      	cmp	r3, #0
 80e29de:	d003      	beq.n	80e29e8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80e29e0:	69ba      	ldr	r2, [r7, #24]
 80e29e2:	693b      	ldr	r3, [r7, #16]
 80e29e4:	4313      	orrs	r3, r2
 80e29e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80e29e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80e29ec:	69bb      	ldr	r3, [r7, #24]
 80e29ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80e29f0:	697b      	ldr	r3, [r7, #20]
 80e29f2:	685b      	ldr	r3, [r3, #4]
 80e29f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e29f6:	693b      	ldr	r3, [r7, #16]
 80e29f8:	43db      	mvns	r3, r3
 80e29fa:	69ba      	ldr	r2, [r7, #24]
 80e29fc:	4013      	ands	r3, r2
 80e29fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80e2a00:	683b      	ldr	r3, [r7, #0]
 80e2a02:	685b      	ldr	r3, [r3, #4]
 80e2a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e2a08:	2b00      	cmp	r3, #0
 80e2a0a:	d003      	beq.n	80e2a14 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80e2a0c:	69ba      	ldr	r2, [r7, #24]
 80e2a0e:	693b      	ldr	r3, [r7, #16]
 80e2a10:	4313      	orrs	r3, r2
 80e2a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80e2a14:	697b      	ldr	r3, [r7, #20]
 80e2a16:	69ba      	ldr	r2, [r7, #24]
 80e2a18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80e2a1a:	697b      	ldr	r3, [r7, #20]
 80e2a1c:	681b      	ldr	r3, [r3, #0]
 80e2a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e2a20:	693b      	ldr	r3, [r7, #16]
 80e2a22:	43db      	mvns	r3, r3
 80e2a24:	69ba      	ldr	r2, [r7, #24]
 80e2a26:	4013      	ands	r3, r2
 80e2a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80e2a2a:	683b      	ldr	r3, [r7, #0]
 80e2a2c:	685b      	ldr	r3, [r3, #4]
 80e2a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80e2a32:	2b00      	cmp	r3, #0
 80e2a34:	d003      	beq.n	80e2a3e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80e2a36:	69ba      	ldr	r2, [r7, #24]
 80e2a38:	693b      	ldr	r3, [r7, #16]
 80e2a3a:	4313      	orrs	r3, r2
 80e2a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80e2a3e:	697b      	ldr	r3, [r7, #20]
 80e2a40:	69ba      	ldr	r2, [r7, #24]
 80e2a42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80e2a44:	69fb      	ldr	r3, [r7, #28]
 80e2a46:	3301      	adds	r3, #1
 80e2a48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80e2a4a:	683b      	ldr	r3, [r7, #0]
 80e2a4c:	681a      	ldr	r2, [r3, #0]
 80e2a4e:	69fb      	ldr	r3, [r7, #28]
 80e2a50:	fa22 f303 	lsr.w	r3, r2, r3
 80e2a54:	2b00      	cmp	r3, #0
 80e2a56:	f47f ae6b 	bne.w	80e2730 <HAL_GPIO_Init+0x14>
  }
}
 80e2a5a:	bf00      	nop
 80e2a5c:	bf00      	nop
 80e2a5e:	3724      	adds	r7, #36	; 0x24
 80e2a60:	46bd      	mov	sp, r7
 80e2a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2a66:	4770      	bx	lr
 80e2a68:	58000400 	.word	0x58000400

080e2a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80e2a6c:	b480      	push	{r7}
 80e2a6e:	b083      	sub	sp, #12
 80e2a70:	af00      	add	r7, sp, #0
 80e2a72:	6078      	str	r0, [r7, #4]
 80e2a74:	460b      	mov	r3, r1
 80e2a76:	807b      	strh	r3, [r7, #2]
 80e2a78:	4613      	mov	r3, r2
 80e2a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80e2a7c:	787b      	ldrb	r3, [r7, #1]
 80e2a7e:	2b00      	cmp	r3, #0
 80e2a80:	d003      	beq.n	80e2a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80e2a82:	887a      	ldrh	r2, [r7, #2]
 80e2a84:	687b      	ldr	r3, [r7, #4]
 80e2a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80e2a88:	e003      	b.n	80e2a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80e2a8a:	887b      	ldrh	r3, [r7, #2]
 80e2a8c:	041a      	lsls	r2, r3, #16
 80e2a8e:	687b      	ldr	r3, [r7, #4]
 80e2a90:	619a      	str	r2, [r3, #24]
}
 80e2a92:	bf00      	nop
 80e2a94:	370c      	adds	r7, #12
 80e2a96:	46bd      	mov	sp, r7
 80e2a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2a9c:	4770      	bx	lr

080e2a9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80e2a9e:	b480      	push	{r7}
 80e2aa0:	b085      	sub	sp, #20
 80e2aa2:	af00      	add	r7, sp, #0
 80e2aa4:	6078      	str	r0, [r7, #4]
 80e2aa6:	460b      	mov	r3, r1
 80e2aa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80e2aaa:	687b      	ldr	r3, [r7, #4]
 80e2aac:	695b      	ldr	r3, [r3, #20]
 80e2aae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80e2ab0:	887a      	ldrh	r2, [r7, #2]
 80e2ab2:	68fb      	ldr	r3, [r7, #12]
 80e2ab4:	4013      	ands	r3, r2
 80e2ab6:	041a      	lsls	r2, r3, #16
 80e2ab8:	68fb      	ldr	r3, [r7, #12]
 80e2aba:	43d9      	mvns	r1, r3
 80e2abc:	887b      	ldrh	r3, [r7, #2]
 80e2abe:	400b      	ands	r3, r1
 80e2ac0:	431a      	orrs	r2, r3
 80e2ac2:	687b      	ldr	r3, [r7, #4]
 80e2ac4:	619a      	str	r2, [r3, #24]
}
 80e2ac6:	bf00      	nop
 80e2ac8:	3714      	adds	r7, #20
 80e2aca:	46bd      	mov	sp, r7
 80e2acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2ad0:	4770      	bx	lr
	...

080e2ad4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80e2ad4:	b580      	push	{r7, lr}
 80e2ad6:	b084      	sub	sp, #16
 80e2ad8:	af00      	add	r7, sp, #0
 80e2ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80e2adc:	4b19      	ldr	r3, [pc, #100]	; (80e2b44 <HAL_PWREx_ConfigSupply+0x70>)
 80e2ade:	68db      	ldr	r3, [r3, #12]
 80e2ae0:	f003 0304 	and.w	r3, r3, #4
 80e2ae4:	2b04      	cmp	r3, #4
 80e2ae6:	d00a      	beq.n	80e2afe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80e2ae8:	4b16      	ldr	r3, [pc, #88]	; (80e2b44 <HAL_PWREx_ConfigSupply+0x70>)
 80e2aea:	68db      	ldr	r3, [r3, #12]
 80e2aec:	f003 0307 	and.w	r3, r3, #7
 80e2af0:	687a      	ldr	r2, [r7, #4]
 80e2af2:	429a      	cmp	r2, r3
 80e2af4:	d001      	beq.n	80e2afa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80e2af6:	2301      	movs	r3, #1
 80e2af8:	e01f      	b.n	80e2b3a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80e2afa:	2300      	movs	r3, #0
 80e2afc:	e01d      	b.n	80e2b3a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80e2afe:	4b11      	ldr	r3, [pc, #68]	; (80e2b44 <HAL_PWREx_ConfigSupply+0x70>)
 80e2b00:	68db      	ldr	r3, [r3, #12]
 80e2b02:	f023 0207 	bic.w	r2, r3, #7
 80e2b06:	490f      	ldr	r1, [pc, #60]	; (80e2b44 <HAL_PWREx_ConfigSupply+0x70>)
 80e2b08:	687b      	ldr	r3, [r7, #4]
 80e2b0a:	4313      	orrs	r3, r2
 80e2b0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80e2b0e:	f7fe fcf3 	bl	80e14f8 <HAL_GetTick>
 80e2b12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80e2b14:	e009      	b.n	80e2b2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80e2b16:	f7fe fcef 	bl	80e14f8 <HAL_GetTick>
 80e2b1a:	4602      	mov	r2, r0
 80e2b1c:	68fb      	ldr	r3, [r7, #12]
 80e2b1e:	1ad3      	subs	r3, r2, r3
 80e2b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80e2b24:	d901      	bls.n	80e2b2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80e2b26:	2301      	movs	r3, #1
 80e2b28:	e007      	b.n	80e2b3a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80e2b2a:	4b06      	ldr	r3, [pc, #24]	; (80e2b44 <HAL_PWREx_ConfigSupply+0x70>)
 80e2b2c:	685b      	ldr	r3, [r3, #4]
 80e2b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e2b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e2b36:	d1ee      	bne.n	80e2b16 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80e2b38:	2300      	movs	r3, #0
}
 80e2b3a:	4618      	mov	r0, r3
 80e2b3c:	3710      	adds	r7, #16
 80e2b3e:	46bd      	mov	sp, r7
 80e2b40:	bd80      	pop	{r7, pc}
 80e2b42:	bf00      	nop
 80e2b44:	58024800 	.word	0x58024800

080e2b48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80e2b48:	b580      	push	{r7, lr}
 80e2b4a:	b08c      	sub	sp, #48	; 0x30
 80e2b4c:	af00      	add	r7, sp, #0
 80e2b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80e2b50:	687b      	ldr	r3, [r7, #4]
 80e2b52:	2b00      	cmp	r3, #0
 80e2b54:	d101      	bne.n	80e2b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80e2b56:	2301      	movs	r3, #1
 80e2b58:	e39d      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80e2b5a:	687b      	ldr	r3, [r7, #4]
 80e2b5c:	681b      	ldr	r3, [r3, #0]
 80e2b5e:	f003 0301 	and.w	r3, r3, #1
 80e2b62:	2b00      	cmp	r3, #0
 80e2b64:	f000 8087 	beq.w	80e2c76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e2b68:	4b88      	ldr	r3, [pc, #544]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2b6a:	691b      	ldr	r3, [r3, #16]
 80e2b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e2b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e2b72:	4b86      	ldr	r3, [pc, #536]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2b76:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80e2b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80e2b7a:	2b10      	cmp	r3, #16
 80e2b7c:	d007      	beq.n	80e2b8e <HAL_RCC_OscConfig+0x46>
 80e2b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80e2b80:	2b18      	cmp	r3, #24
 80e2b82:	d110      	bne.n	80e2ba6 <HAL_RCC_OscConfig+0x5e>
 80e2b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80e2b86:	f003 0303 	and.w	r3, r3, #3
 80e2b8a:	2b02      	cmp	r3, #2
 80e2b8c:	d10b      	bne.n	80e2ba6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80e2b8e:	4b7f      	ldr	r3, [pc, #508]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2b90:	681b      	ldr	r3, [r3, #0]
 80e2b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e2b96:	2b00      	cmp	r3, #0
 80e2b98:	d06c      	beq.n	80e2c74 <HAL_RCC_OscConfig+0x12c>
 80e2b9a:	687b      	ldr	r3, [r7, #4]
 80e2b9c:	685b      	ldr	r3, [r3, #4]
 80e2b9e:	2b00      	cmp	r3, #0
 80e2ba0:	d168      	bne.n	80e2c74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80e2ba2:	2301      	movs	r3, #1
 80e2ba4:	e377      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80e2ba6:	687b      	ldr	r3, [r7, #4]
 80e2ba8:	685b      	ldr	r3, [r3, #4]
 80e2baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e2bae:	d106      	bne.n	80e2bbe <HAL_RCC_OscConfig+0x76>
 80e2bb0:	4b76      	ldr	r3, [pc, #472]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2bb2:	681b      	ldr	r3, [r3, #0]
 80e2bb4:	4a75      	ldr	r2, [pc, #468]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e2bba:	6013      	str	r3, [r2, #0]
 80e2bbc:	e02e      	b.n	80e2c1c <HAL_RCC_OscConfig+0xd4>
 80e2bbe:	687b      	ldr	r3, [r7, #4]
 80e2bc0:	685b      	ldr	r3, [r3, #4]
 80e2bc2:	2b00      	cmp	r3, #0
 80e2bc4:	d10c      	bne.n	80e2be0 <HAL_RCC_OscConfig+0x98>
 80e2bc6:	4b71      	ldr	r3, [pc, #452]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2bc8:	681b      	ldr	r3, [r3, #0]
 80e2bca:	4a70      	ldr	r2, [pc, #448]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e2bd0:	6013      	str	r3, [r2, #0]
 80e2bd2:	4b6e      	ldr	r3, [pc, #440]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2bd4:	681b      	ldr	r3, [r3, #0]
 80e2bd6:	4a6d      	ldr	r2, [pc, #436]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e2bdc:	6013      	str	r3, [r2, #0]
 80e2bde:	e01d      	b.n	80e2c1c <HAL_RCC_OscConfig+0xd4>
 80e2be0:	687b      	ldr	r3, [r7, #4]
 80e2be2:	685b      	ldr	r3, [r3, #4]
 80e2be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e2be8:	d10c      	bne.n	80e2c04 <HAL_RCC_OscConfig+0xbc>
 80e2bea:	4b68      	ldr	r3, [pc, #416]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2bec:	681b      	ldr	r3, [r3, #0]
 80e2bee:	4a67      	ldr	r2, [pc, #412]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80e2bf4:	6013      	str	r3, [r2, #0]
 80e2bf6:	4b65      	ldr	r3, [pc, #404]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2bf8:	681b      	ldr	r3, [r3, #0]
 80e2bfa:	4a64      	ldr	r2, [pc, #400]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e2c00:	6013      	str	r3, [r2, #0]
 80e2c02:	e00b      	b.n	80e2c1c <HAL_RCC_OscConfig+0xd4>
 80e2c04:	4b61      	ldr	r3, [pc, #388]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2c06:	681b      	ldr	r3, [r3, #0]
 80e2c08:	4a60      	ldr	r2, [pc, #384]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e2c0e:	6013      	str	r3, [r2, #0]
 80e2c10:	4b5e      	ldr	r3, [pc, #376]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2c12:	681b      	ldr	r3, [r3, #0]
 80e2c14:	4a5d      	ldr	r2, [pc, #372]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e2c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80e2c1c:	687b      	ldr	r3, [r7, #4]
 80e2c1e:	685b      	ldr	r3, [r3, #4]
 80e2c20:	2b00      	cmp	r3, #0
 80e2c22:	d013      	beq.n	80e2c4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2c24:	f7fe fc68 	bl	80e14f8 <HAL_GetTick>
 80e2c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e2c2a:	e008      	b.n	80e2c3e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80e2c2c:	f7fe fc64 	bl	80e14f8 <HAL_GetTick>
 80e2c30:	4602      	mov	r2, r0
 80e2c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2c34:	1ad3      	subs	r3, r2, r3
 80e2c36:	2b64      	cmp	r3, #100	; 0x64
 80e2c38:	d901      	bls.n	80e2c3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80e2c3a:	2303      	movs	r3, #3
 80e2c3c:	e32b      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e2c3e:	4b53      	ldr	r3, [pc, #332]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2c40:	681b      	ldr	r3, [r3, #0]
 80e2c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e2c46:	2b00      	cmp	r3, #0
 80e2c48:	d0f0      	beq.n	80e2c2c <HAL_RCC_OscConfig+0xe4>
 80e2c4a:	e014      	b.n	80e2c76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2c4c:	f7fe fc54 	bl	80e14f8 <HAL_GetTick>
 80e2c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80e2c52:	e008      	b.n	80e2c66 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80e2c54:	f7fe fc50 	bl	80e14f8 <HAL_GetTick>
 80e2c58:	4602      	mov	r2, r0
 80e2c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2c5c:	1ad3      	subs	r3, r2, r3
 80e2c5e:	2b64      	cmp	r3, #100	; 0x64
 80e2c60:	d901      	bls.n	80e2c66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80e2c62:	2303      	movs	r3, #3
 80e2c64:	e317      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80e2c66:	4b49      	ldr	r3, [pc, #292]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2c68:	681b      	ldr	r3, [r3, #0]
 80e2c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e2c6e:	2b00      	cmp	r3, #0
 80e2c70:	d1f0      	bne.n	80e2c54 <HAL_RCC_OscConfig+0x10c>
 80e2c72:	e000      	b.n	80e2c76 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80e2c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80e2c76:	687b      	ldr	r3, [r7, #4]
 80e2c78:	681b      	ldr	r3, [r3, #0]
 80e2c7a:	f003 0302 	and.w	r3, r3, #2
 80e2c7e:	2b00      	cmp	r3, #0
 80e2c80:	f000 808c 	beq.w	80e2d9c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e2c84:	4b41      	ldr	r3, [pc, #260]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2c86:	691b      	ldr	r3, [r3, #16]
 80e2c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e2c8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e2c8e:	4b3f      	ldr	r3, [pc, #252]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2c92:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80e2c94:	6a3b      	ldr	r3, [r7, #32]
 80e2c96:	2b00      	cmp	r3, #0
 80e2c98:	d007      	beq.n	80e2caa <HAL_RCC_OscConfig+0x162>
 80e2c9a:	6a3b      	ldr	r3, [r7, #32]
 80e2c9c:	2b18      	cmp	r3, #24
 80e2c9e:	d137      	bne.n	80e2d10 <HAL_RCC_OscConfig+0x1c8>
 80e2ca0:	69fb      	ldr	r3, [r7, #28]
 80e2ca2:	f003 0303 	and.w	r3, r3, #3
 80e2ca6:	2b00      	cmp	r3, #0
 80e2ca8:	d132      	bne.n	80e2d10 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80e2caa:	4b38      	ldr	r3, [pc, #224]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2cac:	681b      	ldr	r3, [r3, #0]
 80e2cae:	f003 0304 	and.w	r3, r3, #4
 80e2cb2:	2b00      	cmp	r3, #0
 80e2cb4:	d005      	beq.n	80e2cc2 <HAL_RCC_OscConfig+0x17a>
 80e2cb6:	687b      	ldr	r3, [r7, #4]
 80e2cb8:	68db      	ldr	r3, [r3, #12]
 80e2cba:	2b00      	cmp	r3, #0
 80e2cbc:	d101      	bne.n	80e2cc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80e2cbe:	2301      	movs	r3, #1
 80e2cc0:	e2e9      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80e2cc2:	4b32      	ldr	r3, [pc, #200]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2cc4:	681b      	ldr	r3, [r3, #0]
 80e2cc6:	f023 0219 	bic.w	r2, r3, #25
 80e2cca:	687b      	ldr	r3, [r7, #4]
 80e2ccc:	68db      	ldr	r3, [r3, #12]
 80e2cce:	492f      	ldr	r1, [pc, #188]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2cd0:	4313      	orrs	r3, r2
 80e2cd2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80e2cd4:	f7fe fc10 	bl	80e14f8 <HAL_GetTick>
 80e2cd8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2cda:	e008      	b.n	80e2cee <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e2cdc:	f7fe fc0c 	bl	80e14f8 <HAL_GetTick>
 80e2ce0:	4602      	mov	r2, r0
 80e2ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2ce4:	1ad3      	subs	r3, r2, r3
 80e2ce6:	2b02      	cmp	r3, #2
 80e2ce8:	d901      	bls.n	80e2cee <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80e2cea:	2303      	movs	r3, #3
 80e2cec:	e2d3      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2cee:	4b27      	ldr	r3, [pc, #156]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2cf0:	681b      	ldr	r3, [r3, #0]
 80e2cf2:	f003 0304 	and.w	r3, r3, #4
 80e2cf6:	2b00      	cmp	r3, #0
 80e2cf8:	d0f0      	beq.n	80e2cdc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80e2cfa:	4b24      	ldr	r3, [pc, #144]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2cfc:	685b      	ldr	r3, [r3, #4]
 80e2cfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80e2d02:	687b      	ldr	r3, [r7, #4]
 80e2d04:	691b      	ldr	r3, [r3, #16]
 80e2d06:	061b      	lsls	r3, r3, #24
 80e2d08:	4920      	ldr	r1, [pc, #128]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2d0a:	4313      	orrs	r3, r2
 80e2d0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80e2d0e:	e045      	b.n	80e2d9c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80e2d10:	687b      	ldr	r3, [r7, #4]
 80e2d12:	68db      	ldr	r3, [r3, #12]
 80e2d14:	2b00      	cmp	r3, #0
 80e2d16:	d026      	beq.n	80e2d66 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80e2d18:	4b1c      	ldr	r3, [pc, #112]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2d1a:	681b      	ldr	r3, [r3, #0]
 80e2d1c:	f023 0219 	bic.w	r2, r3, #25
 80e2d20:	687b      	ldr	r3, [r7, #4]
 80e2d22:	68db      	ldr	r3, [r3, #12]
 80e2d24:	4919      	ldr	r1, [pc, #100]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2d26:	4313      	orrs	r3, r2
 80e2d28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2d2a:	f7fe fbe5 	bl	80e14f8 <HAL_GetTick>
 80e2d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2d30:	e008      	b.n	80e2d44 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e2d32:	f7fe fbe1 	bl	80e14f8 <HAL_GetTick>
 80e2d36:	4602      	mov	r2, r0
 80e2d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2d3a:	1ad3      	subs	r3, r2, r3
 80e2d3c:	2b02      	cmp	r3, #2
 80e2d3e:	d901      	bls.n	80e2d44 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80e2d40:	2303      	movs	r3, #3
 80e2d42:	e2a8      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2d44:	4b11      	ldr	r3, [pc, #68]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2d46:	681b      	ldr	r3, [r3, #0]
 80e2d48:	f003 0304 	and.w	r3, r3, #4
 80e2d4c:	2b00      	cmp	r3, #0
 80e2d4e:	d0f0      	beq.n	80e2d32 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80e2d50:	4b0e      	ldr	r3, [pc, #56]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2d52:	685b      	ldr	r3, [r3, #4]
 80e2d54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80e2d58:	687b      	ldr	r3, [r7, #4]
 80e2d5a:	691b      	ldr	r3, [r3, #16]
 80e2d5c:	061b      	lsls	r3, r3, #24
 80e2d5e:	490b      	ldr	r1, [pc, #44]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2d60:	4313      	orrs	r3, r2
 80e2d62:	604b      	str	r3, [r1, #4]
 80e2d64:	e01a      	b.n	80e2d9c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80e2d66:	4b09      	ldr	r3, [pc, #36]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2d68:	681b      	ldr	r3, [r3, #0]
 80e2d6a:	4a08      	ldr	r2, [pc, #32]	; (80e2d8c <HAL_RCC_OscConfig+0x244>)
 80e2d6c:	f023 0301 	bic.w	r3, r3, #1
 80e2d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2d72:	f7fe fbc1 	bl	80e14f8 <HAL_GetTick>
 80e2d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80e2d78:	e00a      	b.n	80e2d90 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e2d7a:	f7fe fbbd 	bl	80e14f8 <HAL_GetTick>
 80e2d7e:	4602      	mov	r2, r0
 80e2d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2d82:	1ad3      	subs	r3, r2, r3
 80e2d84:	2b02      	cmp	r3, #2
 80e2d86:	d903      	bls.n	80e2d90 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80e2d88:	2303      	movs	r3, #3
 80e2d8a:	e284      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
 80e2d8c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80e2d90:	4b96      	ldr	r3, [pc, #600]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2d92:	681b      	ldr	r3, [r3, #0]
 80e2d94:	f003 0304 	and.w	r3, r3, #4
 80e2d98:	2b00      	cmp	r3, #0
 80e2d9a:	d1ee      	bne.n	80e2d7a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80e2d9c:	687b      	ldr	r3, [r7, #4]
 80e2d9e:	681b      	ldr	r3, [r3, #0]
 80e2da0:	f003 0310 	and.w	r3, r3, #16
 80e2da4:	2b00      	cmp	r3, #0
 80e2da6:	d06a      	beq.n	80e2e7e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e2da8:	4b90      	ldr	r3, [pc, #576]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2daa:	691b      	ldr	r3, [r3, #16]
 80e2dac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e2db0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e2db2:	4b8e      	ldr	r3, [pc, #568]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2db6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80e2db8:	69bb      	ldr	r3, [r7, #24]
 80e2dba:	2b08      	cmp	r3, #8
 80e2dbc:	d007      	beq.n	80e2dce <HAL_RCC_OscConfig+0x286>
 80e2dbe:	69bb      	ldr	r3, [r7, #24]
 80e2dc0:	2b18      	cmp	r3, #24
 80e2dc2:	d11b      	bne.n	80e2dfc <HAL_RCC_OscConfig+0x2b4>
 80e2dc4:	697b      	ldr	r3, [r7, #20]
 80e2dc6:	f003 0303 	and.w	r3, r3, #3
 80e2dca:	2b01      	cmp	r3, #1
 80e2dcc:	d116      	bne.n	80e2dfc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80e2dce:	4b87      	ldr	r3, [pc, #540]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2dd0:	681b      	ldr	r3, [r3, #0]
 80e2dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2dd6:	2b00      	cmp	r3, #0
 80e2dd8:	d005      	beq.n	80e2de6 <HAL_RCC_OscConfig+0x29e>
 80e2dda:	687b      	ldr	r3, [r7, #4]
 80e2ddc:	69db      	ldr	r3, [r3, #28]
 80e2dde:	2b80      	cmp	r3, #128	; 0x80
 80e2de0:	d001      	beq.n	80e2de6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80e2de2:	2301      	movs	r3, #1
 80e2de4:	e257      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80e2de6:	4b81      	ldr	r3, [pc, #516]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2de8:	68db      	ldr	r3, [r3, #12]
 80e2dea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80e2dee:	687b      	ldr	r3, [r7, #4]
 80e2df0:	6a1b      	ldr	r3, [r3, #32]
 80e2df2:	061b      	lsls	r3, r3, #24
 80e2df4:	497d      	ldr	r1, [pc, #500]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2df6:	4313      	orrs	r3, r2
 80e2df8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80e2dfa:	e040      	b.n	80e2e7e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80e2dfc:	687b      	ldr	r3, [r7, #4]
 80e2dfe:	69db      	ldr	r3, [r3, #28]
 80e2e00:	2b00      	cmp	r3, #0
 80e2e02:	d023      	beq.n	80e2e4c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80e2e04:	4b79      	ldr	r3, [pc, #484]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2e06:	681b      	ldr	r3, [r3, #0]
 80e2e08:	4a78      	ldr	r2, [pc, #480]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80e2e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2e10:	f7fe fb72 	bl	80e14f8 <HAL_GetTick>
 80e2e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e2e16:	e008      	b.n	80e2e2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80e2e18:	f7fe fb6e 	bl	80e14f8 <HAL_GetTick>
 80e2e1c:	4602      	mov	r2, r0
 80e2e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2e20:	1ad3      	subs	r3, r2, r3
 80e2e22:	2b02      	cmp	r3, #2
 80e2e24:	d901      	bls.n	80e2e2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80e2e26:	2303      	movs	r3, #3
 80e2e28:	e235      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e2e2a:	4b70      	ldr	r3, [pc, #448]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2e2c:	681b      	ldr	r3, [r3, #0]
 80e2e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2e32:	2b00      	cmp	r3, #0
 80e2e34:	d0f0      	beq.n	80e2e18 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80e2e36:	4b6d      	ldr	r3, [pc, #436]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2e38:	68db      	ldr	r3, [r3, #12]
 80e2e3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80e2e3e:	687b      	ldr	r3, [r7, #4]
 80e2e40:	6a1b      	ldr	r3, [r3, #32]
 80e2e42:	061b      	lsls	r3, r3, #24
 80e2e44:	4969      	ldr	r1, [pc, #420]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2e46:	4313      	orrs	r3, r2
 80e2e48:	60cb      	str	r3, [r1, #12]
 80e2e4a:	e018      	b.n	80e2e7e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80e2e4c:	4b67      	ldr	r3, [pc, #412]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2e4e:	681b      	ldr	r3, [r3, #0]
 80e2e50:	4a66      	ldr	r2, [pc, #408]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80e2e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2e58:	f7fe fb4e 	bl	80e14f8 <HAL_GetTick>
 80e2e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80e2e5e:	e008      	b.n	80e2e72 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80e2e60:	f7fe fb4a 	bl	80e14f8 <HAL_GetTick>
 80e2e64:	4602      	mov	r2, r0
 80e2e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2e68:	1ad3      	subs	r3, r2, r3
 80e2e6a:	2b02      	cmp	r3, #2
 80e2e6c:	d901      	bls.n	80e2e72 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80e2e6e:	2303      	movs	r3, #3
 80e2e70:	e211      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80e2e72:	4b5e      	ldr	r3, [pc, #376]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2e74:	681b      	ldr	r3, [r3, #0]
 80e2e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2e7a:	2b00      	cmp	r3, #0
 80e2e7c:	d1f0      	bne.n	80e2e60 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80e2e7e:	687b      	ldr	r3, [r7, #4]
 80e2e80:	681b      	ldr	r3, [r3, #0]
 80e2e82:	f003 0308 	and.w	r3, r3, #8
 80e2e86:	2b00      	cmp	r3, #0
 80e2e88:	d036      	beq.n	80e2ef8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80e2e8a:	687b      	ldr	r3, [r7, #4]
 80e2e8c:	695b      	ldr	r3, [r3, #20]
 80e2e8e:	2b00      	cmp	r3, #0
 80e2e90:	d019      	beq.n	80e2ec6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80e2e92:	4b56      	ldr	r3, [pc, #344]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e2e96:	4a55      	ldr	r2, [pc, #340]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2e98:	f043 0301 	orr.w	r3, r3, #1
 80e2e9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e2e9e:	f7fe fb2b 	bl	80e14f8 <HAL_GetTick>
 80e2ea2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80e2ea4:	e008      	b.n	80e2eb8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80e2ea6:	f7fe fb27 	bl	80e14f8 <HAL_GetTick>
 80e2eaa:	4602      	mov	r2, r0
 80e2eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2eae:	1ad3      	subs	r3, r2, r3
 80e2eb0:	2b02      	cmp	r3, #2
 80e2eb2:	d901      	bls.n	80e2eb8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80e2eb4:	2303      	movs	r3, #3
 80e2eb6:	e1ee      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80e2eb8:	4b4c      	ldr	r3, [pc, #304]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e2ebc:	f003 0302 	and.w	r3, r3, #2
 80e2ec0:	2b00      	cmp	r3, #0
 80e2ec2:	d0f0      	beq.n	80e2ea6 <HAL_RCC_OscConfig+0x35e>
 80e2ec4:	e018      	b.n	80e2ef8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80e2ec6:	4b49      	ldr	r3, [pc, #292]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e2eca:	4a48      	ldr	r2, [pc, #288]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2ecc:	f023 0301 	bic.w	r3, r3, #1
 80e2ed0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e2ed2:	f7fe fb11 	bl	80e14f8 <HAL_GetTick>
 80e2ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80e2ed8:	e008      	b.n	80e2eec <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80e2eda:	f7fe fb0d 	bl	80e14f8 <HAL_GetTick>
 80e2ede:	4602      	mov	r2, r0
 80e2ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2ee2:	1ad3      	subs	r3, r2, r3
 80e2ee4:	2b02      	cmp	r3, #2
 80e2ee6:	d901      	bls.n	80e2eec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80e2ee8:	2303      	movs	r3, #3
 80e2eea:	e1d4      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80e2eec:	4b3f      	ldr	r3, [pc, #252]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e2ef0:	f003 0302 	and.w	r3, r3, #2
 80e2ef4:	2b00      	cmp	r3, #0
 80e2ef6:	d1f0      	bne.n	80e2eda <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80e2ef8:	687b      	ldr	r3, [r7, #4]
 80e2efa:	681b      	ldr	r3, [r3, #0]
 80e2efc:	f003 0320 	and.w	r3, r3, #32
 80e2f00:	2b00      	cmp	r3, #0
 80e2f02:	d036      	beq.n	80e2f72 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80e2f04:	687b      	ldr	r3, [r7, #4]
 80e2f06:	699b      	ldr	r3, [r3, #24]
 80e2f08:	2b00      	cmp	r3, #0
 80e2f0a:	d019      	beq.n	80e2f40 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80e2f0c:	4b37      	ldr	r3, [pc, #220]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2f0e:	681b      	ldr	r3, [r3, #0]
 80e2f10:	4a36      	ldr	r2, [pc, #216]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2f12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80e2f16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80e2f18:	f7fe faee 	bl	80e14f8 <HAL_GetTick>
 80e2f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80e2f1e:	e008      	b.n	80e2f32 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80e2f20:	f7fe faea 	bl	80e14f8 <HAL_GetTick>
 80e2f24:	4602      	mov	r2, r0
 80e2f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2f28:	1ad3      	subs	r3, r2, r3
 80e2f2a:	2b02      	cmp	r3, #2
 80e2f2c:	d901      	bls.n	80e2f32 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80e2f2e:	2303      	movs	r3, #3
 80e2f30:	e1b1      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80e2f32:	4b2e      	ldr	r3, [pc, #184]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2f34:	681b      	ldr	r3, [r3, #0]
 80e2f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e2f3a:	2b00      	cmp	r3, #0
 80e2f3c:	d0f0      	beq.n	80e2f20 <HAL_RCC_OscConfig+0x3d8>
 80e2f3e:	e018      	b.n	80e2f72 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80e2f40:	4b2a      	ldr	r3, [pc, #168]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2f42:	681b      	ldr	r3, [r3, #0]
 80e2f44:	4a29      	ldr	r2, [pc, #164]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80e2f4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80e2f4c:	f7fe fad4 	bl	80e14f8 <HAL_GetTick>
 80e2f50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80e2f52:	e008      	b.n	80e2f66 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80e2f54:	f7fe fad0 	bl	80e14f8 <HAL_GetTick>
 80e2f58:	4602      	mov	r2, r0
 80e2f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2f5c:	1ad3      	subs	r3, r2, r3
 80e2f5e:	2b02      	cmp	r3, #2
 80e2f60:	d901      	bls.n	80e2f66 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80e2f62:	2303      	movs	r3, #3
 80e2f64:	e197      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80e2f66:	4b21      	ldr	r3, [pc, #132]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2f68:	681b      	ldr	r3, [r3, #0]
 80e2f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e2f6e:	2b00      	cmp	r3, #0
 80e2f70:	d1f0      	bne.n	80e2f54 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80e2f72:	687b      	ldr	r3, [r7, #4]
 80e2f74:	681b      	ldr	r3, [r3, #0]
 80e2f76:	f003 0304 	and.w	r3, r3, #4
 80e2f7a:	2b00      	cmp	r3, #0
 80e2f7c:	f000 8086 	beq.w	80e308c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80e2f80:	4b1b      	ldr	r3, [pc, #108]	; (80e2ff0 <HAL_RCC_OscConfig+0x4a8>)
 80e2f82:	681b      	ldr	r3, [r3, #0]
 80e2f84:	4a1a      	ldr	r2, [pc, #104]	; (80e2ff0 <HAL_RCC_OscConfig+0x4a8>)
 80e2f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e2f8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80e2f8c:	f7fe fab4 	bl	80e14f8 <HAL_GetTick>
 80e2f90:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e2f92:	e008      	b.n	80e2fa6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80e2f94:	f7fe fab0 	bl	80e14f8 <HAL_GetTick>
 80e2f98:	4602      	mov	r2, r0
 80e2f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2f9c:	1ad3      	subs	r3, r2, r3
 80e2f9e:	2b64      	cmp	r3, #100	; 0x64
 80e2fa0:	d901      	bls.n	80e2fa6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80e2fa2:	2303      	movs	r3, #3
 80e2fa4:	e177      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e2fa6:	4b12      	ldr	r3, [pc, #72]	; (80e2ff0 <HAL_RCC_OscConfig+0x4a8>)
 80e2fa8:	681b      	ldr	r3, [r3, #0]
 80e2faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2fae:	2b00      	cmp	r3, #0
 80e2fb0:	d0f0      	beq.n	80e2f94 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80e2fb2:	687b      	ldr	r3, [r7, #4]
 80e2fb4:	689b      	ldr	r3, [r3, #8]
 80e2fb6:	2b01      	cmp	r3, #1
 80e2fb8:	d106      	bne.n	80e2fc8 <HAL_RCC_OscConfig+0x480>
 80e2fba:	4b0c      	ldr	r3, [pc, #48]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2fbe:	4a0b      	ldr	r2, [pc, #44]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2fc0:	f043 0301 	orr.w	r3, r3, #1
 80e2fc4:	6713      	str	r3, [r2, #112]	; 0x70
 80e2fc6:	e032      	b.n	80e302e <HAL_RCC_OscConfig+0x4e6>
 80e2fc8:	687b      	ldr	r3, [r7, #4]
 80e2fca:	689b      	ldr	r3, [r3, #8]
 80e2fcc:	2b00      	cmp	r3, #0
 80e2fce:	d111      	bne.n	80e2ff4 <HAL_RCC_OscConfig+0x4ac>
 80e2fd0:	4b06      	ldr	r3, [pc, #24]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2fd4:	4a05      	ldr	r2, [pc, #20]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2fd6:	f023 0301 	bic.w	r3, r3, #1
 80e2fda:	6713      	str	r3, [r2, #112]	; 0x70
 80e2fdc:	4b03      	ldr	r3, [pc, #12]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2fe0:	4a02      	ldr	r2, [pc, #8]	; (80e2fec <HAL_RCC_OscConfig+0x4a4>)
 80e2fe2:	f023 0304 	bic.w	r3, r3, #4
 80e2fe6:	6713      	str	r3, [r2, #112]	; 0x70
 80e2fe8:	e021      	b.n	80e302e <HAL_RCC_OscConfig+0x4e6>
 80e2fea:	bf00      	nop
 80e2fec:	58024400 	.word	0x58024400
 80e2ff0:	58024800 	.word	0x58024800
 80e2ff4:	687b      	ldr	r3, [r7, #4]
 80e2ff6:	689b      	ldr	r3, [r3, #8]
 80e2ff8:	2b05      	cmp	r3, #5
 80e2ffa:	d10c      	bne.n	80e3016 <HAL_RCC_OscConfig+0x4ce>
 80e2ffc:	4b83      	ldr	r3, [pc, #524]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e2ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3000:	4a82      	ldr	r2, [pc, #520]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3002:	f043 0304 	orr.w	r3, r3, #4
 80e3006:	6713      	str	r3, [r2, #112]	; 0x70
 80e3008:	4b80      	ldr	r3, [pc, #512]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e300c:	4a7f      	ldr	r2, [pc, #508]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e300e:	f043 0301 	orr.w	r3, r3, #1
 80e3012:	6713      	str	r3, [r2, #112]	; 0x70
 80e3014:	e00b      	b.n	80e302e <HAL_RCC_OscConfig+0x4e6>
 80e3016:	4b7d      	ldr	r3, [pc, #500]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e301a:	4a7c      	ldr	r2, [pc, #496]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e301c:	f023 0301 	bic.w	r3, r3, #1
 80e3020:	6713      	str	r3, [r2, #112]	; 0x70
 80e3022:	4b7a      	ldr	r3, [pc, #488]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3026:	4a79      	ldr	r2, [pc, #484]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3028:	f023 0304 	bic.w	r3, r3, #4
 80e302c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80e302e:	687b      	ldr	r3, [r7, #4]
 80e3030:	689b      	ldr	r3, [r3, #8]
 80e3032:	2b00      	cmp	r3, #0
 80e3034:	d015      	beq.n	80e3062 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e3036:	f7fe fa5f 	bl	80e14f8 <HAL_GetTick>
 80e303a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e303c:	e00a      	b.n	80e3054 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80e303e:	f7fe fa5b 	bl	80e14f8 <HAL_GetTick>
 80e3042:	4602      	mov	r2, r0
 80e3044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e3046:	1ad3      	subs	r3, r2, r3
 80e3048:	f241 3288 	movw	r2, #5000	; 0x1388
 80e304c:	4293      	cmp	r3, r2
 80e304e:	d901      	bls.n	80e3054 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80e3050:	2303      	movs	r3, #3
 80e3052:	e120      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e3054:	4b6d      	ldr	r3, [pc, #436]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3058:	f003 0302 	and.w	r3, r3, #2
 80e305c:	2b00      	cmp	r3, #0
 80e305e:	d0ee      	beq.n	80e303e <HAL_RCC_OscConfig+0x4f6>
 80e3060:	e014      	b.n	80e308c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e3062:	f7fe fa49 	bl	80e14f8 <HAL_GetTick>
 80e3066:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80e3068:	e00a      	b.n	80e3080 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80e306a:	f7fe fa45 	bl	80e14f8 <HAL_GetTick>
 80e306e:	4602      	mov	r2, r0
 80e3070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e3072:	1ad3      	subs	r3, r2, r3
 80e3074:	f241 3288 	movw	r2, #5000	; 0x1388
 80e3078:	4293      	cmp	r3, r2
 80e307a:	d901      	bls.n	80e3080 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80e307c:	2303      	movs	r3, #3
 80e307e:	e10a      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80e3080:	4b62      	ldr	r3, [pc, #392]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3084:	f003 0302 	and.w	r3, r3, #2
 80e3088:	2b00      	cmp	r3, #0
 80e308a:	d1ee      	bne.n	80e306a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80e308c:	687b      	ldr	r3, [r7, #4]
 80e308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e3090:	2b00      	cmp	r3, #0
 80e3092:	f000 80ff 	beq.w	80e3294 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80e3096:	4b5d      	ldr	r3, [pc, #372]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3098:	691b      	ldr	r3, [r3, #16]
 80e309a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e309e:	2b18      	cmp	r3, #24
 80e30a0:	f000 80ba 	beq.w	80e3218 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80e30a4:	687b      	ldr	r3, [r7, #4]
 80e30a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e30a8:	2b02      	cmp	r3, #2
 80e30aa:	f040 8095 	bne.w	80e31d8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80e30ae:	4b57      	ldr	r3, [pc, #348]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e30b0:	681b      	ldr	r3, [r3, #0]
 80e30b2:	4a56      	ldr	r2, [pc, #344]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e30b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80e30b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e30ba:	f7fe fa1d 	bl	80e14f8 <HAL_GetTick>
 80e30be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e30c0:	e008      	b.n	80e30d4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e30c2:	f7fe fa19 	bl	80e14f8 <HAL_GetTick>
 80e30c6:	4602      	mov	r2, r0
 80e30c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e30ca:	1ad3      	subs	r3, r2, r3
 80e30cc:	2b02      	cmp	r3, #2
 80e30ce:	d901      	bls.n	80e30d4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80e30d0:	2303      	movs	r3, #3
 80e30d2:	e0e0      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e30d4:	4b4d      	ldr	r3, [pc, #308]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e30d6:	681b      	ldr	r3, [r3, #0]
 80e30d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e30dc:	2b00      	cmp	r3, #0
 80e30de:	d1f0      	bne.n	80e30c2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80e30e0:	4b4a      	ldr	r3, [pc, #296]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e30e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80e30e4:	4b4a      	ldr	r3, [pc, #296]	; (80e3210 <HAL_RCC_OscConfig+0x6c8>)
 80e30e6:	4013      	ands	r3, r2
 80e30e8:	687a      	ldr	r2, [r7, #4]
 80e30ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80e30ec:	687a      	ldr	r2, [r7, #4]
 80e30ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80e30f0:	0112      	lsls	r2, r2, #4
 80e30f2:	430a      	orrs	r2, r1
 80e30f4:	4945      	ldr	r1, [pc, #276]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e30f6:	4313      	orrs	r3, r2
 80e30f8:	628b      	str	r3, [r1, #40]	; 0x28
 80e30fa:	687b      	ldr	r3, [r7, #4]
 80e30fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e30fe:	3b01      	subs	r3, #1
 80e3100:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e3104:	687b      	ldr	r3, [r7, #4]
 80e3106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e3108:	3b01      	subs	r3, #1
 80e310a:	025b      	lsls	r3, r3, #9
 80e310c:	b29b      	uxth	r3, r3
 80e310e:	431a      	orrs	r2, r3
 80e3110:	687b      	ldr	r3, [r7, #4]
 80e3112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e3114:	3b01      	subs	r3, #1
 80e3116:	041b      	lsls	r3, r3, #16
 80e3118:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e311c:	431a      	orrs	r2, r3
 80e311e:	687b      	ldr	r3, [r7, #4]
 80e3120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e3122:	3b01      	subs	r3, #1
 80e3124:	061b      	lsls	r3, r3, #24
 80e3126:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e312a:	4938      	ldr	r1, [pc, #224]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e312c:	4313      	orrs	r3, r2
 80e312e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80e3130:	4b36      	ldr	r3, [pc, #216]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3134:	4a35      	ldr	r2, [pc, #212]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3136:	f023 0301 	bic.w	r3, r3, #1
 80e313a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80e313c:	4b33      	ldr	r3, [pc, #204]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e313e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80e3140:	4b34      	ldr	r3, [pc, #208]	; (80e3214 <HAL_RCC_OscConfig+0x6cc>)
 80e3142:	4013      	ands	r3, r2
 80e3144:	687a      	ldr	r2, [r7, #4]
 80e3146:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80e3148:	00d2      	lsls	r2, r2, #3
 80e314a:	4930      	ldr	r1, [pc, #192]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e314c:	4313      	orrs	r3, r2
 80e314e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80e3150:	4b2e      	ldr	r3, [pc, #184]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3154:	f023 020c 	bic.w	r2, r3, #12
 80e3158:	687b      	ldr	r3, [r7, #4]
 80e315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e315c:	492b      	ldr	r1, [pc, #172]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e315e:	4313      	orrs	r3, r2
 80e3160:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80e3162:	4b2a      	ldr	r3, [pc, #168]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3166:	f023 0202 	bic.w	r2, r3, #2
 80e316a:	687b      	ldr	r3, [r7, #4]
 80e316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e316e:	4927      	ldr	r1, [pc, #156]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3170:	4313      	orrs	r3, r2
 80e3172:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80e3174:	4b25      	ldr	r3, [pc, #148]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3178:	4a24      	ldr	r2, [pc, #144]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e317a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e317e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3180:	4b22      	ldr	r3, [pc, #136]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3184:	4a21      	ldr	r2, [pc, #132]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e318a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80e318c:	4b1f      	ldr	r3, [pc, #124]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3190:	4a1e      	ldr	r2, [pc, #120]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3192:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80e3196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80e3198:	4b1c      	ldr	r3, [pc, #112]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e319c:	4a1b      	ldr	r2, [pc, #108]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e319e:	f043 0301 	orr.w	r3, r3, #1
 80e31a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80e31a4:	4b19      	ldr	r3, [pc, #100]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e31a6:	681b      	ldr	r3, [r3, #0]
 80e31a8:	4a18      	ldr	r2, [pc, #96]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e31aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80e31ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e31b0:	f7fe f9a2 	bl	80e14f8 <HAL_GetTick>
 80e31b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e31b6:	e008      	b.n	80e31ca <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e31b8:	f7fe f99e 	bl	80e14f8 <HAL_GetTick>
 80e31bc:	4602      	mov	r2, r0
 80e31be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e31c0:	1ad3      	subs	r3, r2, r3
 80e31c2:	2b02      	cmp	r3, #2
 80e31c4:	d901      	bls.n	80e31ca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80e31c6:	2303      	movs	r3, #3
 80e31c8:	e065      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e31ca:	4b10      	ldr	r3, [pc, #64]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e31cc:	681b      	ldr	r3, [r3, #0]
 80e31ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e31d2:	2b00      	cmp	r3, #0
 80e31d4:	d0f0      	beq.n	80e31b8 <HAL_RCC_OscConfig+0x670>
 80e31d6:	e05d      	b.n	80e3294 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80e31d8:	4b0c      	ldr	r3, [pc, #48]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e31da:	681b      	ldr	r3, [r3, #0]
 80e31dc:	4a0b      	ldr	r2, [pc, #44]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e31de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80e31e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e31e4:	f7fe f988 	bl	80e14f8 <HAL_GetTick>
 80e31e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e31ea:	e008      	b.n	80e31fe <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e31ec:	f7fe f984 	bl	80e14f8 <HAL_GetTick>
 80e31f0:	4602      	mov	r2, r0
 80e31f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e31f4:	1ad3      	subs	r3, r2, r3
 80e31f6:	2b02      	cmp	r3, #2
 80e31f8:	d901      	bls.n	80e31fe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80e31fa:	2303      	movs	r3, #3
 80e31fc:	e04b      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e31fe:	4b03      	ldr	r3, [pc, #12]	; (80e320c <HAL_RCC_OscConfig+0x6c4>)
 80e3200:	681b      	ldr	r3, [r3, #0]
 80e3202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e3206:	2b00      	cmp	r3, #0
 80e3208:	d1f0      	bne.n	80e31ec <HAL_RCC_OscConfig+0x6a4>
 80e320a:	e043      	b.n	80e3294 <HAL_RCC_OscConfig+0x74c>
 80e320c:	58024400 	.word	0x58024400
 80e3210:	fffffc0c 	.word	0xfffffc0c
 80e3214:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80e3218:	4b21      	ldr	r3, [pc, #132]	; (80e32a0 <HAL_RCC_OscConfig+0x758>)
 80e321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e321c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80e321e:	4b20      	ldr	r3, [pc, #128]	; (80e32a0 <HAL_RCC_OscConfig+0x758>)
 80e3220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e3222:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80e3224:	687b      	ldr	r3, [r7, #4]
 80e3226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e3228:	2b01      	cmp	r3, #1
 80e322a:	d031      	beq.n	80e3290 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80e322c:	693b      	ldr	r3, [r7, #16]
 80e322e:	f003 0203 	and.w	r2, r3, #3
 80e3232:	687b      	ldr	r3, [r7, #4]
 80e3234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80e3236:	429a      	cmp	r2, r3
 80e3238:	d12a      	bne.n	80e3290 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80e323a:	693b      	ldr	r3, [r7, #16]
 80e323c:	091b      	lsrs	r3, r3, #4
 80e323e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80e3242:	687b      	ldr	r3, [r7, #4]
 80e3244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80e3246:	429a      	cmp	r2, r3
 80e3248:	d122      	bne.n	80e3290 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80e324a:	68fb      	ldr	r3, [r7, #12]
 80e324c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e3250:	687b      	ldr	r3, [r7, #4]
 80e3252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e3254:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80e3256:	429a      	cmp	r2, r3
 80e3258:	d11a      	bne.n	80e3290 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80e325a:	68fb      	ldr	r3, [r7, #12]
 80e325c:	0a5b      	lsrs	r3, r3, #9
 80e325e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e3262:	687b      	ldr	r3, [r7, #4]
 80e3264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e3266:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80e3268:	429a      	cmp	r2, r3
 80e326a:	d111      	bne.n	80e3290 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80e326c:	68fb      	ldr	r3, [r7, #12]
 80e326e:	0c1b      	lsrs	r3, r3, #16
 80e3270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e3274:	687b      	ldr	r3, [r7, #4]
 80e3276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e3278:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80e327a:	429a      	cmp	r2, r3
 80e327c:	d108      	bne.n	80e3290 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80e327e:	68fb      	ldr	r3, [r7, #12]
 80e3280:	0e1b      	lsrs	r3, r3, #24
 80e3282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e3286:	687b      	ldr	r3, [r7, #4]
 80e3288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e328a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80e328c:	429a      	cmp	r2, r3
 80e328e:	d001      	beq.n	80e3294 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80e3290:	2301      	movs	r3, #1
 80e3292:	e000      	b.n	80e3296 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80e3294:	2300      	movs	r3, #0
}
 80e3296:	4618      	mov	r0, r3
 80e3298:	3730      	adds	r7, #48	; 0x30
 80e329a:	46bd      	mov	sp, r7
 80e329c:	bd80      	pop	{r7, pc}
 80e329e:	bf00      	nop
 80e32a0:	58024400 	.word	0x58024400

080e32a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80e32a4:	b580      	push	{r7, lr}
 80e32a6:	b086      	sub	sp, #24
 80e32a8:	af00      	add	r7, sp, #0
 80e32aa:	6078      	str	r0, [r7, #4]
 80e32ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80e32ae:	687b      	ldr	r3, [r7, #4]
 80e32b0:	2b00      	cmp	r3, #0
 80e32b2:	d101      	bne.n	80e32b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80e32b4:	2301      	movs	r3, #1
 80e32b6:	e19c      	b.n	80e35f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80e32b8:	4b8a      	ldr	r3, [pc, #552]	; (80e34e4 <HAL_RCC_ClockConfig+0x240>)
 80e32ba:	681b      	ldr	r3, [r3, #0]
 80e32bc:	f003 030f 	and.w	r3, r3, #15
 80e32c0:	683a      	ldr	r2, [r7, #0]
 80e32c2:	429a      	cmp	r2, r3
 80e32c4:	d910      	bls.n	80e32e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80e32c6:	4b87      	ldr	r3, [pc, #540]	; (80e34e4 <HAL_RCC_ClockConfig+0x240>)
 80e32c8:	681b      	ldr	r3, [r3, #0]
 80e32ca:	f023 020f 	bic.w	r2, r3, #15
 80e32ce:	4985      	ldr	r1, [pc, #532]	; (80e34e4 <HAL_RCC_ClockConfig+0x240>)
 80e32d0:	683b      	ldr	r3, [r7, #0]
 80e32d2:	4313      	orrs	r3, r2
 80e32d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80e32d6:	4b83      	ldr	r3, [pc, #524]	; (80e34e4 <HAL_RCC_ClockConfig+0x240>)
 80e32d8:	681b      	ldr	r3, [r3, #0]
 80e32da:	f003 030f 	and.w	r3, r3, #15
 80e32de:	683a      	ldr	r2, [r7, #0]
 80e32e0:	429a      	cmp	r2, r3
 80e32e2:	d001      	beq.n	80e32e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80e32e4:	2301      	movs	r3, #1
 80e32e6:	e184      	b.n	80e35f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80e32e8:	687b      	ldr	r3, [r7, #4]
 80e32ea:	681b      	ldr	r3, [r3, #0]
 80e32ec:	f003 0304 	and.w	r3, r3, #4
 80e32f0:	2b00      	cmp	r3, #0
 80e32f2:	d010      	beq.n	80e3316 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80e32f4:	687b      	ldr	r3, [r7, #4]
 80e32f6:	691a      	ldr	r2, [r3, #16]
 80e32f8:	4b7b      	ldr	r3, [pc, #492]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e32fa:	699b      	ldr	r3, [r3, #24]
 80e32fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e3300:	429a      	cmp	r2, r3
 80e3302:	d908      	bls.n	80e3316 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80e3304:	4b78      	ldr	r3, [pc, #480]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3306:	699b      	ldr	r3, [r3, #24]
 80e3308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e330c:	687b      	ldr	r3, [r7, #4]
 80e330e:	691b      	ldr	r3, [r3, #16]
 80e3310:	4975      	ldr	r1, [pc, #468]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3312:	4313      	orrs	r3, r2
 80e3314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80e3316:	687b      	ldr	r3, [r7, #4]
 80e3318:	681b      	ldr	r3, [r3, #0]
 80e331a:	f003 0308 	and.w	r3, r3, #8
 80e331e:	2b00      	cmp	r3, #0
 80e3320:	d010      	beq.n	80e3344 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80e3322:	687b      	ldr	r3, [r7, #4]
 80e3324:	695a      	ldr	r2, [r3, #20]
 80e3326:	4b70      	ldr	r3, [pc, #448]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3328:	69db      	ldr	r3, [r3, #28]
 80e332a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e332e:	429a      	cmp	r2, r3
 80e3330:	d908      	bls.n	80e3344 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80e3332:	4b6d      	ldr	r3, [pc, #436]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3334:	69db      	ldr	r3, [r3, #28]
 80e3336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e333a:	687b      	ldr	r3, [r7, #4]
 80e333c:	695b      	ldr	r3, [r3, #20]
 80e333e:	496a      	ldr	r1, [pc, #424]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3340:	4313      	orrs	r3, r2
 80e3342:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80e3344:	687b      	ldr	r3, [r7, #4]
 80e3346:	681b      	ldr	r3, [r3, #0]
 80e3348:	f003 0310 	and.w	r3, r3, #16
 80e334c:	2b00      	cmp	r3, #0
 80e334e:	d010      	beq.n	80e3372 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80e3350:	687b      	ldr	r3, [r7, #4]
 80e3352:	699a      	ldr	r2, [r3, #24]
 80e3354:	4b64      	ldr	r3, [pc, #400]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3356:	69db      	ldr	r3, [r3, #28]
 80e3358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80e335c:	429a      	cmp	r2, r3
 80e335e:	d908      	bls.n	80e3372 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80e3360:	4b61      	ldr	r3, [pc, #388]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3362:	69db      	ldr	r3, [r3, #28]
 80e3364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80e3368:	687b      	ldr	r3, [r7, #4]
 80e336a:	699b      	ldr	r3, [r3, #24]
 80e336c:	495e      	ldr	r1, [pc, #376]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e336e:	4313      	orrs	r3, r2
 80e3370:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80e3372:	687b      	ldr	r3, [r7, #4]
 80e3374:	681b      	ldr	r3, [r3, #0]
 80e3376:	f003 0320 	and.w	r3, r3, #32
 80e337a:	2b00      	cmp	r3, #0
 80e337c:	d010      	beq.n	80e33a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80e337e:	687b      	ldr	r3, [r7, #4]
 80e3380:	69da      	ldr	r2, [r3, #28]
 80e3382:	4b59      	ldr	r3, [pc, #356]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3384:	6a1b      	ldr	r3, [r3, #32]
 80e3386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e338a:	429a      	cmp	r2, r3
 80e338c:	d908      	bls.n	80e33a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80e338e:	4b56      	ldr	r3, [pc, #344]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3390:	6a1b      	ldr	r3, [r3, #32]
 80e3392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e3396:	687b      	ldr	r3, [r7, #4]
 80e3398:	69db      	ldr	r3, [r3, #28]
 80e339a:	4953      	ldr	r1, [pc, #332]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e339c:	4313      	orrs	r3, r2
 80e339e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80e33a0:	687b      	ldr	r3, [r7, #4]
 80e33a2:	681b      	ldr	r3, [r3, #0]
 80e33a4:	f003 0302 	and.w	r3, r3, #2
 80e33a8:	2b00      	cmp	r3, #0
 80e33aa:	d010      	beq.n	80e33ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80e33ac:	687b      	ldr	r3, [r7, #4]
 80e33ae:	68da      	ldr	r2, [r3, #12]
 80e33b0:	4b4d      	ldr	r3, [pc, #308]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e33b2:	699b      	ldr	r3, [r3, #24]
 80e33b4:	f003 030f 	and.w	r3, r3, #15
 80e33b8:	429a      	cmp	r2, r3
 80e33ba:	d908      	bls.n	80e33ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80e33bc:	4b4a      	ldr	r3, [pc, #296]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e33be:	699b      	ldr	r3, [r3, #24]
 80e33c0:	f023 020f 	bic.w	r2, r3, #15
 80e33c4:	687b      	ldr	r3, [r7, #4]
 80e33c6:	68db      	ldr	r3, [r3, #12]
 80e33c8:	4947      	ldr	r1, [pc, #284]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e33ca:	4313      	orrs	r3, r2
 80e33cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80e33ce:	687b      	ldr	r3, [r7, #4]
 80e33d0:	681b      	ldr	r3, [r3, #0]
 80e33d2:	f003 0301 	and.w	r3, r3, #1
 80e33d6:	2b00      	cmp	r3, #0
 80e33d8:	d055      	beq.n	80e3486 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80e33da:	4b43      	ldr	r3, [pc, #268]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e33dc:	699b      	ldr	r3, [r3, #24]
 80e33de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80e33e2:	687b      	ldr	r3, [r7, #4]
 80e33e4:	689b      	ldr	r3, [r3, #8]
 80e33e6:	4940      	ldr	r1, [pc, #256]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e33e8:	4313      	orrs	r3, r2
 80e33ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80e33ec:	687b      	ldr	r3, [r7, #4]
 80e33ee:	685b      	ldr	r3, [r3, #4]
 80e33f0:	2b02      	cmp	r3, #2
 80e33f2:	d107      	bne.n	80e3404 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e33f4:	4b3c      	ldr	r3, [pc, #240]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e33f6:	681b      	ldr	r3, [r3, #0]
 80e33f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e33fc:	2b00      	cmp	r3, #0
 80e33fe:	d121      	bne.n	80e3444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e3400:	2301      	movs	r3, #1
 80e3402:	e0f6      	b.n	80e35f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80e3404:	687b      	ldr	r3, [r7, #4]
 80e3406:	685b      	ldr	r3, [r3, #4]
 80e3408:	2b03      	cmp	r3, #3
 80e340a:	d107      	bne.n	80e341c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e340c:	4b36      	ldr	r3, [pc, #216]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e340e:	681b      	ldr	r3, [r3, #0]
 80e3410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e3414:	2b00      	cmp	r3, #0
 80e3416:	d115      	bne.n	80e3444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e3418:	2301      	movs	r3, #1
 80e341a:	e0ea      	b.n	80e35f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80e341c:	687b      	ldr	r3, [r7, #4]
 80e341e:	685b      	ldr	r3, [r3, #4]
 80e3420:	2b01      	cmp	r3, #1
 80e3422:	d107      	bne.n	80e3434 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e3424:	4b30      	ldr	r3, [pc, #192]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3426:	681b      	ldr	r3, [r3, #0]
 80e3428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e342c:	2b00      	cmp	r3, #0
 80e342e:	d109      	bne.n	80e3444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e3430:	2301      	movs	r3, #1
 80e3432:	e0de      	b.n	80e35f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e3434:	4b2c      	ldr	r3, [pc, #176]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3436:	681b      	ldr	r3, [r3, #0]
 80e3438:	f003 0304 	and.w	r3, r3, #4
 80e343c:	2b00      	cmp	r3, #0
 80e343e:	d101      	bne.n	80e3444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e3440:	2301      	movs	r3, #1
 80e3442:	e0d6      	b.n	80e35f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80e3444:	4b28      	ldr	r3, [pc, #160]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3446:	691b      	ldr	r3, [r3, #16]
 80e3448:	f023 0207 	bic.w	r2, r3, #7
 80e344c:	687b      	ldr	r3, [r7, #4]
 80e344e:	685b      	ldr	r3, [r3, #4]
 80e3450:	4925      	ldr	r1, [pc, #148]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3452:	4313      	orrs	r3, r2
 80e3454:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e3456:	f7fe f84f 	bl	80e14f8 <HAL_GetTick>
 80e345a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80e345c:	e00a      	b.n	80e3474 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80e345e:	f7fe f84b 	bl	80e14f8 <HAL_GetTick>
 80e3462:	4602      	mov	r2, r0
 80e3464:	697b      	ldr	r3, [r7, #20]
 80e3466:	1ad3      	subs	r3, r2, r3
 80e3468:	f241 3288 	movw	r2, #5000	; 0x1388
 80e346c:	4293      	cmp	r3, r2
 80e346e:	d901      	bls.n	80e3474 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80e3470:	2303      	movs	r3, #3
 80e3472:	e0be      	b.n	80e35f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80e3474:	4b1c      	ldr	r3, [pc, #112]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3476:	691b      	ldr	r3, [r3, #16]
 80e3478:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80e347c:	687b      	ldr	r3, [r7, #4]
 80e347e:	685b      	ldr	r3, [r3, #4]
 80e3480:	00db      	lsls	r3, r3, #3
 80e3482:	429a      	cmp	r2, r3
 80e3484:	d1eb      	bne.n	80e345e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80e3486:	687b      	ldr	r3, [r7, #4]
 80e3488:	681b      	ldr	r3, [r3, #0]
 80e348a:	f003 0302 	and.w	r3, r3, #2
 80e348e:	2b00      	cmp	r3, #0
 80e3490:	d010      	beq.n	80e34b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80e3492:	687b      	ldr	r3, [r7, #4]
 80e3494:	68da      	ldr	r2, [r3, #12]
 80e3496:	4b14      	ldr	r3, [pc, #80]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e3498:	699b      	ldr	r3, [r3, #24]
 80e349a:	f003 030f 	and.w	r3, r3, #15
 80e349e:	429a      	cmp	r2, r3
 80e34a0:	d208      	bcs.n	80e34b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80e34a2:	4b11      	ldr	r3, [pc, #68]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e34a4:	699b      	ldr	r3, [r3, #24]
 80e34a6:	f023 020f 	bic.w	r2, r3, #15
 80e34aa:	687b      	ldr	r3, [r7, #4]
 80e34ac:	68db      	ldr	r3, [r3, #12]
 80e34ae:	490e      	ldr	r1, [pc, #56]	; (80e34e8 <HAL_RCC_ClockConfig+0x244>)
 80e34b0:	4313      	orrs	r3, r2
 80e34b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80e34b4:	4b0b      	ldr	r3, [pc, #44]	; (80e34e4 <HAL_RCC_ClockConfig+0x240>)
 80e34b6:	681b      	ldr	r3, [r3, #0]
 80e34b8:	f003 030f 	and.w	r3, r3, #15
 80e34bc:	683a      	ldr	r2, [r7, #0]
 80e34be:	429a      	cmp	r2, r3
 80e34c0:	d214      	bcs.n	80e34ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80e34c2:	4b08      	ldr	r3, [pc, #32]	; (80e34e4 <HAL_RCC_ClockConfig+0x240>)
 80e34c4:	681b      	ldr	r3, [r3, #0]
 80e34c6:	f023 020f 	bic.w	r2, r3, #15
 80e34ca:	4906      	ldr	r1, [pc, #24]	; (80e34e4 <HAL_RCC_ClockConfig+0x240>)
 80e34cc:	683b      	ldr	r3, [r7, #0]
 80e34ce:	4313      	orrs	r3, r2
 80e34d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80e34d2:	4b04      	ldr	r3, [pc, #16]	; (80e34e4 <HAL_RCC_ClockConfig+0x240>)
 80e34d4:	681b      	ldr	r3, [r3, #0]
 80e34d6:	f003 030f 	and.w	r3, r3, #15
 80e34da:	683a      	ldr	r2, [r7, #0]
 80e34dc:	429a      	cmp	r2, r3
 80e34de:	d005      	beq.n	80e34ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80e34e0:	2301      	movs	r3, #1
 80e34e2:	e086      	b.n	80e35f2 <HAL_RCC_ClockConfig+0x34e>
 80e34e4:	52002000 	.word	0x52002000
 80e34e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80e34ec:	687b      	ldr	r3, [r7, #4]
 80e34ee:	681b      	ldr	r3, [r3, #0]
 80e34f0:	f003 0304 	and.w	r3, r3, #4
 80e34f4:	2b00      	cmp	r3, #0
 80e34f6:	d010      	beq.n	80e351a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80e34f8:	687b      	ldr	r3, [r7, #4]
 80e34fa:	691a      	ldr	r2, [r3, #16]
 80e34fc:	4b3f      	ldr	r3, [pc, #252]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e34fe:	699b      	ldr	r3, [r3, #24]
 80e3500:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e3504:	429a      	cmp	r2, r3
 80e3506:	d208      	bcs.n	80e351a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80e3508:	4b3c      	ldr	r3, [pc, #240]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e350a:	699b      	ldr	r3, [r3, #24]
 80e350c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e3510:	687b      	ldr	r3, [r7, #4]
 80e3512:	691b      	ldr	r3, [r3, #16]
 80e3514:	4939      	ldr	r1, [pc, #228]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e3516:	4313      	orrs	r3, r2
 80e3518:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80e351a:	687b      	ldr	r3, [r7, #4]
 80e351c:	681b      	ldr	r3, [r3, #0]
 80e351e:	f003 0308 	and.w	r3, r3, #8
 80e3522:	2b00      	cmp	r3, #0
 80e3524:	d010      	beq.n	80e3548 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80e3526:	687b      	ldr	r3, [r7, #4]
 80e3528:	695a      	ldr	r2, [r3, #20]
 80e352a:	4b34      	ldr	r3, [pc, #208]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e352c:	69db      	ldr	r3, [r3, #28]
 80e352e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e3532:	429a      	cmp	r2, r3
 80e3534:	d208      	bcs.n	80e3548 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80e3536:	4b31      	ldr	r3, [pc, #196]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e3538:	69db      	ldr	r3, [r3, #28]
 80e353a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e353e:	687b      	ldr	r3, [r7, #4]
 80e3540:	695b      	ldr	r3, [r3, #20]
 80e3542:	492e      	ldr	r1, [pc, #184]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e3544:	4313      	orrs	r3, r2
 80e3546:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80e3548:	687b      	ldr	r3, [r7, #4]
 80e354a:	681b      	ldr	r3, [r3, #0]
 80e354c:	f003 0310 	and.w	r3, r3, #16
 80e3550:	2b00      	cmp	r3, #0
 80e3552:	d010      	beq.n	80e3576 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80e3554:	687b      	ldr	r3, [r7, #4]
 80e3556:	699a      	ldr	r2, [r3, #24]
 80e3558:	4b28      	ldr	r3, [pc, #160]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e355a:	69db      	ldr	r3, [r3, #28]
 80e355c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80e3560:	429a      	cmp	r2, r3
 80e3562:	d208      	bcs.n	80e3576 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80e3564:	4b25      	ldr	r3, [pc, #148]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e3566:	69db      	ldr	r3, [r3, #28]
 80e3568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80e356c:	687b      	ldr	r3, [r7, #4]
 80e356e:	699b      	ldr	r3, [r3, #24]
 80e3570:	4922      	ldr	r1, [pc, #136]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e3572:	4313      	orrs	r3, r2
 80e3574:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80e3576:	687b      	ldr	r3, [r7, #4]
 80e3578:	681b      	ldr	r3, [r3, #0]
 80e357a:	f003 0320 	and.w	r3, r3, #32
 80e357e:	2b00      	cmp	r3, #0
 80e3580:	d010      	beq.n	80e35a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80e3582:	687b      	ldr	r3, [r7, #4]
 80e3584:	69da      	ldr	r2, [r3, #28]
 80e3586:	4b1d      	ldr	r3, [pc, #116]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e3588:	6a1b      	ldr	r3, [r3, #32]
 80e358a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e358e:	429a      	cmp	r2, r3
 80e3590:	d208      	bcs.n	80e35a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80e3592:	4b1a      	ldr	r3, [pc, #104]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e3594:	6a1b      	ldr	r3, [r3, #32]
 80e3596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e359a:	687b      	ldr	r3, [r7, #4]
 80e359c:	69db      	ldr	r3, [r3, #28]
 80e359e:	4917      	ldr	r1, [pc, #92]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e35a0:	4313      	orrs	r3, r2
 80e35a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80e35a4:	f000 f834 	bl	80e3610 <HAL_RCC_GetSysClockFreq>
 80e35a8:	4602      	mov	r2, r0
 80e35aa:	4b14      	ldr	r3, [pc, #80]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e35ac:	699b      	ldr	r3, [r3, #24]
 80e35ae:	0a1b      	lsrs	r3, r3, #8
 80e35b0:	f003 030f 	and.w	r3, r3, #15
 80e35b4:	4912      	ldr	r1, [pc, #72]	; (80e3600 <HAL_RCC_ClockConfig+0x35c>)
 80e35b6:	5ccb      	ldrb	r3, [r1, r3]
 80e35b8:	f003 031f 	and.w	r3, r3, #31
 80e35bc:	fa22 f303 	lsr.w	r3, r2, r3
 80e35c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80e35c2:	4b0e      	ldr	r3, [pc, #56]	; (80e35fc <HAL_RCC_ClockConfig+0x358>)
 80e35c4:	699b      	ldr	r3, [r3, #24]
 80e35c6:	f003 030f 	and.w	r3, r3, #15
 80e35ca:	4a0d      	ldr	r2, [pc, #52]	; (80e3600 <HAL_RCC_ClockConfig+0x35c>)
 80e35cc:	5cd3      	ldrb	r3, [r2, r3]
 80e35ce:	f003 031f 	and.w	r3, r3, #31
 80e35d2:	693a      	ldr	r2, [r7, #16]
 80e35d4:	fa22 f303 	lsr.w	r3, r2, r3
 80e35d8:	4a0a      	ldr	r2, [pc, #40]	; (80e3604 <HAL_RCC_ClockConfig+0x360>)
 80e35da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80e35dc:	4a0a      	ldr	r2, [pc, #40]	; (80e3608 <HAL_RCC_ClockConfig+0x364>)
 80e35de:	693b      	ldr	r3, [r7, #16]
 80e35e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80e35e2:	4b0a      	ldr	r3, [pc, #40]	; (80e360c <HAL_RCC_ClockConfig+0x368>)
 80e35e4:	681b      	ldr	r3, [r3, #0]
 80e35e6:	4618      	mov	r0, r3
 80e35e8:	f7fd ff3c 	bl	80e1464 <HAL_InitTick>
 80e35ec:	4603      	mov	r3, r0
 80e35ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80e35f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80e35f2:	4618      	mov	r0, r3
 80e35f4:	3718      	adds	r7, #24
 80e35f6:	46bd      	mov	sp, r7
 80e35f8:	bd80      	pop	{r7, pc}
 80e35fa:	bf00      	nop
 80e35fc:	58024400 	.word	0x58024400
 80e3600:	080e51f4 	.word	0x080e51f4
 80e3604:	24000004 	.word	0x24000004
 80e3608:	24000000 	.word	0x24000000
 80e360c:	24000008 	.word	0x24000008

080e3610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80e3610:	b480      	push	{r7}
 80e3612:	b089      	sub	sp, #36	; 0x24
 80e3614:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80e3616:	4bb3      	ldr	r3, [pc, #716]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e3618:	691b      	ldr	r3, [r3, #16]
 80e361a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e361e:	2b18      	cmp	r3, #24
 80e3620:	f200 8155 	bhi.w	80e38ce <HAL_RCC_GetSysClockFreq+0x2be>
 80e3624:	a201      	add	r2, pc, #4	; (adr r2, 80e362c <HAL_RCC_GetSysClockFreq+0x1c>)
 80e3626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e362a:	bf00      	nop
 80e362c:	080e3691 	.word	0x080e3691
 80e3630:	080e38cf 	.word	0x080e38cf
 80e3634:	080e38cf 	.word	0x080e38cf
 80e3638:	080e38cf 	.word	0x080e38cf
 80e363c:	080e38cf 	.word	0x080e38cf
 80e3640:	080e38cf 	.word	0x080e38cf
 80e3644:	080e38cf 	.word	0x080e38cf
 80e3648:	080e38cf 	.word	0x080e38cf
 80e364c:	080e36b7 	.word	0x080e36b7
 80e3650:	080e38cf 	.word	0x080e38cf
 80e3654:	080e38cf 	.word	0x080e38cf
 80e3658:	080e38cf 	.word	0x080e38cf
 80e365c:	080e38cf 	.word	0x080e38cf
 80e3660:	080e38cf 	.word	0x080e38cf
 80e3664:	080e38cf 	.word	0x080e38cf
 80e3668:	080e38cf 	.word	0x080e38cf
 80e366c:	080e36bd 	.word	0x080e36bd
 80e3670:	080e38cf 	.word	0x080e38cf
 80e3674:	080e38cf 	.word	0x080e38cf
 80e3678:	080e38cf 	.word	0x080e38cf
 80e367c:	080e38cf 	.word	0x080e38cf
 80e3680:	080e38cf 	.word	0x080e38cf
 80e3684:	080e38cf 	.word	0x080e38cf
 80e3688:	080e38cf 	.word	0x080e38cf
 80e368c:	080e36c3 	.word	0x080e36c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80e3690:	4b94      	ldr	r3, [pc, #592]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e3692:	681b      	ldr	r3, [r3, #0]
 80e3694:	f003 0320 	and.w	r3, r3, #32
 80e3698:	2b00      	cmp	r3, #0
 80e369a:	d009      	beq.n	80e36b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80e369c:	4b91      	ldr	r3, [pc, #580]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e369e:	681b      	ldr	r3, [r3, #0]
 80e36a0:	08db      	lsrs	r3, r3, #3
 80e36a2:	f003 0303 	and.w	r3, r3, #3
 80e36a6:	4a90      	ldr	r2, [pc, #576]	; (80e38e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e36a8:	fa22 f303 	lsr.w	r3, r2, r3
 80e36ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80e36ae:	e111      	b.n	80e38d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80e36b0:	4b8d      	ldr	r3, [pc, #564]	; (80e38e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e36b2:	61bb      	str	r3, [r7, #24]
    break;
 80e36b4:	e10e      	b.n	80e38d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80e36b6:	4b8d      	ldr	r3, [pc, #564]	; (80e38ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80e36b8:	61bb      	str	r3, [r7, #24]
    break;
 80e36ba:	e10b      	b.n	80e38d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80e36bc:	4b8c      	ldr	r3, [pc, #560]	; (80e38f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80e36be:	61bb      	str	r3, [r7, #24]
    break;
 80e36c0:	e108      	b.n	80e38d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80e36c2:	4b88      	ldr	r3, [pc, #544]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e36c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e36c6:	f003 0303 	and.w	r3, r3, #3
 80e36ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80e36cc:	4b85      	ldr	r3, [pc, #532]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e36ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e36d0:	091b      	lsrs	r3, r3, #4
 80e36d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e36d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80e36d8:	4b82      	ldr	r3, [pc, #520]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e36da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e36dc:	f003 0301 	and.w	r3, r3, #1
 80e36e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80e36e2:	4b80      	ldr	r3, [pc, #512]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e36e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e36e6:	08db      	lsrs	r3, r3, #3
 80e36e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80e36ec:	68fa      	ldr	r2, [r7, #12]
 80e36ee:	fb02 f303 	mul.w	r3, r2, r3
 80e36f2:	ee07 3a90 	vmov	s15, r3
 80e36f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e36fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80e36fe:	693b      	ldr	r3, [r7, #16]
 80e3700:	2b00      	cmp	r3, #0
 80e3702:	f000 80e1 	beq.w	80e38c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80e3706:	697b      	ldr	r3, [r7, #20]
 80e3708:	2b02      	cmp	r3, #2
 80e370a:	f000 8083 	beq.w	80e3814 <HAL_RCC_GetSysClockFreq+0x204>
 80e370e:	697b      	ldr	r3, [r7, #20]
 80e3710:	2b02      	cmp	r3, #2
 80e3712:	f200 80a1 	bhi.w	80e3858 <HAL_RCC_GetSysClockFreq+0x248>
 80e3716:	697b      	ldr	r3, [r7, #20]
 80e3718:	2b00      	cmp	r3, #0
 80e371a:	d003      	beq.n	80e3724 <HAL_RCC_GetSysClockFreq+0x114>
 80e371c:	697b      	ldr	r3, [r7, #20]
 80e371e:	2b01      	cmp	r3, #1
 80e3720:	d056      	beq.n	80e37d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80e3722:	e099      	b.n	80e3858 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80e3724:	4b6f      	ldr	r3, [pc, #444]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e3726:	681b      	ldr	r3, [r3, #0]
 80e3728:	f003 0320 	and.w	r3, r3, #32
 80e372c:	2b00      	cmp	r3, #0
 80e372e:	d02d      	beq.n	80e378c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80e3730:	4b6c      	ldr	r3, [pc, #432]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e3732:	681b      	ldr	r3, [r3, #0]
 80e3734:	08db      	lsrs	r3, r3, #3
 80e3736:	f003 0303 	and.w	r3, r3, #3
 80e373a:	4a6b      	ldr	r2, [pc, #428]	; (80e38e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e373c:	fa22 f303 	lsr.w	r3, r2, r3
 80e3740:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e3742:	687b      	ldr	r3, [r7, #4]
 80e3744:	ee07 3a90 	vmov	s15, r3
 80e3748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e374c:	693b      	ldr	r3, [r7, #16]
 80e374e:	ee07 3a90 	vmov	s15, r3
 80e3752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e3756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e375a:	4b62      	ldr	r3, [pc, #392]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e375e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e3762:	ee07 3a90 	vmov	s15, r3
 80e3766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e376a:	ed97 6a02 	vldr	s12, [r7, #8]
 80e376e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80e38f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e3772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e3776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e377a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e377e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e3782:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e3786:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80e378a:	e087      	b.n	80e389c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e378c:	693b      	ldr	r3, [r7, #16]
 80e378e:	ee07 3a90 	vmov	s15, r3
 80e3792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e3796:	eddf 6a58 	vldr	s13, [pc, #352]	; 80e38f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 80e379a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e379e:	4b51      	ldr	r3, [pc, #324]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e37a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e37a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e37a6:	ee07 3a90 	vmov	s15, r3
 80e37aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e37ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80e37b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80e38f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e37b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e37ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e37be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e37c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e37c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e37ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e37ce:	e065      	b.n	80e389c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e37d0:	693b      	ldr	r3, [r7, #16]
 80e37d2:	ee07 3a90 	vmov	s15, r3
 80e37d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e37da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80e38fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80e37de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e37e2:	4b40      	ldr	r3, [pc, #256]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e37e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e37e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e37ea:	ee07 3a90 	vmov	s15, r3
 80e37ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e37f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80e37f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80e38f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e37fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e37fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e3802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e3806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e380a:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e380e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e3812:	e043      	b.n	80e389c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e3814:	693b      	ldr	r3, [r7, #16]
 80e3816:	ee07 3a90 	vmov	s15, r3
 80e381a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e381e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80e3900 <HAL_RCC_GetSysClockFreq+0x2f0>
 80e3822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e3826:	4b2f      	ldr	r3, [pc, #188]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e3828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e382a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e382e:	ee07 3a90 	vmov	s15, r3
 80e3832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e3836:	ed97 6a02 	vldr	s12, [r7, #8]
 80e383a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80e38f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e383e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e3842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e3846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e384a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e384e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e3852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e3856:	e021      	b.n	80e389c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e3858:	693b      	ldr	r3, [r7, #16]
 80e385a:	ee07 3a90 	vmov	s15, r3
 80e385e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e3862:	eddf 6a26 	vldr	s13, [pc, #152]	; 80e38fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80e3866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e386a:	4b1e      	ldr	r3, [pc, #120]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e386e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e3872:	ee07 3a90 	vmov	s15, r3
 80e3876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e387a:	ed97 6a02 	vldr	s12, [r7, #8]
 80e387e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80e38f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e3882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e3886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e388a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e388e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e3892:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e3896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e389a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80e389c:	4b11      	ldr	r3, [pc, #68]	; (80e38e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e38a0:	0a5b      	lsrs	r3, r3, #9
 80e38a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e38a6:	3301      	adds	r3, #1
 80e38a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80e38aa:	683b      	ldr	r3, [r7, #0]
 80e38ac:	ee07 3a90 	vmov	s15, r3
 80e38b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80e38b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80e38b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80e38bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80e38c0:	ee17 3a90 	vmov	r3, s15
 80e38c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80e38c6:	e005      	b.n	80e38d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80e38c8:	2300      	movs	r3, #0
 80e38ca:	61bb      	str	r3, [r7, #24]
    break;
 80e38cc:	e002      	b.n	80e38d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80e38ce:	4b07      	ldr	r3, [pc, #28]	; (80e38ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80e38d0:	61bb      	str	r3, [r7, #24]
    break;
 80e38d2:	bf00      	nop
  }

  return sysclockfreq;
 80e38d4:	69bb      	ldr	r3, [r7, #24]
}
 80e38d6:	4618      	mov	r0, r3
 80e38d8:	3724      	adds	r7, #36	; 0x24
 80e38da:	46bd      	mov	sp, r7
 80e38dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e38e0:	4770      	bx	lr
 80e38e2:	bf00      	nop
 80e38e4:	58024400 	.word	0x58024400
 80e38e8:	03d09000 	.word	0x03d09000
 80e38ec:	003d0900 	.word	0x003d0900
 80e38f0:	017d7840 	.word	0x017d7840
 80e38f4:	46000000 	.word	0x46000000
 80e38f8:	4c742400 	.word	0x4c742400
 80e38fc:	4a742400 	.word	0x4a742400
 80e3900:	4bbebc20 	.word	0x4bbebc20

080e3904 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80e3904:	b580      	push	{r7, lr}
 80e3906:	b086      	sub	sp, #24
 80e3908:	af00      	add	r7, sp, #0
 80e390a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80e390c:	2300      	movs	r3, #0
 80e390e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80e3910:	2300      	movs	r3, #0
 80e3912:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80e3914:	687b      	ldr	r3, [r7, #4]
 80e3916:	681b      	ldr	r3, [r3, #0]
 80e3918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e391c:	2b00      	cmp	r3, #0
 80e391e:	d03f      	beq.n	80e39a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80e3920:	687b      	ldr	r3, [r7, #4]
 80e3922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e3924:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e3928:	d02a      	beq.n	80e3980 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80e392a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e392e:	d824      	bhi.n	80e397a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80e3930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e3934:	d018      	beq.n	80e3968 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80e3936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e393a:	d81e      	bhi.n	80e397a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80e393c:	2b00      	cmp	r3, #0
 80e393e:	d003      	beq.n	80e3948 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80e3940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80e3944:	d007      	beq.n	80e3956 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80e3946:	e018      	b.n	80e397a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3948:	4ba4      	ldr	r3, [pc, #656]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e394c:	4aa3      	ldr	r2, [pc, #652]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e394e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e3954:	e015      	b.n	80e3982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e3956:	687b      	ldr	r3, [r7, #4]
 80e3958:	3304      	adds	r3, #4
 80e395a:	2102      	movs	r1, #2
 80e395c:	4618      	mov	r0, r3
 80e395e:	f000 fecb 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e3962:	4603      	mov	r3, r0
 80e3964:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e3966:	e00c      	b.n	80e3982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e3968:	687b      	ldr	r3, [r7, #4]
 80e396a:	3324      	adds	r3, #36	; 0x24
 80e396c:	2102      	movs	r1, #2
 80e396e:	4618      	mov	r0, r3
 80e3970:	f000 ff74 	bl	80e485c <RCCEx_PLL3_Config>
 80e3974:	4603      	mov	r3, r0
 80e3976:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e3978:	e003      	b.n	80e3982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e397a:	2301      	movs	r3, #1
 80e397c:	75fb      	strb	r3, [r7, #23]
      break;
 80e397e:	e000      	b.n	80e3982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80e3980:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3982:	7dfb      	ldrb	r3, [r7, #23]
 80e3984:	2b00      	cmp	r3, #0
 80e3986:	d109      	bne.n	80e399c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80e3988:	4b94      	ldr	r3, [pc, #592]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e398a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e398c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80e3990:	687b      	ldr	r3, [r7, #4]
 80e3992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e3994:	4991      	ldr	r1, [pc, #580]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3996:	4313      	orrs	r3, r2
 80e3998:	650b      	str	r3, [r1, #80]	; 0x50
 80e399a:	e001      	b.n	80e39a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e399c:	7dfb      	ldrb	r3, [r7, #23]
 80e399e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80e39a0:	687b      	ldr	r3, [r7, #4]
 80e39a2:	681b      	ldr	r3, [r3, #0]
 80e39a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e39a8:	2b00      	cmp	r3, #0
 80e39aa:	d03d      	beq.n	80e3a28 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80e39ac:	687b      	ldr	r3, [r7, #4]
 80e39ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e39b0:	2b04      	cmp	r3, #4
 80e39b2:	d826      	bhi.n	80e3a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80e39b4:	a201      	add	r2, pc, #4	; (adr r2, 80e39bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80e39b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e39ba:	bf00      	nop
 80e39bc:	080e39d1 	.word	0x080e39d1
 80e39c0:	080e39df 	.word	0x080e39df
 80e39c4:	080e39f1 	.word	0x080e39f1
 80e39c8:	080e3a09 	.word	0x080e3a09
 80e39cc:	080e3a09 	.word	0x080e3a09
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e39d0:	4b82      	ldr	r3, [pc, #520]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e39d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e39d4:	4a81      	ldr	r2, [pc, #516]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e39d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e39da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e39dc:	e015      	b.n	80e3a0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e39de:	687b      	ldr	r3, [r7, #4]
 80e39e0:	3304      	adds	r3, #4
 80e39e2:	2100      	movs	r1, #0
 80e39e4:	4618      	mov	r0, r3
 80e39e6:	f000 fe87 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e39ea:	4603      	mov	r3, r0
 80e39ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e39ee:	e00c      	b.n	80e3a0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e39f0:	687b      	ldr	r3, [r7, #4]
 80e39f2:	3324      	adds	r3, #36	; 0x24
 80e39f4:	2100      	movs	r1, #0
 80e39f6:	4618      	mov	r0, r3
 80e39f8:	f000 ff30 	bl	80e485c <RCCEx_PLL3_Config>
 80e39fc:	4603      	mov	r3, r0
 80e39fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3a00:	e003      	b.n	80e3a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3a02:	2301      	movs	r3, #1
 80e3a04:	75fb      	strb	r3, [r7, #23]
      break;
 80e3a06:	e000      	b.n	80e3a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80e3a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3a0a:	7dfb      	ldrb	r3, [r7, #23]
 80e3a0c:	2b00      	cmp	r3, #0
 80e3a0e:	d109      	bne.n	80e3a24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80e3a10:	4b72      	ldr	r3, [pc, #456]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3a14:	f023 0207 	bic.w	r2, r3, #7
 80e3a18:	687b      	ldr	r3, [r7, #4]
 80e3a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3a1c:	496f      	ldr	r1, [pc, #444]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3a1e:	4313      	orrs	r3, r2
 80e3a20:	650b      	str	r3, [r1, #80]	; 0x50
 80e3a22:	e001      	b.n	80e3a28 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3a24:	7dfb      	ldrb	r3, [r7, #23]
 80e3a26:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80e3a28:	687b      	ldr	r3, [r7, #4]
 80e3a2a:	681b      	ldr	r3, [r3, #0]
 80e3a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80e3a30:	2b00      	cmp	r3, #0
 80e3a32:	d051      	beq.n	80e3ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80e3a34:	687b      	ldr	r3, [r7, #4]
 80e3a36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e3a3a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80e3a3e:	d036      	beq.n	80e3aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80e3a40:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80e3a44:	d830      	bhi.n	80e3aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e3a46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80e3a4a:	d032      	beq.n	80e3ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80e3a4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80e3a50:	d82a      	bhi.n	80e3aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e3a52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80e3a56:	d02e      	beq.n	80e3ab6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80e3a58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80e3a5c:	d824      	bhi.n	80e3aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e3a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80e3a62:	d018      	beq.n	80e3a96 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80e3a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80e3a68:	d81e      	bhi.n	80e3aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e3a6a:	2b00      	cmp	r3, #0
 80e3a6c:	d003      	beq.n	80e3a76 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80e3a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e3a72:	d007      	beq.n	80e3a84 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80e3a74:	e018      	b.n	80e3aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3a76:	4b59      	ldr	r3, [pc, #356]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3a7a:	4a58      	ldr	r2, [pc, #352]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3a80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3a82:	e019      	b.n	80e3ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3a84:	687b      	ldr	r3, [r7, #4]
 80e3a86:	3304      	adds	r3, #4
 80e3a88:	2100      	movs	r1, #0
 80e3a8a:	4618      	mov	r0, r3
 80e3a8c:	f000 fe34 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e3a90:	4603      	mov	r3, r0
 80e3a92:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80e3a94:	e010      	b.n	80e3ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e3a96:	687b      	ldr	r3, [r7, #4]
 80e3a98:	3324      	adds	r3, #36	; 0x24
 80e3a9a:	2100      	movs	r1, #0
 80e3a9c:	4618      	mov	r0, r3
 80e3a9e:	f000 fedd 	bl	80e485c <RCCEx_PLL3_Config>
 80e3aa2:	4603      	mov	r3, r0
 80e3aa4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3aa6:	e007      	b.n	80e3ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80e3aa8:	2301      	movs	r3, #1
 80e3aaa:	75fb      	strb	r3, [r7, #23]
      break;
 80e3aac:	e004      	b.n	80e3ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e3aae:	bf00      	nop
 80e3ab0:	e002      	b.n	80e3ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e3ab2:	bf00      	nop
 80e3ab4:	e000      	b.n	80e3ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e3ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3ab8:	7dfb      	ldrb	r3, [r7, #23]
 80e3aba:	2b00      	cmp	r3, #0
 80e3abc:	d10a      	bne.n	80e3ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80e3abe:	4b47      	ldr	r3, [pc, #284]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3ac2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80e3ac6:	687b      	ldr	r3, [r7, #4]
 80e3ac8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e3acc:	4943      	ldr	r1, [pc, #268]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3ace:	4313      	orrs	r3, r2
 80e3ad0:	658b      	str	r3, [r1, #88]	; 0x58
 80e3ad2:	e001      	b.n	80e3ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3ad4:	7dfb      	ldrb	r3, [r7, #23]
 80e3ad6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80e3ad8:	687b      	ldr	r3, [r7, #4]
 80e3ada:	681b      	ldr	r3, [r3, #0]
 80e3adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80e3ae0:	2b00      	cmp	r3, #0
 80e3ae2:	d051      	beq.n	80e3b88 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80e3ae4:	687b      	ldr	r3, [r7, #4]
 80e3ae6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e3aea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80e3aee:	d036      	beq.n	80e3b5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80e3af0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80e3af4:	d830      	bhi.n	80e3b58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e3af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80e3afa:	d032      	beq.n	80e3b62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80e3afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80e3b00:	d82a      	bhi.n	80e3b58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e3b02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80e3b06:	d02e      	beq.n	80e3b66 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80e3b08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80e3b0c:	d824      	bhi.n	80e3b58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e3b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80e3b12:	d018      	beq.n	80e3b46 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80e3b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80e3b18:	d81e      	bhi.n	80e3b58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e3b1a:	2b00      	cmp	r3, #0
 80e3b1c:	d003      	beq.n	80e3b26 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80e3b1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80e3b22:	d007      	beq.n	80e3b34 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80e3b24:	e018      	b.n	80e3b58 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3b26:	4b2d      	ldr	r3, [pc, #180]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3b2a:	4a2c      	ldr	r2, [pc, #176]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3b30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3b32:	e019      	b.n	80e3b68 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3b34:	687b      	ldr	r3, [r7, #4]
 80e3b36:	3304      	adds	r3, #4
 80e3b38:	2100      	movs	r1, #0
 80e3b3a:	4618      	mov	r0, r3
 80e3b3c:	f000 fddc 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e3b40:	4603      	mov	r3, r0
 80e3b42:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80e3b44:	e010      	b.n	80e3b68 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80e3b46:	687b      	ldr	r3, [r7, #4]
 80e3b48:	3324      	adds	r3, #36	; 0x24
 80e3b4a:	2100      	movs	r1, #0
 80e3b4c:	4618      	mov	r0, r3
 80e3b4e:	f000 fe85 	bl	80e485c <RCCEx_PLL3_Config>
 80e3b52:	4603      	mov	r3, r0
 80e3b54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3b56:	e007      	b.n	80e3b68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80e3b58:	2301      	movs	r3, #1
 80e3b5a:	75fb      	strb	r3, [r7, #23]
      break;
 80e3b5c:	e004      	b.n	80e3b68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e3b5e:	bf00      	nop
 80e3b60:	e002      	b.n	80e3b68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e3b62:	bf00      	nop
 80e3b64:	e000      	b.n	80e3b68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e3b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3b68:	7dfb      	ldrb	r3, [r7, #23]
 80e3b6a:	2b00      	cmp	r3, #0
 80e3b6c:	d10a      	bne.n	80e3b84 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80e3b6e:	4b1b      	ldr	r3, [pc, #108]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3b72:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80e3b76:	687b      	ldr	r3, [r7, #4]
 80e3b78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e3b7c:	4917      	ldr	r1, [pc, #92]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3b7e:	4313      	orrs	r3, r2
 80e3b80:	658b      	str	r3, [r1, #88]	; 0x58
 80e3b82:	e001      	b.n	80e3b88 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3b84:	7dfb      	ldrb	r3, [r7, #23]
 80e3b86:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80e3b88:	687b      	ldr	r3, [r7, #4]
 80e3b8a:	681b      	ldr	r3, [r3, #0]
 80e3b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e3b90:	2b00      	cmp	r3, #0
 80e3b92:	d035      	beq.n	80e3c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80e3b94:	687b      	ldr	r3, [r7, #4]
 80e3b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e3b98:	2b30      	cmp	r3, #48	; 0x30
 80e3b9a:	d01c      	beq.n	80e3bd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80e3b9c:	2b30      	cmp	r3, #48	; 0x30
 80e3b9e:	d817      	bhi.n	80e3bd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80e3ba0:	2b20      	cmp	r3, #32
 80e3ba2:	d00c      	beq.n	80e3bbe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80e3ba4:	2b20      	cmp	r3, #32
 80e3ba6:	d813      	bhi.n	80e3bd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80e3ba8:	2b00      	cmp	r3, #0
 80e3baa:	d019      	beq.n	80e3be0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80e3bac:	2b10      	cmp	r3, #16
 80e3bae:	d10f      	bne.n	80e3bd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3bb0:	4b0a      	ldr	r3, [pc, #40]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3bb4:	4a09      	ldr	r2, [pc, #36]	; (80e3bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80e3bbc:	e011      	b.n	80e3be2 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e3bbe:	687b      	ldr	r3, [r7, #4]
 80e3bc0:	3304      	adds	r3, #4
 80e3bc2:	2102      	movs	r1, #2
 80e3bc4:	4618      	mov	r0, r3
 80e3bc6:	f000 fd97 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e3bca:	4603      	mov	r3, r0
 80e3bcc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80e3bce:	e008      	b.n	80e3be2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80e3bd0:	2301      	movs	r3, #1
 80e3bd2:	75fb      	strb	r3, [r7, #23]
      break;
 80e3bd4:	e005      	b.n	80e3be2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80e3bd6:	bf00      	nop
 80e3bd8:	e003      	b.n	80e3be2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80e3bda:	bf00      	nop
 80e3bdc:	58024400 	.word	0x58024400
      break;
 80e3be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3be2:	7dfb      	ldrb	r3, [r7, #23]
 80e3be4:	2b00      	cmp	r3, #0
 80e3be6:	d109      	bne.n	80e3bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80e3be8:	4ba3      	ldr	r3, [pc, #652]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3bec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80e3bf0:	687b      	ldr	r3, [r7, #4]
 80e3bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e3bf4:	49a0      	ldr	r1, [pc, #640]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3bf6:	4313      	orrs	r3, r2
 80e3bf8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e3bfa:	e001      	b.n	80e3c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3bfc:	7dfb      	ldrb	r3, [r7, #23]
 80e3bfe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80e3c00:	687b      	ldr	r3, [r7, #4]
 80e3c02:	681b      	ldr	r3, [r3, #0]
 80e3c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80e3c08:	2b00      	cmp	r3, #0
 80e3c0a:	d047      	beq.n	80e3c9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80e3c0c:	687b      	ldr	r3, [r7, #4]
 80e3c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e3c14:	d030      	beq.n	80e3c78 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80e3c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e3c1a:	d82a      	bhi.n	80e3c72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e3c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80e3c20:	d02c      	beq.n	80e3c7c <HAL_RCCEx_PeriphCLKConfig+0x378>
 80e3c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80e3c26:	d824      	bhi.n	80e3c72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e3c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e3c2c:	d018      	beq.n	80e3c60 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80e3c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e3c32:	d81e      	bhi.n	80e3c72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e3c34:	2b00      	cmp	r3, #0
 80e3c36:	d003      	beq.n	80e3c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80e3c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e3c3c:	d007      	beq.n	80e3c4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80e3c3e:	e018      	b.n	80e3c72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3c40:	4b8d      	ldr	r3, [pc, #564]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3c44:	4a8c      	ldr	r2, [pc, #560]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e3c4c:	e017      	b.n	80e3c7e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3c4e:	687b      	ldr	r3, [r7, #4]
 80e3c50:	3304      	adds	r3, #4
 80e3c52:	2100      	movs	r1, #0
 80e3c54:	4618      	mov	r0, r3
 80e3c56:	f000 fd4f 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e3c5a:	4603      	mov	r3, r0
 80e3c5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e3c5e:	e00e      	b.n	80e3c7e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e3c60:	687b      	ldr	r3, [r7, #4]
 80e3c62:	3324      	adds	r3, #36	; 0x24
 80e3c64:	2100      	movs	r1, #0
 80e3c66:	4618      	mov	r0, r3
 80e3c68:	f000 fdf8 	bl	80e485c <RCCEx_PLL3_Config>
 80e3c6c:	4603      	mov	r3, r0
 80e3c6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e3c70:	e005      	b.n	80e3c7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3c72:	2301      	movs	r3, #1
 80e3c74:	75fb      	strb	r3, [r7, #23]
      break;
 80e3c76:	e002      	b.n	80e3c7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80e3c78:	bf00      	nop
 80e3c7a:	e000      	b.n	80e3c7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80e3c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3c7e:	7dfb      	ldrb	r3, [r7, #23]
 80e3c80:	2b00      	cmp	r3, #0
 80e3c82:	d109      	bne.n	80e3c98 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80e3c84:	4b7c      	ldr	r3, [pc, #496]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3c88:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80e3c8c:	687b      	ldr	r3, [r7, #4]
 80e3c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3c90:	4979      	ldr	r1, [pc, #484]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3c92:	4313      	orrs	r3, r2
 80e3c94:	650b      	str	r3, [r1, #80]	; 0x50
 80e3c96:	e001      	b.n	80e3c9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3c98:	7dfb      	ldrb	r3, [r7, #23]
 80e3c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80e3c9c:	687b      	ldr	r3, [r7, #4]
 80e3c9e:	681b      	ldr	r3, [r3, #0]
 80e3ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e3ca4:	2b00      	cmp	r3, #0
 80e3ca6:	d049      	beq.n	80e3d3c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80e3ca8:	687b      	ldr	r3, [r7, #4]
 80e3caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e3cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e3cb0:	d02e      	beq.n	80e3d10 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80e3cb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e3cb6:	d828      	bhi.n	80e3d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e3cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80e3cbc:	d02a      	beq.n	80e3d14 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80e3cbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80e3cc2:	d822      	bhi.n	80e3d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e3cc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80e3cc8:	d026      	beq.n	80e3d18 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80e3cca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80e3cce:	d81c      	bhi.n	80e3d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e3cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e3cd4:	d010      	beq.n	80e3cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80e3cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e3cda:	d816      	bhi.n	80e3d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e3cdc:	2b00      	cmp	r3, #0
 80e3cde:	d01d      	beq.n	80e3d1c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80e3ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e3ce4:	d111      	bne.n	80e3d0a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3ce6:	687b      	ldr	r3, [r7, #4]
 80e3ce8:	3304      	adds	r3, #4
 80e3cea:	2101      	movs	r1, #1
 80e3cec:	4618      	mov	r0, r3
 80e3cee:	f000 fd03 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e3cf2:	4603      	mov	r3, r0
 80e3cf4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80e3cf6:	e012      	b.n	80e3d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e3cf8:	687b      	ldr	r3, [r7, #4]
 80e3cfa:	3324      	adds	r3, #36	; 0x24
 80e3cfc:	2101      	movs	r1, #1
 80e3cfe:	4618      	mov	r0, r3
 80e3d00:	f000 fdac 	bl	80e485c <RCCEx_PLL3_Config>
 80e3d04:	4603      	mov	r3, r0
 80e3d06:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80e3d08:	e009      	b.n	80e3d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3d0a:	2301      	movs	r3, #1
 80e3d0c:	75fb      	strb	r3, [r7, #23]
      break;
 80e3d0e:	e006      	b.n	80e3d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3d10:	bf00      	nop
 80e3d12:	e004      	b.n	80e3d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3d14:	bf00      	nop
 80e3d16:	e002      	b.n	80e3d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3d18:	bf00      	nop
 80e3d1a:	e000      	b.n	80e3d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3d1e:	7dfb      	ldrb	r3, [r7, #23]
 80e3d20:	2b00      	cmp	r3, #0
 80e3d22:	d109      	bne.n	80e3d38 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80e3d24:	4b54      	ldr	r3, [pc, #336]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3d28:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80e3d2c:	687b      	ldr	r3, [r7, #4]
 80e3d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e3d30:	4951      	ldr	r1, [pc, #324]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3d32:	4313      	orrs	r3, r2
 80e3d34:	650b      	str	r3, [r1, #80]	; 0x50
 80e3d36:	e001      	b.n	80e3d3c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3d38:	7dfb      	ldrb	r3, [r7, #23]
 80e3d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80e3d3c:	687b      	ldr	r3, [r7, #4]
 80e3d3e:	681b      	ldr	r3, [r3, #0]
 80e3d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80e3d44:	2b00      	cmp	r3, #0
 80e3d46:	d04b      	beq.n	80e3de0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80e3d48:	687b      	ldr	r3, [r7, #4]
 80e3d4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80e3d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e3d52:	d02e      	beq.n	80e3db2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80e3d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e3d58:	d828      	bhi.n	80e3dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e3d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e3d5e:	d02a      	beq.n	80e3db6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80e3d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e3d64:	d822      	bhi.n	80e3dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e3d66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e3d6a:	d026      	beq.n	80e3dba <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80e3d6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e3d70:	d81c      	bhi.n	80e3dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e3d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3d76:	d010      	beq.n	80e3d9a <HAL_RCCEx_PeriphCLKConfig+0x496>
 80e3d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3d7c:	d816      	bhi.n	80e3dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e3d7e:	2b00      	cmp	r3, #0
 80e3d80:	d01d      	beq.n	80e3dbe <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80e3d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e3d86:	d111      	bne.n	80e3dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3d88:	687b      	ldr	r3, [r7, #4]
 80e3d8a:	3304      	adds	r3, #4
 80e3d8c:	2101      	movs	r1, #1
 80e3d8e:	4618      	mov	r0, r3
 80e3d90:	f000 fcb2 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e3d94:	4603      	mov	r3, r0
 80e3d96:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80e3d98:	e012      	b.n	80e3dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e3d9a:	687b      	ldr	r3, [r7, #4]
 80e3d9c:	3324      	adds	r3, #36	; 0x24
 80e3d9e:	2101      	movs	r1, #1
 80e3da0:	4618      	mov	r0, r3
 80e3da2:	f000 fd5b 	bl	80e485c <RCCEx_PLL3_Config>
 80e3da6:	4603      	mov	r3, r0
 80e3da8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80e3daa:	e009      	b.n	80e3dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80e3dac:	2301      	movs	r3, #1
 80e3dae:	75fb      	strb	r3, [r7, #23]
      break;
 80e3db0:	e006      	b.n	80e3dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e3db2:	bf00      	nop
 80e3db4:	e004      	b.n	80e3dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e3db6:	bf00      	nop
 80e3db8:	e002      	b.n	80e3dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e3dba:	bf00      	nop
 80e3dbc:	e000      	b.n	80e3dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e3dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3dc0:	7dfb      	ldrb	r3, [r7, #23]
 80e3dc2:	2b00      	cmp	r3, #0
 80e3dc4:	d10a      	bne.n	80e3ddc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80e3dc6:	4b2c      	ldr	r3, [pc, #176]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3dca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80e3dce:	687b      	ldr	r3, [r7, #4]
 80e3dd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80e3dd4:	4928      	ldr	r1, [pc, #160]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3dd6:	4313      	orrs	r3, r2
 80e3dd8:	658b      	str	r3, [r1, #88]	; 0x58
 80e3dda:	e001      	b.n	80e3de0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3ddc:	7dfb      	ldrb	r3, [r7, #23]
 80e3dde:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80e3de0:	687b      	ldr	r3, [r7, #4]
 80e3de2:	681b      	ldr	r3, [r3, #0]
 80e3de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80e3de8:	2b00      	cmp	r3, #0
 80e3dea:	d02f      	beq.n	80e3e4c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80e3dec:	687b      	ldr	r3, [r7, #4]
 80e3dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e3df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3df4:	d00e      	beq.n	80e3e14 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80e3df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3dfa:	d814      	bhi.n	80e3e26 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80e3dfc:	2b00      	cmp	r3, #0
 80e3dfe:	d015      	beq.n	80e3e2c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80e3e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e3e04:	d10f      	bne.n	80e3e26 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3e06:	4b1c      	ldr	r3, [pc, #112]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3e0a:	4a1b      	ldr	r2, [pc, #108]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3e10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80e3e12:	e00c      	b.n	80e3e2e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3e14:	687b      	ldr	r3, [r7, #4]
 80e3e16:	3304      	adds	r3, #4
 80e3e18:	2101      	movs	r1, #1
 80e3e1a:	4618      	mov	r0, r3
 80e3e1c:	f000 fc6c 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e3e20:	4603      	mov	r3, r0
 80e3e22:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80e3e24:	e003      	b.n	80e3e2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3e26:	2301      	movs	r3, #1
 80e3e28:	75fb      	strb	r3, [r7, #23]
      break;
 80e3e2a:	e000      	b.n	80e3e2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80e3e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3e2e:	7dfb      	ldrb	r3, [r7, #23]
 80e3e30:	2b00      	cmp	r3, #0
 80e3e32:	d109      	bne.n	80e3e48 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80e3e34:	4b10      	ldr	r3, [pc, #64]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3e38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80e3e3c:	687b      	ldr	r3, [r7, #4]
 80e3e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e3e40:	490d      	ldr	r1, [pc, #52]	; (80e3e78 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3e42:	4313      	orrs	r3, r2
 80e3e44:	650b      	str	r3, [r1, #80]	; 0x50
 80e3e46:	e001      	b.n	80e3e4c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3e48:	7dfb      	ldrb	r3, [r7, #23]
 80e3e4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80e3e4c:	687b      	ldr	r3, [r7, #4]
 80e3e4e:	681b      	ldr	r3, [r3, #0]
 80e3e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80e3e54:	2b00      	cmp	r3, #0
 80e3e56:	d034      	beq.n	80e3ec2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80e3e58:	687b      	ldr	r3, [r7, #4]
 80e3e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e3e5c:	2b03      	cmp	r3, #3
 80e3e5e:	d81d      	bhi.n	80e3e9c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80e3e60:	a201      	add	r2, pc, #4	; (adr r2, 80e3e68 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80e3e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e3e66:	bf00      	nop
 80e3e68:	080e3ea3 	.word	0x080e3ea3
 80e3e6c:	080e3e7d 	.word	0x080e3e7d
 80e3e70:	080e3e8b 	.word	0x080e3e8b
 80e3e74:	080e3ea3 	.word	0x080e3ea3
 80e3e78:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3e7c:	4bb1      	ldr	r3, [pc, #708]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3e80:	4ab0      	ldr	r2, [pc, #704]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80e3e88:	e00c      	b.n	80e3ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e3e8a:	687b      	ldr	r3, [r7, #4]
 80e3e8c:	3304      	adds	r3, #4
 80e3e8e:	2102      	movs	r1, #2
 80e3e90:	4618      	mov	r0, r3
 80e3e92:	f000 fc31 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e3e96:	4603      	mov	r3, r0
 80e3e98:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80e3e9a:	e003      	b.n	80e3ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80e3e9c:	2301      	movs	r3, #1
 80e3e9e:	75fb      	strb	r3, [r7, #23]
      break;
 80e3ea0:	e000      	b.n	80e3ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80e3ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3ea4:	7dfb      	ldrb	r3, [r7, #23]
 80e3ea6:	2b00      	cmp	r3, #0
 80e3ea8:	d109      	bne.n	80e3ebe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80e3eaa:	4ba6      	ldr	r3, [pc, #664]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3eae:	f023 0203 	bic.w	r2, r3, #3
 80e3eb2:	687b      	ldr	r3, [r7, #4]
 80e3eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e3eb6:	49a3      	ldr	r1, [pc, #652]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3eb8:	4313      	orrs	r3, r2
 80e3eba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e3ebc:	e001      	b.n	80e3ec2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3ebe:	7dfb      	ldrb	r3, [r7, #23]
 80e3ec0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80e3ec2:	687b      	ldr	r3, [r7, #4]
 80e3ec4:	681b      	ldr	r3, [r3, #0]
 80e3ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80e3eca:	2b00      	cmp	r3, #0
 80e3ecc:	f000 8086 	beq.w	80e3fdc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80e3ed0:	4b9d      	ldr	r3, [pc, #628]	; (80e4148 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e3ed2:	681b      	ldr	r3, [r3, #0]
 80e3ed4:	4a9c      	ldr	r2, [pc, #624]	; (80e4148 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e3ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e3eda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80e3edc:	f7fd fb0c 	bl	80e14f8 <HAL_GetTick>
 80e3ee0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e3ee2:	e009      	b.n	80e3ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80e3ee4:	f7fd fb08 	bl	80e14f8 <HAL_GetTick>
 80e3ee8:	4602      	mov	r2, r0
 80e3eea:	693b      	ldr	r3, [r7, #16]
 80e3eec:	1ad3      	subs	r3, r2, r3
 80e3eee:	2b64      	cmp	r3, #100	; 0x64
 80e3ef0:	d902      	bls.n	80e3ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80e3ef2:	2303      	movs	r3, #3
 80e3ef4:	75fb      	strb	r3, [r7, #23]
        break;
 80e3ef6:	e005      	b.n	80e3f04 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e3ef8:	4b93      	ldr	r3, [pc, #588]	; (80e4148 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e3efa:	681b      	ldr	r3, [r3, #0]
 80e3efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e3f00:	2b00      	cmp	r3, #0
 80e3f02:	d0ef      	beq.n	80e3ee4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80e3f04:	7dfb      	ldrb	r3, [r7, #23]
 80e3f06:	2b00      	cmp	r3, #0
 80e3f08:	d166      	bne.n	80e3fd8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80e3f0a:	4b8e      	ldr	r3, [pc, #568]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3f0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e3f0e:	687b      	ldr	r3, [r7, #4]
 80e3f10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3f14:	4053      	eors	r3, r2
 80e3f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80e3f1a:	2b00      	cmp	r3, #0
 80e3f1c:	d013      	beq.n	80e3f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80e3f1e:	4b89      	ldr	r3, [pc, #548]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80e3f26:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80e3f28:	4b86      	ldr	r3, [pc, #536]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3f2c:	4a85      	ldr	r2, [pc, #532]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e3f32:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80e3f34:	4b83      	ldr	r3, [pc, #524]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3f38:	4a82      	ldr	r2, [pc, #520]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e3f3e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80e3f40:	4a80      	ldr	r2, [pc, #512]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3f42:	68fb      	ldr	r3, [r7, #12]
 80e3f44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80e3f46:	687b      	ldr	r3, [r7, #4]
 80e3f48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e3f50:	d115      	bne.n	80e3f7e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e3f52:	f7fd fad1 	bl	80e14f8 <HAL_GetTick>
 80e3f56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e3f58:	e00b      	b.n	80e3f72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80e3f5a:	f7fd facd 	bl	80e14f8 <HAL_GetTick>
 80e3f5e:	4602      	mov	r2, r0
 80e3f60:	693b      	ldr	r3, [r7, #16]
 80e3f62:	1ad3      	subs	r3, r2, r3
 80e3f64:	f241 3288 	movw	r2, #5000	; 0x1388
 80e3f68:	4293      	cmp	r3, r2
 80e3f6a:	d902      	bls.n	80e3f72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80e3f6c:	2303      	movs	r3, #3
 80e3f6e:	75fb      	strb	r3, [r7, #23]
            break;
 80e3f70:	e005      	b.n	80e3f7e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e3f72:	4b74      	ldr	r3, [pc, #464]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3f76:	f003 0302 	and.w	r3, r3, #2
 80e3f7a:	2b00      	cmp	r3, #0
 80e3f7c:	d0ed      	beq.n	80e3f5a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80e3f7e:	7dfb      	ldrb	r3, [r7, #23]
 80e3f80:	2b00      	cmp	r3, #0
 80e3f82:	d126      	bne.n	80e3fd2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80e3f84:	687b      	ldr	r3, [r7, #4]
 80e3f86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80e3f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e3f92:	d10d      	bne.n	80e3fb0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80e3f94:	4b6b      	ldr	r3, [pc, #428]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3f96:	691b      	ldr	r3, [r3, #16]
 80e3f98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80e3f9c:	687b      	ldr	r3, [r7, #4]
 80e3f9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3fa2:	0919      	lsrs	r1, r3, #4
 80e3fa4:	4b69      	ldr	r3, [pc, #420]	; (80e414c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80e3fa6:	400b      	ands	r3, r1
 80e3fa8:	4966      	ldr	r1, [pc, #408]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3faa:	4313      	orrs	r3, r2
 80e3fac:	610b      	str	r3, [r1, #16]
 80e3fae:	e005      	b.n	80e3fbc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80e3fb0:	4b64      	ldr	r3, [pc, #400]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3fb2:	691b      	ldr	r3, [r3, #16]
 80e3fb4:	4a63      	ldr	r2, [pc, #396]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3fb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80e3fba:	6113      	str	r3, [r2, #16]
 80e3fbc:	4b61      	ldr	r3, [pc, #388]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3fbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e3fc0:	687b      	ldr	r3, [r7, #4]
 80e3fc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80e3fca:	495e      	ldr	r1, [pc, #376]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3fcc:	4313      	orrs	r3, r2
 80e3fce:	670b      	str	r3, [r1, #112]	; 0x70
 80e3fd0:	e004      	b.n	80e3fdc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80e3fd2:	7dfb      	ldrb	r3, [r7, #23]
 80e3fd4:	75bb      	strb	r3, [r7, #22]
 80e3fd6:	e001      	b.n	80e3fdc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3fd8:	7dfb      	ldrb	r3, [r7, #23]
 80e3fda:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80e3fdc:	687b      	ldr	r3, [r7, #4]
 80e3fde:	681b      	ldr	r3, [r3, #0]
 80e3fe0:	f003 0301 	and.w	r3, r3, #1
 80e3fe4:	2b00      	cmp	r3, #0
 80e3fe6:	d07e      	beq.n	80e40e6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80e3fe8:	687b      	ldr	r3, [r7, #4]
 80e3fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e3fec:	2b28      	cmp	r3, #40	; 0x28
 80e3fee:	d867      	bhi.n	80e40c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80e3ff0:	a201      	add	r2, pc, #4	; (adr r2, 80e3ff8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80e3ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e3ff6:	bf00      	nop
 80e3ff8:	080e40c7 	.word	0x080e40c7
 80e3ffc:	080e40c1 	.word	0x080e40c1
 80e4000:	080e40c1 	.word	0x080e40c1
 80e4004:	080e40c1 	.word	0x080e40c1
 80e4008:	080e40c1 	.word	0x080e40c1
 80e400c:	080e40c1 	.word	0x080e40c1
 80e4010:	080e40c1 	.word	0x080e40c1
 80e4014:	080e40c1 	.word	0x080e40c1
 80e4018:	080e409d 	.word	0x080e409d
 80e401c:	080e40c1 	.word	0x080e40c1
 80e4020:	080e40c1 	.word	0x080e40c1
 80e4024:	080e40c1 	.word	0x080e40c1
 80e4028:	080e40c1 	.word	0x080e40c1
 80e402c:	080e40c1 	.word	0x080e40c1
 80e4030:	080e40c1 	.word	0x080e40c1
 80e4034:	080e40c1 	.word	0x080e40c1
 80e4038:	080e40af 	.word	0x080e40af
 80e403c:	080e40c1 	.word	0x080e40c1
 80e4040:	080e40c1 	.word	0x080e40c1
 80e4044:	080e40c1 	.word	0x080e40c1
 80e4048:	080e40c1 	.word	0x080e40c1
 80e404c:	080e40c1 	.word	0x080e40c1
 80e4050:	080e40c1 	.word	0x080e40c1
 80e4054:	080e40c1 	.word	0x080e40c1
 80e4058:	080e40c7 	.word	0x080e40c7
 80e405c:	080e40c1 	.word	0x080e40c1
 80e4060:	080e40c1 	.word	0x080e40c1
 80e4064:	080e40c1 	.word	0x080e40c1
 80e4068:	080e40c1 	.word	0x080e40c1
 80e406c:	080e40c1 	.word	0x080e40c1
 80e4070:	080e40c1 	.word	0x080e40c1
 80e4074:	080e40c1 	.word	0x080e40c1
 80e4078:	080e40c7 	.word	0x080e40c7
 80e407c:	080e40c1 	.word	0x080e40c1
 80e4080:	080e40c1 	.word	0x080e40c1
 80e4084:	080e40c1 	.word	0x080e40c1
 80e4088:	080e40c1 	.word	0x080e40c1
 80e408c:	080e40c1 	.word	0x080e40c1
 80e4090:	080e40c1 	.word	0x080e40c1
 80e4094:	080e40c1 	.word	0x080e40c1
 80e4098:	080e40c7 	.word	0x080e40c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e409c:	687b      	ldr	r3, [r7, #4]
 80e409e:	3304      	adds	r3, #4
 80e40a0:	2101      	movs	r1, #1
 80e40a2:	4618      	mov	r0, r3
 80e40a4:	f000 fb28 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e40a8:	4603      	mov	r3, r0
 80e40aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80e40ac:	e00c      	b.n	80e40c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e40ae:	687b      	ldr	r3, [r7, #4]
 80e40b0:	3324      	adds	r3, #36	; 0x24
 80e40b2:	2101      	movs	r1, #1
 80e40b4:	4618      	mov	r0, r3
 80e40b6:	f000 fbd1 	bl	80e485c <RCCEx_PLL3_Config>
 80e40ba:	4603      	mov	r3, r0
 80e40bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80e40be:	e003      	b.n	80e40c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e40c0:	2301      	movs	r3, #1
 80e40c2:	75fb      	strb	r3, [r7, #23]
      break;
 80e40c4:	e000      	b.n	80e40c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80e40c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e40c8:	7dfb      	ldrb	r3, [r7, #23]
 80e40ca:	2b00      	cmp	r3, #0
 80e40cc:	d109      	bne.n	80e40e2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80e40ce:	4b1d      	ldr	r3, [pc, #116]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e40d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e40d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80e40d6:	687b      	ldr	r3, [r7, #4]
 80e40d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e40da:	491a      	ldr	r1, [pc, #104]	; (80e4144 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e40dc:	4313      	orrs	r3, r2
 80e40de:	654b      	str	r3, [r1, #84]	; 0x54
 80e40e0:	e001      	b.n	80e40e6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e40e2:	7dfb      	ldrb	r3, [r7, #23]
 80e40e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80e40e6:	687b      	ldr	r3, [r7, #4]
 80e40e8:	681b      	ldr	r3, [r3, #0]
 80e40ea:	f003 0302 	and.w	r3, r3, #2
 80e40ee:	2b00      	cmp	r3, #0
 80e40f0:	d03e      	beq.n	80e4170 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80e40f2:	687b      	ldr	r3, [r7, #4]
 80e40f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e40f6:	2b05      	cmp	r3, #5
 80e40f8:	d820      	bhi.n	80e413c <HAL_RCCEx_PeriphCLKConfig+0x838>
 80e40fa:	a201      	add	r2, pc, #4	; (adr r2, 80e4100 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80e40fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e4100:	080e4151 	.word	0x080e4151
 80e4104:	080e4119 	.word	0x080e4119
 80e4108:	080e412b 	.word	0x080e412b
 80e410c:	080e4151 	.word	0x080e4151
 80e4110:	080e4151 	.word	0x080e4151
 80e4114:	080e4151 	.word	0x080e4151
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e4118:	687b      	ldr	r3, [r7, #4]
 80e411a:	3304      	adds	r3, #4
 80e411c:	2101      	movs	r1, #1
 80e411e:	4618      	mov	r0, r3
 80e4120:	f000 faea 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e4124:	4603      	mov	r3, r0
 80e4126:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80e4128:	e013      	b.n	80e4152 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e412a:	687b      	ldr	r3, [r7, #4]
 80e412c:	3324      	adds	r3, #36	; 0x24
 80e412e:	2101      	movs	r1, #1
 80e4130:	4618      	mov	r0, r3
 80e4132:	f000 fb93 	bl	80e485c <RCCEx_PLL3_Config>
 80e4136:	4603      	mov	r3, r0
 80e4138:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80e413a:	e00a      	b.n	80e4152 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e413c:	2301      	movs	r3, #1
 80e413e:	75fb      	strb	r3, [r7, #23]
      break;
 80e4140:	e007      	b.n	80e4152 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80e4142:	bf00      	nop
 80e4144:	58024400 	.word	0x58024400
 80e4148:	58024800 	.word	0x58024800
 80e414c:	00ffffcf 	.word	0x00ffffcf
      break;
 80e4150:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e4152:	7dfb      	ldrb	r3, [r7, #23]
 80e4154:	2b00      	cmp	r3, #0
 80e4156:	d109      	bne.n	80e416c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80e4158:	4b9f      	ldr	r3, [pc, #636]	; (80e43d8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e415c:	f023 0207 	bic.w	r2, r3, #7
 80e4160:	687b      	ldr	r3, [r7, #4]
 80e4162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e4164:	499c      	ldr	r1, [pc, #624]	; (80e43d8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e4166:	4313      	orrs	r3, r2
 80e4168:	654b      	str	r3, [r1, #84]	; 0x54
 80e416a:	e001      	b.n	80e4170 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e416c:	7dfb      	ldrb	r3, [r7, #23]
 80e416e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80e4170:	687b      	ldr	r3, [r7, #4]
 80e4172:	681b      	ldr	r3, [r3, #0]
 80e4174:	f003 0304 	and.w	r3, r3, #4
 80e4178:	2b00      	cmp	r3, #0
 80e417a:	d039      	beq.n	80e41f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80e417c:	687b      	ldr	r3, [r7, #4]
 80e417e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80e4182:	2b05      	cmp	r3, #5
 80e4184:	d820      	bhi.n	80e41c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80e4186:	a201      	add	r2, pc, #4	; (adr r2, 80e418c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80e4188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e418c:	080e41cf 	.word	0x080e41cf
 80e4190:	080e41a5 	.word	0x080e41a5
 80e4194:	080e41b7 	.word	0x080e41b7
 80e4198:	080e41cf 	.word	0x080e41cf
 80e419c:	080e41cf 	.word	0x080e41cf
 80e41a0:	080e41cf 	.word	0x080e41cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e41a4:	687b      	ldr	r3, [r7, #4]
 80e41a6:	3304      	adds	r3, #4
 80e41a8:	2101      	movs	r1, #1
 80e41aa:	4618      	mov	r0, r3
 80e41ac:	f000 faa4 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e41b0:	4603      	mov	r3, r0
 80e41b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80e41b4:	e00c      	b.n	80e41d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e41b6:	687b      	ldr	r3, [r7, #4]
 80e41b8:	3324      	adds	r3, #36	; 0x24
 80e41ba:	2101      	movs	r1, #1
 80e41bc:	4618      	mov	r0, r3
 80e41be:	f000 fb4d 	bl	80e485c <RCCEx_PLL3_Config>
 80e41c2:	4603      	mov	r3, r0
 80e41c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80e41c6:	e003      	b.n	80e41d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e41c8:	2301      	movs	r3, #1
 80e41ca:	75fb      	strb	r3, [r7, #23]
      break;
 80e41cc:	e000      	b.n	80e41d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80e41ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e41d0:	7dfb      	ldrb	r3, [r7, #23]
 80e41d2:	2b00      	cmp	r3, #0
 80e41d4:	d10a      	bne.n	80e41ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80e41d6:	4b80      	ldr	r3, [pc, #512]	; (80e43d8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e41d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e41da:	f023 0207 	bic.w	r2, r3, #7
 80e41de:	687b      	ldr	r3, [r7, #4]
 80e41e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80e41e4:	497c      	ldr	r1, [pc, #496]	; (80e43d8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e41e6:	4313      	orrs	r3, r2
 80e41e8:	658b      	str	r3, [r1, #88]	; 0x58
 80e41ea:	e001      	b.n	80e41f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e41ec:	7dfb      	ldrb	r3, [r7, #23]
 80e41ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80e41f0:	687b      	ldr	r3, [r7, #4]
 80e41f2:	681b      	ldr	r3, [r3, #0]
 80e41f4:	f003 0320 	and.w	r3, r3, #32
 80e41f8:	2b00      	cmp	r3, #0
 80e41fa:	d04b      	beq.n	80e4294 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80e41fc:	687b      	ldr	r3, [r7, #4]
 80e41fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e4202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e4206:	d02e      	beq.n	80e4266 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80e4208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e420c:	d828      	bhi.n	80e4260 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e420e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e4212:	d02a      	beq.n	80e426a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80e4214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e4218:	d822      	bhi.n	80e4260 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e421a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e421e:	d026      	beq.n	80e426e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80e4220:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e4224:	d81c      	bhi.n	80e4260 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e4226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e422a:	d010      	beq.n	80e424e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80e422c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e4230:	d816      	bhi.n	80e4260 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e4232:	2b00      	cmp	r3, #0
 80e4234:	d01d      	beq.n	80e4272 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80e4236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e423a:	d111      	bne.n	80e4260 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e423c:	687b      	ldr	r3, [r7, #4]
 80e423e:	3304      	adds	r3, #4
 80e4240:	2100      	movs	r1, #0
 80e4242:	4618      	mov	r0, r3
 80e4244:	f000 fa58 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e4248:	4603      	mov	r3, r0
 80e424a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80e424c:	e012      	b.n	80e4274 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e424e:	687b      	ldr	r3, [r7, #4]
 80e4250:	3324      	adds	r3, #36	; 0x24
 80e4252:	2102      	movs	r1, #2
 80e4254:	4618      	mov	r0, r3
 80e4256:	f000 fb01 	bl	80e485c <RCCEx_PLL3_Config>
 80e425a:	4603      	mov	r3, r0
 80e425c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80e425e:	e009      	b.n	80e4274 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e4260:	2301      	movs	r3, #1
 80e4262:	75fb      	strb	r3, [r7, #23]
      break;
 80e4264:	e006      	b.n	80e4274 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e4266:	bf00      	nop
 80e4268:	e004      	b.n	80e4274 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e426a:	bf00      	nop
 80e426c:	e002      	b.n	80e4274 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e426e:	bf00      	nop
 80e4270:	e000      	b.n	80e4274 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e4272:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e4274:	7dfb      	ldrb	r3, [r7, #23]
 80e4276:	2b00      	cmp	r3, #0
 80e4278:	d10a      	bne.n	80e4290 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80e427a:	4b57      	ldr	r3, [pc, #348]	; (80e43d8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e427e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80e4282:	687b      	ldr	r3, [r7, #4]
 80e4284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e4288:	4953      	ldr	r1, [pc, #332]	; (80e43d8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e428a:	4313      	orrs	r3, r2
 80e428c:	654b      	str	r3, [r1, #84]	; 0x54
 80e428e:	e001      	b.n	80e4294 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e4290:	7dfb      	ldrb	r3, [r7, #23]
 80e4292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80e4294:	687b      	ldr	r3, [r7, #4]
 80e4296:	681b      	ldr	r3, [r3, #0]
 80e4298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80e429c:	2b00      	cmp	r3, #0
 80e429e:	d04b      	beq.n	80e4338 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80e42a0:	687b      	ldr	r3, [r7, #4]
 80e42a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80e42a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80e42aa:	d02e      	beq.n	80e430a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80e42ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80e42b0:	d828      	bhi.n	80e4304 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e42b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e42b6:	d02a      	beq.n	80e430e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80e42b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e42bc:	d822      	bhi.n	80e4304 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e42be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80e42c2:	d026      	beq.n	80e4312 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80e42c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80e42c8:	d81c      	bhi.n	80e4304 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e42ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80e42ce:	d010      	beq.n	80e42f2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80e42d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80e42d4:	d816      	bhi.n	80e4304 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e42d6:	2b00      	cmp	r3, #0
 80e42d8:	d01d      	beq.n	80e4316 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80e42da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80e42de:	d111      	bne.n	80e4304 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e42e0:	687b      	ldr	r3, [r7, #4]
 80e42e2:	3304      	adds	r3, #4
 80e42e4:	2100      	movs	r1, #0
 80e42e6:	4618      	mov	r0, r3
 80e42e8:	f000 fa06 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e42ec:	4603      	mov	r3, r0
 80e42ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80e42f0:	e012      	b.n	80e4318 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e42f2:	687b      	ldr	r3, [r7, #4]
 80e42f4:	3324      	adds	r3, #36	; 0x24
 80e42f6:	2102      	movs	r1, #2
 80e42f8:	4618      	mov	r0, r3
 80e42fa:	f000 faaf 	bl	80e485c <RCCEx_PLL3_Config>
 80e42fe:	4603      	mov	r3, r0
 80e4300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80e4302:	e009      	b.n	80e4318 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e4304:	2301      	movs	r3, #1
 80e4306:	75fb      	strb	r3, [r7, #23]
      break;
 80e4308:	e006      	b.n	80e4318 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e430a:	bf00      	nop
 80e430c:	e004      	b.n	80e4318 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e430e:	bf00      	nop
 80e4310:	e002      	b.n	80e4318 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e4312:	bf00      	nop
 80e4314:	e000      	b.n	80e4318 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e4316:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e4318:	7dfb      	ldrb	r3, [r7, #23]
 80e431a:	2b00      	cmp	r3, #0
 80e431c:	d10a      	bne.n	80e4334 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80e431e:	4b2e      	ldr	r3, [pc, #184]	; (80e43d8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e4320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e4322:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80e4326:	687b      	ldr	r3, [r7, #4]
 80e4328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80e432c:	492a      	ldr	r1, [pc, #168]	; (80e43d8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e432e:	4313      	orrs	r3, r2
 80e4330:	658b      	str	r3, [r1, #88]	; 0x58
 80e4332:	e001      	b.n	80e4338 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e4334:	7dfb      	ldrb	r3, [r7, #23]
 80e4336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80e4338:	687b      	ldr	r3, [r7, #4]
 80e433a:	681b      	ldr	r3, [r3, #0]
 80e433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80e4340:	2b00      	cmp	r3, #0
 80e4342:	d04d      	beq.n	80e43e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80e4344:	687b      	ldr	r3, [r7, #4]
 80e4346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80e434a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80e434e:	d02e      	beq.n	80e43ae <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80e4350:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80e4354:	d828      	bhi.n	80e43a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e4356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80e435a:	d02a      	beq.n	80e43b2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80e435c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80e4360:	d822      	bhi.n	80e43a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e4362:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80e4366:	d026      	beq.n	80e43b6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80e4368:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80e436c:	d81c      	bhi.n	80e43a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e436e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e4372:	d010      	beq.n	80e4396 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80e4374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e4378:	d816      	bhi.n	80e43a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e437a:	2b00      	cmp	r3, #0
 80e437c:	d01d      	beq.n	80e43ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80e437e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e4382:	d111      	bne.n	80e43a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e4384:	687b      	ldr	r3, [r7, #4]
 80e4386:	3304      	adds	r3, #4
 80e4388:	2100      	movs	r1, #0
 80e438a:	4618      	mov	r0, r3
 80e438c:	f000 f9b4 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e4390:	4603      	mov	r3, r0
 80e4392:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80e4394:	e012      	b.n	80e43bc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e4396:	687b      	ldr	r3, [r7, #4]
 80e4398:	3324      	adds	r3, #36	; 0x24
 80e439a:	2102      	movs	r1, #2
 80e439c:	4618      	mov	r0, r3
 80e439e:	f000 fa5d 	bl	80e485c <RCCEx_PLL3_Config>
 80e43a2:	4603      	mov	r3, r0
 80e43a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80e43a6:	e009      	b.n	80e43bc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e43a8:	2301      	movs	r3, #1
 80e43aa:	75fb      	strb	r3, [r7, #23]
      break;
 80e43ac:	e006      	b.n	80e43bc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e43ae:	bf00      	nop
 80e43b0:	e004      	b.n	80e43bc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e43b2:	bf00      	nop
 80e43b4:	e002      	b.n	80e43bc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e43b6:	bf00      	nop
 80e43b8:	e000      	b.n	80e43bc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e43ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e43bc:	7dfb      	ldrb	r3, [r7, #23]
 80e43be:	2b00      	cmp	r3, #0
 80e43c0:	d10c      	bne.n	80e43dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80e43c2:	4b05      	ldr	r3, [pc, #20]	; (80e43d8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e43c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e43c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80e43ca:	687b      	ldr	r3, [r7, #4]
 80e43cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80e43d0:	4901      	ldr	r1, [pc, #4]	; (80e43d8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e43d2:	4313      	orrs	r3, r2
 80e43d4:	658b      	str	r3, [r1, #88]	; 0x58
 80e43d6:	e003      	b.n	80e43e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80e43d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e43dc:	7dfb      	ldrb	r3, [r7, #23]
 80e43de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80e43e0:	687b      	ldr	r3, [r7, #4]
 80e43e2:	681b      	ldr	r3, [r3, #0]
 80e43e4:	f003 0308 	and.w	r3, r3, #8
 80e43e8:	2b00      	cmp	r3, #0
 80e43ea:	d018      	beq.n	80e441e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80e43ec:	687b      	ldr	r3, [r7, #4]
 80e43ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80e43f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e43f4:	d10a      	bne.n	80e440c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80e43f6:	687b      	ldr	r3, [r7, #4]
 80e43f8:	3324      	adds	r3, #36	; 0x24
 80e43fa:	2102      	movs	r1, #2
 80e43fc:	4618      	mov	r0, r3
 80e43fe:	f000 fa2d 	bl	80e485c <RCCEx_PLL3_Config>
 80e4402:	4603      	mov	r3, r0
 80e4404:	2b00      	cmp	r3, #0
 80e4406:	d001      	beq.n	80e440c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80e4408:	2301      	movs	r3, #1
 80e440a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80e440c:	4b8a      	ldr	r3, [pc, #552]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e4410:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80e4414:	687b      	ldr	r3, [r7, #4]
 80e4416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80e4418:	4987      	ldr	r1, [pc, #540]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e441a:	4313      	orrs	r3, r2
 80e441c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80e441e:	687b      	ldr	r3, [r7, #4]
 80e4420:	681b      	ldr	r3, [r3, #0]
 80e4422:	f003 0310 	and.w	r3, r3, #16
 80e4426:	2b00      	cmp	r3, #0
 80e4428:	d01a      	beq.n	80e4460 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80e442a:	687b      	ldr	r3, [r7, #4]
 80e442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e4430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e4434:	d10a      	bne.n	80e444c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80e4436:	687b      	ldr	r3, [r7, #4]
 80e4438:	3324      	adds	r3, #36	; 0x24
 80e443a:	2102      	movs	r1, #2
 80e443c:	4618      	mov	r0, r3
 80e443e:	f000 fa0d 	bl	80e485c <RCCEx_PLL3_Config>
 80e4442:	4603      	mov	r3, r0
 80e4444:	2b00      	cmp	r3, #0
 80e4446:	d001      	beq.n	80e444c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80e4448:	2301      	movs	r3, #1
 80e444a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80e444c:	4b7a      	ldr	r3, [pc, #488]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e4450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80e4454:	687b      	ldr	r3, [r7, #4]
 80e4456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e445a:	4977      	ldr	r1, [pc, #476]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e445c:	4313      	orrs	r3, r2
 80e445e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80e4460:	687b      	ldr	r3, [r7, #4]
 80e4462:	681b      	ldr	r3, [r3, #0]
 80e4464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80e4468:	2b00      	cmp	r3, #0
 80e446a:	d034      	beq.n	80e44d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80e446c:	687b      	ldr	r3, [r7, #4]
 80e446e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e4472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e4476:	d01d      	beq.n	80e44b4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80e4478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e447c:	d817      	bhi.n	80e44ae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80e447e:	2b00      	cmp	r3, #0
 80e4480:	d003      	beq.n	80e448a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80e4482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e4486:	d009      	beq.n	80e449c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80e4488:	e011      	b.n	80e44ae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e448a:	687b      	ldr	r3, [r7, #4]
 80e448c:	3304      	adds	r3, #4
 80e448e:	2100      	movs	r1, #0
 80e4490:	4618      	mov	r0, r3
 80e4492:	f000 f931 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e4496:	4603      	mov	r3, r0
 80e4498:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80e449a:	e00c      	b.n	80e44b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e449c:	687b      	ldr	r3, [r7, #4]
 80e449e:	3324      	adds	r3, #36	; 0x24
 80e44a0:	2102      	movs	r1, #2
 80e44a2:	4618      	mov	r0, r3
 80e44a4:	f000 f9da 	bl	80e485c <RCCEx_PLL3_Config>
 80e44a8:	4603      	mov	r3, r0
 80e44aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80e44ac:	e003      	b.n	80e44b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e44ae:	2301      	movs	r3, #1
 80e44b0:	75fb      	strb	r3, [r7, #23]
      break;
 80e44b2:	e000      	b.n	80e44b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80e44b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e44b6:	7dfb      	ldrb	r3, [r7, #23]
 80e44b8:	2b00      	cmp	r3, #0
 80e44ba:	d10a      	bne.n	80e44d2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80e44bc:	4b5e      	ldr	r3, [pc, #376]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e44be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e44c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80e44c4:	687b      	ldr	r3, [r7, #4]
 80e44c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e44ca:	495b      	ldr	r1, [pc, #364]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e44cc:	4313      	orrs	r3, r2
 80e44ce:	658b      	str	r3, [r1, #88]	; 0x58
 80e44d0:	e001      	b.n	80e44d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e44d2:	7dfb      	ldrb	r3, [r7, #23]
 80e44d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80e44d6:	687b      	ldr	r3, [r7, #4]
 80e44d8:	681b      	ldr	r3, [r3, #0]
 80e44da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80e44de:	2b00      	cmp	r3, #0
 80e44e0:	d033      	beq.n	80e454a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80e44e2:	687b      	ldr	r3, [r7, #4]
 80e44e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80e44e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e44ec:	d01c      	beq.n	80e4528 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80e44ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e44f2:	d816      	bhi.n	80e4522 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80e44f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80e44f8:	d003      	beq.n	80e4502 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80e44fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e44fe:	d007      	beq.n	80e4510 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80e4500:	e00f      	b.n	80e4522 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e4502:	4b4d      	ldr	r3, [pc, #308]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4506:	4a4c      	ldr	r2, [pc, #304]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e450c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80e450e:	e00c      	b.n	80e452a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e4510:	687b      	ldr	r3, [r7, #4]
 80e4512:	3324      	adds	r3, #36	; 0x24
 80e4514:	2101      	movs	r1, #1
 80e4516:	4618      	mov	r0, r3
 80e4518:	f000 f9a0 	bl	80e485c <RCCEx_PLL3_Config>
 80e451c:	4603      	mov	r3, r0
 80e451e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80e4520:	e003      	b.n	80e452a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e4522:	2301      	movs	r3, #1
 80e4524:	75fb      	strb	r3, [r7, #23]
      break;
 80e4526:	e000      	b.n	80e452a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80e4528:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e452a:	7dfb      	ldrb	r3, [r7, #23]
 80e452c:	2b00      	cmp	r3, #0
 80e452e:	d10a      	bne.n	80e4546 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80e4530:	4b41      	ldr	r3, [pc, #260]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e4534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80e4538:	687b      	ldr	r3, [r7, #4]
 80e453a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80e453e:	493e      	ldr	r1, [pc, #248]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4540:	4313      	orrs	r3, r2
 80e4542:	654b      	str	r3, [r1, #84]	; 0x54
 80e4544:	e001      	b.n	80e454a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e4546:	7dfb      	ldrb	r3, [r7, #23]
 80e4548:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80e454a:	687b      	ldr	r3, [r7, #4]
 80e454c:	681b      	ldr	r3, [r3, #0]
 80e454e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80e4552:	2b00      	cmp	r3, #0
 80e4554:	d029      	beq.n	80e45aa <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80e4556:	687b      	ldr	r3, [r7, #4]
 80e4558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e455a:	2b00      	cmp	r3, #0
 80e455c:	d003      	beq.n	80e4566 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80e455e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e4562:	d007      	beq.n	80e4574 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80e4564:	e00f      	b.n	80e4586 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e4566:	4b34      	ldr	r3, [pc, #208]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e456a:	4a33      	ldr	r2, [pc, #204]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e456c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e4570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80e4572:	e00b      	b.n	80e458c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e4574:	687b      	ldr	r3, [r7, #4]
 80e4576:	3304      	adds	r3, #4
 80e4578:	2102      	movs	r1, #2
 80e457a:	4618      	mov	r0, r3
 80e457c:	f000 f8bc 	bl	80e46f8 <RCCEx_PLL2_Config>
 80e4580:	4603      	mov	r3, r0
 80e4582:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80e4584:	e002      	b.n	80e458c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80e4586:	2301      	movs	r3, #1
 80e4588:	75fb      	strb	r3, [r7, #23]
      break;
 80e458a:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e458c:	7dfb      	ldrb	r3, [r7, #23]
 80e458e:	2b00      	cmp	r3, #0
 80e4590:	d109      	bne.n	80e45a6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80e4592:	4b29      	ldr	r3, [pc, #164]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e4596:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80e459a:	687b      	ldr	r3, [r7, #4]
 80e459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e459e:	4926      	ldr	r1, [pc, #152]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e45a0:	4313      	orrs	r3, r2
 80e45a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e45a4:	e001      	b.n	80e45aa <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e45a6:	7dfb      	ldrb	r3, [r7, #23]
 80e45a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80e45aa:	687b      	ldr	r3, [r7, #4]
 80e45ac:	681b      	ldr	r3, [r3, #0]
 80e45ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e45b2:	2b00      	cmp	r3, #0
 80e45b4:	d00a      	beq.n	80e45cc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80e45b6:	687b      	ldr	r3, [r7, #4]
 80e45b8:	3324      	adds	r3, #36	; 0x24
 80e45ba:	2102      	movs	r1, #2
 80e45bc:	4618      	mov	r0, r3
 80e45be:	f000 f94d 	bl	80e485c <RCCEx_PLL3_Config>
 80e45c2:	4603      	mov	r3, r0
 80e45c4:	2b00      	cmp	r3, #0
 80e45c6:	d001      	beq.n	80e45cc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80e45c8:	2301      	movs	r3, #1
 80e45ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80e45cc:	687b      	ldr	r3, [r7, #4]
 80e45ce:	681b      	ldr	r3, [r3, #0]
 80e45d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e45d4:	2b00      	cmp	r3, #0
 80e45d6:	d033      	beq.n	80e4640 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80e45d8:	687b      	ldr	r3, [r7, #4]
 80e45da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80e45dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e45e0:	d017      	beq.n	80e4612 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80e45e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e45e6:	d811      	bhi.n	80e460c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80e45e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80e45ec:	d013      	beq.n	80e4616 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80e45ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80e45f2:	d80b      	bhi.n	80e460c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80e45f4:	2b00      	cmp	r3, #0
 80e45f6:	d010      	beq.n	80e461a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80e45f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e45fc:	d106      	bne.n	80e460c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e45fe:	4b0e      	ldr	r3, [pc, #56]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4602:	4a0d      	ldr	r2, [pc, #52]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e4608:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80e460a:	e007      	b.n	80e461c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e460c:	2301      	movs	r3, #1
 80e460e:	75fb      	strb	r3, [r7, #23]
      break;
 80e4610:	e004      	b.n	80e461c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e4612:	bf00      	nop
 80e4614:	e002      	b.n	80e461c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e4616:	bf00      	nop
 80e4618:	e000      	b.n	80e461c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e461a:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e461c:	7dfb      	ldrb	r3, [r7, #23]
 80e461e:	2b00      	cmp	r3, #0
 80e4620:	d10c      	bne.n	80e463c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80e4622:	4b05      	ldr	r3, [pc, #20]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e4626:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80e462a:	687b      	ldr	r3, [r7, #4]
 80e462c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80e462e:	4902      	ldr	r1, [pc, #8]	; (80e4638 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4630:	4313      	orrs	r3, r2
 80e4632:	654b      	str	r3, [r1, #84]	; 0x54
 80e4634:	e004      	b.n	80e4640 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80e4636:	bf00      	nop
 80e4638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e463c:	7dfb      	ldrb	r3, [r7, #23]
 80e463e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80e4640:	687b      	ldr	r3, [r7, #4]
 80e4642:	681b      	ldr	r3, [r3, #0]
 80e4644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80e4648:	2b00      	cmp	r3, #0
 80e464a:	d008      	beq.n	80e465e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80e464c:	4b29      	ldr	r3, [pc, #164]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e4650:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80e4654:	687b      	ldr	r3, [r7, #4]
 80e4656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80e4658:	4926      	ldr	r1, [pc, #152]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e465a:	4313      	orrs	r3, r2
 80e465c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80e465e:	687b      	ldr	r3, [r7, #4]
 80e4660:	681b      	ldr	r3, [r3, #0]
 80e4662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e4666:	2b00      	cmp	r3, #0
 80e4668:	d008      	beq.n	80e467c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80e466a:	4b22      	ldr	r3, [pc, #136]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e466c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e466e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80e4672:	687b      	ldr	r3, [r7, #4]
 80e4674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80e4676:	491f      	ldr	r1, [pc, #124]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e4678:	4313      	orrs	r3, r2
 80e467a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80e467c:	687b      	ldr	r3, [r7, #4]
 80e467e:	681b      	ldr	r3, [r3, #0]
 80e4680:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80e4684:	2b00      	cmp	r3, #0
 80e4686:	d00d      	beq.n	80e46a4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80e4688:	4b1a      	ldr	r3, [pc, #104]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e468a:	691b      	ldr	r3, [r3, #16]
 80e468c:	4a19      	ldr	r2, [pc, #100]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e468e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80e4692:	6113      	str	r3, [r2, #16]
 80e4694:	4b17      	ldr	r3, [pc, #92]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e4696:	691a      	ldr	r2, [r3, #16]
 80e4698:	687b      	ldr	r3, [r7, #4]
 80e469a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e469e:	4915      	ldr	r1, [pc, #84]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e46a0:	4313      	orrs	r3, r2
 80e46a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80e46a4:	687b      	ldr	r3, [r7, #4]
 80e46a6:	681b      	ldr	r3, [r3, #0]
 80e46a8:	2b00      	cmp	r3, #0
 80e46aa:	da08      	bge.n	80e46be <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80e46ac:	4b11      	ldr	r3, [pc, #68]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e46ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e46b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80e46b4:	687b      	ldr	r3, [r7, #4]
 80e46b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e46b8:	490e      	ldr	r1, [pc, #56]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e46ba:	4313      	orrs	r3, r2
 80e46bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80e46be:	687b      	ldr	r3, [r7, #4]
 80e46c0:	681b      	ldr	r3, [r3, #0]
 80e46c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80e46c6:	2b00      	cmp	r3, #0
 80e46c8:	d009      	beq.n	80e46de <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80e46ca:	4b0a      	ldr	r3, [pc, #40]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e46cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e46ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80e46d2:	687b      	ldr	r3, [r7, #4]
 80e46d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80e46d8:	4906      	ldr	r1, [pc, #24]	; (80e46f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e46da:	4313      	orrs	r3, r2
 80e46dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80e46de:	7dbb      	ldrb	r3, [r7, #22]
 80e46e0:	2b00      	cmp	r3, #0
 80e46e2:	d101      	bne.n	80e46e8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80e46e4:	2300      	movs	r3, #0
 80e46e6:	e000      	b.n	80e46ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80e46e8:	2301      	movs	r3, #1
}
 80e46ea:	4618      	mov	r0, r3
 80e46ec:	3718      	adds	r7, #24
 80e46ee:	46bd      	mov	sp, r7
 80e46f0:	bd80      	pop	{r7, pc}
 80e46f2:	bf00      	nop
 80e46f4:	58024400 	.word	0x58024400

080e46f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80e46f8:	b580      	push	{r7, lr}
 80e46fa:	b084      	sub	sp, #16
 80e46fc:	af00      	add	r7, sp, #0
 80e46fe:	6078      	str	r0, [r7, #4]
 80e4700:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80e4702:	2300      	movs	r3, #0
 80e4704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80e4706:	4b53      	ldr	r3, [pc, #332]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e4708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e470a:	f003 0303 	and.w	r3, r3, #3
 80e470e:	2b03      	cmp	r3, #3
 80e4710:	d101      	bne.n	80e4716 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80e4712:	2301      	movs	r3, #1
 80e4714:	e099      	b.n	80e484a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80e4716:	4b4f      	ldr	r3, [pc, #316]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e4718:	681b      	ldr	r3, [r3, #0]
 80e471a:	4a4e      	ldr	r2, [pc, #312]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e471c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80e4720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e4722:	f7fc fee9 	bl	80e14f8 <HAL_GetTick>
 80e4726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80e4728:	e008      	b.n	80e473c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80e472a:	f7fc fee5 	bl	80e14f8 <HAL_GetTick>
 80e472e:	4602      	mov	r2, r0
 80e4730:	68bb      	ldr	r3, [r7, #8]
 80e4732:	1ad3      	subs	r3, r2, r3
 80e4734:	2b02      	cmp	r3, #2
 80e4736:	d901      	bls.n	80e473c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80e4738:	2303      	movs	r3, #3
 80e473a:	e086      	b.n	80e484a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80e473c:	4b45      	ldr	r3, [pc, #276]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e473e:	681b      	ldr	r3, [r3, #0]
 80e4740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e4744:	2b00      	cmp	r3, #0
 80e4746:	d1f0      	bne.n	80e472a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80e4748:	4b42      	ldr	r3, [pc, #264]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e474c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80e4750:	687b      	ldr	r3, [r7, #4]
 80e4752:	681b      	ldr	r3, [r3, #0]
 80e4754:	031b      	lsls	r3, r3, #12
 80e4756:	493f      	ldr	r1, [pc, #252]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e4758:	4313      	orrs	r3, r2
 80e475a:	628b      	str	r3, [r1, #40]	; 0x28
 80e475c:	687b      	ldr	r3, [r7, #4]
 80e475e:	685b      	ldr	r3, [r3, #4]
 80e4760:	3b01      	subs	r3, #1
 80e4762:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e4766:	687b      	ldr	r3, [r7, #4]
 80e4768:	689b      	ldr	r3, [r3, #8]
 80e476a:	3b01      	subs	r3, #1
 80e476c:	025b      	lsls	r3, r3, #9
 80e476e:	b29b      	uxth	r3, r3
 80e4770:	431a      	orrs	r2, r3
 80e4772:	687b      	ldr	r3, [r7, #4]
 80e4774:	68db      	ldr	r3, [r3, #12]
 80e4776:	3b01      	subs	r3, #1
 80e4778:	041b      	lsls	r3, r3, #16
 80e477a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e477e:	431a      	orrs	r2, r3
 80e4780:	687b      	ldr	r3, [r7, #4]
 80e4782:	691b      	ldr	r3, [r3, #16]
 80e4784:	3b01      	subs	r3, #1
 80e4786:	061b      	lsls	r3, r3, #24
 80e4788:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e478c:	4931      	ldr	r1, [pc, #196]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e478e:	4313      	orrs	r3, r2
 80e4790:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80e4792:	4b30      	ldr	r3, [pc, #192]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e4794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4796:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80e479a:	687b      	ldr	r3, [r7, #4]
 80e479c:	695b      	ldr	r3, [r3, #20]
 80e479e:	492d      	ldr	r1, [pc, #180]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47a0:	4313      	orrs	r3, r2
 80e47a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80e47a4:	4b2b      	ldr	r3, [pc, #172]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e47a8:	f023 0220 	bic.w	r2, r3, #32
 80e47ac:	687b      	ldr	r3, [r7, #4]
 80e47ae:	699b      	ldr	r3, [r3, #24]
 80e47b0:	4928      	ldr	r1, [pc, #160]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47b2:	4313      	orrs	r3, r2
 80e47b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80e47b6:	4b27      	ldr	r3, [pc, #156]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e47ba:	4a26      	ldr	r2, [pc, #152]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47bc:	f023 0310 	bic.w	r3, r3, #16
 80e47c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80e47c2:	4b24      	ldr	r3, [pc, #144]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80e47c6:	4b24      	ldr	r3, [pc, #144]	; (80e4858 <RCCEx_PLL2_Config+0x160>)
 80e47c8:	4013      	ands	r3, r2
 80e47ca:	687a      	ldr	r2, [r7, #4]
 80e47cc:	69d2      	ldr	r2, [r2, #28]
 80e47ce:	00d2      	lsls	r2, r2, #3
 80e47d0:	4920      	ldr	r1, [pc, #128]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47d2:	4313      	orrs	r3, r2
 80e47d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80e47d6:	4b1f      	ldr	r3, [pc, #124]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e47da:	4a1e      	ldr	r2, [pc, #120]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47dc:	f043 0310 	orr.w	r3, r3, #16
 80e47e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80e47e2:	683b      	ldr	r3, [r7, #0]
 80e47e4:	2b00      	cmp	r3, #0
 80e47e6:	d106      	bne.n	80e47f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80e47e8:	4b1a      	ldr	r3, [pc, #104]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e47ec:	4a19      	ldr	r2, [pc, #100]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80e47f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e47f4:	e00f      	b.n	80e4816 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80e47f6:	683b      	ldr	r3, [r7, #0]
 80e47f8:	2b01      	cmp	r3, #1
 80e47fa:	d106      	bne.n	80e480a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80e47fc:	4b15      	ldr	r3, [pc, #84]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e47fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4800:	4a14      	ldr	r2, [pc, #80]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e4802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80e4806:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e4808:	e005      	b.n	80e4816 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80e480a:	4b12      	ldr	r3, [pc, #72]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e480e:	4a11      	ldr	r2, [pc, #68]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e4810:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80e4814:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80e4816:	4b0f      	ldr	r3, [pc, #60]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e4818:	681b      	ldr	r3, [r3, #0]
 80e481a:	4a0e      	ldr	r2, [pc, #56]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e481c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80e4820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e4822:	f7fc fe69 	bl	80e14f8 <HAL_GetTick>
 80e4826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80e4828:	e008      	b.n	80e483c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80e482a:	f7fc fe65 	bl	80e14f8 <HAL_GetTick>
 80e482e:	4602      	mov	r2, r0
 80e4830:	68bb      	ldr	r3, [r7, #8]
 80e4832:	1ad3      	subs	r3, r2, r3
 80e4834:	2b02      	cmp	r3, #2
 80e4836:	d901      	bls.n	80e483c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80e4838:	2303      	movs	r3, #3
 80e483a:	e006      	b.n	80e484a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80e483c:	4b05      	ldr	r3, [pc, #20]	; (80e4854 <RCCEx_PLL2_Config+0x15c>)
 80e483e:	681b      	ldr	r3, [r3, #0]
 80e4840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e4844:	2b00      	cmp	r3, #0
 80e4846:	d0f0      	beq.n	80e482a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80e4848:	7bfb      	ldrb	r3, [r7, #15]
}
 80e484a:	4618      	mov	r0, r3
 80e484c:	3710      	adds	r7, #16
 80e484e:	46bd      	mov	sp, r7
 80e4850:	bd80      	pop	{r7, pc}
 80e4852:	bf00      	nop
 80e4854:	58024400 	.word	0x58024400
 80e4858:	ffff0007 	.word	0xffff0007

080e485c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80e485c:	b580      	push	{r7, lr}
 80e485e:	b084      	sub	sp, #16
 80e4860:	af00      	add	r7, sp, #0
 80e4862:	6078      	str	r0, [r7, #4]
 80e4864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80e4866:	2300      	movs	r3, #0
 80e4868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80e486a:	4b53      	ldr	r3, [pc, #332]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e486e:	f003 0303 	and.w	r3, r3, #3
 80e4872:	2b03      	cmp	r3, #3
 80e4874:	d101      	bne.n	80e487a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80e4876:	2301      	movs	r3, #1
 80e4878:	e099      	b.n	80e49ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80e487a:	4b4f      	ldr	r3, [pc, #316]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e487c:	681b      	ldr	r3, [r3, #0]
 80e487e:	4a4e      	ldr	r2, [pc, #312]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80e4884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e4886:	f7fc fe37 	bl	80e14f8 <HAL_GetTick>
 80e488a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80e488c:	e008      	b.n	80e48a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80e488e:	f7fc fe33 	bl	80e14f8 <HAL_GetTick>
 80e4892:	4602      	mov	r2, r0
 80e4894:	68bb      	ldr	r3, [r7, #8]
 80e4896:	1ad3      	subs	r3, r2, r3
 80e4898:	2b02      	cmp	r3, #2
 80e489a:	d901      	bls.n	80e48a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80e489c:	2303      	movs	r3, #3
 80e489e:	e086      	b.n	80e49ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80e48a0:	4b45      	ldr	r3, [pc, #276]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e48a2:	681b      	ldr	r3, [r3, #0]
 80e48a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e48a8:	2b00      	cmp	r3, #0
 80e48aa:	d1f0      	bne.n	80e488e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80e48ac:	4b42      	ldr	r3, [pc, #264]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e48ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e48b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80e48b4:	687b      	ldr	r3, [r7, #4]
 80e48b6:	681b      	ldr	r3, [r3, #0]
 80e48b8:	051b      	lsls	r3, r3, #20
 80e48ba:	493f      	ldr	r1, [pc, #252]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e48bc:	4313      	orrs	r3, r2
 80e48be:	628b      	str	r3, [r1, #40]	; 0x28
 80e48c0:	687b      	ldr	r3, [r7, #4]
 80e48c2:	685b      	ldr	r3, [r3, #4]
 80e48c4:	3b01      	subs	r3, #1
 80e48c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e48ca:	687b      	ldr	r3, [r7, #4]
 80e48cc:	689b      	ldr	r3, [r3, #8]
 80e48ce:	3b01      	subs	r3, #1
 80e48d0:	025b      	lsls	r3, r3, #9
 80e48d2:	b29b      	uxth	r3, r3
 80e48d4:	431a      	orrs	r2, r3
 80e48d6:	687b      	ldr	r3, [r7, #4]
 80e48d8:	68db      	ldr	r3, [r3, #12]
 80e48da:	3b01      	subs	r3, #1
 80e48dc:	041b      	lsls	r3, r3, #16
 80e48de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e48e2:	431a      	orrs	r2, r3
 80e48e4:	687b      	ldr	r3, [r7, #4]
 80e48e6:	691b      	ldr	r3, [r3, #16]
 80e48e8:	3b01      	subs	r3, #1
 80e48ea:	061b      	lsls	r3, r3, #24
 80e48ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e48f0:	4931      	ldr	r1, [pc, #196]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e48f2:	4313      	orrs	r3, r2
 80e48f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80e48f6:	4b30      	ldr	r3, [pc, #192]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e48f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e48fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80e48fe:	687b      	ldr	r3, [r7, #4]
 80e4900:	695b      	ldr	r3, [r3, #20]
 80e4902:	492d      	ldr	r1, [pc, #180]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4904:	4313      	orrs	r3, r2
 80e4906:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80e4908:	4b2b      	ldr	r3, [pc, #172]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e490c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80e4910:	687b      	ldr	r3, [r7, #4]
 80e4912:	699b      	ldr	r3, [r3, #24]
 80e4914:	4928      	ldr	r1, [pc, #160]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4916:	4313      	orrs	r3, r2
 80e4918:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80e491a:	4b27      	ldr	r3, [pc, #156]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e491e:	4a26      	ldr	r2, [pc, #152]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80e4924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80e4926:	4b24      	ldr	r3, [pc, #144]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80e492a:	4b24      	ldr	r3, [pc, #144]	; (80e49bc <RCCEx_PLL3_Config+0x160>)
 80e492c:	4013      	ands	r3, r2
 80e492e:	687a      	ldr	r2, [r7, #4]
 80e4930:	69d2      	ldr	r2, [r2, #28]
 80e4932:	00d2      	lsls	r2, r2, #3
 80e4934:	4920      	ldr	r1, [pc, #128]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4936:	4313      	orrs	r3, r2
 80e4938:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80e493a:	4b1f      	ldr	r3, [pc, #124]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e493e:	4a1e      	ldr	r2, [pc, #120]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e4944:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80e4946:	683b      	ldr	r3, [r7, #0]
 80e4948:	2b00      	cmp	r3, #0
 80e494a:	d106      	bne.n	80e495a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80e494c:	4b1a      	ldr	r3, [pc, #104]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4950:	4a19      	ldr	r2, [pc, #100]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80e4956:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e4958:	e00f      	b.n	80e497a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80e495a:	683b      	ldr	r3, [r7, #0]
 80e495c:	2b01      	cmp	r3, #1
 80e495e:	d106      	bne.n	80e496e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80e4960:	4b15      	ldr	r3, [pc, #84]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4964:	4a14      	ldr	r2, [pc, #80]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4966:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80e496a:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e496c:	e005      	b.n	80e497a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80e496e:	4b12      	ldr	r3, [pc, #72]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4972:	4a11      	ldr	r2, [pc, #68]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80e4978:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80e497a:	4b0f      	ldr	r3, [pc, #60]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e497c:	681b      	ldr	r3, [r3, #0]
 80e497e:	4a0e      	ldr	r2, [pc, #56]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e4980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80e4984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e4986:	f7fc fdb7 	bl	80e14f8 <HAL_GetTick>
 80e498a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80e498c:	e008      	b.n	80e49a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80e498e:	f7fc fdb3 	bl	80e14f8 <HAL_GetTick>
 80e4992:	4602      	mov	r2, r0
 80e4994:	68bb      	ldr	r3, [r7, #8]
 80e4996:	1ad3      	subs	r3, r2, r3
 80e4998:	2b02      	cmp	r3, #2
 80e499a:	d901      	bls.n	80e49a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80e499c:	2303      	movs	r3, #3
 80e499e:	e006      	b.n	80e49ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80e49a0:	4b05      	ldr	r3, [pc, #20]	; (80e49b8 <RCCEx_PLL3_Config+0x15c>)
 80e49a2:	681b      	ldr	r3, [r3, #0]
 80e49a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e49a8:	2b00      	cmp	r3, #0
 80e49aa:	d0f0      	beq.n	80e498e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80e49ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80e49ae:	4618      	mov	r0, r3
 80e49b0:	3710      	adds	r7, #16
 80e49b2:	46bd      	mov	sp, r7
 80e49b4:	bd80      	pop	{r7, pc}
 80e49b6:	bf00      	nop
 80e49b8:	58024400 	.word	0x58024400
 80e49bc:	ffff0007 	.word	0xffff0007

080e49c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80e49c0:	b580      	push	{r7, lr}
 80e49c2:	b082      	sub	sp, #8
 80e49c4:	af00      	add	r7, sp, #0
 80e49c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80e49c8:	687b      	ldr	r3, [r7, #4]
 80e49ca:	2b00      	cmp	r3, #0
 80e49cc:	d101      	bne.n	80e49d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80e49ce:	2301      	movs	r3, #1
 80e49d0:	e049      	b.n	80e4a66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80e49d2:	687b      	ldr	r3, [r7, #4]
 80e49d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80e49d8:	b2db      	uxtb	r3, r3
 80e49da:	2b00      	cmp	r3, #0
 80e49dc:	d106      	bne.n	80e49ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80e49de:	687b      	ldr	r3, [r7, #4]
 80e49e0:	2200      	movs	r2, #0
 80e49e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80e49e6:	6878      	ldr	r0, [r7, #4]
 80e49e8:	f7fc fc0a 	bl	80e1200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80e49ec:	687b      	ldr	r3, [r7, #4]
 80e49ee:	2202      	movs	r2, #2
 80e49f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80e49f4:	687b      	ldr	r3, [r7, #4]
 80e49f6:	681a      	ldr	r2, [r3, #0]
 80e49f8:	687b      	ldr	r3, [r7, #4]
 80e49fa:	3304      	adds	r3, #4
 80e49fc:	4619      	mov	r1, r3
 80e49fe:	4610      	mov	r0, r2
 80e4a00:	f000 f9ac 	bl	80e4d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80e4a04:	687b      	ldr	r3, [r7, #4]
 80e4a06:	2201      	movs	r2, #1
 80e4a08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80e4a0c:	687b      	ldr	r3, [r7, #4]
 80e4a0e:	2201      	movs	r2, #1
 80e4a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80e4a14:	687b      	ldr	r3, [r7, #4]
 80e4a16:	2201      	movs	r2, #1
 80e4a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80e4a1c:	687b      	ldr	r3, [r7, #4]
 80e4a1e:	2201      	movs	r2, #1
 80e4a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80e4a24:	687b      	ldr	r3, [r7, #4]
 80e4a26:	2201      	movs	r2, #1
 80e4a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80e4a2c:	687b      	ldr	r3, [r7, #4]
 80e4a2e:	2201      	movs	r2, #1
 80e4a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80e4a34:	687b      	ldr	r3, [r7, #4]
 80e4a36:	2201      	movs	r2, #1
 80e4a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80e4a3c:	687b      	ldr	r3, [r7, #4]
 80e4a3e:	2201      	movs	r2, #1
 80e4a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80e4a44:	687b      	ldr	r3, [r7, #4]
 80e4a46:	2201      	movs	r2, #1
 80e4a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80e4a4c:	687b      	ldr	r3, [r7, #4]
 80e4a4e:	2201      	movs	r2, #1
 80e4a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80e4a54:	687b      	ldr	r3, [r7, #4]
 80e4a56:	2201      	movs	r2, #1
 80e4a58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80e4a5c:	687b      	ldr	r3, [r7, #4]
 80e4a5e:	2201      	movs	r2, #1
 80e4a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80e4a64:	2300      	movs	r3, #0
}
 80e4a66:	4618      	mov	r0, r3
 80e4a68:	3708      	adds	r7, #8
 80e4a6a:	46bd      	mov	sp, r7
 80e4a6c:	bd80      	pop	{r7, pc}
	...

080e4a70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80e4a70:	b480      	push	{r7}
 80e4a72:	b085      	sub	sp, #20
 80e4a74:	af00      	add	r7, sp, #0
 80e4a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80e4a78:	687b      	ldr	r3, [r7, #4]
 80e4a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80e4a7e:	b2db      	uxtb	r3, r3
 80e4a80:	2b01      	cmp	r3, #1
 80e4a82:	d001      	beq.n	80e4a88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80e4a84:	2301      	movs	r3, #1
 80e4a86:	e056      	b.n	80e4b36 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80e4a88:	687b      	ldr	r3, [r7, #4]
 80e4a8a:	2202      	movs	r2, #2
 80e4a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80e4a90:	687b      	ldr	r3, [r7, #4]
 80e4a92:	681b      	ldr	r3, [r3, #0]
 80e4a94:	4a2b      	ldr	r2, [pc, #172]	; (80e4b44 <HAL_TIM_Base_Start+0xd4>)
 80e4a96:	4293      	cmp	r3, r2
 80e4a98:	d02c      	beq.n	80e4af4 <HAL_TIM_Base_Start+0x84>
 80e4a9a:	687b      	ldr	r3, [r7, #4]
 80e4a9c:	681b      	ldr	r3, [r3, #0]
 80e4a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e4aa2:	d027      	beq.n	80e4af4 <HAL_TIM_Base_Start+0x84>
 80e4aa4:	687b      	ldr	r3, [r7, #4]
 80e4aa6:	681b      	ldr	r3, [r3, #0]
 80e4aa8:	4a27      	ldr	r2, [pc, #156]	; (80e4b48 <HAL_TIM_Base_Start+0xd8>)
 80e4aaa:	4293      	cmp	r3, r2
 80e4aac:	d022      	beq.n	80e4af4 <HAL_TIM_Base_Start+0x84>
 80e4aae:	687b      	ldr	r3, [r7, #4]
 80e4ab0:	681b      	ldr	r3, [r3, #0]
 80e4ab2:	4a26      	ldr	r2, [pc, #152]	; (80e4b4c <HAL_TIM_Base_Start+0xdc>)
 80e4ab4:	4293      	cmp	r3, r2
 80e4ab6:	d01d      	beq.n	80e4af4 <HAL_TIM_Base_Start+0x84>
 80e4ab8:	687b      	ldr	r3, [r7, #4]
 80e4aba:	681b      	ldr	r3, [r3, #0]
 80e4abc:	4a24      	ldr	r2, [pc, #144]	; (80e4b50 <HAL_TIM_Base_Start+0xe0>)
 80e4abe:	4293      	cmp	r3, r2
 80e4ac0:	d018      	beq.n	80e4af4 <HAL_TIM_Base_Start+0x84>
 80e4ac2:	687b      	ldr	r3, [r7, #4]
 80e4ac4:	681b      	ldr	r3, [r3, #0]
 80e4ac6:	4a23      	ldr	r2, [pc, #140]	; (80e4b54 <HAL_TIM_Base_Start+0xe4>)
 80e4ac8:	4293      	cmp	r3, r2
 80e4aca:	d013      	beq.n	80e4af4 <HAL_TIM_Base_Start+0x84>
 80e4acc:	687b      	ldr	r3, [r7, #4]
 80e4ace:	681b      	ldr	r3, [r3, #0]
 80e4ad0:	4a21      	ldr	r2, [pc, #132]	; (80e4b58 <HAL_TIM_Base_Start+0xe8>)
 80e4ad2:	4293      	cmp	r3, r2
 80e4ad4:	d00e      	beq.n	80e4af4 <HAL_TIM_Base_Start+0x84>
 80e4ad6:	687b      	ldr	r3, [r7, #4]
 80e4ad8:	681b      	ldr	r3, [r3, #0]
 80e4ada:	4a20      	ldr	r2, [pc, #128]	; (80e4b5c <HAL_TIM_Base_Start+0xec>)
 80e4adc:	4293      	cmp	r3, r2
 80e4ade:	d009      	beq.n	80e4af4 <HAL_TIM_Base_Start+0x84>
 80e4ae0:	687b      	ldr	r3, [r7, #4]
 80e4ae2:	681b      	ldr	r3, [r3, #0]
 80e4ae4:	4a1e      	ldr	r2, [pc, #120]	; (80e4b60 <HAL_TIM_Base_Start+0xf0>)
 80e4ae6:	4293      	cmp	r3, r2
 80e4ae8:	d004      	beq.n	80e4af4 <HAL_TIM_Base_Start+0x84>
 80e4aea:	687b      	ldr	r3, [r7, #4]
 80e4aec:	681b      	ldr	r3, [r3, #0]
 80e4aee:	4a1d      	ldr	r2, [pc, #116]	; (80e4b64 <HAL_TIM_Base_Start+0xf4>)
 80e4af0:	4293      	cmp	r3, r2
 80e4af2:	d115      	bne.n	80e4b20 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80e4af4:	687b      	ldr	r3, [r7, #4]
 80e4af6:	681b      	ldr	r3, [r3, #0]
 80e4af8:	689a      	ldr	r2, [r3, #8]
 80e4afa:	4b1b      	ldr	r3, [pc, #108]	; (80e4b68 <HAL_TIM_Base_Start+0xf8>)
 80e4afc:	4013      	ands	r3, r2
 80e4afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80e4b00:	68fb      	ldr	r3, [r7, #12]
 80e4b02:	2b06      	cmp	r3, #6
 80e4b04:	d015      	beq.n	80e4b32 <HAL_TIM_Base_Start+0xc2>
 80e4b06:	68fb      	ldr	r3, [r7, #12]
 80e4b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e4b0c:	d011      	beq.n	80e4b32 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80e4b0e:	687b      	ldr	r3, [r7, #4]
 80e4b10:	681b      	ldr	r3, [r3, #0]
 80e4b12:	681a      	ldr	r2, [r3, #0]
 80e4b14:	687b      	ldr	r3, [r7, #4]
 80e4b16:	681b      	ldr	r3, [r3, #0]
 80e4b18:	f042 0201 	orr.w	r2, r2, #1
 80e4b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80e4b1e:	e008      	b.n	80e4b32 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80e4b20:	687b      	ldr	r3, [r7, #4]
 80e4b22:	681b      	ldr	r3, [r3, #0]
 80e4b24:	681a      	ldr	r2, [r3, #0]
 80e4b26:	687b      	ldr	r3, [r7, #4]
 80e4b28:	681b      	ldr	r3, [r3, #0]
 80e4b2a:	f042 0201 	orr.w	r2, r2, #1
 80e4b2e:	601a      	str	r2, [r3, #0]
 80e4b30:	e000      	b.n	80e4b34 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80e4b32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80e4b34:	2300      	movs	r3, #0
}
 80e4b36:	4618      	mov	r0, r3
 80e4b38:	3714      	adds	r7, #20
 80e4b3a:	46bd      	mov	sp, r7
 80e4b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e4b40:	4770      	bx	lr
 80e4b42:	bf00      	nop
 80e4b44:	40010000 	.word	0x40010000
 80e4b48:	40000400 	.word	0x40000400
 80e4b4c:	40000800 	.word	0x40000800
 80e4b50:	40000c00 	.word	0x40000c00
 80e4b54:	40010400 	.word	0x40010400
 80e4b58:	40001800 	.word	0x40001800
 80e4b5c:	40014000 	.word	0x40014000
 80e4b60:	4000e000 	.word	0x4000e000
 80e4b64:	4000e400 	.word	0x4000e400
 80e4b68:	00010007 	.word	0x00010007

080e4b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80e4b6c:	b580      	push	{r7, lr}
 80e4b6e:	b084      	sub	sp, #16
 80e4b70:	af00      	add	r7, sp, #0
 80e4b72:	6078      	str	r0, [r7, #4]
 80e4b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80e4b76:	2300      	movs	r3, #0
 80e4b78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80e4b7a:	687b      	ldr	r3, [r7, #4]
 80e4b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80e4b80:	2b01      	cmp	r3, #1
 80e4b82:	d101      	bne.n	80e4b88 <HAL_TIM_ConfigClockSource+0x1c>
 80e4b84:	2302      	movs	r3, #2
 80e4b86:	e0dc      	b.n	80e4d42 <HAL_TIM_ConfigClockSource+0x1d6>
 80e4b88:	687b      	ldr	r3, [r7, #4]
 80e4b8a:	2201      	movs	r2, #1
 80e4b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80e4b90:	687b      	ldr	r3, [r7, #4]
 80e4b92:	2202      	movs	r2, #2
 80e4b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80e4b98:	687b      	ldr	r3, [r7, #4]
 80e4b9a:	681b      	ldr	r3, [r3, #0]
 80e4b9c:	689b      	ldr	r3, [r3, #8]
 80e4b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80e4ba0:	68ba      	ldr	r2, [r7, #8]
 80e4ba2:	4b6a      	ldr	r3, [pc, #424]	; (80e4d4c <HAL_TIM_ConfigClockSource+0x1e0>)
 80e4ba4:	4013      	ands	r3, r2
 80e4ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80e4ba8:	68bb      	ldr	r3, [r7, #8]
 80e4baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80e4bae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80e4bb0:	687b      	ldr	r3, [r7, #4]
 80e4bb2:	681b      	ldr	r3, [r3, #0]
 80e4bb4:	68ba      	ldr	r2, [r7, #8]
 80e4bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80e4bb8:	683b      	ldr	r3, [r7, #0]
 80e4bba:	681b      	ldr	r3, [r3, #0]
 80e4bbc:	4a64      	ldr	r2, [pc, #400]	; (80e4d50 <HAL_TIM_ConfigClockSource+0x1e4>)
 80e4bbe:	4293      	cmp	r3, r2
 80e4bc0:	f000 80a9 	beq.w	80e4d16 <HAL_TIM_ConfigClockSource+0x1aa>
 80e4bc4:	4a62      	ldr	r2, [pc, #392]	; (80e4d50 <HAL_TIM_ConfigClockSource+0x1e4>)
 80e4bc6:	4293      	cmp	r3, r2
 80e4bc8:	f200 80ae 	bhi.w	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4bcc:	4a61      	ldr	r2, [pc, #388]	; (80e4d54 <HAL_TIM_ConfigClockSource+0x1e8>)
 80e4bce:	4293      	cmp	r3, r2
 80e4bd0:	f000 80a1 	beq.w	80e4d16 <HAL_TIM_ConfigClockSource+0x1aa>
 80e4bd4:	4a5f      	ldr	r2, [pc, #380]	; (80e4d54 <HAL_TIM_ConfigClockSource+0x1e8>)
 80e4bd6:	4293      	cmp	r3, r2
 80e4bd8:	f200 80a6 	bhi.w	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4bdc:	4a5e      	ldr	r2, [pc, #376]	; (80e4d58 <HAL_TIM_ConfigClockSource+0x1ec>)
 80e4bde:	4293      	cmp	r3, r2
 80e4be0:	f000 8099 	beq.w	80e4d16 <HAL_TIM_ConfigClockSource+0x1aa>
 80e4be4:	4a5c      	ldr	r2, [pc, #368]	; (80e4d58 <HAL_TIM_ConfigClockSource+0x1ec>)
 80e4be6:	4293      	cmp	r3, r2
 80e4be8:	f200 809e 	bhi.w	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4bec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80e4bf0:	f000 8091 	beq.w	80e4d16 <HAL_TIM_ConfigClockSource+0x1aa>
 80e4bf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80e4bf8:	f200 8096 	bhi.w	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80e4c00:	f000 8089 	beq.w	80e4d16 <HAL_TIM_ConfigClockSource+0x1aa>
 80e4c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80e4c08:	f200 808e 	bhi.w	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e4c10:	d03e      	beq.n	80e4c90 <HAL_TIM_ConfigClockSource+0x124>
 80e4c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e4c16:	f200 8087 	bhi.w	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e4c1e:	f000 8086 	beq.w	80e4d2e <HAL_TIM_ConfigClockSource+0x1c2>
 80e4c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e4c26:	d87f      	bhi.n	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4c28:	2b70      	cmp	r3, #112	; 0x70
 80e4c2a:	d01a      	beq.n	80e4c62 <HAL_TIM_ConfigClockSource+0xf6>
 80e4c2c:	2b70      	cmp	r3, #112	; 0x70
 80e4c2e:	d87b      	bhi.n	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4c30:	2b60      	cmp	r3, #96	; 0x60
 80e4c32:	d050      	beq.n	80e4cd6 <HAL_TIM_ConfigClockSource+0x16a>
 80e4c34:	2b60      	cmp	r3, #96	; 0x60
 80e4c36:	d877      	bhi.n	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4c38:	2b50      	cmp	r3, #80	; 0x50
 80e4c3a:	d03c      	beq.n	80e4cb6 <HAL_TIM_ConfigClockSource+0x14a>
 80e4c3c:	2b50      	cmp	r3, #80	; 0x50
 80e4c3e:	d873      	bhi.n	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4c40:	2b40      	cmp	r3, #64	; 0x40
 80e4c42:	d058      	beq.n	80e4cf6 <HAL_TIM_ConfigClockSource+0x18a>
 80e4c44:	2b40      	cmp	r3, #64	; 0x40
 80e4c46:	d86f      	bhi.n	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4c48:	2b30      	cmp	r3, #48	; 0x30
 80e4c4a:	d064      	beq.n	80e4d16 <HAL_TIM_ConfigClockSource+0x1aa>
 80e4c4c:	2b30      	cmp	r3, #48	; 0x30
 80e4c4e:	d86b      	bhi.n	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4c50:	2b20      	cmp	r3, #32
 80e4c52:	d060      	beq.n	80e4d16 <HAL_TIM_ConfigClockSource+0x1aa>
 80e4c54:	2b20      	cmp	r3, #32
 80e4c56:	d867      	bhi.n	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
 80e4c58:	2b00      	cmp	r3, #0
 80e4c5a:	d05c      	beq.n	80e4d16 <HAL_TIM_ConfigClockSource+0x1aa>
 80e4c5c:	2b10      	cmp	r3, #16
 80e4c5e:	d05a      	beq.n	80e4d16 <HAL_TIM_ConfigClockSource+0x1aa>
 80e4c60:	e062      	b.n	80e4d28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80e4c62:	687b      	ldr	r3, [r7, #4]
 80e4c64:	6818      	ldr	r0, [r3, #0]
 80e4c66:	683b      	ldr	r3, [r7, #0]
 80e4c68:	6899      	ldr	r1, [r3, #8]
 80e4c6a:	683b      	ldr	r3, [r7, #0]
 80e4c6c:	685a      	ldr	r2, [r3, #4]
 80e4c6e:	683b      	ldr	r3, [r7, #0]
 80e4c70:	68db      	ldr	r3, [r3, #12]
 80e4c72:	f000 f997 	bl	80e4fa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80e4c76:	687b      	ldr	r3, [r7, #4]
 80e4c78:	681b      	ldr	r3, [r3, #0]
 80e4c7a:	689b      	ldr	r3, [r3, #8]
 80e4c7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80e4c7e:	68bb      	ldr	r3, [r7, #8]
 80e4c80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80e4c84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80e4c86:	687b      	ldr	r3, [r7, #4]
 80e4c88:	681b      	ldr	r3, [r3, #0]
 80e4c8a:	68ba      	ldr	r2, [r7, #8]
 80e4c8c:	609a      	str	r2, [r3, #8]
      break;
 80e4c8e:	e04f      	b.n	80e4d30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80e4c90:	687b      	ldr	r3, [r7, #4]
 80e4c92:	6818      	ldr	r0, [r3, #0]
 80e4c94:	683b      	ldr	r3, [r7, #0]
 80e4c96:	6899      	ldr	r1, [r3, #8]
 80e4c98:	683b      	ldr	r3, [r7, #0]
 80e4c9a:	685a      	ldr	r2, [r3, #4]
 80e4c9c:	683b      	ldr	r3, [r7, #0]
 80e4c9e:	68db      	ldr	r3, [r3, #12]
 80e4ca0:	f000 f980 	bl	80e4fa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80e4ca4:	687b      	ldr	r3, [r7, #4]
 80e4ca6:	681b      	ldr	r3, [r3, #0]
 80e4ca8:	689a      	ldr	r2, [r3, #8]
 80e4caa:	687b      	ldr	r3, [r7, #4]
 80e4cac:	681b      	ldr	r3, [r3, #0]
 80e4cae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80e4cb2:	609a      	str	r2, [r3, #8]
      break;
 80e4cb4:	e03c      	b.n	80e4d30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80e4cb6:	687b      	ldr	r3, [r7, #4]
 80e4cb8:	6818      	ldr	r0, [r3, #0]
 80e4cba:	683b      	ldr	r3, [r7, #0]
 80e4cbc:	6859      	ldr	r1, [r3, #4]
 80e4cbe:	683b      	ldr	r3, [r7, #0]
 80e4cc0:	68db      	ldr	r3, [r3, #12]
 80e4cc2:	461a      	mov	r2, r3
 80e4cc4:	f000 f8f0 	bl	80e4ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80e4cc8:	687b      	ldr	r3, [r7, #4]
 80e4cca:	681b      	ldr	r3, [r3, #0]
 80e4ccc:	2150      	movs	r1, #80	; 0x50
 80e4cce:	4618      	mov	r0, r3
 80e4cd0:	f000 f94a 	bl	80e4f68 <TIM_ITRx_SetConfig>
      break;
 80e4cd4:	e02c      	b.n	80e4d30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80e4cd6:	687b      	ldr	r3, [r7, #4]
 80e4cd8:	6818      	ldr	r0, [r3, #0]
 80e4cda:	683b      	ldr	r3, [r7, #0]
 80e4cdc:	6859      	ldr	r1, [r3, #4]
 80e4cde:	683b      	ldr	r3, [r7, #0]
 80e4ce0:	68db      	ldr	r3, [r3, #12]
 80e4ce2:	461a      	mov	r2, r3
 80e4ce4:	f000 f90f 	bl	80e4f06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80e4ce8:	687b      	ldr	r3, [r7, #4]
 80e4cea:	681b      	ldr	r3, [r3, #0]
 80e4cec:	2160      	movs	r1, #96	; 0x60
 80e4cee:	4618      	mov	r0, r3
 80e4cf0:	f000 f93a 	bl	80e4f68 <TIM_ITRx_SetConfig>
      break;
 80e4cf4:	e01c      	b.n	80e4d30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80e4cf6:	687b      	ldr	r3, [r7, #4]
 80e4cf8:	6818      	ldr	r0, [r3, #0]
 80e4cfa:	683b      	ldr	r3, [r7, #0]
 80e4cfc:	6859      	ldr	r1, [r3, #4]
 80e4cfe:	683b      	ldr	r3, [r7, #0]
 80e4d00:	68db      	ldr	r3, [r3, #12]
 80e4d02:	461a      	mov	r2, r3
 80e4d04:	f000 f8d0 	bl	80e4ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80e4d08:	687b      	ldr	r3, [r7, #4]
 80e4d0a:	681b      	ldr	r3, [r3, #0]
 80e4d0c:	2140      	movs	r1, #64	; 0x40
 80e4d0e:	4618      	mov	r0, r3
 80e4d10:	f000 f92a 	bl	80e4f68 <TIM_ITRx_SetConfig>
      break;
 80e4d14:	e00c      	b.n	80e4d30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80e4d16:	687b      	ldr	r3, [r7, #4]
 80e4d18:	681a      	ldr	r2, [r3, #0]
 80e4d1a:	683b      	ldr	r3, [r7, #0]
 80e4d1c:	681b      	ldr	r3, [r3, #0]
 80e4d1e:	4619      	mov	r1, r3
 80e4d20:	4610      	mov	r0, r2
 80e4d22:	f000 f921 	bl	80e4f68 <TIM_ITRx_SetConfig>
      break;
 80e4d26:	e003      	b.n	80e4d30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80e4d28:	2301      	movs	r3, #1
 80e4d2a:	73fb      	strb	r3, [r7, #15]
      break;
 80e4d2c:	e000      	b.n	80e4d30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80e4d2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80e4d30:	687b      	ldr	r3, [r7, #4]
 80e4d32:	2201      	movs	r2, #1
 80e4d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80e4d38:	687b      	ldr	r3, [r7, #4]
 80e4d3a:	2200      	movs	r2, #0
 80e4d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80e4d40:	7bfb      	ldrb	r3, [r7, #15]
}
 80e4d42:	4618      	mov	r0, r3
 80e4d44:	3710      	adds	r7, #16
 80e4d46:	46bd      	mov	sp, r7
 80e4d48:	bd80      	pop	{r7, pc}
 80e4d4a:	bf00      	nop
 80e4d4c:	ffceff88 	.word	0xffceff88
 80e4d50:	00100040 	.word	0x00100040
 80e4d54:	00100030 	.word	0x00100030
 80e4d58:	00100020 	.word	0x00100020

080e4d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80e4d5c:	b480      	push	{r7}
 80e4d5e:	b085      	sub	sp, #20
 80e4d60:	af00      	add	r7, sp, #0
 80e4d62:	6078      	str	r0, [r7, #4]
 80e4d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80e4d66:	687b      	ldr	r3, [r7, #4]
 80e4d68:	681b      	ldr	r3, [r3, #0]
 80e4d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80e4d6c:	687b      	ldr	r3, [r7, #4]
 80e4d6e:	4a44      	ldr	r2, [pc, #272]	; (80e4e80 <TIM_Base_SetConfig+0x124>)
 80e4d70:	4293      	cmp	r3, r2
 80e4d72:	d013      	beq.n	80e4d9c <TIM_Base_SetConfig+0x40>
 80e4d74:	687b      	ldr	r3, [r7, #4]
 80e4d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e4d7a:	d00f      	beq.n	80e4d9c <TIM_Base_SetConfig+0x40>
 80e4d7c:	687b      	ldr	r3, [r7, #4]
 80e4d7e:	4a41      	ldr	r2, [pc, #260]	; (80e4e84 <TIM_Base_SetConfig+0x128>)
 80e4d80:	4293      	cmp	r3, r2
 80e4d82:	d00b      	beq.n	80e4d9c <TIM_Base_SetConfig+0x40>
 80e4d84:	687b      	ldr	r3, [r7, #4]
 80e4d86:	4a40      	ldr	r2, [pc, #256]	; (80e4e88 <TIM_Base_SetConfig+0x12c>)
 80e4d88:	4293      	cmp	r3, r2
 80e4d8a:	d007      	beq.n	80e4d9c <TIM_Base_SetConfig+0x40>
 80e4d8c:	687b      	ldr	r3, [r7, #4]
 80e4d8e:	4a3f      	ldr	r2, [pc, #252]	; (80e4e8c <TIM_Base_SetConfig+0x130>)
 80e4d90:	4293      	cmp	r3, r2
 80e4d92:	d003      	beq.n	80e4d9c <TIM_Base_SetConfig+0x40>
 80e4d94:	687b      	ldr	r3, [r7, #4]
 80e4d96:	4a3e      	ldr	r2, [pc, #248]	; (80e4e90 <TIM_Base_SetConfig+0x134>)
 80e4d98:	4293      	cmp	r3, r2
 80e4d9a:	d108      	bne.n	80e4dae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80e4d9c:	68fb      	ldr	r3, [r7, #12]
 80e4d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80e4da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80e4da4:	683b      	ldr	r3, [r7, #0]
 80e4da6:	685b      	ldr	r3, [r3, #4]
 80e4da8:	68fa      	ldr	r2, [r7, #12]
 80e4daa:	4313      	orrs	r3, r2
 80e4dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80e4dae:	687b      	ldr	r3, [r7, #4]
 80e4db0:	4a33      	ldr	r2, [pc, #204]	; (80e4e80 <TIM_Base_SetConfig+0x124>)
 80e4db2:	4293      	cmp	r3, r2
 80e4db4:	d027      	beq.n	80e4e06 <TIM_Base_SetConfig+0xaa>
 80e4db6:	687b      	ldr	r3, [r7, #4]
 80e4db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e4dbc:	d023      	beq.n	80e4e06 <TIM_Base_SetConfig+0xaa>
 80e4dbe:	687b      	ldr	r3, [r7, #4]
 80e4dc0:	4a30      	ldr	r2, [pc, #192]	; (80e4e84 <TIM_Base_SetConfig+0x128>)
 80e4dc2:	4293      	cmp	r3, r2
 80e4dc4:	d01f      	beq.n	80e4e06 <TIM_Base_SetConfig+0xaa>
 80e4dc6:	687b      	ldr	r3, [r7, #4]
 80e4dc8:	4a2f      	ldr	r2, [pc, #188]	; (80e4e88 <TIM_Base_SetConfig+0x12c>)
 80e4dca:	4293      	cmp	r3, r2
 80e4dcc:	d01b      	beq.n	80e4e06 <TIM_Base_SetConfig+0xaa>
 80e4dce:	687b      	ldr	r3, [r7, #4]
 80e4dd0:	4a2e      	ldr	r2, [pc, #184]	; (80e4e8c <TIM_Base_SetConfig+0x130>)
 80e4dd2:	4293      	cmp	r3, r2
 80e4dd4:	d017      	beq.n	80e4e06 <TIM_Base_SetConfig+0xaa>
 80e4dd6:	687b      	ldr	r3, [r7, #4]
 80e4dd8:	4a2d      	ldr	r2, [pc, #180]	; (80e4e90 <TIM_Base_SetConfig+0x134>)
 80e4dda:	4293      	cmp	r3, r2
 80e4ddc:	d013      	beq.n	80e4e06 <TIM_Base_SetConfig+0xaa>
 80e4dde:	687b      	ldr	r3, [r7, #4]
 80e4de0:	4a2c      	ldr	r2, [pc, #176]	; (80e4e94 <TIM_Base_SetConfig+0x138>)
 80e4de2:	4293      	cmp	r3, r2
 80e4de4:	d00f      	beq.n	80e4e06 <TIM_Base_SetConfig+0xaa>
 80e4de6:	687b      	ldr	r3, [r7, #4]
 80e4de8:	4a2b      	ldr	r2, [pc, #172]	; (80e4e98 <TIM_Base_SetConfig+0x13c>)
 80e4dea:	4293      	cmp	r3, r2
 80e4dec:	d00b      	beq.n	80e4e06 <TIM_Base_SetConfig+0xaa>
 80e4dee:	687b      	ldr	r3, [r7, #4]
 80e4df0:	4a2a      	ldr	r2, [pc, #168]	; (80e4e9c <TIM_Base_SetConfig+0x140>)
 80e4df2:	4293      	cmp	r3, r2
 80e4df4:	d007      	beq.n	80e4e06 <TIM_Base_SetConfig+0xaa>
 80e4df6:	687b      	ldr	r3, [r7, #4]
 80e4df8:	4a29      	ldr	r2, [pc, #164]	; (80e4ea0 <TIM_Base_SetConfig+0x144>)
 80e4dfa:	4293      	cmp	r3, r2
 80e4dfc:	d003      	beq.n	80e4e06 <TIM_Base_SetConfig+0xaa>
 80e4dfe:	687b      	ldr	r3, [r7, #4]
 80e4e00:	4a28      	ldr	r2, [pc, #160]	; (80e4ea4 <TIM_Base_SetConfig+0x148>)
 80e4e02:	4293      	cmp	r3, r2
 80e4e04:	d108      	bne.n	80e4e18 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80e4e06:	68fb      	ldr	r3, [r7, #12]
 80e4e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80e4e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80e4e0e:	683b      	ldr	r3, [r7, #0]
 80e4e10:	68db      	ldr	r3, [r3, #12]
 80e4e12:	68fa      	ldr	r2, [r7, #12]
 80e4e14:	4313      	orrs	r3, r2
 80e4e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80e4e18:	68fb      	ldr	r3, [r7, #12]
 80e4e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80e4e1e:	683b      	ldr	r3, [r7, #0]
 80e4e20:	695b      	ldr	r3, [r3, #20]
 80e4e22:	4313      	orrs	r3, r2
 80e4e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80e4e26:	687b      	ldr	r3, [r7, #4]
 80e4e28:	68fa      	ldr	r2, [r7, #12]
 80e4e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80e4e2c:	683b      	ldr	r3, [r7, #0]
 80e4e2e:	689a      	ldr	r2, [r3, #8]
 80e4e30:	687b      	ldr	r3, [r7, #4]
 80e4e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80e4e34:	683b      	ldr	r3, [r7, #0]
 80e4e36:	681a      	ldr	r2, [r3, #0]
 80e4e38:	687b      	ldr	r3, [r7, #4]
 80e4e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80e4e3c:	687b      	ldr	r3, [r7, #4]
 80e4e3e:	4a10      	ldr	r2, [pc, #64]	; (80e4e80 <TIM_Base_SetConfig+0x124>)
 80e4e40:	4293      	cmp	r3, r2
 80e4e42:	d00f      	beq.n	80e4e64 <TIM_Base_SetConfig+0x108>
 80e4e44:	687b      	ldr	r3, [r7, #4]
 80e4e46:	4a12      	ldr	r2, [pc, #72]	; (80e4e90 <TIM_Base_SetConfig+0x134>)
 80e4e48:	4293      	cmp	r3, r2
 80e4e4a:	d00b      	beq.n	80e4e64 <TIM_Base_SetConfig+0x108>
 80e4e4c:	687b      	ldr	r3, [r7, #4]
 80e4e4e:	4a11      	ldr	r2, [pc, #68]	; (80e4e94 <TIM_Base_SetConfig+0x138>)
 80e4e50:	4293      	cmp	r3, r2
 80e4e52:	d007      	beq.n	80e4e64 <TIM_Base_SetConfig+0x108>
 80e4e54:	687b      	ldr	r3, [r7, #4]
 80e4e56:	4a10      	ldr	r2, [pc, #64]	; (80e4e98 <TIM_Base_SetConfig+0x13c>)
 80e4e58:	4293      	cmp	r3, r2
 80e4e5a:	d003      	beq.n	80e4e64 <TIM_Base_SetConfig+0x108>
 80e4e5c:	687b      	ldr	r3, [r7, #4]
 80e4e5e:	4a0f      	ldr	r2, [pc, #60]	; (80e4e9c <TIM_Base_SetConfig+0x140>)
 80e4e60:	4293      	cmp	r3, r2
 80e4e62:	d103      	bne.n	80e4e6c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80e4e64:	683b      	ldr	r3, [r7, #0]
 80e4e66:	691a      	ldr	r2, [r3, #16]
 80e4e68:	687b      	ldr	r3, [r7, #4]
 80e4e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80e4e6c:	687b      	ldr	r3, [r7, #4]
 80e4e6e:	2201      	movs	r2, #1
 80e4e70:	615a      	str	r2, [r3, #20]
}
 80e4e72:	bf00      	nop
 80e4e74:	3714      	adds	r7, #20
 80e4e76:	46bd      	mov	sp, r7
 80e4e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e4e7c:	4770      	bx	lr
 80e4e7e:	bf00      	nop
 80e4e80:	40010000 	.word	0x40010000
 80e4e84:	40000400 	.word	0x40000400
 80e4e88:	40000800 	.word	0x40000800
 80e4e8c:	40000c00 	.word	0x40000c00
 80e4e90:	40010400 	.word	0x40010400
 80e4e94:	40014000 	.word	0x40014000
 80e4e98:	40014400 	.word	0x40014400
 80e4e9c:	40014800 	.word	0x40014800
 80e4ea0:	4000e000 	.word	0x4000e000
 80e4ea4:	4000e400 	.word	0x4000e400

080e4ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80e4ea8:	b480      	push	{r7}
 80e4eaa:	b087      	sub	sp, #28
 80e4eac:	af00      	add	r7, sp, #0
 80e4eae:	60f8      	str	r0, [r7, #12]
 80e4eb0:	60b9      	str	r1, [r7, #8]
 80e4eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80e4eb4:	68fb      	ldr	r3, [r7, #12]
 80e4eb6:	6a1b      	ldr	r3, [r3, #32]
 80e4eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80e4eba:	68fb      	ldr	r3, [r7, #12]
 80e4ebc:	6a1b      	ldr	r3, [r3, #32]
 80e4ebe:	f023 0201 	bic.w	r2, r3, #1
 80e4ec2:	68fb      	ldr	r3, [r7, #12]
 80e4ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80e4ec6:	68fb      	ldr	r3, [r7, #12]
 80e4ec8:	699b      	ldr	r3, [r3, #24]
 80e4eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80e4ecc:	693b      	ldr	r3, [r7, #16]
 80e4ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80e4ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80e4ed4:	687b      	ldr	r3, [r7, #4]
 80e4ed6:	011b      	lsls	r3, r3, #4
 80e4ed8:	693a      	ldr	r2, [r7, #16]
 80e4eda:	4313      	orrs	r3, r2
 80e4edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80e4ede:	697b      	ldr	r3, [r7, #20]
 80e4ee0:	f023 030a 	bic.w	r3, r3, #10
 80e4ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80e4ee6:	697a      	ldr	r2, [r7, #20]
 80e4ee8:	68bb      	ldr	r3, [r7, #8]
 80e4eea:	4313      	orrs	r3, r2
 80e4eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80e4eee:	68fb      	ldr	r3, [r7, #12]
 80e4ef0:	693a      	ldr	r2, [r7, #16]
 80e4ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80e4ef4:	68fb      	ldr	r3, [r7, #12]
 80e4ef6:	697a      	ldr	r2, [r7, #20]
 80e4ef8:	621a      	str	r2, [r3, #32]
}
 80e4efa:	bf00      	nop
 80e4efc:	371c      	adds	r7, #28
 80e4efe:	46bd      	mov	sp, r7
 80e4f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e4f04:	4770      	bx	lr

080e4f06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80e4f06:	b480      	push	{r7}
 80e4f08:	b087      	sub	sp, #28
 80e4f0a:	af00      	add	r7, sp, #0
 80e4f0c:	60f8      	str	r0, [r7, #12]
 80e4f0e:	60b9      	str	r1, [r7, #8]
 80e4f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80e4f12:	68fb      	ldr	r3, [r7, #12]
 80e4f14:	6a1b      	ldr	r3, [r3, #32]
 80e4f16:	f023 0210 	bic.w	r2, r3, #16
 80e4f1a:	68fb      	ldr	r3, [r7, #12]
 80e4f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80e4f1e:	68fb      	ldr	r3, [r7, #12]
 80e4f20:	699b      	ldr	r3, [r3, #24]
 80e4f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80e4f24:	68fb      	ldr	r3, [r7, #12]
 80e4f26:	6a1b      	ldr	r3, [r3, #32]
 80e4f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80e4f2a:	697b      	ldr	r3, [r7, #20]
 80e4f2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80e4f30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80e4f32:	687b      	ldr	r3, [r7, #4]
 80e4f34:	031b      	lsls	r3, r3, #12
 80e4f36:	697a      	ldr	r2, [r7, #20]
 80e4f38:	4313      	orrs	r3, r2
 80e4f3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80e4f3c:	693b      	ldr	r3, [r7, #16]
 80e4f3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80e4f42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80e4f44:	68bb      	ldr	r3, [r7, #8]
 80e4f46:	011b      	lsls	r3, r3, #4
 80e4f48:	693a      	ldr	r2, [r7, #16]
 80e4f4a:	4313      	orrs	r3, r2
 80e4f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80e4f4e:	68fb      	ldr	r3, [r7, #12]
 80e4f50:	697a      	ldr	r2, [r7, #20]
 80e4f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80e4f54:	68fb      	ldr	r3, [r7, #12]
 80e4f56:	693a      	ldr	r2, [r7, #16]
 80e4f58:	621a      	str	r2, [r3, #32]
}
 80e4f5a:	bf00      	nop
 80e4f5c:	371c      	adds	r7, #28
 80e4f5e:	46bd      	mov	sp, r7
 80e4f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e4f64:	4770      	bx	lr
	...

080e4f68 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80e4f68:	b480      	push	{r7}
 80e4f6a:	b085      	sub	sp, #20
 80e4f6c:	af00      	add	r7, sp, #0
 80e4f6e:	6078      	str	r0, [r7, #4]
 80e4f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80e4f72:	687b      	ldr	r3, [r7, #4]
 80e4f74:	689b      	ldr	r3, [r3, #8]
 80e4f76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80e4f78:	68fa      	ldr	r2, [r7, #12]
 80e4f7a:	4b09      	ldr	r3, [pc, #36]	; (80e4fa0 <TIM_ITRx_SetConfig+0x38>)
 80e4f7c:	4013      	ands	r3, r2
 80e4f7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80e4f80:	683a      	ldr	r2, [r7, #0]
 80e4f82:	68fb      	ldr	r3, [r7, #12]
 80e4f84:	4313      	orrs	r3, r2
 80e4f86:	f043 0307 	orr.w	r3, r3, #7
 80e4f8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80e4f8c:	687b      	ldr	r3, [r7, #4]
 80e4f8e:	68fa      	ldr	r2, [r7, #12]
 80e4f90:	609a      	str	r2, [r3, #8]
}
 80e4f92:	bf00      	nop
 80e4f94:	3714      	adds	r7, #20
 80e4f96:	46bd      	mov	sp, r7
 80e4f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e4f9c:	4770      	bx	lr
 80e4f9e:	bf00      	nop
 80e4fa0:	ffcfff8f 	.word	0xffcfff8f

080e4fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80e4fa4:	b480      	push	{r7}
 80e4fa6:	b087      	sub	sp, #28
 80e4fa8:	af00      	add	r7, sp, #0
 80e4faa:	60f8      	str	r0, [r7, #12]
 80e4fac:	60b9      	str	r1, [r7, #8]
 80e4fae:	607a      	str	r2, [r7, #4]
 80e4fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80e4fb2:	68fb      	ldr	r3, [r7, #12]
 80e4fb4:	689b      	ldr	r3, [r3, #8]
 80e4fb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80e4fb8:	697b      	ldr	r3, [r7, #20]
 80e4fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80e4fbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80e4fc0:	683b      	ldr	r3, [r7, #0]
 80e4fc2:	021a      	lsls	r2, r3, #8
 80e4fc4:	687b      	ldr	r3, [r7, #4]
 80e4fc6:	431a      	orrs	r2, r3
 80e4fc8:	68bb      	ldr	r3, [r7, #8]
 80e4fca:	4313      	orrs	r3, r2
 80e4fcc:	697a      	ldr	r2, [r7, #20]
 80e4fce:	4313      	orrs	r3, r2
 80e4fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80e4fd2:	68fb      	ldr	r3, [r7, #12]
 80e4fd4:	697a      	ldr	r2, [r7, #20]
 80e4fd6:	609a      	str	r2, [r3, #8]
}
 80e4fd8:	bf00      	nop
 80e4fda:	371c      	adds	r7, #28
 80e4fdc:	46bd      	mov	sp, r7
 80e4fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e4fe2:	4770      	bx	lr

080e4fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80e4fe4:	b480      	push	{r7}
 80e4fe6:	b085      	sub	sp, #20
 80e4fe8:	af00      	add	r7, sp, #0
 80e4fea:	6078      	str	r0, [r7, #4]
 80e4fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80e4fee:	687b      	ldr	r3, [r7, #4]
 80e4ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80e4ff4:	2b01      	cmp	r3, #1
 80e4ff6:	d101      	bne.n	80e4ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80e4ff8:	2302      	movs	r3, #2
 80e4ffa:	e077      	b.n	80e50ec <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80e4ffc:	687b      	ldr	r3, [r7, #4]
 80e4ffe:	2201      	movs	r2, #1
 80e5000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80e5004:	687b      	ldr	r3, [r7, #4]
 80e5006:	2202      	movs	r2, #2
 80e5008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80e500c:	687b      	ldr	r3, [r7, #4]
 80e500e:	681b      	ldr	r3, [r3, #0]
 80e5010:	685b      	ldr	r3, [r3, #4]
 80e5012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80e5014:	687b      	ldr	r3, [r7, #4]
 80e5016:	681b      	ldr	r3, [r3, #0]
 80e5018:	689b      	ldr	r3, [r3, #8]
 80e501a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80e501c:	687b      	ldr	r3, [r7, #4]
 80e501e:	681b      	ldr	r3, [r3, #0]
 80e5020:	4a35      	ldr	r2, [pc, #212]	; (80e50f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80e5022:	4293      	cmp	r3, r2
 80e5024:	d004      	beq.n	80e5030 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80e5026:	687b      	ldr	r3, [r7, #4]
 80e5028:	681b      	ldr	r3, [r3, #0]
 80e502a:	4a34      	ldr	r2, [pc, #208]	; (80e50fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80e502c:	4293      	cmp	r3, r2
 80e502e:	d108      	bne.n	80e5042 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80e5030:	68fb      	ldr	r3, [r7, #12]
 80e5032:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80e5036:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80e5038:	683b      	ldr	r3, [r7, #0]
 80e503a:	685b      	ldr	r3, [r3, #4]
 80e503c:	68fa      	ldr	r2, [r7, #12]
 80e503e:	4313      	orrs	r3, r2
 80e5040:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80e5042:	68fb      	ldr	r3, [r7, #12]
 80e5044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80e5048:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80e504a:	683b      	ldr	r3, [r7, #0]
 80e504c:	681b      	ldr	r3, [r3, #0]
 80e504e:	68fa      	ldr	r2, [r7, #12]
 80e5050:	4313      	orrs	r3, r2
 80e5052:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80e5054:	687b      	ldr	r3, [r7, #4]
 80e5056:	681b      	ldr	r3, [r3, #0]
 80e5058:	68fa      	ldr	r2, [r7, #12]
 80e505a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80e505c:	687b      	ldr	r3, [r7, #4]
 80e505e:	681b      	ldr	r3, [r3, #0]
 80e5060:	4a25      	ldr	r2, [pc, #148]	; (80e50f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80e5062:	4293      	cmp	r3, r2
 80e5064:	d02c      	beq.n	80e50c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80e5066:	687b      	ldr	r3, [r7, #4]
 80e5068:	681b      	ldr	r3, [r3, #0]
 80e506a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e506e:	d027      	beq.n	80e50c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80e5070:	687b      	ldr	r3, [r7, #4]
 80e5072:	681b      	ldr	r3, [r3, #0]
 80e5074:	4a22      	ldr	r2, [pc, #136]	; (80e5100 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80e5076:	4293      	cmp	r3, r2
 80e5078:	d022      	beq.n	80e50c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80e507a:	687b      	ldr	r3, [r7, #4]
 80e507c:	681b      	ldr	r3, [r3, #0]
 80e507e:	4a21      	ldr	r2, [pc, #132]	; (80e5104 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80e5080:	4293      	cmp	r3, r2
 80e5082:	d01d      	beq.n	80e50c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80e5084:	687b      	ldr	r3, [r7, #4]
 80e5086:	681b      	ldr	r3, [r3, #0]
 80e5088:	4a1f      	ldr	r2, [pc, #124]	; (80e5108 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80e508a:	4293      	cmp	r3, r2
 80e508c:	d018      	beq.n	80e50c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80e508e:	687b      	ldr	r3, [r7, #4]
 80e5090:	681b      	ldr	r3, [r3, #0]
 80e5092:	4a1a      	ldr	r2, [pc, #104]	; (80e50fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80e5094:	4293      	cmp	r3, r2
 80e5096:	d013      	beq.n	80e50c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80e5098:	687b      	ldr	r3, [r7, #4]
 80e509a:	681b      	ldr	r3, [r3, #0]
 80e509c:	4a1b      	ldr	r2, [pc, #108]	; (80e510c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80e509e:	4293      	cmp	r3, r2
 80e50a0:	d00e      	beq.n	80e50c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80e50a2:	687b      	ldr	r3, [r7, #4]
 80e50a4:	681b      	ldr	r3, [r3, #0]
 80e50a6:	4a1a      	ldr	r2, [pc, #104]	; (80e5110 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80e50a8:	4293      	cmp	r3, r2
 80e50aa:	d009      	beq.n	80e50c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80e50ac:	687b      	ldr	r3, [r7, #4]
 80e50ae:	681b      	ldr	r3, [r3, #0]
 80e50b0:	4a18      	ldr	r2, [pc, #96]	; (80e5114 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80e50b2:	4293      	cmp	r3, r2
 80e50b4:	d004      	beq.n	80e50c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80e50b6:	687b      	ldr	r3, [r7, #4]
 80e50b8:	681b      	ldr	r3, [r3, #0]
 80e50ba:	4a17      	ldr	r2, [pc, #92]	; (80e5118 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80e50bc:	4293      	cmp	r3, r2
 80e50be:	d10c      	bne.n	80e50da <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80e50c0:	68bb      	ldr	r3, [r7, #8]
 80e50c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80e50c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80e50c8:	683b      	ldr	r3, [r7, #0]
 80e50ca:	689b      	ldr	r3, [r3, #8]
 80e50cc:	68ba      	ldr	r2, [r7, #8]
 80e50ce:	4313      	orrs	r3, r2
 80e50d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80e50d2:	687b      	ldr	r3, [r7, #4]
 80e50d4:	681b      	ldr	r3, [r3, #0]
 80e50d6:	68ba      	ldr	r2, [r7, #8]
 80e50d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80e50da:	687b      	ldr	r3, [r7, #4]
 80e50dc:	2201      	movs	r2, #1
 80e50de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80e50e2:	687b      	ldr	r3, [r7, #4]
 80e50e4:	2200      	movs	r2, #0
 80e50e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80e50ea:	2300      	movs	r3, #0
}
 80e50ec:	4618      	mov	r0, r3
 80e50ee:	3714      	adds	r7, #20
 80e50f0:	46bd      	mov	sp, r7
 80e50f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e50f6:	4770      	bx	lr
 80e50f8:	40010000 	.word	0x40010000
 80e50fc:	40010400 	.word	0x40010400
 80e5100:	40000400 	.word	0x40000400
 80e5104:	40000800 	.word	0x40000800
 80e5108:	40000c00 	.word	0x40000c00
 80e510c:	40001800 	.word	0x40001800
 80e5110:	40014000 	.word	0x40014000
 80e5114:	4000e000 	.word	0x4000e000
 80e5118:	4000e400 	.word	0x4000e400

080e511c <__libc_init_array>:
 80e511c:	b570      	push	{r4, r5, r6, lr}
 80e511e:	4d0d      	ldr	r5, [pc, #52]	; (80e5154 <__libc_init_array+0x38>)
 80e5120:	4c0d      	ldr	r4, [pc, #52]	; (80e5158 <__libc_init_array+0x3c>)
 80e5122:	1b64      	subs	r4, r4, r5
 80e5124:	10a4      	asrs	r4, r4, #2
 80e5126:	2600      	movs	r6, #0
 80e5128:	42a6      	cmp	r6, r4
 80e512a:	d109      	bne.n	80e5140 <__libc_init_array+0x24>
 80e512c:	4d0b      	ldr	r5, [pc, #44]	; (80e515c <__libc_init_array+0x40>)
 80e512e:	4c0c      	ldr	r4, [pc, #48]	; (80e5160 <__libc_init_array+0x44>)
 80e5130:	f000 f82e 	bl	80e5190 <_init>
 80e5134:	1b64      	subs	r4, r4, r5
 80e5136:	10a4      	asrs	r4, r4, #2
 80e5138:	2600      	movs	r6, #0
 80e513a:	42a6      	cmp	r6, r4
 80e513c:	d105      	bne.n	80e514a <__libc_init_array+0x2e>
 80e513e:	bd70      	pop	{r4, r5, r6, pc}
 80e5140:	f855 3b04 	ldr.w	r3, [r5], #4
 80e5144:	4798      	blx	r3
 80e5146:	3601      	adds	r6, #1
 80e5148:	e7ee      	b.n	80e5128 <__libc_init_array+0xc>
 80e514a:	f855 3b04 	ldr.w	r3, [r5], #4
 80e514e:	4798      	blx	r3
 80e5150:	3601      	adds	r6, #1
 80e5152:	e7f2      	b.n	80e513a <__libc_init_array+0x1e>
 80e5154:	080e5214 	.word	0x080e5214
 80e5158:	080e5214 	.word	0x080e5214
 80e515c:	080e5214 	.word	0x080e5214
 80e5160:	080e5218 	.word	0x080e5218

080e5164 <memcpy>:
 80e5164:	440a      	add	r2, r1
 80e5166:	4291      	cmp	r1, r2
 80e5168:	f100 33ff 	add.w	r3, r0, #4294967295
 80e516c:	d100      	bne.n	80e5170 <memcpy+0xc>
 80e516e:	4770      	bx	lr
 80e5170:	b510      	push	{r4, lr}
 80e5172:	f811 4b01 	ldrb.w	r4, [r1], #1
 80e5176:	f803 4f01 	strb.w	r4, [r3, #1]!
 80e517a:	4291      	cmp	r1, r2
 80e517c:	d1f9      	bne.n	80e5172 <memcpy+0xe>
 80e517e:	bd10      	pop	{r4, pc}

080e5180 <memset>:
 80e5180:	4402      	add	r2, r0
 80e5182:	4603      	mov	r3, r0
 80e5184:	4293      	cmp	r3, r2
 80e5186:	d100      	bne.n	80e518a <memset+0xa>
 80e5188:	4770      	bx	lr
 80e518a:	f803 1b01 	strb.w	r1, [r3], #1
 80e518e:	e7f9      	b.n	80e5184 <memset+0x4>

080e5190 <_init>:
 80e5190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80e5192:	bf00      	nop
 80e5194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80e5196:	bc08      	pop	{r3}
 80e5198:	469e      	mov	lr, r3
 80e519a:	4770      	bx	lr

080e519c <_fini>:
 80e519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80e519e:	bf00      	nop
 80e51a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80e51a2:	bc08      	pop	{r3}
 80e51a4:	469e      	mov	lr, r3
 80e51a6:	4770      	bx	lr
