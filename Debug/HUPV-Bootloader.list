
HUPV-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  080e0000  080e0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000455c  080e02cc  080e02cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080e4828  080e4828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080e4894  080e4894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080e4898  080e4898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080e489c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  24000010  080e48ac  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400014c  080e48ac  0002014c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000eec8  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002192  00000000  00000000  0002ef06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000cf0  00000000  00000000  00031098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000be8  00000000  00000000  00031d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003216e  00000000  00000000  00032970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e862  00000000  00000000  00064ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00142545  00000000  00000000  00073340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001b5885  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003548  00000000  00000000  001b58d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080e02cc <__do_global_dtors_aux>:
 80e02cc:	b510      	push	{r4, lr}
 80e02ce:	4c05      	ldr	r4, [pc, #20]	; (80e02e4 <__do_global_dtors_aux+0x18>)
 80e02d0:	7823      	ldrb	r3, [r4, #0]
 80e02d2:	b933      	cbnz	r3, 80e02e2 <__do_global_dtors_aux+0x16>
 80e02d4:	4b04      	ldr	r3, [pc, #16]	; (80e02e8 <__do_global_dtors_aux+0x1c>)
 80e02d6:	b113      	cbz	r3, 80e02de <__do_global_dtors_aux+0x12>
 80e02d8:	4804      	ldr	r0, [pc, #16]	; (80e02ec <__do_global_dtors_aux+0x20>)
 80e02da:	f3af 8000 	nop.w
 80e02de:	2301      	movs	r3, #1
 80e02e0:	7023      	strb	r3, [r4, #0]
 80e02e2:	bd10      	pop	{r4, pc}
 80e02e4:	24000010 	.word	0x24000010
 80e02e8:	00000000 	.word	0x00000000
 80e02ec:	080e4810 	.word	0x080e4810

080e02f0 <frame_dummy>:
 80e02f0:	b508      	push	{r3, lr}
 80e02f2:	4b03      	ldr	r3, [pc, #12]	; (80e0300 <frame_dummy+0x10>)
 80e02f4:	b11b      	cbz	r3, 80e02fe <frame_dummy+0xe>
 80e02f6:	4903      	ldr	r1, [pc, #12]	; (80e0304 <frame_dummy+0x14>)
 80e02f8:	4803      	ldr	r0, [pc, #12]	; (80e0308 <frame_dummy+0x18>)
 80e02fa:	f3af 8000 	nop.w
 80e02fe:	bd08      	pop	{r3, pc}
 80e0300:	00000000 	.word	0x00000000
 80e0304:	24000014 	.word	0x24000014
 80e0308:	080e4810 	.word	0x080e4810

080e030c <bootloader_start>:
void const __b_write_memory(fdcan_packet_t* packet);
void const __b_erase_memory(fdcan_packet_t* packet);
void const __b_go(fdcan_packet_t* packet);


void bootloader_start(){
 80e030c:	b580      	push	{r7, lr}
 80e030e:	b092      	sub	sp, #72	; 0x48
 80e0310:	af00      	add	r7, sp, #0
	fdcan_packet_t packet;
	__b_clean_fdcan_packet_all(&packet);
 80e0312:	1d3b      	adds	r3, r7, #4
 80e0314:	4618      	mov	r0, r3
 80e0316:	f000 fa2d 	bl	80e0774 <__b_clean_fdcan_packet_all>

	while(1){
		__b_wait_until_fdcan_message_received();
 80e031a:	f000 fa46 	bl	80e07aa <__b_wait_until_fdcan_message_received>
		fdcan_read(&packet);
 80e031e:	1d3b      	adds	r3, r7, #4
 80e0320:	4618      	mov	r0, r3
 80e0322:	f000 fa87 	bl	80e0834 <fdcan_read>

		switch (packet.identifier) {
 80e0326:	88bb      	ldrh	r3, [r7, #4]
 80e0328:	2b50      	cmp	r3, #80	; 0x50
 80e032a:	d00e      	beq.n	80e034a <bootloader_start+0x3e>
 80e032c:	2b50      	cmp	r3, #80	; 0x50
 80e032e:	dc25      	bgt.n	80e037c <bootloader_start+0x70>
 80e0330:	2b40      	cmp	r3, #64	; 0x40
 80e0332:	d00f      	beq.n	80e0354 <bootloader_start+0x48>
 80e0334:	2b40      	cmp	r3, #64	; 0x40
 80e0336:	dc21      	bgt.n	80e037c <bootloader_start+0x70>
 80e0338:	2b30      	cmp	r3, #48	; 0x30
 80e033a:	d010      	beq.n	80e035e <bootloader_start+0x52>
 80e033c:	2b30      	cmp	r3, #48	; 0x30
 80e033e:	dc1d      	bgt.n	80e037c <bootloader_start+0x70>
 80e0340:	2b10      	cmp	r3, #16
 80e0342:	d016      	beq.n	80e0372 <bootloader_start+0x66>
 80e0344:	2b20      	cmp	r3, #32
 80e0346:	d00f      	beq.n	80e0368 <bootloader_start+0x5c>
 80e0348:	e018      	b.n	80e037c <bootloader_start+0x70>
			case GET_VERSION_ORDER:
				__b_get_version(&packet);
 80e034a:	1d3b      	adds	r3, r7, #4
 80e034c:	4618      	mov	r0, r3
 80e034e:	f000 f81f 	bl	80e0390 <__b_get_version>
				break;
 80e0352:	e018      	b.n	80e0386 <bootloader_start+0x7a>
			case READ_MEMORY_ORDER:
				__b_read_memory(&packet);
 80e0354:	1d3b      	adds	r3, r7, #4
 80e0356:	4618      	mov	r0, r3
 80e0358:	f000 f834 	bl	80e03c4 <__b_read_memory>
				break;
 80e035c:	e013      	b.n	80e0386 <bootloader_start+0x7a>
			case WRITE_MEMORY_ORDER:
				__b_write_memory(&packet);
 80e035e:	1d3b      	adds	r3, r7, #4
 80e0360:	4618      	mov	r0, r3
 80e0362:	f000 f8c3 	bl	80e04ec <__b_write_memory>
				break;
 80e0366:	e00e      	b.n	80e0386 <bootloader_start+0x7a>
			case ERASE_MEMORY_ORDER:
				__b_erase_memory(&packet);
 80e0368:	1d3b      	adds	r3, r7, #4
 80e036a:	4618      	mov	r0, r3
 80e036c:	f000 f95a 	bl	80e0624 <__b_erase_memory>
				break;
 80e0370:	e009      	b.n	80e0386 <bootloader_start+0x7a>
			case GO_ORDER:
				__b_go(&packet);
 80e0372:	1d3b      	adds	r3, r7, #4
 80e0374:	4618      	mov	r0, r3
 80e0376:	f000 f97c 	bl	80e0672 <__b_go>
				break;
 80e037a:	e004      	b.n	80e0386 <bootloader_start+0x7a>
			default:
				__b_send_nack(&packet);
 80e037c:	1d3b      	adds	r3, r7, #4
 80e037e:	4618      	mov	r0, r3
 80e0380:	f000 f9ce 	bl	80e0720 <__b_send_nack>
				break;
 80e0384:	bf00      	nop
		}

		__b_clean_fdcan_packet_all(&packet);
 80e0386:	1d3b      	adds	r3, r7, #4
 80e0388:	4618      	mov	r0, r3
 80e038a:	f000 f9f3 	bl	80e0774 <__b_clean_fdcan_packet_all>
		__b_wait_until_fdcan_message_received();
 80e038e:	e7c4      	b.n	80e031a <bootloader_start+0xe>

080e0390 <__b_get_version>:
	}
}

void const __b_get_version(fdcan_packet_t* packet){
 80e0390:	b580      	push	{r7, lr}
 80e0392:	b082      	sub	sp, #8
 80e0394:	af00      	add	r7, sp, #0
 80e0396:	6078      	str	r0, [r7, #4]
	__b_send_ack(packet);
 80e0398:	6878      	ldr	r0, [r7, #4]
 80e039a:	f000 f9b0 	bl	80e06fe <__b_send_ack>

	packet->data[0] = BOOTLOADER_VERSION;
 80e039e:	687b      	ldr	r3, [r7, #4]
 80e03a0:	2201      	movs	r2, #1
 80e03a2:	709a      	strb	r2, [r3, #2]
	if (fdcan_transmit(packet) != FDCAN_OK) {
 80e03a4:	6878      	ldr	r0, [r7, #4]
 80e03a6:	f000 fa0b 	bl	80e07c0 <fdcan_transmit>
 80e03aa:	4603      	mov	r3, r0
 80e03ac:	2b00      	cmp	r3, #0
 80e03ae:	d003      	beq.n	80e03b8 <__b_get_version+0x28>
		__b_send_nack(packet);
 80e03b0:	6878      	ldr	r0, [r7, #4]
 80e03b2:	f000 f9b5 	bl	80e0720 <__b_send_nack>
		return;
 80e03b6:	e002      	b.n	80e03be <__b_get_version+0x2e>
	}

	__b_send_ack(packet);
 80e03b8:	6878      	ldr	r0, [r7, #4]
 80e03ba:	f000 f9a0 	bl	80e06fe <__b_send_ack>
}
 80e03be:	3708      	adds	r7, #8
 80e03c0:	46bd      	mov	sp, r7
 80e03c2:	bd80      	pop	{r7, pc}

080e03c4 <__b_read_memory>:

void const __b_read_memory(fdcan_packet_t* packet){
 80e03c4:	b580      	push	{r7, lr}
 80e03c6:	f5ad 3d00 	sub.w	sp, sp, #131072	; 0x20000
 80e03ca:	b086      	sub	sp, #24
 80e03cc:	af00      	add	r7, sp, #0
 80e03ce:	f107 0318 	add.w	r3, r7, #24
 80e03d2:	f843 0c14 	str.w	r0, [r3, #-20]
	uint32_t buffer[SECTOR_SIZE_IN_32BITS_WORDS];
	sector_t sector;
	uint32_t address;
	uint16_t i;

	sector = packet->data[0];
 80e03d6:	f107 0318 	add.w	r3, r7, #24
 80e03da:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e03de:	789b      	ldrb	r3, [r3, #2]
 80e03e0:	4a3e      	ldr	r2, [pc, #248]	; (80e04dc <__b_read_memory+0x118>)
 80e03e2:	443a      	add	r2, r7
 80e03e4:	6013      	str	r3, [r2, #0]
	address = flash_get_sector_starting_address(sector);
 80e03e6:	4b3d      	ldr	r3, [pc, #244]	; (80e04dc <__b_read_memory+0x118>)
 80e03e8:	443b      	add	r3, r7
 80e03ea:	6818      	ldr	r0, [r3, #0]
 80e03ec:	f000 fb86 	bl	80e0afc <flash_get_sector_starting_address>
 80e03f0:	4b3b      	ldr	r3, [pc, #236]	; (80e04e0 <__b_read_memory+0x11c>)
 80e03f2:	443b      	add	r3, r7
 80e03f4:	6018      	str	r0, [r3, #0]

	if (address == FLASH_SECTOR_ERROR || address == FLASH_PROTECTED_SECTOR) {
 80e03f6:	4b3a      	ldr	r3, [pc, #232]	; (80e04e0 <__b_read_memory+0x11c>)
 80e03f8:	443b      	add	r3, r7
 80e03fa:	681b      	ldr	r3, [r3, #0]
 80e03fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80e0400:	d004      	beq.n	80e040c <__b_read_memory+0x48>
 80e0402:	4b37      	ldr	r3, [pc, #220]	; (80e04e0 <__b_read_memory+0x11c>)
 80e0404:	443b      	add	r3, r7
 80e0406:	681b      	ldr	r3, [r3, #0]
 80e0408:	2b07      	cmp	r3, #7
 80e040a:	d106      	bne.n	80e041a <__b_read_memory+0x56>
		__b_send_nack(packet);
 80e040c:	f107 0318 	add.w	r3, r7, #24
 80e0410:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0414:	f000 f984 	bl	80e0720 <__b_send_nack>
		return;
 80e0418:	e05a      	b.n	80e04d0 <__b_read_memory+0x10c>
	}

	if (flash_read(address, buffer, SECTOR_SIZE_IN_32BITS_WORDS) != FLASH_OK) {
 80e041a:	4b32      	ldr	r3, [pc, #200]	; (80e04e4 <__b_read_memory+0x120>)
 80e041c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80e0420:	f103 0318 	add.w	r3, r3, #24
 80e0424:	443b      	add	r3, r7
 80e0426:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80e042a:	4619      	mov	r1, r3
 80e042c:	4b2c      	ldr	r3, [pc, #176]	; (80e04e0 <__b_read_memory+0x11c>)
 80e042e:	443b      	add	r3, r7
 80e0430:	6818      	ldr	r0, [r3, #0]
 80e0432:	f000 fa2d 	bl	80e0890 <flash_read>
 80e0436:	4603      	mov	r3, r0
 80e0438:	2b00      	cmp	r3, #0
 80e043a:	d006      	beq.n	80e044a <__b_read_memory+0x86>
		__b_send_nack(packet);
 80e043c:	f107 0318 	add.w	r3, r7, #24
 80e0440:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0444:	f000 f96c 	bl	80e0720 <__b_send_nack>
		return;
 80e0448:	e042      	b.n	80e04d0 <__b_read_memory+0x10c>
	}

	__b_send_ack(packet);
 80e044a:	f107 0318 	add.w	r3, r7, #24
 80e044e:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0452:	f000 f954 	bl	80e06fe <__b_send_ack>

	for (i = 0; i < SECTOR_SIZE_IN_32BITS_WORDS; i +=16) {
 80e0456:	2300      	movs	r3, #0
 80e0458:	4a23      	ldr	r2, [pc, #140]	; (80e04e8 <__b_read_memory+0x124>)
 80e045a:	443a      	add	r2, r7
 80e045c:	8013      	strh	r3, [r2, #0]
 80e045e:	e02b      	b.n	80e04b8 <__b_read_memory+0xf4>
		__b_data_copy_to_packet(packet, ((uint8_t*)&(buffer[i])));
 80e0460:	4b21      	ldr	r3, [pc, #132]	; (80e04e8 <__b_read_memory+0x124>)
 80e0462:	443b      	add	r3, r7
 80e0464:	881a      	ldrh	r2, [r3, #0]
 80e0466:	4b1f      	ldr	r3, [pc, #124]	; (80e04e4 <__b_read_memory+0x120>)
 80e0468:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80e046c:	f103 0318 	add.w	r3, r3, #24
 80e0470:	443b      	add	r3, r7
 80e0472:	0092      	lsls	r2, r2, #2
 80e0474:	4413      	add	r3, r2
 80e0476:	f107 0218 	add.w	r2, r7, #24
 80e047a:	4619      	mov	r1, r3
 80e047c:	f852 0c14 	ldr.w	r0, [r2, #-20]
 80e0480:	f000 f902 	bl	80e0688 <__b_data_copy_to_packet>
		if (fdcan_transmit(packet) != FDCAN_OK) {
 80e0484:	f107 0318 	add.w	r3, r7, #24
 80e0488:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e048c:	f000 f998 	bl	80e07c0 <fdcan_transmit>
 80e0490:	4603      	mov	r3, r0
 80e0492:	2b00      	cmp	r3, #0
 80e0494:	d006      	beq.n	80e04a4 <__b_read_memory+0xe0>
			__b_send_nack(packet);
 80e0496:	f107 0318 	add.w	r3, r7, #24
 80e049a:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e049e:	f000 f93f 	bl	80e0720 <__b_send_nack>
			return;
 80e04a2:	e015      	b.n	80e04d0 <__b_read_memory+0x10c>
		}
		HAL_Delay(1);
 80e04a4:	2001      	movs	r0, #1
 80e04a6:	f000 fefd 	bl	80e12a4 <HAL_Delay>
	for (i = 0; i < SECTOR_SIZE_IN_32BITS_WORDS; i +=16) {
 80e04aa:	4b0f      	ldr	r3, [pc, #60]	; (80e04e8 <__b_read_memory+0x124>)
 80e04ac:	443b      	add	r3, r7
 80e04ae:	881b      	ldrh	r3, [r3, #0]
 80e04b0:	3310      	adds	r3, #16
 80e04b2:	4a0d      	ldr	r2, [pc, #52]	; (80e04e8 <__b_read_memory+0x124>)
 80e04b4:	443a      	add	r2, r7
 80e04b6:	8013      	strh	r3, [r2, #0]
 80e04b8:	4b0b      	ldr	r3, [pc, #44]	; (80e04e8 <__b_read_memory+0x124>)
 80e04ba:	443b      	add	r3, r7
 80e04bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80e04c0:	2b00      	cmp	r3, #0
 80e04c2:	dacd      	bge.n	80e0460 <__b_read_memory+0x9c>
	}

	__b_send_ack(packet);
 80e04c4:	f107 0318 	add.w	r3, r7, #24
 80e04c8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e04cc:	f000 f917 	bl	80e06fe <__b_send_ack>
}
 80e04d0:	f507 3700 	add.w	r7, r7, #131072	; 0x20000
 80e04d4:	3718      	adds	r7, #24
 80e04d6:	46bd      	mov	sp, r7
 80e04d8:	bd80      	pop	{r7, pc}
 80e04da:	bf00      	nop
 80e04dc:	00020010 	.word	0x00020010
 80e04e0:	0002000c 	.word	0x0002000c
 80e04e4:	fffdfff4 	.word	0xfffdfff4
 80e04e8:	00020016 	.word	0x00020016

080e04ec <__b_write_memory>:

void const __b_write_memory(fdcan_packet_t* packet){
 80e04ec:	b580      	push	{r7, lr}
 80e04ee:	f5ad 3d00 	sub.w	sp, sp, #131072	; 0x20000
 80e04f2:	b086      	sub	sp, #24
 80e04f4:	af00      	add	r7, sp, #0
 80e04f6:	f107 0318 	add.w	r3, r7, #24
 80e04fa:	f843 0c14 	str.w	r0, [r3, #-20]
	uint32_t buffer[SECTOR_SIZE_IN_32BITS_WORDS];
	sector_t sector;
	uint32_t address;
	uint16_t i;

	sector = packet->data[0];
 80e04fe:	f107 0318 	add.w	r3, r7, #24
 80e0502:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e0506:	789b      	ldrb	r3, [r3, #2]
 80e0508:	4a42      	ldr	r2, [pc, #264]	; (80e0614 <__b_write_memory+0x128>)
 80e050a:	443a      	add	r2, r7
 80e050c:	6013      	str	r3, [r2, #0]
	address = flash_get_sector_starting_address(sector);
 80e050e:	4b41      	ldr	r3, [pc, #260]	; (80e0614 <__b_write_memory+0x128>)
 80e0510:	443b      	add	r3, r7
 80e0512:	6818      	ldr	r0, [r3, #0]
 80e0514:	f000 faf2 	bl	80e0afc <flash_get_sector_starting_address>
 80e0518:	4b3f      	ldr	r3, [pc, #252]	; (80e0618 <__b_write_memory+0x12c>)
 80e051a:	443b      	add	r3, r7
 80e051c:	6018      	str	r0, [r3, #0]

	if (address == FLASH_SECTOR_ERROR || address == FLASH_PROTECTED_SECTOR) {
 80e051e:	4b3e      	ldr	r3, [pc, #248]	; (80e0618 <__b_write_memory+0x12c>)
 80e0520:	443b      	add	r3, r7
 80e0522:	681b      	ldr	r3, [r3, #0]
 80e0524:	f1b3 3fff 	cmp.w	r3, #4294967295
 80e0528:	d004      	beq.n	80e0534 <__b_write_memory+0x48>
 80e052a:	4b3b      	ldr	r3, [pc, #236]	; (80e0618 <__b_write_memory+0x12c>)
 80e052c:	443b      	add	r3, r7
 80e052e:	681b      	ldr	r3, [r3, #0]
 80e0530:	2b07      	cmp	r3, #7
 80e0532:	d106      	bne.n	80e0542 <__b_write_memory+0x56>
		__b_send_nack(packet);
 80e0534:	f107 0318 	add.w	r3, r7, #24
 80e0538:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e053c:	f000 f8f0 	bl	80e0720 <__b_send_nack>
		return;
 80e0540:	e063      	b.n	80e060a <__b_write_memory+0x11e>
	}

	__b_send_ack(packet);
 80e0542:	f107 0318 	add.w	r3, r7, #24
 80e0546:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e054a:	f000 f8d8 	bl	80e06fe <__b_send_ack>

	for (i = 0; i < SECTOR_SIZE_IN_32BITS_WORDS; i +=16) {
 80e054e:	2300      	movs	r3, #0
 80e0550:	4a32      	ldr	r2, [pc, #200]	; (80e061c <__b_write_memory+0x130>)
 80e0552:	443a      	add	r2, r7
 80e0554:	8013      	strh	r3, [r2, #0]
 80e0556:	e03e      	b.n	80e05d6 <__b_write_memory+0xea>
		__b_wait_until_fdcan_message_received();
 80e0558:	f000 f927 	bl	80e07aa <__b_wait_until_fdcan_message_received>
		if (fdcan_read(packet) != FDCAN_OK) {
 80e055c:	f107 0318 	add.w	r3, r7, #24
 80e0560:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0564:	f000 f966 	bl	80e0834 <fdcan_read>
 80e0568:	4603      	mov	r3, r0
 80e056a:	2b00      	cmp	r3, #0
 80e056c:	d006      	beq.n	80e057c <__b_write_memory+0x90>
			__b_send_nack(packet);
 80e056e:	f107 0318 	add.w	r3, r7, #24
 80e0572:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0576:	f000 f8d3 	bl	80e0720 <__b_send_nack>
			return;
 80e057a:	e046      	b.n	80e060a <__b_write_memory+0x11e>
		}

		if (packet->identifier != WRITE_MEMORY_ORDER) {
 80e057c:	f107 0318 	add.w	r3, r7, #24
 80e0580:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e0584:	881b      	ldrh	r3, [r3, #0]
 80e0586:	2b30      	cmp	r3, #48	; 0x30
 80e0588:	d00c      	beq.n	80e05a4 <__b_write_memory+0xb8>
			packet->identifier = WRITE_MEMORY_ORDER;
 80e058a:	f107 0318 	add.w	r3, r7, #24
 80e058e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80e0592:	2230      	movs	r2, #48	; 0x30
 80e0594:	801a      	strh	r2, [r3, #0]
			__b_send_nack(packet);
 80e0596:	f107 0318 	add.w	r3, r7, #24
 80e059a:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e059e:	f000 f8bf 	bl	80e0720 <__b_send_nack>
			return;
 80e05a2:	e032      	b.n	80e060a <__b_write_memory+0x11e>
		}

		__b_data_copy_from_packet(packet, ((uint8_t*)&(buffer[i])));
 80e05a4:	4b1d      	ldr	r3, [pc, #116]	; (80e061c <__b_write_memory+0x130>)
 80e05a6:	443b      	add	r3, r7
 80e05a8:	881a      	ldrh	r2, [r3, #0]
 80e05aa:	4b1d      	ldr	r3, [pc, #116]	; (80e0620 <__b_write_memory+0x134>)
 80e05ac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80e05b0:	f103 0318 	add.w	r3, r3, #24
 80e05b4:	443b      	add	r3, r7
 80e05b6:	0092      	lsls	r2, r2, #2
 80e05b8:	4413      	add	r3, r2
 80e05ba:	f107 0218 	add.w	r2, r7, #24
 80e05be:	4619      	mov	r1, r3
 80e05c0:	f852 0c14 	ldr.w	r0, [r2, #-20]
 80e05c4:	f000 f87e 	bl	80e06c4 <__b_data_copy_from_packet>
	for (i = 0; i < SECTOR_SIZE_IN_32BITS_WORDS; i +=16) {
 80e05c8:	4b14      	ldr	r3, [pc, #80]	; (80e061c <__b_write_memory+0x130>)
 80e05ca:	443b      	add	r3, r7
 80e05cc:	881b      	ldrh	r3, [r3, #0]
 80e05ce:	3310      	adds	r3, #16
 80e05d0:	4a12      	ldr	r2, [pc, #72]	; (80e061c <__b_write_memory+0x130>)
 80e05d2:	443a      	add	r2, r7
 80e05d4:	8013      	strh	r3, [r2, #0]
 80e05d6:	4b11      	ldr	r3, [pc, #68]	; (80e061c <__b_write_memory+0x130>)
 80e05d8:	443b      	add	r3, r7
 80e05da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80e05de:	2b00      	cmp	r3, #0
 80e05e0:	daba      	bge.n	80e0558 <__b_write_memory+0x6c>
	}

	flash_write(address, buffer, SECTOR_SIZE_IN_32BITS_WORDS);
 80e05e2:	4b0f      	ldr	r3, [pc, #60]	; (80e0620 <__b_write_memory+0x134>)
 80e05e4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80e05e8:	f103 0318 	add.w	r3, r3, #24
 80e05ec:	443b      	add	r3, r7
 80e05ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80e05f2:	4619      	mov	r1, r3
 80e05f4:	4b08      	ldr	r3, [pc, #32]	; (80e0618 <__b_write_memory+0x12c>)
 80e05f6:	443b      	add	r3, r7
 80e05f8:	6818      	ldr	r0, [r3, #0]
 80e05fa:	f000 f979 	bl	80e08f0 <flash_write>

	__b_send_ack(packet);
 80e05fe:	f107 0318 	add.w	r3, r7, #24
 80e0602:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80e0606:	f000 f87a 	bl	80e06fe <__b_send_ack>
}
 80e060a:	f507 3700 	add.w	r7, r7, #131072	; 0x20000
 80e060e:	3718      	adds	r7, #24
 80e0610:	46bd      	mov	sp, r7
 80e0612:	bd80      	pop	{r7, pc}
 80e0614:	00020010 	.word	0x00020010
 80e0618:	0002000c 	.word	0x0002000c
 80e061c:	00020016 	.word	0x00020016
 80e0620:	fffdfff4 	.word	0xfffdfff4

080e0624 <__b_erase_memory>:

void const __b_erase_memory(fdcan_packet_t* packet){
 80e0624:	b580      	push	{r7, lr}
 80e0626:	b084      	sub	sp, #16
 80e0628:	af00      	add	r7, sp, #0
 80e062a:	6078      	str	r0, [r7, #4]
	sector_t sector1, sector2;

	sector1 = packet->data[0];
 80e062c:	687b      	ldr	r3, [r7, #4]
 80e062e:	789b      	ldrb	r3, [r3, #2]
 80e0630:	60fb      	str	r3, [r7, #12]
	sector2 = packet->data[1];
 80e0632:	687b      	ldr	r3, [r7, #4]
 80e0634:	78db      	ldrb	r3, [r3, #3]
 80e0636:	60bb      	str	r3, [r7, #8]

	if (sector1 > FLASH_MAX_SECTOR || sector2 > FLASH_MAX_SECTOR) {
 80e0638:	68fb      	ldr	r3, [r7, #12]
 80e063a:	2b07      	cmp	r3, #7
 80e063c:	d802      	bhi.n	80e0644 <__b_erase_memory+0x20>
 80e063e:	68bb      	ldr	r3, [r7, #8]
 80e0640:	2b07      	cmp	r3, #7
 80e0642:	d902      	bls.n	80e064a <__b_erase_memory+0x26>
		__b_send_nack(packet);
 80e0644:	6878      	ldr	r0, [r7, #4]
 80e0646:	f000 f86b 	bl	80e0720 <__b_send_nack>
	}

	__b_send_ack(packet);
 80e064a:	6878      	ldr	r0, [r7, #4]
 80e064c:	f000 f857 	bl	80e06fe <__b_send_ack>


	if(flash_erase(sector1, sector2) != FLASH_OK){
 80e0650:	68b9      	ldr	r1, [r7, #8]
 80e0652:	68f8      	ldr	r0, [r7, #12]
 80e0654:	f000 f9a8 	bl	80e09a8 <flash_erase>
 80e0658:	4603      	mov	r3, r0
 80e065a:	2b00      	cmp	r3, #0
 80e065c:	d002      	beq.n	80e0664 <__b_erase_memory+0x40>
		__b_send_nack(packet);
 80e065e:	6878      	ldr	r0, [r7, #4]
 80e0660:	f000 f85e 	bl	80e0720 <__b_send_nack>
	}

	__b_send_ack(packet);
 80e0664:	6878      	ldr	r0, [r7, #4]
 80e0666:	f000 f84a 	bl	80e06fe <__b_send_ack>
}
 80e066a:	bf00      	nop
 80e066c:	3710      	adds	r7, #16
 80e066e:	46bd      	mov	sp, r7
 80e0670:	bd80      	pop	{r7, pc}

080e0672 <__b_go>:

void const __b_go(fdcan_packet_t* packet){
 80e0672:	b580      	push	{r7, lr}
 80e0674:	b082      	sub	sp, #8
 80e0676:	af00      	add	r7, sp, #0
 80e0678:	6078      	str	r0, [r7, #4]
	__b_send_nack(packet);
 80e067a:	6878      	ldr	r0, [r7, #4]
 80e067c:	f000 f850 	bl	80e0720 <__b_send_nack>
}
 80e0680:	bf00      	nop
 80e0682:	3708      	adds	r7, #8
 80e0684:	46bd      	mov	sp, r7
 80e0686:	bd80      	pop	{r7, pc}

080e0688 <__b_data_copy_to_packet>:

void const __b_data_copy_to_packet(fdcan_packet_t* packet, uint8_t* data){
 80e0688:	b480      	push	{r7}
 80e068a:	b085      	sub	sp, #20
 80e068c:	af00      	add	r7, sp, #0
 80e068e:	6078      	str	r0, [r7, #4]
 80e0690:	6039      	str	r1, [r7, #0]
	uint8_t i;

	for (i = 0; i < 64; ++i) {
 80e0692:	2300      	movs	r3, #0
 80e0694:	73fb      	strb	r3, [r7, #15]
 80e0696:	e00b      	b.n	80e06b0 <__b_data_copy_to_packet+0x28>
		packet->data[i] = data[i];
 80e0698:	7bfb      	ldrb	r3, [r7, #15]
 80e069a:	683a      	ldr	r2, [r7, #0]
 80e069c:	441a      	add	r2, r3
 80e069e:	7bfb      	ldrb	r3, [r7, #15]
 80e06a0:	7811      	ldrb	r1, [r2, #0]
 80e06a2:	687a      	ldr	r2, [r7, #4]
 80e06a4:	4413      	add	r3, r2
 80e06a6:	460a      	mov	r2, r1
 80e06a8:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 64; ++i) {
 80e06aa:	7bfb      	ldrb	r3, [r7, #15]
 80e06ac:	3301      	adds	r3, #1
 80e06ae:	73fb      	strb	r3, [r7, #15]
 80e06b0:	7bfb      	ldrb	r3, [r7, #15]
 80e06b2:	2b3f      	cmp	r3, #63	; 0x3f
 80e06b4:	d9f0      	bls.n	80e0698 <__b_data_copy_to_packet+0x10>
	}
}
 80e06b6:	bf00      	nop
 80e06b8:	bf00      	nop
 80e06ba:	3714      	adds	r7, #20
 80e06bc:	46bd      	mov	sp, r7
 80e06be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e06c2:	4770      	bx	lr

080e06c4 <__b_data_copy_from_packet>:

void const __b_data_copy_from_packet(fdcan_packet_t* packet, uint8_t* data){
 80e06c4:	b480      	push	{r7}
 80e06c6:	b085      	sub	sp, #20
 80e06c8:	af00      	add	r7, sp, #0
 80e06ca:	6078      	str	r0, [r7, #4]
 80e06cc:	6039      	str	r1, [r7, #0]
	uint8_t i;

	for (i = 0; i < 64; ++i) {
 80e06ce:	2300      	movs	r3, #0
 80e06d0:	73fb      	strb	r3, [r7, #15]
 80e06d2:	e00a      	b.n	80e06ea <__b_data_copy_from_packet+0x26>
		data[i] = packet->data[i];
 80e06d4:	7bfa      	ldrb	r2, [r7, #15]
 80e06d6:	7bfb      	ldrb	r3, [r7, #15]
 80e06d8:	6839      	ldr	r1, [r7, #0]
 80e06da:	440b      	add	r3, r1
 80e06dc:	6879      	ldr	r1, [r7, #4]
 80e06de:	440a      	add	r2, r1
 80e06e0:	7892      	ldrb	r2, [r2, #2]
 80e06e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 64; ++i) {
 80e06e4:	7bfb      	ldrb	r3, [r7, #15]
 80e06e6:	3301      	adds	r3, #1
 80e06e8:	73fb      	strb	r3, [r7, #15]
 80e06ea:	7bfb      	ldrb	r3, [r7, #15]
 80e06ec:	2b3f      	cmp	r3, #63	; 0x3f
 80e06ee:	d9f1      	bls.n	80e06d4 <__b_data_copy_from_packet+0x10>
	}
}
 80e06f0:	bf00      	nop
 80e06f2:	bf00      	nop
 80e06f4:	3714      	adds	r7, #20
 80e06f6:	46bd      	mov	sp, r7
 80e06f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e06fc:	4770      	bx	lr

080e06fe <__b_send_ack>:


void const __b_send_ack(fdcan_packet_t* packet){
 80e06fe:	b580      	push	{r7, lr}
 80e0700:	b082      	sub	sp, #8
 80e0702:	af00      	add	r7, sp, #0
 80e0704:	6078      	str	r0, [r7, #4]
	__b_clean_fdcan_packet_data(packet);
 80e0706:	6878      	ldr	r0, [r7, #4]
 80e0708:	f000 f81b 	bl	80e0742 <__b_clean_fdcan_packet_data>
	packet->data[0] = BOOTLOADER_ACK;
 80e070c:	687b      	ldr	r3, [r7, #4]
 80e070e:	2279      	movs	r2, #121	; 0x79
 80e0710:	709a      	strb	r2, [r3, #2]
	fdcan_transmit(packet);
 80e0712:	6878      	ldr	r0, [r7, #4]
 80e0714:	f000 f854 	bl	80e07c0 <fdcan_transmit>
}
 80e0718:	bf00      	nop
 80e071a:	3708      	adds	r7, #8
 80e071c:	46bd      	mov	sp, r7
 80e071e:	bd80      	pop	{r7, pc}

080e0720 <__b_send_nack>:

void const __b_send_nack(fdcan_packet_t* packet){
 80e0720:	b580      	push	{r7, lr}
 80e0722:	b082      	sub	sp, #8
 80e0724:	af00      	add	r7, sp, #0
 80e0726:	6078      	str	r0, [r7, #4]
	__b_clean_fdcan_packet_data(packet);
 80e0728:	6878      	ldr	r0, [r7, #4]
 80e072a:	f000 f80a 	bl	80e0742 <__b_clean_fdcan_packet_data>
	packet->data[0] = BOOTLOADER_NACK;
 80e072e:	687b      	ldr	r3, [r7, #4]
 80e0730:	221f      	movs	r2, #31
 80e0732:	709a      	strb	r2, [r3, #2]
	fdcan_transmit(packet);
 80e0734:	6878      	ldr	r0, [r7, #4]
 80e0736:	f000 f843 	bl	80e07c0 <fdcan_transmit>
}
 80e073a:	bf00      	nop
 80e073c:	3708      	adds	r7, #8
 80e073e:	46bd      	mov	sp, r7
 80e0740:	bd80      	pop	{r7, pc}

080e0742 <__b_clean_fdcan_packet_data>:
	uint32_t address = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];

	return address;
}

void const __b_clean_fdcan_packet_data(fdcan_packet_t* packet){
 80e0742:	b480      	push	{r7}
 80e0744:	b085      	sub	sp, #20
 80e0746:	af00      	add	r7, sp, #0
 80e0748:	6078      	str	r0, [r7, #4]
	uint16_t i;

	for (i = 0; i < 64; ++i) {
 80e074a:	2300      	movs	r3, #0
 80e074c:	81fb      	strh	r3, [r7, #14]
 80e074e:	e007      	b.n	80e0760 <__b_clean_fdcan_packet_data+0x1e>
		packet->data[i] = 0;
 80e0750:	89fb      	ldrh	r3, [r7, #14]
 80e0752:	687a      	ldr	r2, [r7, #4]
 80e0754:	4413      	add	r3, r2
 80e0756:	2200      	movs	r2, #0
 80e0758:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 64; ++i) {
 80e075a:	89fb      	ldrh	r3, [r7, #14]
 80e075c:	3301      	adds	r3, #1
 80e075e:	81fb      	strh	r3, [r7, #14]
 80e0760:	89fb      	ldrh	r3, [r7, #14]
 80e0762:	2b3f      	cmp	r3, #63	; 0x3f
 80e0764:	d9f4      	bls.n	80e0750 <__b_clean_fdcan_packet_data+0xe>
	}
}
 80e0766:	bf00      	nop
 80e0768:	bf00      	nop
 80e076a:	3714      	adds	r7, #20
 80e076c:	46bd      	mov	sp, r7
 80e076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0772:	4770      	bx	lr

080e0774 <__b_clean_fdcan_packet_all>:

void const __b_clean_fdcan_packet_all(fdcan_packet_t* packet){
 80e0774:	b480      	push	{r7}
 80e0776:	b085      	sub	sp, #20
 80e0778:	af00      	add	r7, sp, #0
 80e077a:	6078      	str	r0, [r7, #4]
	uint16_t i;

	for (i = 0; i < 64; ++i) {
 80e077c:	2300      	movs	r3, #0
 80e077e:	81fb      	strh	r3, [r7, #14]
 80e0780:	e007      	b.n	80e0792 <__b_clean_fdcan_packet_all+0x1e>
		packet->data[i] = 0;
 80e0782:	89fb      	ldrh	r3, [r7, #14]
 80e0784:	687a      	ldr	r2, [r7, #4]
 80e0786:	4413      	add	r3, r2
 80e0788:	2200      	movs	r2, #0
 80e078a:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 64; ++i) {
 80e078c:	89fb      	ldrh	r3, [r7, #14]
 80e078e:	3301      	adds	r3, #1
 80e0790:	81fb      	strh	r3, [r7, #14]
 80e0792:	89fb      	ldrh	r3, [r7, #14]
 80e0794:	2b3f      	cmp	r3, #63	; 0x3f
 80e0796:	d9f4      	bls.n	80e0782 <__b_clean_fdcan_packet_all+0xe>
	}

	packet->identifier = 0;
 80e0798:	687b      	ldr	r3, [r7, #4]
 80e079a:	2200      	movs	r2, #0
 80e079c:	801a      	strh	r2, [r3, #0]
}
 80e079e:	bf00      	nop
 80e07a0:	3714      	adds	r7, #20
 80e07a2:	46bd      	mov	sp, r7
 80e07a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e07a8:	4770      	bx	lr

080e07aa <__b_wait_until_fdcan_message_received>:


void const __b_wait_until_fdcan_message_received(void){
 80e07aa:	b580      	push	{r7, lr}
 80e07ac:	af00      	add	r7, sp, #0
	while(!fdcan_test()){}
 80e07ae:	bf00      	nop
 80e07b0:	f000 f85a 	bl	80e0868 <fdcan_test>
 80e07b4:	4603      	mov	r3, r0
 80e07b6:	2b00      	cmp	r3, #0
 80e07b8:	d0fa      	beq.n	80e07b0 <__b_wait_until_fdcan_message_received+0x6>
}
 80e07ba:	bf00      	nop
 80e07bc:	bf00      	nop
 80e07be:	bd80      	pop	{r7, pc}

080e07c0 <fdcan_transmit>:

extern FDCAN_HandleTypeDef hfdcan1;
FDCAN_TxHeaderTypeDef tx_header;
FDCAN_RxHeaderTypeDef rx_header_buffer;

fdcan_error_t const fdcan_transmit(fdcan_packet_t* packet){
 80e07c0:	b580      	push	{r7, lr}
 80e07c2:	b082      	sub	sp, #8
 80e07c4:	af00      	add	r7, sp, #0
 80e07c6:	6078      	str	r0, [r7, #4]

	tx_header.Identifier = (uint32_t)packet->identifier;
 80e07c8:	687b      	ldr	r3, [r7, #4]
 80e07ca:	881b      	ldrh	r3, [r3, #0]
 80e07cc:	461a      	mov	r2, r3
 80e07ce:	4b17      	ldr	r3, [pc, #92]	; (80e082c <fdcan_transmit+0x6c>)
 80e07d0:	601a      	str	r2, [r3, #0]
	tx_header.IdType = FDCAN_STANDARD_ID;
 80e07d2:	4b16      	ldr	r3, [pc, #88]	; (80e082c <fdcan_transmit+0x6c>)
 80e07d4:	2200      	movs	r2, #0
 80e07d6:	605a      	str	r2, [r3, #4]
	tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80e07d8:	4b14      	ldr	r3, [pc, #80]	; (80e082c <fdcan_transmit+0x6c>)
 80e07da:	2200      	movs	r2, #0
 80e07dc:	609a      	str	r2, [r3, #8]
	tx_header.DataLength = FDCAN_DLC_BYTES_64;
 80e07de:	4b13      	ldr	r3, [pc, #76]	; (80e082c <fdcan_transmit+0x6c>)
 80e07e0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80e07e4:	60da      	str	r2, [r3, #12]
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80e07e6:	4b11      	ldr	r3, [pc, #68]	; (80e082c <fdcan_transmit+0x6c>)
 80e07e8:	2200      	movs	r2, #0
 80e07ea:	611a      	str	r2, [r3, #16]
	tx_header.BitRateSwitch = FDCAN_BRS_ON;
 80e07ec:	4b0f      	ldr	r3, [pc, #60]	; (80e082c <fdcan_transmit+0x6c>)
 80e07ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80e07f2:	615a      	str	r2, [r3, #20]
	tx_header.FDFormat = FDCAN_FD_CAN;
 80e07f4:	4b0d      	ldr	r3, [pc, #52]	; (80e082c <fdcan_transmit+0x6c>)
 80e07f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80e07fa:	619a      	str	r2, [r3, #24]
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80e07fc:	4b0b      	ldr	r3, [pc, #44]	; (80e082c <fdcan_transmit+0x6c>)
 80e07fe:	2200      	movs	r2, #0
 80e0800:	61da      	str	r2, [r3, #28]
	tx_header.MessageMarker = 0;
 80e0802:	4b0a      	ldr	r3, [pc, #40]	; (80e082c <fdcan_transmit+0x6c>)
 80e0804:	2200      	movs	r2, #0
 80e0806:	621a      	str	r2, [r3, #32]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, packet->data) != HAL_OK) {
 80e0808:	687b      	ldr	r3, [r7, #4]
 80e080a:	3302      	adds	r3, #2
 80e080c:	461a      	mov	r2, r3
 80e080e:	4907      	ldr	r1, [pc, #28]	; (80e082c <fdcan_transmit+0x6c>)
 80e0810:	4807      	ldr	r0, [pc, #28]	; (80e0830 <fdcan_transmit+0x70>)
 80e0812:	f001 f858 	bl	80e18c6 <HAL_FDCAN_AddMessageToTxFifoQ>
 80e0816:	4603      	mov	r3, r0
 80e0818:	2b00      	cmp	r3, #0
 80e081a:	d001      	beq.n	80e0820 <fdcan_transmit+0x60>
		return FDCAN_ERROR;
 80e081c:	23ff      	movs	r3, #255	; 0xff
 80e081e:	e000      	b.n	80e0822 <fdcan_transmit+0x62>
	}

	return FDCAN_OK;
 80e0820:	2300      	movs	r3, #0
}
 80e0822:	4618      	mov	r0, r3
 80e0824:	3708      	adds	r7, #8
 80e0826:	46bd      	mov	sp, r7
 80e0828:	bd80      	pop	{r7, pc}
 80e082a:	bf00      	nop
 80e082c:	2400002c 	.word	0x2400002c
 80e0830:	2400008c 	.word	0x2400008c

080e0834 <fdcan_read>:

fdcan_error_t const fdcan_read(fdcan_packet_t* packet){
 80e0834:	b580      	push	{r7, lr}
 80e0836:	b082      	sub	sp, #8
 80e0838:	af00      	add	r7, sp, #0
 80e083a:	6078      	str	r0, [r7, #4]
	if(!fdcan_test) {
		return FDCAN_EMPTY;
	}

	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header_buffer, packet->data);
 80e083c:	687b      	ldr	r3, [r7, #4]
 80e083e:	3302      	adds	r3, #2
 80e0840:	4a07      	ldr	r2, [pc, #28]	; (80e0860 <fdcan_read+0x2c>)
 80e0842:	2140      	movs	r1, #64	; 0x40
 80e0844:	4807      	ldr	r0, [pc, #28]	; (80e0864 <fdcan_read+0x30>)
 80e0846:	f001 f899 	bl	80e197c <HAL_FDCAN_GetRxMessage>

	packet->identifier = rx_header_buffer.Identifier;
 80e084a:	4b05      	ldr	r3, [pc, #20]	; (80e0860 <fdcan_read+0x2c>)
 80e084c:	681b      	ldr	r3, [r3, #0]
 80e084e:	b29a      	uxth	r2, r3
 80e0850:	687b      	ldr	r3, [r7, #4]
 80e0852:	801a      	strh	r2, [r3, #0]
	return FDCAN_OK;
 80e0854:	2300      	movs	r3, #0
}
 80e0856:	4618      	mov	r0, r3
 80e0858:	3708      	adds	r7, #8
 80e085a:	46bd      	mov	sp, r7
 80e085c:	bd80      	pop	{r7, pc}
 80e085e:	bf00      	nop
 80e0860:	24000050 	.word	0x24000050
 80e0864:	2400008c 	.word	0x2400008c

080e0868 <fdcan_test>:

int const fdcan_test(void){
 80e0868:	b480      	push	{r7}
 80e086a:	af00      	add	r7, sp, #0
	return !((hfdcan1.Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U);
 80e086c:	4b07      	ldr	r3, [pc, #28]	; (80e088c <fdcan_test+0x24>)
 80e086e:	681b      	ldr	r3, [r3, #0]
 80e0870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e0874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e0878:	2b00      	cmp	r3, #0
 80e087a:	bf14      	ite	ne
 80e087c:	2301      	movne	r3, #1
 80e087e:	2300      	moveq	r3, #0
 80e0880:	b2db      	uxtb	r3, r3
}
 80e0882:	4618      	mov	r0, r3
 80e0884:	46bd      	mov	sp, r7
 80e0886:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e088a:	4770      	bx	lr
 80e088c:	2400008c 	.word	0x2400008c

080e0890 <flash_read>:
* Function prototypes
****************************************************************************************/
sector_t const __flash_get_sector(const uint32_t address);
uint32_t const flash_get_sector_starting_address(const sector_t sector);

flash_error const flash_read(uint32_t source_addr, uint32_t* result, uint32_t number_of_words){
 80e0890:	b580      	push	{r7, lr}
 80e0892:	b086      	sub	sp, #24
 80e0894:	af00      	add	r7, sp, #0
 80e0896:	60f8      	str	r0, [r7, #12]
 80e0898:	60b9      	str	r1, [r7, #8]
 80e089a:	607a      	str	r2, [r7, #4]
	if (source_addr < FLASH_START_ADDRESS || source_addr > FLASH_CODE_END_ADDRESS) {
 80e089c:	68fb      	ldr	r3, [r7, #12]
 80e089e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80e08a2:	d303      	bcc.n	80e08ac <flash_read+0x1c>
 80e08a4:	68fb      	ldr	r3, [r7, #12]
 80e08a6:	4a11      	ldr	r2, [pc, #68]	; (80e08ec <flash_read+0x5c>)
 80e08a8:	4293      	cmp	r3, r2
 80e08aa:	d901      	bls.n	80e08b0 <flash_read+0x20>
		return FLASH_PROTECTED_MEM;
 80e08ac:	2301      	movs	r3, #1
 80e08ae:	e018      	b.n	80e08e2 <flash_read+0x52>
	}

	HAL_FLASH_Unlock();
 80e08b0:	f001 fcbe 	bl	80e2230 <HAL_FLASH_Unlock>
	uint32_t i;
	for (i = 0; i < number_of_words; i++) {
 80e08b4:	2300      	movs	r3, #0
 80e08b6:	617b      	str	r3, [r7, #20]
 80e08b8:	e00c      	b.n	80e08d4 <flash_read+0x44>
		*result = *(__IO uint32_t *)(source_addr);
 80e08ba:	68fb      	ldr	r3, [r7, #12]
 80e08bc:	681a      	ldr	r2, [r3, #0]
 80e08be:	68bb      	ldr	r3, [r7, #8]
 80e08c0:	601a      	str	r2, [r3, #0]
		source_addr += 4;
 80e08c2:	68fb      	ldr	r3, [r7, #12]
 80e08c4:	3304      	adds	r3, #4
 80e08c6:	60fb      	str	r3, [r7, #12]
		result++;
 80e08c8:	68bb      	ldr	r3, [r7, #8]
 80e08ca:	3304      	adds	r3, #4
 80e08cc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < number_of_words; i++) {
 80e08ce:	697b      	ldr	r3, [r7, #20]
 80e08d0:	3301      	adds	r3, #1
 80e08d2:	617b      	str	r3, [r7, #20]
 80e08d4:	697a      	ldr	r2, [r7, #20]
 80e08d6:	687b      	ldr	r3, [r7, #4]
 80e08d8:	429a      	cmp	r2, r3
 80e08da:	d3ee      	bcc.n	80e08ba <flash_read+0x2a>
	}
	HAL_FLASH_Lock();
 80e08dc:	f001 fcca 	bl	80e2274 <HAL_FLASH_Lock>

	return FLASH_OK;
 80e08e0:	2300      	movs	r3, #0
}
 80e08e2:	4618      	mov	r0, r3
 80e08e4:	3718      	adds	r7, #24
 80e08e6:	46bd      	mov	sp, r7
 80e08e8:	bd80      	pop	{r7, pc}
 80e08ea:	bf00      	nop
 80e08ec:	080dffff 	.word	0x080dffff

080e08f0 <flash_write>:

flash_error const flash_write(uint32_t dest_addr, uint32_t* data, uint32_t number_of_words){
 80e08f0:	b580      	push	{r7, lr}
 80e08f2:	b08a      	sub	sp, #40	; 0x28
 80e08f4:	af00      	add	r7, sp, #0
 80e08f6:	60f8      	str	r0, [r7, #12]
 80e08f8:	60b9      	str	r1, [r7, #8]
 80e08fa:	607a      	str	r2, [r7, #4]
	if (dest_addr < FLASH_SECTOR0_START_ADDRESS || dest_addr > FLASH_CODE_END_ADDRESS) {
 80e08fc:	68fb      	ldr	r3, [r7, #12]
 80e08fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80e0902:	d303      	bcc.n	80e090c <flash_write+0x1c>
 80e0904:	68fb      	ldr	r3, [r7, #12]
 80e0906:	4a27      	ldr	r2, [pc, #156]	; (80e09a4 <flash_write+0xb4>)
 80e0908:	4293      	cmp	r3, r2
 80e090a:	d901      	bls.n	80e0910 <flash_write+0x20>
		return FLASH_PROTECTED_MEM;
 80e090c:	2301      	movs	r3, #1
 80e090e:	e045      	b.n	80e099c <flash_write+0xac>
	}

	uint32_t index = 0;
 80e0910:	2300      	movs	r3, #0
 80e0912:	627b      	str	r3, [r7, #36]	; 0x24

	sector_t start_sector =__flash_get_sector(dest_addr);;
 80e0914:	68f8      	ldr	r0, [r7, #12]
 80e0916:	f000 f87f 	bl	80e0a18 <__flash_get_sector>
 80e091a:	61f8      	str	r0, [r7, #28]
	uint32_t start_sector_addr = flash_get_sector_starting_address(start_sector);
 80e091c:	69f8      	ldr	r0, [r7, #28]
 80e091e:	f000 f8ed 	bl	80e0afc <flash_get_sector_starting_address>
 80e0922:	6238      	str	r0, [r7, #32]

	uint32_t end_address = dest_addr + ((number_of_words * FLASH_32BITS_WORLD) - FLASH_32BITS_WORLD);
 80e0924:	687a      	ldr	r2, [r7, #4]
 80e0926:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80e092a:	4413      	add	r3, r2
 80e092c:	009b      	lsls	r3, r3, #2
 80e092e:	68fa      	ldr	r2, [r7, #12]
 80e0930:	4413      	add	r3, r2
 80e0932:	61bb      	str	r3, [r7, #24]
	uint32_t end_sector = __flash_get_sector(end_address);
 80e0934:	69b8      	ldr	r0, [r7, #24]
 80e0936:	f000 f86f 	bl	80e0a18 <__flash_get_sector>
 80e093a:	6178      	str	r0, [r7, #20]

	if (flash_erase(start_sector, end_sector) != FLASH_OK) {
 80e093c:	6979      	ldr	r1, [r7, #20]
 80e093e:	69f8      	ldr	r0, [r7, #28]
 80e0940:	f000 f832 	bl	80e09a8 <flash_erase>
 80e0944:	4603      	mov	r3, r0
 80e0946:	2b00      	cmp	r3, #0
 80e0948:	d001      	beq.n	80e094e <flash_write+0x5e>
		return FLASH_ERROR;
 80e094a:	23ff      	movs	r3, #255	; 0xff
 80e094c:	e026      	b.n	80e099c <flash_write+0xac>
	}

	HAL_FLASH_Unlock();
 80e094e:	f001 fc6f 	bl	80e2230 <HAL_FLASH_Unlock>
	while(index < (uint32_t)SECTOR_SIZE_IN_32BITS_WORDS){
 80e0952:	e01c      	b.n	80e098e <flash_write+0x9e>
		if (start_sector_addr > FLASH_CODE_END_ADDRESS) {
 80e0954:	6a3b      	ldr	r3, [r7, #32]
 80e0956:	4a13      	ldr	r2, [pc, #76]	; (80e09a4 <flash_write+0xb4>)
 80e0958:	4293      	cmp	r3, r2
 80e095a:	d901      	bls.n	80e0960 <flash_write+0x70>
			return FLASH_PROTECTED_MEM;
 80e095c:	2301      	movs	r3, #1
 80e095e:	e01d      	b.n	80e099c <flash_write+0xac>
		}

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, start_sector_addr, (uint32_t)&data[index]) == HAL_OK) {
 80e0960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e0962:	009b      	lsls	r3, r3, #2
 80e0964:	68ba      	ldr	r2, [r7, #8]
 80e0966:	4413      	add	r3, r2
 80e0968:	461a      	mov	r2, r3
 80e096a:	6a39      	ldr	r1, [r7, #32]
 80e096c:	2001      	movs	r0, #1
 80e096e:	f001 fbf1 	bl	80e2154 <HAL_FLASH_Program>
 80e0972:	4603      	mov	r3, r0
 80e0974:	2b00      	cmp	r3, #0
 80e0976:	d106      	bne.n	80e0986 <flash_write+0x96>
			start_sector_addr += FLASH_WORD_SIZE;
 80e0978:	6a3b      	ldr	r3, [r7, #32]
 80e097a:	3320      	adds	r3, #32
 80e097c:	623b      	str	r3, [r7, #32]
			index += FLASH_WORD_SIZE / FLASH_32BITS_WORLD;
 80e097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e0980:	3308      	adds	r3, #8
 80e0982:	627b      	str	r3, [r7, #36]	; 0x24
 80e0984:	e003      	b.n	80e098e <flash_write+0x9e>
		}else{
			HAL_FLASH_Lock();
 80e0986:	f001 fc75 	bl	80e2274 <HAL_FLASH_Lock>
			return FLASH_ERROR;;
 80e098a:	23ff      	movs	r3, #255	; 0xff
 80e098c:	e006      	b.n	80e099c <flash_write+0xac>
	while(index < (uint32_t)SECTOR_SIZE_IN_32BITS_WORDS){
 80e098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e0990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80e0994:	d3de      	bcc.n	80e0954 <flash_write+0x64>
		}
	}
	HAL_FLASH_Lock();
 80e0996:	f001 fc6d 	bl	80e2274 <HAL_FLASH_Lock>

	return FLASH_OK;
 80e099a:	2300      	movs	r3, #0
}
 80e099c:	4618      	mov	r0, r3
 80e099e:	3728      	adds	r7, #40	; 0x28
 80e09a0:	46bd      	mov	sp, r7
 80e09a2:	bd80      	pop	{r7, pc}
 80e09a4:	080dffff 	.word	0x080dffff

080e09a8 <flash_erase>:

flash_error const flash_erase(const sector_t start_sector, const sector_t end_sector){
 80e09a8:	b580      	push	{r7, lr}
 80e09aa:	b084      	sub	sp, #16
 80e09ac:	af00      	add	r7, sp, #0
 80e09ae:	6078      	str	r0, [r7, #4]
 80e09b0:	6039      	str	r1, [r7, #0]
	if (start_sector == FLASH_PROTECTED_SECTOR || end_sector == FLASH_PROTECTED_SECTOR) {
 80e09b2:	687b      	ldr	r3, [r7, #4]
 80e09b4:	2b07      	cmp	r3, #7
 80e09b6:	d002      	beq.n	80e09be <flash_erase+0x16>
 80e09b8:	683b      	ldr	r3, [r7, #0]
 80e09ba:	2b07      	cmp	r3, #7
 80e09bc:	d101      	bne.n	80e09c2 <flash_erase+0x1a>
		return FLASH_PROTECTED_MEM;
 80e09be:	2301      	movs	r3, #1
 80e09c0:	e023      	b.n	80e0a0a <flash_erase+0x62>
	}

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t sectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80e09c2:	4b14      	ldr	r3, [pc, #80]	; (80e0a14 <flash_erase+0x6c>)
 80e09c4:	2200      	movs	r2, #0
 80e09c6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80e09c8:	4b12      	ldr	r3, [pc, #72]	; (80e0a14 <flash_erase+0x6c>)
 80e09ca:	2220      	movs	r2, #32
 80e09cc:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = start_sector;
 80e09ce:	4a11      	ldr	r2, [pc, #68]	; (80e0a14 <flash_erase+0x6c>)
 80e09d0:	687b      	ldr	r3, [r7, #4]
 80e09d2:	6093      	str	r3, [r2, #8]
	EraseInitStruct.Banks    	  = FLASH_BANK_1;
 80e09d4:	4b0f      	ldr	r3, [pc, #60]	; (80e0a14 <flash_erase+0x6c>)
 80e09d6:	2201      	movs	r2, #1
 80e09d8:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbSectors     = (end_sector - start_sector) + 1;
 80e09da:	683a      	ldr	r2, [r7, #0]
 80e09dc:	687b      	ldr	r3, [r7, #4]
 80e09de:	1ad3      	subs	r3, r2, r3
 80e09e0:	3301      	adds	r3, #1
 80e09e2:	4a0c      	ldr	r2, [pc, #48]	; (80e0a14 <flash_erase+0x6c>)
 80e09e4:	60d3      	str	r3, [r2, #12]

	HAL_FLASH_Unlock();
 80e09e6:	f001 fc23 	bl	80e2230 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError) != HAL_OK)
 80e09ea:	f107 030c 	add.w	r3, r7, #12
 80e09ee:	4619      	mov	r1, r3
 80e09f0:	4808      	ldr	r0, [pc, #32]	; (80e0a14 <flash_erase+0x6c>)
 80e09f2:	f001 fcad 	bl	80e2350 <HAL_FLASHEx_Erase>
 80e09f6:	4603      	mov	r3, r0
 80e09f8:	2b00      	cmp	r3, #0
 80e09fa:	d003      	beq.n	80e0a04 <flash_erase+0x5c>
	{
		HAL_FLASH_Lock();
 80e09fc:	f001 fc3a 	bl	80e2274 <HAL_FLASH_Lock>
		return FLASH_ERROR;
 80e0a00:	23ff      	movs	r3, #255	; 0xff
 80e0a02:	e002      	b.n	80e0a0a <flash_erase+0x62>
	}

	HAL_FLASH_Lock();
 80e0a04:	f001 fc36 	bl	80e2274 <HAL_FLASH_Lock>

	return FLASH_OK;
 80e0a08:	2300      	movs	r3, #0
}
 80e0a0a:	4618      	mov	r0, r3
 80e0a0c:	3710      	adds	r7, #16
 80e0a0e:	46bd      	mov	sp, r7
 80e0a10:	bd80      	pop	{r7, pc}
 80e0a12:	bf00      	nop
 80e0a14:	24000078 	.word	0x24000078

080e0a18 <__flash_get_sector>:


sector_t const __flash_get_sector(const uint32_t address){
 80e0a18:	b480      	push	{r7}
 80e0a1a:	b085      	sub	sp, #20
 80e0a1c:	af00      	add	r7, sp, #0
 80e0a1e:	6078      	str	r0, [r7, #4]
	sector_t sector = (sector_t)FLASH_SECTOR_0;
 80e0a20:	2300      	movs	r3, #0
 80e0a22:	60fb      	str	r3, [r7, #12]

	/* BANK 1 */
	if((address >= 0x08000000) && (address < 0x08020000))
 80e0a24:	687b      	ldr	r3, [r7, #4]
 80e0a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80e0a2a:	d306      	bcc.n	80e0a3a <__flash_get_sector+0x22>
 80e0a2c:	687b      	ldr	r3, [r7, #4]
 80e0a2e:	4a2c      	ldr	r2, [pc, #176]	; (80e0ae0 <__flash_get_sector+0xc8>)
 80e0a30:	4293      	cmp	r3, r2
 80e0a32:	d802      	bhi.n	80e0a3a <__flash_get_sector+0x22>
	{
		sector = FLASH_SECTOR_0;
 80e0a34:	2300      	movs	r3, #0
 80e0a36:	60fb      	str	r3, [r7, #12]
 80e0a38:	e04b      	b.n	80e0ad2 <__flash_get_sector+0xba>
	}
	else if((address >= 0x08020000) && (address < 0x08040000))
 80e0a3a:	687b      	ldr	r3, [r7, #4]
 80e0a3c:	4a28      	ldr	r2, [pc, #160]	; (80e0ae0 <__flash_get_sector+0xc8>)
 80e0a3e:	4293      	cmp	r3, r2
 80e0a40:	d906      	bls.n	80e0a50 <__flash_get_sector+0x38>
 80e0a42:	687b      	ldr	r3, [r7, #4]
 80e0a44:	4a27      	ldr	r2, [pc, #156]	; (80e0ae4 <__flash_get_sector+0xcc>)
 80e0a46:	4293      	cmp	r3, r2
 80e0a48:	d802      	bhi.n	80e0a50 <__flash_get_sector+0x38>
	{
		sector = FLASH_SECTOR_1;
 80e0a4a:	2301      	movs	r3, #1
 80e0a4c:	60fb      	str	r3, [r7, #12]
 80e0a4e:	e040      	b.n	80e0ad2 <__flash_get_sector+0xba>
	}
	else if((address >= 0x08040000) && (address < 0x08060000))
 80e0a50:	687b      	ldr	r3, [r7, #4]
 80e0a52:	4a24      	ldr	r2, [pc, #144]	; (80e0ae4 <__flash_get_sector+0xcc>)
 80e0a54:	4293      	cmp	r3, r2
 80e0a56:	d906      	bls.n	80e0a66 <__flash_get_sector+0x4e>
 80e0a58:	687b      	ldr	r3, [r7, #4]
 80e0a5a:	4a23      	ldr	r2, [pc, #140]	; (80e0ae8 <__flash_get_sector+0xd0>)
 80e0a5c:	4293      	cmp	r3, r2
 80e0a5e:	d802      	bhi.n	80e0a66 <__flash_get_sector+0x4e>
	{
		sector = FLASH_SECTOR_2;
 80e0a60:	2302      	movs	r3, #2
 80e0a62:	60fb      	str	r3, [r7, #12]
 80e0a64:	e035      	b.n	80e0ad2 <__flash_get_sector+0xba>
	}
	else if((address >= 0x08060000) && (address < 0x08080000))
 80e0a66:	687b      	ldr	r3, [r7, #4]
 80e0a68:	4a1f      	ldr	r2, [pc, #124]	; (80e0ae8 <__flash_get_sector+0xd0>)
 80e0a6a:	4293      	cmp	r3, r2
 80e0a6c:	d906      	bls.n	80e0a7c <__flash_get_sector+0x64>
 80e0a6e:	687b      	ldr	r3, [r7, #4]
 80e0a70:	4a1e      	ldr	r2, [pc, #120]	; (80e0aec <__flash_get_sector+0xd4>)
 80e0a72:	4293      	cmp	r3, r2
 80e0a74:	d802      	bhi.n	80e0a7c <__flash_get_sector+0x64>
	{
		sector = FLASH_SECTOR_3;
 80e0a76:	2303      	movs	r3, #3
 80e0a78:	60fb      	str	r3, [r7, #12]
 80e0a7a:	e02a      	b.n	80e0ad2 <__flash_get_sector+0xba>
	}
	else if((address >= 0x08080000) && (address < 0x080A0000))
 80e0a7c:	687b      	ldr	r3, [r7, #4]
 80e0a7e:	4a1b      	ldr	r2, [pc, #108]	; (80e0aec <__flash_get_sector+0xd4>)
 80e0a80:	4293      	cmp	r3, r2
 80e0a82:	d906      	bls.n	80e0a92 <__flash_get_sector+0x7a>
 80e0a84:	687b      	ldr	r3, [r7, #4]
 80e0a86:	4a1a      	ldr	r2, [pc, #104]	; (80e0af0 <__flash_get_sector+0xd8>)
 80e0a88:	4293      	cmp	r3, r2
 80e0a8a:	d802      	bhi.n	80e0a92 <__flash_get_sector+0x7a>
	{
		sector = FLASH_SECTOR_4;
 80e0a8c:	2304      	movs	r3, #4
 80e0a8e:	60fb      	str	r3, [r7, #12]
 80e0a90:	e01f      	b.n	80e0ad2 <__flash_get_sector+0xba>
	}
	else if((address >= 0x080A0000) && (address < 0x080C0000))
 80e0a92:	687b      	ldr	r3, [r7, #4]
 80e0a94:	4a16      	ldr	r2, [pc, #88]	; (80e0af0 <__flash_get_sector+0xd8>)
 80e0a96:	4293      	cmp	r3, r2
 80e0a98:	d906      	bls.n	80e0aa8 <__flash_get_sector+0x90>
 80e0a9a:	687b      	ldr	r3, [r7, #4]
 80e0a9c:	4a15      	ldr	r2, [pc, #84]	; (80e0af4 <__flash_get_sector+0xdc>)
 80e0a9e:	4293      	cmp	r3, r2
 80e0aa0:	d802      	bhi.n	80e0aa8 <__flash_get_sector+0x90>
	{
		sector = FLASH_SECTOR_5;
 80e0aa2:	2305      	movs	r3, #5
 80e0aa4:	60fb      	str	r3, [r7, #12]
 80e0aa6:	e014      	b.n	80e0ad2 <__flash_get_sector+0xba>
	}
	else if((address >= 0x080C0000) && (address < 0x080E0000))
 80e0aa8:	687b      	ldr	r3, [r7, #4]
 80e0aaa:	4a12      	ldr	r2, [pc, #72]	; (80e0af4 <__flash_get_sector+0xdc>)
 80e0aac:	4293      	cmp	r3, r2
 80e0aae:	d906      	bls.n	80e0abe <__flash_get_sector+0xa6>
 80e0ab0:	687b      	ldr	r3, [r7, #4]
 80e0ab2:	4a11      	ldr	r2, [pc, #68]	; (80e0af8 <__flash_get_sector+0xe0>)
 80e0ab4:	4293      	cmp	r3, r2
 80e0ab6:	d802      	bhi.n	80e0abe <__flash_get_sector+0xa6>
	{
		sector = FLASH_SECTOR_6;
 80e0ab8:	2306      	movs	r3, #6
 80e0aba:	60fb      	str	r3, [r7, #12]
 80e0abc:	e009      	b.n	80e0ad2 <__flash_get_sector+0xba>
	}
	else if((address >= 0x080E0000) && (address < 0x08100000))
 80e0abe:	687b      	ldr	r3, [r7, #4]
 80e0ac0:	4a0d      	ldr	r2, [pc, #52]	; (80e0af8 <__flash_get_sector+0xe0>)
 80e0ac2:	4293      	cmp	r3, r2
 80e0ac4:	d905      	bls.n	80e0ad2 <__flash_get_sector+0xba>
 80e0ac6:	687b      	ldr	r3, [r7, #4]
 80e0ac8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80e0acc:	d201      	bcs.n	80e0ad2 <__flash_get_sector+0xba>
	{
		sector = FLASH_SECTOR_7;
 80e0ace:	2307      	movs	r3, #7
 80e0ad0:	60fb      	str	r3, [r7, #12]
	}

	return sector;
 80e0ad2:	68fb      	ldr	r3, [r7, #12]
}
 80e0ad4:	4618      	mov	r0, r3
 80e0ad6:	3714      	adds	r7, #20
 80e0ad8:	46bd      	mov	sp, r7
 80e0ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0ade:	4770      	bx	lr
 80e0ae0:	0801ffff 	.word	0x0801ffff
 80e0ae4:	0803ffff 	.word	0x0803ffff
 80e0ae8:	0805ffff 	.word	0x0805ffff
 80e0aec:	0807ffff 	.word	0x0807ffff
 80e0af0:	0809ffff 	.word	0x0809ffff
 80e0af4:	080bffff 	.word	0x080bffff
 80e0af8:	080dffff 	.word	0x080dffff

080e0afc <flash_get_sector_starting_address>:

uint32_t const flash_get_sector_starting_address(const sector_t sector){
 80e0afc:	b480      	push	{r7}
 80e0afe:	b085      	sub	sp, #20
 80e0b00:	af00      	add	r7, sp, #0
 80e0b02:	6078      	str	r0, [r7, #4]
	uint32_t address;
	switch ((uint32_t)sector) {
 80e0b04:	687b      	ldr	r3, [r7, #4]
 80e0b06:	2b07      	cmp	r3, #7
 80e0b08:	d82b      	bhi.n	80e0b62 <flash_get_sector_starting_address+0x66>
 80e0b0a:	a201      	add	r2, pc, #4	; (adr r2, 80e0b10 <flash_get_sector_starting_address+0x14>)
 80e0b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e0b10:	080e0b31 	.word	0x080e0b31
 80e0b14:	080e0b39 	.word	0x080e0b39
 80e0b18:	080e0b3f 	.word	0x080e0b3f
 80e0b1c:	080e0b45 	.word	0x080e0b45
 80e0b20:	080e0b4b 	.word	0x080e0b4b
 80e0b24:	080e0b51 	.word	0x080e0b51
 80e0b28:	080e0b57 	.word	0x080e0b57
 80e0b2c:	080e0b5d 	.word	0x080e0b5d
		case FLASH_SECTOR_0:
			address = FLASH_SECTOR0_START_ADDRESS;
 80e0b30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80e0b34:	60fb      	str	r3, [r7, #12]
			break;
 80e0b36:	e018      	b.n	80e0b6a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_1:
			address = FLASH_SECTOR1_START_ADDRESS;
 80e0b38:	4b0f      	ldr	r3, [pc, #60]	; (80e0b78 <flash_get_sector_starting_address+0x7c>)
 80e0b3a:	60fb      	str	r3, [r7, #12]
			break;
 80e0b3c:	e015      	b.n	80e0b6a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_2:
			address = FLASH_SECTOR2_START_ADDRESS;
 80e0b3e:	4b0f      	ldr	r3, [pc, #60]	; (80e0b7c <flash_get_sector_starting_address+0x80>)
 80e0b40:	60fb      	str	r3, [r7, #12]
			break;
 80e0b42:	e012      	b.n	80e0b6a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_3:
			address = FLASH_SECTOR3_START_ADDRESS;
 80e0b44:	4b0e      	ldr	r3, [pc, #56]	; (80e0b80 <flash_get_sector_starting_address+0x84>)
 80e0b46:	60fb      	str	r3, [r7, #12]
			break;
 80e0b48:	e00f      	b.n	80e0b6a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_4:
			address = FLASH_SECTOR4_START_ADDRESS;
 80e0b4a:	4b0e      	ldr	r3, [pc, #56]	; (80e0b84 <flash_get_sector_starting_address+0x88>)
 80e0b4c:	60fb      	str	r3, [r7, #12]
			break;
 80e0b4e:	e00c      	b.n	80e0b6a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_5:
			address = FLASH_SECTOR5_START_ADDRESS;
 80e0b50:	4b0d      	ldr	r3, [pc, #52]	; (80e0b88 <flash_get_sector_starting_address+0x8c>)
 80e0b52:	60fb      	str	r3, [r7, #12]
			break;
 80e0b54:	e009      	b.n	80e0b6a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_6:
			address = FLASH_SECTOR6_START_ADDRESS;
 80e0b56:	4b0d      	ldr	r3, [pc, #52]	; (80e0b8c <flash_get_sector_starting_address+0x90>)
 80e0b58:	60fb      	str	r3, [r7, #12]
			break;
 80e0b5a:	e006      	b.n	80e0b6a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_7:
			address = FLASH_SECTOR7_START_ADDRESS;
 80e0b5c:	4b0c      	ldr	r3, [pc, #48]	; (80e0b90 <flash_get_sector_starting_address+0x94>)
 80e0b5e:	60fb      	str	r3, [r7, #12]
			break;
 80e0b60:	e003      	b.n	80e0b6a <flash_get_sector_starting_address+0x6e>
		default:
			address = FLASH_SECTOR_ERROR;
 80e0b62:	f04f 33ff 	mov.w	r3, #4294967295
 80e0b66:	60fb      	str	r3, [r7, #12]
			break;
 80e0b68:	bf00      	nop
	}

	return address;
 80e0b6a:	68fb      	ldr	r3, [r7, #12]
}
 80e0b6c:	4618      	mov	r0, r3
 80e0b6e:	3714      	adds	r7, #20
 80e0b70:	46bd      	mov	sp, r7
 80e0b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0b76:	4770      	bx	lr
 80e0b78:	08020000 	.word	0x08020000
 80e0b7c:	08040000 	.word	0x08040000
 80e0b80:	08060000 	.word	0x08060000
 80e0b84:	08080000 	.word	0x08080000
 80e0b88:	080a0000 	.word	0x080a0000
 80e0b8c:	080c0000 	.word	0x080c0000
 80e0b90:	080e0000 	.word	0x080e0000

080e0b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80e0b94:	b580      	push	{r7, lr}
 80e0b96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80e0b98:	f000 faf2 	bl	80e1180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80e0b9c:	f000 f812 	bl	80e0bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80e0ba0:	f000 f8ee 	bl	80e0d80 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80e0ba4:	f000 f886 	bl	80e0cb4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_FDCAN_Start(&hfdcan1);
 80e0ba8:	4805      	ldr	r0, [pc, #20]	; (80e0bc0 <main+0x2c>)
 80e0baa:	f000 fe61 	bl	80e1870 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80e0bae:	2200      	movs	r2, #0
 80e0bb0:	2101      	movs	r1, #1
 80e0bb2:	4803      	ldr	r0, [pc, #12]	; (80e0bc0 <main+0x2c>)
 80e0bb4:	f001 f850 	bl	80e1c58 <HAL_FDCAN_ActivateNotification>

  bootloader_start();
 80e0bb8:	f7ff fba8 	bl	80e030c <bootloader_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80e0bbc:	e7fe      	b.n	80e0bbc <main+0x28>
 80e0bbe:	bf00      	nop
 80e0bc0:	2400008c 	.word	0x2400008c

080e0bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80e0bc4:	b580      	push	{r7, lr}
 80e0bc6:	b09c      	sub	sp, #112	; 0x70
 80e0bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80e0bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80e0bce:	224c      	movs	r2, #76	; 0x4c
 80e0bd0:	2100      	movs	r1, #0
 80e0bd2:	4618      	mov	r0, r3
 80e0bd4:	f003 fe14 	bl	80e4800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80e0bd8:	1d3b      	adds	r3, r7, #4
 80e0bda:	2220      	movs	r2, #32
 80e0bdc:	2100      	movs	r1, #0
 80e0bde:	4618      	mov	r0, r3
 80e0be0:	f003 fe0e 	bl	80e4800 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80e0be4:	2002      	movs	r0, #2
 80e0be6:	f001 fe63 	bl	80e28b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80e0bea:	2300      	movs	r3, #0
 80e0bec:	603b      	str	r3, [r7, #0]
 80e0bee:	4b2f      	ldr	r3, [pc, #188]	; (80e0cac <SystemClock_Config+0xe8>)
 80e0bf0:	699b      	ldr	r3, [r3, #24]
 80e0bf2:	4a2e      	ldr	r2, [pc, #184]	; (80e0cac <SystemClock_Config+0xe8>)
 80e0bf4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80e0bf8:	6193      	str	r3, [r2, #24]
 80e0bfa:	4b2c      	ldr	r3, [pc, #176]	; (80e0cac <SystemClock_Config+0xe8>)
 80e0bfc:	699b      	ldr	r3, [r3, #24]
 80e0bfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80e0c02:	603b      	str	r3, [r7, #0]
 80e0c04:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80e0c06:	bf00      	nop
 80e0c08:	4b28      	ldr	r3, [pc, #160]	; (80e0cac <SystemClock_Config+0xe8>)
 80e0c0a:	699b      	ldr	r3, [r3, #24]
 80e0c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e0c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e0c14:	d1f8      	bne.n	80e0c08 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80e0c16:	4b26      	ldr	r3, [pc, #152]	; (80e0cb0 <SystemClock_Config+0xec>)
 80e0c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e0c1a:	f023 0303 	bic.w	r3, r3, #3
 80e0c1e:	4a24      	ldr	r2, [pc, #144]	; (80e0cb0 <SystemClock_Config+0xec>)
 80e0c20:	f043 0302 	orr.w	r3, r3, #2
 80e0c24:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80e0c26:	2301      	movs	r3, #1
 80e0c28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80e0c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80e0c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80e0c30:	2302      	movs	r3, #2
 80e0c32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80e0c34:	2302      	movs	r3, #2
 80e0c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80e0c38:	2302      	movs	r3, #2
 80e0c3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80e0c3c:	232c      	movs	r3, #44	; 0x2c
 80e0c3e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80e0c40:	2301      	movs	r3, #1
 80e0c42:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80e0c44:	2304      	movs	r3, #4
 80e0c46:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80e0c48:	2302      	movs	r3, #2
 80e0c4a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80e0c4c:	230c      	movs	r3, #12
 80e0c4e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80e0c50:	2300      	movs	r3, #0
 80e0c52:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80e0c54:	2300      	movs	r3, #0
 80e0c56:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80e0c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80e0c5c:	4618      	mov	r0, r3
 80e0c5e:	f001 fe61 	bl	80e2924 <HAL_RCC_OscConfig>
 80e0c62:	4603      	mov	r3, r0
 80e0c64:	2b00      	cmp	r3, #0
 80e0c66:	d001      	beq.n	80e0c6c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80e0c68:	f000 f90c 	bl	80e0e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80e0c6c:	233f      	movs	r3, #63	; 0x3f
 80e0c6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80e0c70:	2303      	movs	r3, #3
 80e0c72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80e0c74:	2300      	movs	r3, #0
 80e0c76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80e0c78:	2308      	movs	r3, #8
 80e0c7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80e0c7c:	2340      	movs	r3, #64	; 0x40
 80e0c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80e0c80:	2340      	movs	r3, #64	; 0x40
 80e0c82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80e0c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80e0c88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80e0c8a:	2340      	movs	r3, #64	; 0x40
 80e0c8c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80e0c8e:	1d3b      	adds	r3, r7, #4
 80e0c90:	2103      	movs	r1, #3
 80e0c92:	4618      	mov	r0, r3
 80e0c94:	f002 f9f4 	bl	80e3080 <HAL_RCC_ClockConfig>
 80e0c98:	4603      	mov	r3, r0
 80e0c9a:	2b00      	cmp	r3, #0
 80e0c9c:	d001      	beq.n	80e0ca2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80e0c9e:	f000 f8f1 	bl	80e0e84 <Error_Handler>
  }
}
 80e0ca2:	bf00      	nop
 80e0ca4:	3770      	adds	r7, #112	; 0x70
 80e0ca6:	46bd      	mov	sp, r7
 80e0ca8:	bd80      	pop	{r7, pc}
 80e0caa:	bf00      	nop
 80e0cac:	58024800 	.word	0x58024800
 80e0cb0:	58024400 	.word	0x58024400

080e0cb4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80e0cb4:	b580      	push	{r7, lr}
 80e0cb6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80e0cb8:	4b2f      	ldr	r3, [pc, #188]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0cba:	4a30      	ldr	r2, [pc, #192]	; (80e0d7c <MX_FDCAN1_Init+0xc8>)
 80e0cbc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80e0cbe:	4b2e      	ldr	r3, [pc, #184]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0cc0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80e0cc4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80e0cc6:	4b2c      	ldr	r3, [pc, #176]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0cc8:	2200      	movs	r2, #0
 80e0cca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80e0ccc:	4b2a      	ldr	r3, [pc, #168]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0cce:	2201      	movs	r2, #1
 80e0cd0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80e0cd2:	4b29      	ldr	r3, [pc, #164]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0cd4:	2200      	movs	r2, #0
 80e0cd6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80e0cd8:	4b27      	ldr	r3, [pc, #156]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0cda:	2200      	movs	r2, #0
 80e0cdc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80e0cde:	4b26      	ldr	r3, [pc, #152]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0ce0:	2201      	movs	r2, #1
 80e0ce2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80e0ce4:	4b24      	ldr	r3, [pc, #144]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0ce6:	2210      	movs	r2, #16
 80e0ce8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 59;
 80e0cea:	4b23      	ldr	r3, [pc, #140]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0cec:	223b      	movs	r2, #59	; 0x3b
 80e0cee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 80e0cf0:	4b21      	ldr	r3, [pc, #132]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0cf2:	2214      	movs	r2, #20
 80e0cf4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80e0cf6:	4b20      	ldr	r3, [pc, #128]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0cf8:	2201      	movs	r2, #1
 80e0cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80e0cfc:	4b1e      	ldr	r3, [pc, #120]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0cfe:	2204      	movs	r2, #4
 80e0d00:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80e0d02:	4b1d      	ldr	r3, [pc, #116]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d04:	220e      	movs	r2, #14
 80e0d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80e0d08:	4b1b      	ldr	r3, [pc, #108]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d0a:	2205      	movs	r2, #5
 80e0d0c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80e0d0e:	4b1a      	ldr	r3, [pc, #104]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d10:	2200      	movs	r2, #0
 80e0d12:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80e0d14:	4b18      	ldr	r3, [pc, #96]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d16:	2201      	movs	r2, #1
 80e0d18:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80e0d1a:	4b17      	ldr	r3, [pc, #92]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d1c:	2200      	movs	r2, #0
 80e0d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 16;
 80e0d20:	4b15      	ldr	r3, [pc, #84]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d22:	2210      	movs	r2, #16
 80e0d24:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80e0d26:	4b14      	ldr	r3, [pc, #80]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d28:	2212      	movs	r2, #18
 80e0d2a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80e0d2c:	4b12      	ldr	r3, [pc, #72]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d2e:	2200      	movs	r2, #0
 80e0d30:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 80e0d32:	4b11      	ldr	r3, [pc, #68]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d34:	2212      	movs	r2, #18
 80e0d36:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80e0d38:	4b0f      	ldr	r3, [pc, #60]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d3a:	2200      	movs	r2, #0
 80e0d3c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 80e0d3e:	4b0e      	ldr	r3, [pc, #56]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d40:	2212      	movs	r2, #18
 80e0d42:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80e0d44:	4b0c      	ldr	r3, [pc, #48]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d46:	2200      	movs	r2, #0
 80e0d48:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80e0d4a:	4b0b      	ldr	r3, [pc, #44]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d4c:	2200      	movs	r2, #0
 80e0d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 80e0d50:	4b09      	ldr	r3, [pc, #36]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d52:	2210      	movs	r2, #16
 80e0d54:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80e0d56:	4b08      	ldr	r3, [pc, #32]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d58:	2200      	movs	r2, #0
 80e0d5a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80e0d5c:	4b06      	ldr	r3, [pc, #24]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d5e:	2212      	movs	r2, #18
 80e0d60:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80e0d62:	4805      	ldr	r0, [pc, #20]	; (80e0d78 <MX_FDCAN1_Init+0xc4>)
 80e0d64:	f000 fba6 	bl	80e14b4 <HAL_FDCAN_Init>
 80e0d68:	4603      	mov	r3, r0
 80e0d6a:	2b00      	cmp	r3, #0
 80e0d6c:	d001      	beq.n	80e0d72 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80e0d6e:	f000 f889 	bl	80e0e84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80e0d72:	bf00      	nop
 80e0d74:	bd80      	pop	{r7, pc}
 80e0d76:	bf00      	nop
 80e0d78:	2400008c 	.word	0x2400008c
 80e0d7c:	4000a000 	.word	0x4000a000

080e0d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80e0d80:	b580      	push	{r7, lr}
 80e0d82:	b08c      	sub	sp, #48	; 0x30
 80e0d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e0d86:	f107 031c 	add.w	r3, r7, #28
 80e0d8a:	2200      	movs	r2, #0
 80e0d8c:	601a      	str	r2, [r3, #0]
 80e0d8e:	605a      	str	r2, [r3, #4]
 80e0d90:	609a      	str	r2, [r3, #8]
 80e0d92:	60da      	str	r2, [r3, #12]
 80e0d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80e0d96:	4b39      	ldr	r3, [pc, #228]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0d9c:	4a37      	ldr	r2, [pc, #220]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0d9e:	f043 0304 	orr.w	r3, r3, #4
 80e0da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0da6:	4b35      	ldr	r3, [pc, #212]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0dac:	f003 0304 	and.w	r3, r3, #4
 80e0db0:	61bb      	str	r3, [r7, #24]
 80e0db2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80e0db4:	4b31      	ldr	r3, [pc, #196]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0dba:	4a30      	ldr	r2, [pc, #192]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80e0dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0dc4:	4b2d      	ldr	r3, [pc, #180]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80e0dce:	617b      	str	r3, [r7, #20]
 80e0dd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80e0dd2:	4b2a      	ldr	r3, [pc, #168]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0dd8:	4a28      	ldr	r2, [pc, #160]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80e0dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0de2:	4b26      	ldr	r3, [pc, #152]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80e0dec:	613b      	str	r3, [r7, #16]
 80e0dee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80e0df0:	4b22      	ldr	r3, [pc, #136]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0df6:	4a21      	ldr	r2, [pc, #132]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0df8:	f043 0301 	orr.w	r3, r3, #1
 80e0dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0e00:	4b1e      	ldr	r3, [pc, #120]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0e06:	f003 0301 	and.w	r3, r3, #1
 80e0e0a:	60fb      	str	r3, [r7, #12]
 80e0e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80e0e0e:	4b1b      	ldr	r3, [pc, #108]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0e14:	4a19      	ldr	r2, [pc, #100]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0e16:	f043 0308 	orr.w	r3, r3, #8
 80e0e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0e1e:	4b17      	ldr	r3, [pc, #92]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0e24:	f003 0308 	and.w	r3, r3, #8
 80e0e28:	60bb      	str	r3, [r7, #8]
 80e0e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80e0e2c:	4b13      	ldr	r3, [pc, #76]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0e32:	4a12      	ldr	r2, [pc, #72]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0e34:	f043 0302 	orr.w	r3, r3, #2
 80e0e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0e3c:	4b0f      	ldr	r3, [pc, #60]	; (80e0e7c <MX_GPIO_Init+0xfc>)
 80e0e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0e42:	f003 0302 	and.w	r3, r3, #2
 80e0e46:	607b      	str	r3, [r7, #4]
 80e0e48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_SLEEP_Pin|LED_FLASH_Pin|LED_CAN_Pin|LED_FAULT_Pin
 80e0e4a:	2200      	movs	r2, #0
 80e0e4c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80e0e50:	480b      	ldr	r0, [pc, #44]	; (80e0e80 <MX_GPIO_Init+0x100>)
 80e0e52:	f001 fcf9 	bl	80e2848 <HAL_GPIO_WritePin>
                          |LED_OPERATIONAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_SLEEP_Pin LED_FLASH_Pin LED_CAN_Pin LED_FAULT_Pin
                           LED_OPERATIONAL_Pin */
  GPIO_InitStruct.Pin = LED_SLEEP_Pin|LED_FLASH_Pin|LED_CAN_Pin|LED_FAULT_Pin
 80e0e56:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80e0e5a:	61fb      	str	r3, [r7, #28]
                          |LED_OPERATIONAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80e0e5c:	2301      	movs	r3, #1
 80e0e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e0e60:	2300      	movs	r3, #0
 80e0e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e0e64:	2300      	movs	r3, #0
 80e0e66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80e0e68:	f107 031c 	add.w	r3, r7, #28
 80e0e6c:	4619      	mov	r1, r3
 80e0e6e:	4804      	ldr	r0, [pc, #16]	; (80e0e80 <MX_GPIO_Init+0x100>)
 80e0e70:	f001 fb42 	bl	80e24f8 <HAL_GPIO_Init>

}
 80e0e74:	bf00      	nop
 80e0e76:	3730      	adds	r7, #48	; 0x30
 80e0e78:	46bd      	mov	sp, r7
 80e0e7a:	bd80      	pop	{r7, pc}
 80e0e7c:	58024400 	.word	0x58024400
 80e0e80:	58021800 	.word	0x58021800

080e0e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80e0e84:	b580      	push	{r7, lr}
 80e0e86:	b082      	sub	sp, #8
 80e0e88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80e0e8a:	b672      	cpsid	i
}
 80e0e8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin);
 80e0e8e:	2180      	movs	r1, #128	; 0x80
 80e0e90:	4807      	ldr	r0, [pc, #28]	; (80e0eb0 <Error_Handler+0x2c>)
 80e0e92:	f001 fcf2 	bl	80e287a <HAL_GPIO_TogglePin>
	  uint32_t i;
	  for (i = 0; i < 10000000; ++i) {
 80e0e96:	2300      	movs	r3, #0
 80e0e98:	607b      	str	r3, [r7, #4]
 80e0e9a:	e003      	b.n	80e0ea4 <Error_Handler+0x20>
		  __NOP();
 80e0e9c:	bf00      	nop
	  for (i = 0; i < 10000000; ++i) {
 80e0e9e:	687b      	ldr	r3, [r7, #4]
 80e0ea0:	3301      	adds	r3, #1
 80e0ea2:	607b      	str	r3, [r7, #4]
 80e0ea4:	687b      	ldr	r3, [r7, #4]
 80e0ea6:	4a03      	ldr	r2, [pc, #12]	; (80e0eb4 <Error_Handler+0x30>)
 80e0ea8:	4293      	cmp	r3, r2
 80e0eaa:	d3f7      	bcc.n	80e0e9c <Error_Handler+0x18>
  {
 80e0eac:	e7ef      	b.n	80e0e8e <Error_Handler+0xa>
 80e0eae:	bf00      	nop
 80e0eb0:	58021800 	.word	0x58021800
 80e0eb4:	00989680 	.word	0x00989680

080e0eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80e0eb8:	b480      	push	{r7}
 80e0eba:	b083      	sub	sp, #12
 80e0ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80e0ebe:	4b0a      	ldr	r3, [pc, #40]	; (80e0ee8 <HAL_MspInit+0x30>)
 80e0ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e0ec4:	4a08      	ldr	r2, [pc, #32]	; (80e0ee8 <HAL_MspInit+0x30>)
 80e0ec6:	f043 0302 	orr.w	r3, r3, #2
 80e0eca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80e0ece:	4b06      	ldr	r3, [pc, #24]	; (80e0ee8 <HAL_MspInit+0x30>)
 80e0ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e0ed4:	f003 0302 	and.w	r3, r3, #2
 80e0ed8:	607b      	str	r3, [r7, #4]
 80e0eda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80e0edc:	bf00      	nop
 80e0ede:	370c      	adds	r7, #12
 80e0ee0:	46bd      	mov	sp, r7
 80e0ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0ee6:	4770      	bx	lr
 80e0ee8:	58024400 	.word	0x58024400

080e0eec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80e0eec:	b580      	push	{r7, lr}
 80e0eee:	b0b6      	sub	sp, #216	; 0xd8
 80e0ef0:	af00      	add	r7, sp, #0
 80e0ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e0ef4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80e0ef8:	2200      	movs	r2, #0
 80e0efa:	601a      	str	r2, [r3, #0]
 80e0efc:	605a      	str	r2, [r3, #4]
 80e0efe:	609a      	str	r2, [r3, #8]
 80e0f00:	60da      	str	r2, [r3, #12]
 80e0f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80e0f04:	f107 0310 	add.w	r3, r7, #16
 80e0f08:	22b4      	movs	r2, #180	; 0xb4
 80e0f0a:	2100      	movs	r1, #0
 80e0f0c:	4618      	mov	r0, r3
 80e0f0e:	f003 fc77 	bl	80e4800 <memset>
  if(hfdcan->Instance==FDCAN1)
 80e0f12:	687b      	ldr	r3, [r7, #4]
 80e0f14:	681b      	ldr	r3, [r3, #0]
 80e0f16:	4a2d      	ldr	r2, [pc, #180]	; (80e0fcc <HAL_FDCAN_MspInit+0xe0>)
 80e0f18:	4293      	cmp	r3, r2
 80e0f1a:	d152      	bne.n	80e0fc2 <HAL_FDCAN_MspInit+0xd6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80e0f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80e0f20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80e0f22:	2319      	movs	r3, #25
 80e0f24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 80e0f26:	23c8      	movs	r3, #200	; 0xc8
 80e0f28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80e0f2a:	2302      	movs	r3, #2
 80e0f2c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80e0f2e:	230a      	movs	r3, #10
 80e0f30:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80e0f32:	2302      	movs	r3, #2
 80e0f34:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80e0f36:	2300      	movs	r3, #0
 80e0f38:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80e0f3a:	2320      	movs	r3, #32
 80e0f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80e0f3e:	2300      	movs	r3, #0
 80e0f40:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80e0f42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80e0f46:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80e0f48:	f107 0310 	add.w	r3, r7, #16
 80e0f4c:	4618      	mov	r0, r3
 80e0f4e:	f002 fbc7 	bl	80e36e0 <HAL_RCCEx_PeriphCLKConfig>
 80e0f52:	4603      	mov	r3, r0
 80e0f54:	2b00      	cmp	r3, #0
 80e0f56:	d001      	beq.n	80e0f5c <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 80e0f58:	f7ff ff94 	bl	80e0e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80e0f5c:	4b1c      	ldr	r3, [pc, #112]	; (80e0fd0 <HAL_FDCAN_MspInit+0xe4>)
 80e0f5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80e0f62:	4a1b      	ldr	r2, [pc, #108]	; (80e0fd0 <HAL_FDCAN_MspInit+0xe4>)
 80e0f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e0f68:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80e0f6c:	4b18      	ldr	r3, [pc, #96]	; (80e0fd0 <HAL_FDCAN_MspInit+0xe4>)
 80e0f6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80e0f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e0f76:	60fb      	str	r3, [r7, #12]
 80e0f78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80e0f7a:	4b15      	ldr	r3, [pc, #84]	; (80e0fd0 <HAL_FDCAN_MspInit+0xe4>)
 80e0f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0f80:	4a13      	ldr	r2, [pc, #76]	; (80e0fd0 <HAL_FDCAN_MspInit+0xe4>)
 80e0f82:	f043 0308 	orr.w	r3, r3, #8
 80e0f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0f8a:	4b11      	ldr	r3, [pc, #68]	; (80e0fd0 <HAL_FDCAN_MspInit+0xe4>)
 80e0f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0f90:	f003 0308 	and.w	r3, r3, #8
 80e0f94:	60bb      	str	r3, [r7, #8]
 80e0f96:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80e0f98:	2303      	movs	r3, #3
 80e0f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80e0f9e:	2302      	movs	r3, #2
 80e0fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e0fa4:	2300      	movs	r3, #0
 80e0fa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e0faa:	2300      	movs	r3, #0
 80e0fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80e0fb0:	2309      	movs	r3, #9
 80e0fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80e0fb6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80e0fba:	4619      	mov	r1, r3
 80e0fbc:	4805      	ldr	r0, [pc, #20]	; (80e0fd4 <HAL_FDCAN_MspInit+0xe8>)
 80e0fbe:	f001 fa9b 	bl	80e24f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80e0fc2:	bf00      	nop
 80e0fc4:	37d8      	adds	r7, #216	; 0xd8
 80e0fc6:	46bd      	mov	sp, r7
 80e0fc8:	bd80      	pop	{r7, pc}
 80e0fca:	bf00      	nop
 80e0fcc:	4000a000 	.word	0x4000a000
 80e0fd0:	58024400 	.word	0x58024400
 80e0fd4:	58020c00 	.word	0x58020c00

080e0fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80e0fd8:	b480      	push	{r7}
 80e0fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80e0fdc:	e7fe      	b.n	80e0fdc <NMI_Handler+0x4>
	...

080e0fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80e0fe0:	b580      	push	{r7, lr}
 80e0fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin, GPIO_PIN_SET);
 80e0fe4:	2201      	movs	r2, #1
 80e0fe6:	2180      	movs	r1, #128	; 0x80
 80e0fe8:	4801      	ldr	r0, [pc, #4]	; (80e0ff0 <HardFault_Handler+0x10>)
 80e0fea:	f001 fc2d 	bl	80e2848 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80e0fee:	e7fe      	b.n	80e0fee <HardFault_Handler+0xe>
 80e0ff0:	58021800 	.word	0x58021800

080e0ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80e0ff4:	b480      	push	{r7}
 80e0ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80e0ff8:	e7fe      	b.n	80e0ff8 <MemManage_Handler+0x4>

080e0ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80e0ffa:	b480      	push	{r7}
 80e0ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80e0ffe:	e7fe      	b.n	80e0ffe <BusFault_Handler+0x4>

080e1000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80e1000:	b480      	push	{r7}
 80e1002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80e1004:	e7fe      	b.n	80e1004 <UsageFault_Handler+0x4>

080e1006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80e1006:	b480      	push	{r7}
 80e1008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80e100a:	bf00      	nop
 80e100c:	46bd      	mov	sp, r7
 80e100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1012:	4770      	bx	lr

080e1014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80e1014:	b480      	push	{r7}
 80e1016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80e1018:	bf00      	nop
 80e101a:	46bd      	mov	sp, r7
 80e101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1020:	4770      	bx	lr

080e1022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80e1022:	b480      	push	{r7}
 80e1024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80e1026:	bf00      	nop
 80e1028:	46bd      	mov	sp, r7
 80e102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e102e:	4770      	bx	lr

080e1030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80e1030:	b580      	push	{r7, lr}
 80e1032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80e1034:	f000 f916 	bl	80e1264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80e1038:	bf00      	nop
 80e103a:	bd80      	pop	{r7, pc}

080e103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80e103c:	b480      	push	{r7}
 80e103e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80e1040:	4b32      	ldr	r3, [pc, #200]	; (80e110c <SystemInit+0xd0>)
 80e1042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e1046:	4a31      	ldr	r2, [pc, #196]	; (80e110c <SystemInit+0xd0>)
 80e1048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80e104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80e1050:	4b2f      	ldr	r3, [pc, #188]	; (80e1110 <SystemInit+0xd4>)
 80e1052:	681b      	ldr	r3, [r3, #0]
 80e1054:	f003 030f 	and.w	r3, r3, #15
 80e1058:	2b06      	cmp	r3, #6
 80e105a:	d807      	bhi.n	80e106c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80e105c:	4b2c      	ldr	r3, [pc, #176]	; (80e1110 <SystemInit+0xd4>)
 80e105e:	681b      	ldr	r3, [r3, #0]
 80e1060:	f023 030f 	bic.w	r3, r3, #15
 80e1064:	4a2a      	ldr	r2, [pc, #168]	; (80e1110 <SystemInit+0xd4>)
 80e1066:	f043 0307 	orr.w	r3, r3, #7
 80e106a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80e106c:	4b29      	ldr	r3, [pc, #164]	; (80e1114 <SystemInit+0xd8>)
 80e106e:	681b      	ldr	r3, [r3, #0]
 80e1070:	4a28      	ldr	r2, [pc, #160]	; (80e1114 <SystemInit+0xd8>)
 80e1072:	f043 0301 	orr.w	r3, r3, #1
 80e1076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80e1078:	4b26      	ldr	r3, [pc, #152]	; (80e1114 <SystemInit+0xd8>)
 80e107a:	2200      	movs	r2, #0
 80e107c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80e107e:	4b25      	ldr	r3, [pc, #148]	; (80e1114 <SystemInit+0xd8>)
 80e1080:	681a      	ldr	r2, [r3, #0]
 80e1082:	4924      	ldr	r1, [pc, #144]	; (80e1114 <SystemInit+0xd8>)
 80e1084:	4b24      	ldr	r3, [pc, #144]	; (80e1118 <SystemInit+0xdc>)
 80e1086:	4013      	ands	r3, r2
 80e1088:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80e108a:	4b21      	ldr	r3, [pc, #132]	; (80e1110 <SystemInit+0xd4>)
 80e108c:	681b      	ldr	r3, [r3, #0]
 80e108e:	f003 0308 	and.w	r3, r3, #8
 80e1092:	2b00      	cmp	r3, #0
 80e1094:	d007      	beq.n	80e10a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80e1096:	4b1e      	ldr	r3, [pc, #120]	; (80e1110 <SystemInit+0xd4>)
 80e1098:	681b      	ldr	r3, [r3, #0]
 80e109a:	f023 030f 	bic.w	r3, r3, #15
 80e109e:	4a1c      	ldr	r2, [pc, #112]	; (80e1110 <SystemInit+0xd4>)
 80e10a0:	f043 0307 	orr.w	r3, r3, #7
 80e10a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80e10a6:	4b1b      	ldr	r3, [pc, #108]	; (80e1114 <SystemInit+0xd8>)
 80e10a8:	2200      	movs	r2, #0
 80e10aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80e10ac:	4b19      	ldr	r3, [pc, #100]	; (80e1114 <SystemInit+0xd8>)
 80e10ae:	2200      	movs	r2, #0
 80e10b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80e10b2:	4b18      	ldr	r3, [pc, #96]	; (80e1114 <SystemInit+0xd8>)
 80e10b4:	2200      	movs	r2, #0
 80e10b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80e10b8:	4b16      	ldr	r3, [pc, #88]	; (80e1114 <SystemInit+0xd8>)
 80e10ba:	4a18      	ldr	r2, [pc, #96]	; (80e111c <SystemInit+0xe0>)
 80e10bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80e10be:	4b15      	ldr	r3, [pc, #84]	; (80e1114 <SystemInit+0xd8>)
 80e10c0:	4a17      	ldr	r2, [pc, #92]	; (80e1120 <SystemInit+0xe4>)
 80e10c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80e10c4:	4b13      	ldr	r3, [pc, #76]	; (80e1114 <SystemInit+0xd8>)
 80e10c6:	4a17      	ldr	r2, [pc, #92]	; (80e1124 <SystemInit+0xe8>)
 80e10c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80e10ca:	4b12      	ldr	r3, [pc, #72]	; (80e1114 <SystemInit+0xd8>)
 80e10cc:	2200      	movs	r2, #0
 80e10ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80e10d0:	4b10      	ldr	r3, [pc, #64]	; (80e1114 <SystemInit+0xd8>)
 80e10d2:	4a14      	ldr	r2, [pc, #80]	; (80e1124 <SystemInit+0xe8>)
 80e10d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80e10d6:	4b0f      	ldr	r3, [pc, #60]	; (80e1114 <SystemInit+0xd8>)
 80e10d8:	2200      	movs	r2, #0
 80e10da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80e10dc:	4b0d      	ldr	r3, [pc, #52]	; (80e1114 <SystemInit+0xd8>)
 80e10de:	4a11      	ldr	r2, [pc, #68]	; (80e1124 <SystemInit+0xe8>)
 80e10e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80e10e2:	4b0c      	ldr	r3, [pc, #48]	; (80e1114 <SystemInit+0xd8>)
 80e10e4:	2200      	movs	r2, #0
 80e10e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80e10e8:	4b0a      	ldr	r3, [pc, #40]	; (80e1114 <SystemInit+0xd8>)
 80e10ea:	681b      	ldr	r3, [r3, #0]
 80e10ec:	4a09      	ldr	r2, [pc, #36]	; (80e1114 <SystemInit+0xd8>)
 80e10ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e10f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80e10f4:	4b07      	ldr	r3, [pc, #28]	; (80e1114 <SystemInit+0xd8>)
 80e10f6:	2200      	movs	r2, #0
 80e10f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80e10fa:	4b0b      	ldr	r3, [pc, #44]	; (80e1128 <SystemInit+0xec>)
 80e10fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80e1100:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80e1102:	bf00      	nop
 80e1104:	46bd      	mov	sp, r7
 80e1106:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e110a:	4770      	bx	lr
 80e110c:	e000ed00 	.word	0xe000ed00
 80e1110:	52002000 	.word	0x52002000
 80e1114:	58024400 	.word	0x58024400
 80e1118:	eaf6ed7f 	.word	0xeaf6ed7f
 80e111c:	02020200 	.word	0x02020200
 80e1120:	01ff0000 	.word	0x01ff0000
 80e1124:	01010280 	.word	0x01010280
 80e1128:	52004000 	.word	0x52004000

080e112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80e112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80e1164 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80e1130:	f7ff ff84 	bl	80e103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80e1134:	480c      	ldr	r0, [pc, #48]	; (80e1168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80e1136:	490d      	ldr	r1, [pc, #52]	; (80e116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80e1138:	4a0d      	ldr	r2, [pc, #52]	; (80e1170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80e113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80e113c:	e002      	b.n	80e1144 <LoopCopyDataInit>

080e113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80e113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80e1140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80e1142:	3304      	adds	r3, #4

080e1144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80e1144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80e1146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80e1148:	d3f9      	bcc.n	80e113e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80e114a:	4a0a      	ldr	r2, [pc, #40]	; (80e1174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80e114c:	4c0a      	ldr	r4, [pc, #40]	; (80e1178 <LoopFillZerobss+0x22>)
  movs r3, #0
 80e114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80e1150:	e001      	b.n	80e1156 <LoopFillZerobss>

080e1152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80e1152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80e1154:	3204      	adds	r2, #4

080e1156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80e1156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80e1158:	d3fb      	bcc.n	80e1152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80e115a:	f003 fb1f 	bl	80e479c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80e115e:	f7ff fd19 	bl	80e0b94 <main>
  bx  lr
 80e1162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80e1164:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80e1168:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80e116c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80e1170:	080e489c 	.word	0x080e489c
  ldr r2, =_sbss
 80e1174:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80e1178:	2400014c 	.word	0x2400014c

080e117c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80e117c:	e7fe      	b.n	80e117c <ADC3_IRQHandler>
	...

080e1180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80e1180:	b580      	push	{r7, lr}
 80e1182:	b082      	sub	sp, #8
 80e1184:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80e1186:	2003      	movs	r0, #3
 80e1188:	f000 f962 	bl	80e1450 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80e118c:	f002 f92e 	bl	80e33ec <HAL_RCC_GetSysClockFreq>
 80e1190:	4602      	mov	r2, r0
 80e1192:	4b15      	ldr	r3, [pc, #84]	; (80e11e8 <HAL_Init+0x68>)
 80e1194:	699b      	ldr	r3, [r3, #24]
 80e1196:	0a1b      	lsrs	r3, r3, #8
 80e1198:	f003 030f 	and.w	r3, r3, #15
 80e119c:	4913      	ldr	r1, [pc, #76]	; (80e11ec <HAL_Init+0x6c>)
 80e119e:	5ccb      	ldrb	r3, [r1, r3]
 80e11a0:	f003 031f 	and.w	r3, r3, #31
 80e11a4:	fa22 f303 	lsr.w	r3, r2, r3
 80e11a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80e11aa:	4b0f      	ldr	r3, [pc, #60]	; (80e11e8 <HAL_Init+0x68>)
 80e11ac:	699b      	ldr	r3, [r3, #24]
 80e11ae:	f003 030f 	and.w	r3, r3, #15
 80e11b2:	4a0e      	ldr	r2, [pc, #56]	; (80e11ec <HAL_Init+0x6c>)
 80e11b4:	5cd3      	ldrb	r3, [r2, r3]
 80e11b6:	f003 031f 	and.w	r3, r3, #31
 80e11ba:	687a      	ldr	r2, [r7, #4]
 80e11bc:	fa22 f303 	lsr.w	r3, r2, r3
 80e11c0:	4a0b      	ldr	r2, [pc, #44]	; (80e11f0 <HAL_Init+0x70>)
 80e11c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80e11c4:	4a0b      	ldr	r2, [pc, #44]	; (80e11f4 <HAL_Init+0x74>)
 80e11c6:	687b      	ldr	r3, [r7, #4]
 80e11c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80e11ca:	2000      	movs	r0, #0
 80e11cc:	f000 f814 	bl	80e11f8 <HAL_InitTick>
 80e11d0:	4603      	mov	r3, r0
 80e11d2:	2b00      	cmp	r3, #0
 80e11d4:	d001      	beq.n	80e11da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80e11d6:	2301      	movs	r3, #1
 80e11d8:	e002      	b.n	80e11e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80e11da:	f7ff fe6d 	bl	80e0eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80e11de:	2300      	movs	r3, #0
}
 80e11e0:	4618      	mov	r0, r3
 80e11e2:	3708      	adds	r7, #8
 80e11e4:	46bd      	mov	sp, r7
 80e11e6:	bd80      	pop	{r7, pc}
 80e11e8:	58024400 	.word	0x58024400
 80e11ec:	080e4874 	.word	0x080e4874
 80e11f0:	24000004 	.word	0x24000004
 80e11f4:	24000000 	.word	0x24000000

080e11f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80e11f8:	b580      	push	{r7, lr}
 80e11fa:	b082      	sub	sp, #8
 80e11fc:	af00      	add	r7, sp, #0
 80e11fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80e1200:	4b15      	ldr	r3, [pc, #84]	; (80e1258 <HAL_InitTick+0x60>)
 80e1202:	781b      	ldrb	r3, [r3, #0]
 80e1204:	2b00      	cmp	r3, #0
 80e1206:	d101      	bne.n	80e120c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80e1208:	2301      	movs	r3, #1
 80e120a:	e021      	b.n	80e1250 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80e120c:	4b13      	ldr	r3, [pc, #76]	; (80e125c <HAL_InitTick+0x64>)
 80e120e:	681a      	ldr	r2, [r3, #0]
 80e1210:	4b11      	ldr	r3, [pc, #68]	; (80e1258 <HAL_InitTick+0x60>)
 80e1212:	781b      	ldrb	r3, [r3, #0]
 80e1214:	4619      	mov	r1, r3
 80e1216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80e121a:	fbb3 f3f1 	udiv	r3, r3, r1
 80e121e:	fbb2 f3f3 	udiv	r3, r2, r3
 80e1222:	4618      	mov	r0, r3
 80e1224:	f000 f939 	bl	80e149a <HAL_SYSTICK_Config>
 80e1228:	4603      	mov	r3, r0
 80e122a:	2b00      	cmp	r3, #0
 80e122c:	d001      	beq.n	80e1232 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80e122e:	2301      	movs	r3, #1
 80e1230:	e00e      	b.n	80e1250 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80e1232:	687b      	ldr	r3, [r7, #4]
 80e1234:	2b0f      	cmp	r3, #15
 80e1236:	d80a      	bhi.n	80e124e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80e1238:	2200      	movs	r2, #0
 80e123a:	6879      	ldr	r1, [r7, #4]
 80e123c:	f04f 30ff 	mov.w	r0, #4294967295
 80e1240:	f000 f911 	bl	80e1466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80e1244:	4a06      	ldr	r2, [pc, #24]	; (80e1260 <HAL_InitTick+0x68>)
 80e1246:	687b      	ldr	r3, [r7, #4]
 80e1248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80e124a:	2300      	movs	r3, #0
 80e124c:	e000      	b.n	80e1250 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80e124e:	2301      	movs	r3, #1
}
 80e1250:	4618      	mov	r0, r3
 80e1252:	3708      	adds	r7, #8
 80e1254:	46bd      	mov	sp, r7
 80e1256:	bd80      	pop	{r7, pc}
 80e1258:	2400000c 	.word	0x2400000c
 80e125c:	24000000 	.word	0x24000000
 80e1260:	24000008 	.word	0x24000008

080e1264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80e1264:	b480      	push	{r7}
 80e1266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80e1268:	4b06      	ldr	r3, [pc, #24]	; (80e1284 <HAL_IncTick+0x20>)
 80e126a:	781b      	ldrb	r3, [r3, #0]
 80e126c:	461a      	mov	r2, r3
 80e126e:	4b06      	ldr	r3, [pc, #24]	; (80e1288 <HAL_IncTick+0x24>)
 80e1270:	681b      	ldr	r3, [r3, #0]
 80e1272:	4413      	add	r3, r2
 80e1274:	4a04      	ldr	r2, [pc, #16]	; (80e1288 <HAL_IncTick+0x24>)
 80e1276:	6013      	str	r3, [r2, #0]
}
 80e1278:	bf00      	nop
 80e127a:	46bd      	mov	sp, r7
 80e127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1280:	4770      	bx	lr
 80e1282:	bf00      	nop
 80e1284:	2400000c 	.word	0x2400000c
 80e1288:	2400012c 	.word	0x2400012c

080e128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80e128c:	b480      	push	{r7}
 80e128e:	af00      	add	r7, sp, #0
  return uwTick;
 80e1290:	4b03      	ldr	r3, [pc, #12]	; (80e12a0 <HAL_GetTick+0x14>)
 80e1292:	681b      	ldr	r3, [r3, #0]
}
 80e1294:	4618      	mov	r0, r3
 80e1296:	46bd      	mov	sp, r7
 80e1298:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e129c:	4770      	bx	lr
 80e129e:	bf00      	nop
 80e12a0:	2400012c 	.word	0x2400012c

080e12a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80e12a4:	b580      	push	{r7, lr}
 80e12a6:	b084      	sub	sp, #16
 80e12a8:	af00      	add	r7, sp, #0
 80e12aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80e12ac:	f7ff ffee 	bl	80e128c <HAL_GetTick>
 80e12b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80e12b2:	687b      	ldr	r3, [r7, #4]
 80e12b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80e12b6:	68fb      	ldr	r3, [r7, #12]
 80e12b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80e12bc:	d005      	beq.n	80e12ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80e12be:	4b0a      	ldr	r3, [pc, #40]	; (80e12e8 <HAL_Delay+0x44>)
 80e12c0:	781b      	ldrb	r3, [r3, #0]
 80e12c2:	461a      	mov	r2, r3
 80e12c4:	68fb      	ldr	r3, [r7, #12]
 80e12c6:	4413      	add	r3, r2
 80e12c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80e12ca:	bf00      	nop
 80e12cc:	f7ff ffde 	bl	80e128c <HAL_GetTick>
 80e12d0:	4602      	mov	r2, r0
 80e12d2:	68bb      	ldr	r3, [r7, #8]
 80e12d4:	1ad3      	subs	r3, r2, r3
 80e12d6:	68fa      	ldr	r2, [r7, #12]
 80e12d8:	429a      	cmp	r2, r3
 80e12da:	d8f7      	bhi.n	80e12cc <HAL_Delay+0x28>
  {
  }
}
 80e12dc:	bf00      	nop
 80e12de:	bf00      	nop
 80e12e0:	3710      	adds	r7, #16
 80e12e2:	46bd      	mov	sp, r7
 80e12e4:	bd80      	pop	{r7, pc}
 80e12e6:	bf00      	nop
 80e12e8:	2400000c 	.word	0x2400000c

080e12ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80e12ec:	b480      	push	{r7}
 80e12ee:	b085      	sub	sp, #20
 80e12f0:	af00      	add	r7, sp, #0
 80e12f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80e12f4:	687b      	ldr	r3, [r7, #4]
 80e12f6:	f003 0307 	and.w	r3, r3, #7
 80e12fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80e12fc:	4b0b      	ldr	r3, [pc, #44]	; (80e132c <__NVIC_SetPriorityGrouping+0x40>)
 80e12fe:	68db      	ldr	r3, [r3, #12]
 80e1300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80e1302:	68ba      	ldr	r2, [r7, #8]
 80e1304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80e1308:	4013      	ands	r3, r2
 80e130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80e130c:	68fb      	ldr	r3, [r7, #12]
 80e130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80e1310:	68bb      	ldr	r3, [r7, #8]
 80e1312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80e1314:	4b06      	ldr	r3, [pc, #24]	; (80e1330 <__NVIC_SetPriorityGrouping+0x44>)
 80e1316:	4313      	orrs	r3, r2
 80e1318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80e131a:	4a04      	ldr	r2, [pc, #16]	; (80e132c <__NVIC_SetPriorityGrouping+0x40>)
 80e131c:	68bb      	ldr	r3, [r7, #8]
 80e131e:	60d3      	str	r3, [r2, #12]
}
 80e1320:	bf00      	nop
 80e1322:	3714      	adds	r7, #20
 80e1324:	46bd      	mov	sp, r7
 80e1326:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e132a:	4770      	bx	lr
 80e132c:	e000ed00 	.word	0xe000ed00
 80e1330:	05fa0000 	.word	0x05fa0000

080e1334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80e1334:	b480      	push	{r7}
 80e1336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80e1338:	4b04      	ldr	r3, [pc, #16]	; (80e134c <__NVIC_GetPriorityGrouping+0x18>)
 80e133a:	68db      	ldr	r3, [r3, #12]
 80e133c:	0a1b      	lsrs	r3, r3, #8
 80e133e:	f003 0307 	and.w	r3, r3, #7
}
 80e1342:	4618      	mov	r0, r3
 80e1344:	46bd      	mov	sp, r7
 80e1346:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e134a:	4770      	bx	lr
 80e134c:	e000ed00 	.word	0xe000ed00

080e1350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80e1350:	b480      	push	{r7}
 80e1352:	b083      	sub	sp, #12
 80e1354:	af00      	add	r7, sp, #0
 80e1356:	4603      	mov	r3, r0
 80e1358:	6039      	str	r1, [r7, #0]
 80e135a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80e135c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e1360:	2b00      	cmp	r3, #0
 80e1362:	db0a      	blt.n	80e137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80e1364:	683b      	ldr	r3, [r7, #0]
 80e1366:	b2da      	uxtb	r2, r3
 80e1368:	490c      	ldr	r1, [pc, #48]	; (80e139c <__NVIC_SetPriority+0x4c>)
 80e136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e136e:	0112      	lsls	r2, r2, #4
 80e1370:	b2d2      	uxtb	r2, r2
 80e1372:	440b      	add	r3, r1
 80e1374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80e1378:	e00a      	b.n	80e1390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80e137a:	683b      	ldr	r3, [r7, #0]
 80e137c:	b2da      	uxtb	r2, r3
 80e137e:	4908      	ldr	r1, [pc, #32]	; (80e13a0 <__NVIC_SetPriority+0x50>)
 80e1380:	88fb      	ldrh	r3, [r7, #6]
 80e1382:	f003 030f 	and.w	r3, r3, #15
 80e1386:	3b04      	subs	r3, #4
 80e1388:	0112      	lsls	r2, r2, #4
 80e138a:	b2d2      	uxtb	r2, r2
 80e138c:	440b      	add	r3, r1
 80e138e:	761a      	strb	r2, [r3, #24]
}
 80e1390:	bf00      	nop
 80e1392:	370c      	adds	r7, #12
 80e1394:	46bd      	mov	sp, r7
 80e1396:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e139a:	4770      	bx	lr
 80e139c:	e000e100 	.word	0xe000e100
 80e13a0:	e000ed00 	.word	0xe000ed00

080e13a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80e13a4:	b480      	push	{r7}
 80e13a6:	b089      	sub	sp, #36	; 0x24
 80e13a8:	af00      	add	r7, sp, #0
 80e13aa:	60f8      	str	r0, [r7, #12]
 80e13ac:	60b9      	str	r1, [r7, #8]
 80e13ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80e13b0:	68fb      	ldr	r3, [r7, #12]
 80e13b2:	f003 0307 	and.w	r3, r3, #7
 80e13b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80e13b8:	69fb      	ldr	r3, [r7, #28]
 80e13ba:	f1c3 0307 	rsb	r3, r3, #7
 80e13be:	2b04      	cmp	r3, #4
 80e13c0:	bf28      	it	cs
 80e13c2:	2304      	movcs	r3, #4
 80e13c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80e13c6:	69fb      	ldr	r3, [r7, #28]
 80e13c8:	3304      	adds	r3, #4
 80e13ca:	2b06      	cmp	r3, #6
 80e13cc:	d902      	bls.n	80e13d4 <NVIC_EncodePriority+0x30>
 80e13ce:	69fb      	ldr	r3, [r7, #28]
 80e13d0:	3b03      	subs	r3, #3
 80e13d2:	e000      	b.n	80e13d6 <NVIC_EncodePriority+0x32>
 80e13d4:	2300      	movs	r3, #0
 80e13d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80e13d8:	f04f 32ff 	mov.w	r2, #4294967295
 80e13dc:	69bb      	ldr	r3, [r7, #24]
 80e13de:	fa02 f303 	lsl.w	r3, r2, r3
 80e13e2:	43da      	mvns	r2, r3
 80e13e4:	68bb      	ldr	r3, [r7, #8]
 80e13e6:	401a      	ands	r2, r3
 80e13e8:	697b      	ldr	r3, [r7, #20]
 80e13ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80e13ec:	f04f 31ff 	mov.w	r1, #4294967295
 80e13f0:	697b      	ldr	r3, [r7, #20]
 80e13f2:	fa01 f303 	lsl.w	r3, r1, r3
 80e13f6:	43d9      	mvns	r1, r3
 80e13f8:	687b      	ldr	r3, [r7, #4]
 80e13fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80e13fc:	4313      	orrs	r3, r2
         );
}
 80e13fe:	4618      	mov	r0, r3
 80e1400:	3724      	adds	r7, #36	; 0x24
 80e1402:	46bd      	mov	sp, r7
 80e1404:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1408:	4770      	bx	lr
	...

080e140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80e140c:	b580      	push	{r7, lr}
 80e140e:	b082      	sub	sp, #8
 80e1410:	af00      	add	r7, sp, #0
 80e1412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80e1414:	687b      	ldr	r3, [r7, #4]
 80e1416:	3b01      	subs	r3, #1
 80e1418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80e141c:	d301      	bcc.n	80e1422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80e141e:	2301      	movs	r3, #1
 80e1420:	e00f      	b.n	80e1442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80e1422:	4a0a      	ldr	r2, [pc, #40]	; (80e144c <SysTick_Config+0x40>)
 80e1424:	687b      	ldr	r3, [r7, #4]
 80e1426:	3b01      	subs	r3, #1
 80e1428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80e142a:	210f      	movs	r1, #15
 80e142c:	f04f 30ff 	mov.w	r0, #4294967295
 80e1430:	f7ff ff8e 	bl	80e1350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80e1434:	4b05      	ldr	r3, [pc, #20]	; (80e144c <SysTick_Config+0x40>)
 80e1436:	2200      	movs	r2, #0
 80e1438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80e143a:	4b04      	ldr	r3, [pc, #16]	; (80e144c <SysTick_Config+0x40>)
 80e143c:	2207      	movs	r2, #7
 80e143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80e1440:	2300      	movs	r3, #0
}
 80e1442:	4618      	mov	r0, r3
 80e1444:	3708      	adds	r7, #8
 80e1446:	46bd      	mov	sp, r7
 80e1448:	bd80      	pop	{r7, pc}
 80e144a:	bf00      	nop
 80e144c:	e000e010 	.word	0xe000e010

080e1450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80e1450:	b580      	push	{r7, lr}
 80e1452:	b082      	sub	sp, #8
 80e1454:	af00      	add	r7, sp, #0
 80e1456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80e1458:	6878      	ldr	r0, [r7, #4]
 80e145a:	f7ff ff47 	bl	80e12ec <__NVIC_SetPriorityGrouping>
}
 80e145e:	bf00      	nop
 80e1460:	3708      	adds	r7, #8
 80e1462:	46bd      	mov	sp, r7
 80e1464:	bd80      	pop	{r7, pc}

080e1466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80e1466:	b580      	push	{r7, lr}
 80e1468:	b086      	sub	sp, #24
 80e146a:	af00      	add	r7, sp, #0
 80e146c:	4603      	mov	r3, r0
 80e146e:	60b9      	str	r1, [r7, #8]
 80e1470:	607a      	str	r2, [r7, #4]
 80e1472:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80e1474:	f7ff ff5e 	bl	80e1334 <__NVIC_GetPriorityGrouping>
 80e1478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80e147a:	687a      	ldr	r2, [r7, #4]
 80e147c:	68b9      	ldr	r1, [r7, #8]
 80e147e:	6978      	ldr	r0, [r7, #20]
 80e1480:	f7ff ff90 	bl	80e13a4 <NVIC_EncodePriority>
 80e1484:	4602      	mov	r2, r0
 80e1486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80e148a:	4611      	mov	r1, r2
 80e148c:	4618      	mov	r0, r3
 80e148e:	f7ff ff5f 	bl	80e1350 <__NVIC_SetPriority>
}
 80e1492:	bf00      	nop
 80e1494:	3718      	adds	r7, #24
 80e1496:	46bd      	mov	sp, r7
 80e1498:	bd80      	pop	{r7, pc}

080e149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80e149a:	b580      	push	{r7, lr}
 80e149c:	b082      	sub	sp, #8
 80e149e:	af00      	add	r7, sp, #0
 80e14a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80e14a2:	6878      	ldr	r0, [r7, #4]
 80e14a4:	f7ff ffb2 	bl	80e140c <SysTick_Config>
 80e14a8:	4603      	mov	r3, r0
}
 80e14aa:	4618      	mov	r0, r3
 80e14ac:	3708      	adds	r7, #8
 80e14ae:	46bd      	mov	sp, r7
 80e14b0:	bd80      	pop	{r7, pc}
	...

080e14b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80e14b4:	b580      	push	{r7, lr}
 80e14b6:	b098      	sub	sp, #96	; 0x60
 80e14b8:	af00      	add	r7, sp, #0
 80e14ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80e14bc:	4a84      	ldr	r2, [pc, #528]	; (80e16d0 <HAL_FDCAN_Init+0x21c>)
 80e14be:	f107 030c 	add.w	r3, r7, #12
 80e14c2:	4611      	mov	r1, r2
 80e14c4:	224c      	movs	r2, #76	; 0x4c
 80e14c6:	4618      	mov	r0, r3
 80e14c8:	f003 f98c 	bl	80e47e4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80e14cc:	687b      	ldr	r3, [r7, #4]
 80e14ce:	2b00      	cmp	r3, #0
 80e14d0:	d101      	bne.n	80e14d6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80e14d2:	2301      	movs	r3, #1
 80e14d4:	e1c6      	b.n	80e1864 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80e14d6:	687b      	ldr	r3, [r7, #4]
 80e14d8:	681b      	ldr	r3, [r3, #0]
 80e14da:	4a7e      	ldr	r2, [pc, #504]	; (80e16d4 <HAL_FDCAN_Init+0x220>)
 80e14dc:	4293      	cmp	r3, r2
 80e14de:	d106      	bne.n	80e14ee <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80e14e0:	687b      	ldr	r3, [r7, #4]
 80e14e2:	681b      	ldr	r3, [r3, #0]
 80e14e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80e14e8:	461a      	mov	r2, r3
 80e14ea:	687b      	ldr	r3, [r7, #4]
 80e14ec:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80e14ee:	687b      	ldr	r3, [r7, #4]
 80e14f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e14f4:	b2db      	uxtb	r3, r3
 80e14f6:	2b00      	cmp	r3, #0
 80e14f8:	d106      	bne.n	80e1508 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80e14fa:	687b      	ldr	r3, [r7, #4]
 80e14fc:	2200      	movs	r2, #0
 80e14fe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80e1502:	6878      	ldr	r0, [r7, #4]
 80e1504:	f7ff fcf2 	bl	80e0eec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80e1508:	687b      	ldr	r3, [r7, #4]
 80e150a:	681b      	ldr	r3, [r3, #0]
 80e150c:	699a      	ldr	r2, [r3, #24]
 80e150e:	687b      	ldr	r3, [r7, #4]
 80e1510:	681b      	ldr	r3, [r3, #0]
 80e1512:	f022 0210 	bic.w	r2, r2, #16
 80e1516:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80e1518:	f7ff feb8 	bl	80e128c <HAL_GetTick>
 80e151c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80e151e:	e014      	b.n	80e154a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80e1520:	f7ff feb4 	bl	80e128c <HAL_GetTick>
 80e1524:	4602      	mov	r2, r0
 80e1526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80e1528:	1ad3      	subs	r3, r2, r3
 80e152a:	2b0a      	cmp	r3, #10
 80e152c:	d90d      	bls.n	80e154a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80e152e:	687b      	ldr	r3, [r7, #4]
 80e1530:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1534:	f043 0201 	orr.w	r2, r3, #1
 80e1538:	687b      	ldr	r3, [r7, #4]
 80e153a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e153e:	687b      	ldr	r3, [r7, #4]
 80e1540:	2203      	movs	r2, #3
 80e1542:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80e1546:	2301      	movs	r3, #1
 80e1548:	e18c      	b.n	80e1864 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80e154a:	687b      	ldr	r3, [r7, #4]
 80e154c:	681b      	ldr	r3, [r3, #0]
 80e154e:	699b      	ldr	r3, [r3, #24]
 80e1550:	f003 0308 	and.w	r3, r3, #8
 80e1554:	2b08      	cmp	r3, #8
 80e1556:	d0e3      	beq.n	80e1520 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80e1558:	687b      	ldr	r3, [r7, #4]
 80e155a:	681b      	ldr	r3, [r3, #0]
 80e155c:	699a      	ldr	r2, [r3, #24]
 80e155e:	687b      	ldr	r3, [r7, #4]
 80e1560:	681b      	ldr	r3, [r3, #0]
 80e1562:	f042 0201 	orr.w	r2, r2, #1
 80e1566:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80e1568:	f7ff fe90 	bl	80e128c <HAL_GetTick>
 80e156c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80e156e:	e014      	b.n	80e159a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80e1570:	f7ff fe8c 	bl	80e128c <HAL_GetTick>
 80e1574:	4602      	mov	r2, r0
 80e1576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80e1578:	1ad3      	subs	r3, r2, r3
 80e157a:	2b0a      	cmp	r3, #10
 80e157c:	d90d      	bls.n	80e159a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80e157e:	687b      	ldr	r3, [r7, #4]
 80e1580:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1584:	f043 0201 	orr.w	r2, r3, #1
 80e1588:	687b      	ldr	r3, [r7, #4]
 80e158a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e158e:	687b      	ldr	r3, [r7, #4]
 80e1590:	2203      	movs	r2, #3
 80e1592:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80e1596:	2301      	movs	r3, #1
 80e1598:	e164      	b.n	80e1864 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80e159a:	687b      	ldr	r3, [r7, #4]
 80e159c:	681b      	ldr	r3, [r3, #0]
 80e159e:	699b      	ldr	r3, [r3, #24]
 80e15a0:	f003 0301 	and.w	r3, r3, #1
 80e15a4:	2b00      	cmp	r3, #0
 80e15a6:	d0e3      	beq.n	80e1570 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80e15a8:	687b      	ldr	r3, [r7, #4]
 80e15aa:	681b      	ldr	r3, [r3, #0]
 80e15ac:	699a      	ldr	r2, [r3, #24]
 80e15ae:	687b      	ldr	r3, [r7, #4]
 80e15b0:	681b      	ldr	r3, [r3, #0]
 80e15b2:	f042 0202 	orr.w	r2, r2, #2
 80e15b6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80e15b8:	687b      	ldr	r3, [r7, #4]
 80e15ba:	7c1b      	ldrb	r3, [r3, #16]
 80e15bc:	2b01      	cmp	r3, #1
 80e15be:	d108      	bne.n	80e15d2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80e15c0:	687b      	ldr	r3, [r7, #4]
 80e15c2:	681b      	ldr	r3, [r3, #0]
 80e15c4:	699a      	ldr	r2, [r3, #24]
 80e15c6:	687b      	ldr	r3, [r7, #4]
 80e15c8:	681b      	ldr	r3, [r3, #0]
 80e15ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80e15ce:	619a      	str	r2, [r3, #24]
 80e15d0:	e007      	b.n	80e15e2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80e15d2:	687b      	ldr	r3, [r7, #4]
 80e15d4:	681b      	ldr	r3, [r3, #0]
 80e15d6:	699a      	ldr	r2, [r3, #24]
 80e15d8:	687b      	ldr	r3, [r7, #4]
 80e15da:	681b      	ldr	r3, [r3, #0]
 80e15dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80e15e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80e15e2:	687b      	ldr	r3, [r7, #4]
 80e15e4:	7c5b      	ldrb	r3, [r3, #17]
 80e15e6:	2b01      	cmp	r3, #1
 80e15e8:	d108      	bne.n	80e15fc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80e15ea:	687b      	ldr	r3, [r7, #4]
 80e15ec:	681b      	ldr	r3, [r3, #0]
 80e15ee:	699a      	ldr	r2, [r3, #24]
 80e15f0:	687b      	ldr	r3, [r7, #4]
 80e15f2:	681b      	ldr	r3, [r3, #0]
 80e15f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80e15f8:	619a      	str	r2, [r3, #24]
 80e15fa:	e007      	b.n	80e160c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80e15fc:	687b      	ldr	r3, [r7, #4]
 80e15fe:	681b      	ldr	r3, [r3, #0]
 80e1600:	699a      	ldr	r2, [r3, #24]
 80e1602:	687b      	ldr	r3, [r7, #4]
 80e1604:	681b      	ldr	r3, [r3, #0]
 80e1606:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80e160a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80e160c:	687b      	ldr	r3, [r7, #4]
 80e160e:	7c9b      	ldrb	r3, [r3, #18]
 80e1610:	2b01      	cmp	r3, #1
 80e1612:	d108      	bne.n	80e1626 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80e1614:	687b      	ldr	r3, [r7, #4]
 80e1616:	681b      	ldr	r3, [r3, #0]
 80e1618:	699a      	ldr	r2, [r3, #24]
 80e161a:	687b      	ldr	r3, [r7, #4]
 80e161c:	681b      	ldr	r3, [r3, #0]
 80e161e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80e1622:	619a      	str	r2, [r3, #24]
 80e1624:	e007      	b.n	80e1636 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80e1626:	687b      	ldr	r3, [r7, #4]
 80e1628:	681b      	ldr	r3, [r3, #0]
 80e162a:	699a      	ldr	r2, [r3, #24]
 80e162c:	687b      	ldr	r3, [r7, #4]
 80e162e:	681b      	ldr	r3, [r3, #0]
 80e1630:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80e1634:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80e1636:	687b      	ldr	r3, [r7, #4]
 80e1638:	681b      	ldr	r3, [r3, #0]
 80e163a:	699b      	ldr	r3, [r3, #24]
 80e163c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80e1640:	687b      	ldr	r3, [r7, #4]
 80e1642:	689a      	ldr	r2, [r3, #8]
 80e1644:	687b      	ldr	r3, [r7, #4]
 80e1646:	681b      	ldr	r3, [r3, #0]
 80e1648:	430a      	orrs	r2, r1
 80e164a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80e164c:	687b      	ldr	r3, [r7, #4]
 80e164e:	681b      	ldr	r3, [r3, #0]
 80e1650:	699a      	ldr	r2, [r3, #24]
 80e1652:	687b      	ldr	r3, [r7, #4]
 80e1654:	681b      	ldr	r3, [r3, #0]
 80e1656:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80e165a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80e165c:	687b      	ldr	r3, [r7, #4]
 80e165e:	681b      	ldr	r3, [r3, #0]
 80e1660:	691a      	ldr	r2, [r3, #16]
 80e1662:	687b      	ldr	r3, [r7, #4]
 80e1664:	681b      	ldr	r3, [r3, #0]
 80e1666:	f022 0210 	bic.w	r2, r2, #16
 80e166a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80e166c:	687b      	ldr	r3, [r7, #4]
 80e166e:	68db      	ldr	r3, [r3, #12]
 80e1670:	2b01      	cmp	r3, #1
 80e1672:	d108      	bne.n	80e1686 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80e1674:	687b      	ldr	r3, [r7, #4]
 80e1676:	681b      	ldr	r3, [r3, #0]
 80e1678:	699a      	ldr	r2, [r3, #24]
 80e167a:	687b      	ldr	r3, [r7, #4]
 80e167c:	681b      	ldr	r3, [r3, #0]
 80e167e:	f042 0204 	orr.w	r2, r2, #4
 80e1682:	619a      	str	r2, [r3, #24]
 80e1684:	e030      	b.n	80e16e8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80e1686:	687b      	ldr	r3, [r7, #4]
 80e1688:	68db      	ldr	r3, [r3, #12]
 80e168a:	2b00      	cmp	r3, #0
 80e168c:	d02c      	beq.n	80e16e8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80e168e:	687b      	ldr	r3, [r7, #4]
 80e1690:	68db      	ldr	r3, [r3, #12]
 80e1692:	2b02      	cmp	r3, #2
 80e1694:	d020      	beq.n	80e16d8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80e1696:	687b      	ldr	r3, [r7, #4]
 80e1698:	681b      	ldr	r3, [r3, #0]
 80e169a:	699a      	ldr	r2, [r3, #24]
 80e169c:	687b      	ldr	r3, [r7, #4]
 80e169e:	681b      	ldr	r3, [r3, #0]
 80e16a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80e16a4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80e16a6:	687b      	ldr	r3, [r7, #4]
 80e16a8:	681b      	ldr	r3, [r3, #0]
 80e16aa:	691a      	ldr	r2, [r3, #16]
 80e16ac:	687b      	ldr	r3, [r7, #4]
 80e16ae:	681b      	ldr	r3, [r3, #0]
 80e16b0:	f042 0210 	orr.w	r2, r2, #16
 80e16b4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80e16b6:	687b      	ldr	r3, [r7, #4]
 80e16b8:	68db      	ldr	r3, [r3, #12]
 80e16ba:	2b03      	cmp	r3, #3
 80e16bc:	d114      	bne.n	80e16e8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80e16be:	687b      	ldr	r3, [r7, #4]
 80e16c0:	681b      	ldr	r3, [r3, #0]
 80e16c2:	699a      	ldr	r2, [r3, #24]
 80e16c4:	687b      	ldr	r3, [r7, #4]
 80e16c6:	681b      	ldr	r3, [r3, #0]
 80e16c8:	f042 0220 	orr.w	r2, r2, #32
 80e16cc:	619a      	str	r2, [r3, #24]
 80e16ce:	e00b      	b.n	80e16e8 <HAL_FDCAN_Init+0x234>
 80e16d0:	080e4828 	.word	0x080e4828
 80e16d4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80e16d8:	687b      	ldr	r3, [r7, #4]
 80e16da:	681b      	ldr	r3, [r3, #0]
 80e16dc:	699a      	ldr	r2, [r3, #24]
 80e16de:	687b      	ldr	r3, [r7, #4]
 80e16e0:	681b      	ldr	r3, [r3, #0]
 80e16e2:	f042 0220 	orr.w	r2, r2, #32
 80e16e6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e16e8:	687b      	ldr	r3, [r7, #4]
 80e16ea:	699b      	ldr	r3, [r3, #24]
 80e16ec:	3b01      	subs	r3, #1
 80e16ee:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80e16f0:	687b      	ldr	r3, [r7, #4]
 80e16f2:	69db      	ldr	r3, [r3, #28]
 80e16f4:	3b01      	subs	r3, #1
 80e16f6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e16f8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80e16fa:	687b      	ldr	r3, [r7, #4]
 80e16fc:	6a1b      	ldr	r3, [r3, #32]
 80e16fe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80e1700:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80e1704:	687b      	ldr	r3, [r7, #4]
 80e1706:	695b      	ldr	r3, [r3, #20]
 80e1708:	3b01      	subs	r3, #1
 80e170a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e170c:	687b      	ldr	r3, [r7, #4]
 80e170e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80e1710:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e1712:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80e1714:	687b      	ldr	r3, [r7, #4]
 80e1716:	689b      	ldr	r3, [r3, #8]
 80e1718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e171c:	d115      	bne.n	80e174a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e171e:	687b      	ldr	r3, [r7, #4]
 80e1720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e1722:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80e1724:	687b      	ldr	r3, [r7, #4]
 80e1726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e1728:	3b01      	subs	r3, #1
 80e172a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e172c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80e172e:	687b      	ldr	r3, [r7, #4]
 80e1730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e1732:	3b01      	subs	r3, #1
 80e1734:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80e1736:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80e173a:	687b      	ldr	r3, [r7, #4]
 80e173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e173e:	3b01      	subs	r3, #1
 80e1740:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e1742:	687b      	ldr	r3, [r7, #4]
 80e1744:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80e1746:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e1748:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80e174a:	687b      	ldr	r3, [r7, #4]
 80e174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e174e:	2b00      	cmp	r3, #0
 80e1750:	d00a      	beq.n	80e1768 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80e1752:	687b      	ldr	r3, [r7, #4]
 80e1754:	681b      	ldr	r3, [r3, #0]
 80e1756:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80e175a:	687b      	ldr	r3, [r7, #4]
 80e175c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80e175e:	687b      	ldr	r3, [r7, #4]
 80e1760:	681b      	ldr	r3, [r3, #0]
 80e1762:	430a      	orrs	r2, r1
 80e1764:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80e1768:	687b      	ldr	r3, [r7, #4]
 80e176a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e176c:	687b      	ldr	r3, [r7, #4]
 80e176e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e1770:	4413      	add	r3, r2
 80e1772:	2b00      	cmp	r3, #0
 80e1774:	d011      	beq.n	80e179a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80e1776:	687b      	ldr	r3, [r7, #4]
 80e1778:	681b      	ldr	r3, [r3, #0]
 80e177a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80e177e:	f023 0107 	bic.w	r1, r3, #7
 80e1782:	687b      	ldr	r3, [r7, #4]
 80e1784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e1786:	009b      	lsls	r3, r3, #2
 80e1788:	3360      	adds	r3, #96	; 0x60
 80e178a:	443b      	add	r3, r7
 80e178c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80e1790:	687b      	ldr	r3, [r7, #4]
 80e1792:	681b      	ldr	r3, [r3, #0]
 80e1794:	430a      	orrs	r2, r1
 80e1796:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80e179a:	687b      	ldr	r3, [r7, #4]
 80e179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e179e:	2b00      	cmp	r3, #0
 80e17a0:	d011      	beq.n	80e17c6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80e17a2:	687b      	ldr	r3, [r7, #4]
 80e17a4:	681b      	ldr	r3, [r3, #0]
 80e17a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e17aa:	f023 0107 	bic.w	r1, r3, #7
 80e17ae:	687b      	ldr	r3, [r7, #4]
 80e17b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e17b2:	009b      	lsls	r3, r3, #2
 80e17b4:	3360      	adds	r3, #96	; 0x60
 80e17b6:	443b      	add	r3, r7
 80e17b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80e17bc:	687b      	ldr	r3, [r7, #4]
 80e17be:	681b      	ldr	r3, [r3, #0]
 80e17c0:	430a      	orrs	r2, r1
 80e17c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80e17c6:	687b      	ldr	r3, [r7, #4]
 80e17c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e17ca:	2b00      	cmp	r3, #0
 80e17cc:	d012      	beq.n	80e17f4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80e17ce:	687b      	ldr	r3, [r7, #4]
 80e17d0:	681b      	ldr	r3, [r3, #0]
 80e17d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e17d6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80e17da:	687b      	ldr	r3, [r7, #4]
 80e17dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e17de:	009b      	lsls	r3, r3, #2
 80e17e0:	3360      	adds	r3, #96	; 0x60
 80e17e2:	443b      	add	r3, r7
 80e17e4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80e17e8:	011a      	lsls	r2, r3, #4
 80e17ea:	687b      	ldr	r3, [r7, #4]
 80e17ec:	681b      	ldr	r3, [r3, #0]
 80e17ee:	430a      	orrs	r2, r1
 80e17f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80e17f4:	687b      	ldr	r3, [r7, #4]
 80e17f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e17f8:	2b00      	cmp	r3, #0
 80e17fa:	d012      	beq.n	80e1822 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80e17fc:	687b      	ldr	r3, [r7, #4]
 80e17fe:	681b      	ldr	r3, [r3, #0]
 80e1800:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e1804:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80e1808:	687b      	ldr	r3, [r7, #4]
 80e180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e180c:	009b      	lsls	r3, r3, #2
 80e180e:	3360      	adds	r3, #96	; 0x60
 80e1810:	443b      	add	r3, r7
 80e1812:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80e1816:	021a      	lsls	r2, r3, #8
 80e1818:	687b      	ldr	r3, [r7, #4]
 80e181a:	681b      	ldr	r3, [r3, #0]
 80e181c:	430a      	orrs	r2, r1
 80e181e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80e1822:	687b      	ldr	r3, [r7, #4]
 80e1824:	681b      	ldr	r3, [r3, #0]
 80e1826:	4a11      	ldr	r2, [pc, #68]	; (80e186c <HAL_FDCAN_Init+0x3b8>)
 80e1828:	4293      	cmp	r3, r2
 80e182a:	d107      	bne.n	80e183c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80e182c:	687b      	ldr	r3, [r7, #4]
 80e182e:	685b      	ldr	r3, [r3, #4]
 80e1830:	689a      	ldr	r2, [r3, #8]
 80e1832:	687b      	ldr	r3, [r7, #4]
 80e1834:	685b      	ldr	r3, [r3, #4]
 80e1836:	f022 0203 	bic.w	r2, r2, #3
 80e183a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80e183c:	687b      	ldr	r3, [r7, #4]
 80e183e:	2200      	movs	r2, #0
 80e1840:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80e1844:	687b      	ldr	r3, [r7, #4]
 80e1846:	2200      	movs	r2, #0
 80e1848:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80e184c:	687b      	ldr	r3, [r7, #4]
 80e184e:	2201      	movs	r2, #1
 80e1850:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80e1854:	6878      	ldr	r0, [r7, #4]
 80e1856:	f000 fa79 	bl	80e1d4c <FDCAN_CalcultateRamBlockAddresses>
 80e185a:	4603      	mov	r3, r0
 80e185c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80e1860:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80e1864:	4618      	mov	r0, r3
 80e1866:	3760      	adds	r7, #96	; 0x60
 80e1868:	46bd      	mov	sp, r7
 80e186a:	bd80      	pop	{r7, pc}
 80e186c:	4000a000 	.word	0x4000a000

080e1870 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80e1870:	b480      	push	{r7}
 80e1872:	b083      	sub	sp, #12
 80e1874:	af00      	add	r7, sp, #0
 80e1876:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80e1878:	687b      	ldr	r3, [r7, #4]
 80e187a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e187e:	b2db      	uxtb	r3, r3
 80e1880:	2b01      	cmp	r3, #1
 80e1882:	d111      	bne.n	80e18a8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80e1884:	687b      	ldr	r3, [r7, #4]
 80e1886:	2202      	movs	r2, #2
 80e1888:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80e188c:	687b      	ldr	r3, [r7, #4]
 80e188e:	681b      	ldr	r3, [r3, #0]
 80e1890:	699a      	ldr	r2, [r3, #24]
 80e1892:	687b      	ldr	r3, [r7, #4]
 80e1894:	681b      	ldr	r3, [r3, #0]
 80e1896:	f022 0201 	bic.w	r2, r2, #1
 80e189a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80e189c:	687b      	ldr	r3, [r7, #4]
 80e189e:	2200      	movs	r2, #0
 80e18a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80e18a4:	2300      	movs	r3, #0
 80e18a6:	e008      	b.n	80e18ba <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80e18a8:	687b      	ldr	r3, [r7, #4]
 80e18aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e18ae:	f043 0204 	orr.w	r2, r3, #4
 80e18b2:	687b      	ldr	r3, [r7, #4]
 80e18b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e18b8:	2301      	movs	r3, #1
  }
}
 80e18ba:	4618      	mov	r0, r3
 80e18bc:	370c      	adds	r7, #12
 80e18be:	46bd      	mov	sp, r7
 80e18c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e18c4:	4770      	bx	lr

080e18c6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80e18c6:	b580      	push	{r7, lr}
 80e18c8:	b086      	sub	sp, #24
 80e18ca:	af00      	add	r7, sp, #0
 80e18cc:	60f8      	str	r0, [r7, #12]
 80e18ce:	60b9      	str	r1, [r7, #8]
 80e18d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80e18d2:	68fb      	ldr	r3, [r7, #12]
 80e18d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e18d8:	b2db      	uxtb	r3, r3
 80e18da:	2b02      	cmp	r3, #2
 80e18dc:	d141      	bne.n	80e1962 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80e18de:	68fb      	ldr	r3, [r7, #12]
 80e18e0:	681b      	ldr	r3, [r3, #0]
 80e18e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e18e6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80e18ea:	2b00      	cmp	r3, #0
 80e18ec:	d109      	bne.n	80e1902 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e18ee:	68fb      	ldr	r3, [r7, #12]
 80e18f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e18f4:	f043 0220 	orr.w	r2, r3, #32
 80e18f8:	68fb      	ldr	r3, [r7, #12]
 80e18fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80e18fe:	2301      	movs	r3, #1
 80e1900:	e038      	b.n	80e1974 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80e1902:	68fb      	ldr	r3, [r7, #12]
 80e1904:	681b      	ldr	r3, [r3, #0]
 80e1906:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80e190a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e190e:	2b00      	cmp	r3, #0
 80e1910:	d009      	beq.n	80e1926 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80e1912:	68fb      	ldr	r3, [r7, #12]
 80e1914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1918:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80e191c:	68fb      	ldr	r3, [r7, #12]
 80e191e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80e1922:	2301      	movs	r3, #1
 80e1924:	e026      	b.n	80e1974 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80e1926:	68fb      	ldr	r3, [r7, #12]
 80e1928:	681b      	ldr	r3, [r3, #0]
 80e192a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80e192e:	0c1b      	lsrs	r3, r3, #16
 80e1930:	f003 031f 	and.w	r3, r3, #31
 80e1934:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80e1936:	697b      	ldr	r3, [r7, #20]
 80e1938:	687a      	ldr	r2, [r7, #4]
 80e193a:	68b9      	ldr	r1, [r7, #8]
 80e193c:	68f8      	ldr	r0, [r7, #12]
 80e193e:	f000 fb8b 	bl	80e2058 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80e1942:	68fb      	ldr	r3, [r7, #12]
 80e1944:	681b      	ldr	r3, [r3, #0]
 80e1946:	2101      	movs	r1, #1
 80e1948:	697a      	ldr	r2, [r7, #20]
 80e194a:	fa01 f202 	lsl.w	r2, r1, r2
 80e194e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80e1952:	2201      	movs	r2, #1
 80e1954:	697b      	ldr	r3, [r7, #20]
 80e1956:	409a      	lsls	r2, r3
 80e1958:	68fb      	ldr	r3, [r7, #12]
 80e195a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80e195e:	2300      	movs	r3, #0
 80e1960:	e008      	b.n	80e1974 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80e1962:	68fb      	ldr	r3, [r7, #12]
 80e1964:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1968:	f043 0208 	orr.w	r2, r3, #8
 80e196c:	68fb      	ldr	r3, [r7, #12]
 80e196e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1972:	2301      	movs	r3, #1
  }
}
 80e1974:	4618      	mov	r0, r3
 80e1976:	3718      	adds	r7, #24
 80e1978:	46bd      	mov	sp, r7
 80e197a:	bd80      	pop	{r7, pc}

080e197c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80e197c:	b480      	push	{r7}
 80e197e:	b08b      	sub	sp, #44	; 0x2c
 80e1980:	af00      	add	r7, sp, #0
 80e1982:	60f8      	str	r0, [r7, #12]
 80e1984:	60b9      	str	r1, [r7, #8]
 80e1986:	607a      	str	r2, [r7, #4]
 80e1988:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80e198a:	2300      	movs	r3, #0
 80e198c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80e198e:	68fb      	ldr	r3, [r7, #12]
 80e1990:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1994:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80e1996:	7efb      	ldrb	r3, [r7, #27]
 80e1998:	2b02      	cmp	r3, #2
 80e199a:	f040 814b 	bne.w	80e1c34 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80e199e:	68bb      	ldr	r3, [r7, #8]
 80e19a0:	2b40      	cmp	r3, #64	; 0x40
 80e19a2:	d14d      	bne.n	80e1a40 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80e19a4:	68fb      	ldr	r3, [r7, #12]
 80e19a6:	681b      	ldr	r3, [r3, #0]
 80e19a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e19ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e19b0:	2b00      	cmp	r3, #0
 80e19b2:	d109      	bne.n	80e19c8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e19b4:	68fb      	ldr	r3, [r7, #12]
 80e19b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e19ba:	f043 0220 	orr.w	r2, r3, #32
 80e19be:	68fb      	ldr	r3, [r7, #12]
 80e19c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e19c4:	2301      	movs	r3, #1
 80e19c6:	e13e      	b.n	80e1c46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80e19c8:	68fb      	ldr	r3, [r7, #12]
 80e19ca:	681b      	ldr	r3, [r3, #0]
 80e19cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e19d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e19d4:	2b00      	cmp	r3, #0
 80e19d6:	d109      	bne.n	80e19ec <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80e19d8:	68fb      	ldr	r3, [r7, #12]
 80e19da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e19de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80e19e2:	68fb      	ldr	r3, [r7, #12]
 80e19e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e19e8:	2301      	movs	r3, #1
 80e19ea:	e12c      	b.n	80e1c46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80e19ec:	68fb      	ldr	r3, [r7, #12]
 80e19ee:	681b      	ldr	r3, [r3, #0]
 80e19f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e19f4:	0e1b      	lsrs	r3, r3, #24
 80e19f6:	f003 0301 	and.w	r3, r3, #1
 80e19fa:	2b01      	cmp	r3, #1
 80e19fc:	d10b      	bne.n	80e1a16 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80e19fe:	68fb      	ldr	r3, [r7, #12]
 80e1a00:	681b      	ldr	r3, [r3, #0]
 80e1a02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e1a06:	0fdb      	lsrs	r3, r3, #31
 80e1a08:	f003 0301 	and.w	r3, r3, #1
 80e1a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80e1a10:	d101      	bne.n	80e1a16 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80e1a12:	2301      	movs	r3, #1
 80e1a14:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80e1a16:	68fb      	ldr	r3, [r7, #12]
 80e1a18:	681b      	ldr	r3, [r3, #0]
 80e1a1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e1a1e:	0a1b      	lsrs	r3, r3, #8
 80e1a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e1a24:	69fa      	ldr	r2, [r7, #28]
 80e1a26:	4413      	add	r3, r2
 80e1a28:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80e1a2a:	68fb      	ldr	r3, [r7, #12]
 80e1a2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80e1a2e:	68fb      	ldr	r3, [r7, #12]
 80e1a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e1a32:	69f9      	ldr	r1, [r7, #28]
 80e1a34:	fb01 f303 	mul.w	r3, r1, r3
 80e1a38:	009b      	lsls	r3, r3, #2
 80e1a3a:	4413      	add	r3, r2
 80e1a3c:	627b      	str	r3, [r7, #36]	; 0x24
 80e1a3e:	e069      	b.n	80e1b14 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80e1a40:	68bb      	ldr	r3, [r7, #8]
 80e1a42:	2b41      	cmp	r3, #65	; 0x41
 80e1a44:	d14d      	bne.n	80e1ae2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80e1a46:	68fb      	ldr	r3, [r7, #12]
 80e1a48:	681b      	ldr	r3, [r3, #0]
 80e1a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e1a4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e1a52:	2b00      	cmp	r3, #0
 80e1a54:	d109      	bne.n	80e1a6a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e1a56:	68fb      	ldr	r3, [r7, #12]
 80e1a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1a5c:	f043 0220 	orr.w	r2, r3, #32
 80e1a60:	68fb      	ldr	r3, [r7, #12]
 80e1a62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e1a66:	2301      	movs	r3, #1
 80e1a68:	e0ed      	b.n	80e1c46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80e1a6a:	68fb      	ldr	r3, [r7, #12]
 80e1a6c:	681b      	ldr	r3, [r3, #0]
 80e1a6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80e1a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e1a76:	2b00      	cmp	r3, #0
 80e1a78:	d109      	bne.n	80e1a8e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80e1a7a:	68fb      	ldr	r3, [r7, #12]
 80e1a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1a80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80e1a84:	68fb      	ldr	r3, [r7, #12]
 80e1a86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e1a8a:	2301      	movs	r3, #1
 80e1a8c:	e0db      	b.n	80e1c46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80e1a8e:	68fb      	ldr	r3, [r7, #12]
 80e1a90:	681b      	ldr	r3, [r3, #0]
 80e1a92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80e1a96:	0e1b      	lsrs	r3, r3, #24
 80e1a98:	f003 0301 	and.w	r3, r3, #1
 80e1a9c:	2b01      	cmp	r3, #1
 80e1a9e:	d10b      	bne.n	80e1ab8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80e1aa0:	68fb      	ldr	r3, [r7, #12]
 80e1aa2:	681b      	ldr	r3, [r3, #0]
 80e1aa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e1aa8:	0fdb      	lsrs	r3, r3, #31
 80e1aaa:	f003 0301 	and.w	r3, r3, #1
 80e1aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80e1ab2:	d101      	bne.n	80e1ab8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80e1ab4:	2301      	movs	r3, #1
 80e1ab6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80e1ab8:	68fb      	ldr	r3, [r7, #12]
 80e1aba:	681b      	ldr	r3, [r3, #0]
 80e1abc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80e1ac0:	0a1b      	lsrs	r3, r3, #8
 80e1ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e1ac6:	69fa      	ldr	r2, [r7, #28]
 80e1ac8:	4413      	add	r3, r2
 80e1aca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80e1acc:	68fb      	ldr	r3, [r7, #12]
 80e1ace:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80e1ad0:	68fb      	ldr	r3, [r7, #12]
 80e1ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e1ad4:	69f9      	ldr	r1, [r7, #28]
 80e1ad6:	fb01 f303 	mul.w	r3, r1, r3
 80e1ada:	009b      	lsls	r3, r3, #2
 80e1adc:	4413      	add	r3, r2
 80e1ade:	627b      	str	r3, [r7, #36]	; 0x24
 80e1ae0:	e018      	b.n	80e1b14 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80e1ae2:	68fb      	ldr	r3, [r7, #12]
 80e1ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e1ae6:	68ba      	ldr	r2, [r7, #8]
 80e1ae8:	429a      	cmp	r2, r3
 80e1aea:	d309      	bcc.n	80e1b00 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e1aec:	68fb      	ldr	r3, [r7, #12]
 80e1aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1af2:	f043 0220 	orr.w	r2, r3, #32
 80e1af6:	68fb      	ldr	r3, [r7, #12]
 80e1af8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e1afc:	2301      	movs	r3, #1
 80e1afe:	e0a2      	b.n	80e1c46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80e1b00:	68fb      	ldr	r3, [r7, #12]
 80e1b02:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80e1b04:	68fb      	ldr	r3, [r7, #12]
 80e1b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e1b08:	68b9      	ldr	r1, [r7, #8]
 80e1b0a:	fb01 f303 	mul.w	r3, r1, r3
 80e1b0e:	009b      	lsls	r3, r3, #2
 80e1b10:	4413      	add	r3, r2
 80e1b12:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80e1b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b16:	681b      	ldr	r3, [r3, #0]
 80e1b18:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80e1b1c:	687b      	ldr	r3, [r7, #4]
 80e1b1e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80e1b20:	687b      	ldr	r3, [r7, #4]
 80e1b22:	685b      	ldr	r3, [r3, #4]
 80e1b24:	2b00      	cmp	r3, #0
 80e1b26:	d107      	bne.n	80e1b38 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80e1b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b2a:	681b      	ldr	r3, [r3, #0]
 80e1b2c:	0c9b      	lsrs	r3, r3, #18
 80e1b2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80e1b32:	687b      	ldr	r3, [r7, #4]
 80e1b34:	601a      	str	r2, [r3, #0]
 80e1b36:	e005      	b.n	80e1b44 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80e1b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b3a:	681b      	ldr	r3, [r3, #0]
 80e1b3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80e1b40:	687b      	ldr	r3, [r7, #4]
 80e1b42:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80e1b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b46:	681b      	ldr	r3, [r3, #0]
 80e1b48:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80e1b4c:	687b      	ldr	r3, [r7, #4]
 80e1b4e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80e1b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b52:	681b      	ldr	r3, [r3, #0]
 80e1b54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80e1b58:	687b      	ldr	r3, [r7, #4]
 80e1b5a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80e1b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b5e:	3304      	adds	r3, #4
 80e1b60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80e1b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b64:	681b      	ldr	r3, [r3, #0]
 80e1b66:	b29a      	uxth	r2, r3
 80e1b68:	687b      	ldr	r3, [r7, #4]
 80e1b6a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80e1b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b6e:	681b      	ldr	r3, [r3, #0]
 80e1b70:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80e1b74:	687b      	ldr	r3, [r7, #4]
 80e1b76:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80e1b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b7a:	681b      	ldr	r3, [r3, #0]
 80e1b7c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80e1b80:	687b      	ldr	r3, [r7, #4]
 80e1b82:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80e1b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b86:	681b      	ldr	r3, [r3, #0]
 80e1b88:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80e1b8c:	687b      	ldr	r3, [r7, #4]
 80e1b8e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80e1b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1b92:	681b      	ldr	r3, [r3, #0]
 80e1b94:	0e1b      	lsrs	r3, r3, #24
 80e1b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e1b9a:	687b      	ldr	r3, [r7, #4]
 80e1b9c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80e1b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1ba0:	681b      	ldr	r3, [r3, #0]
 80e1ba2:	0fda      	lsrs	r2, r3, #31
 80e1ba4:	687b      	ldr	r3, [r7, #4]
 80e1ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80e1ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1baa:	3304      	adds	r3, #4
 80e1bac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80e1bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1bb0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80e1bb2:	2300      	movs	r3, #0
 80e1bb4:	623b      	str	r3, [r7, #32]
 80e1bb6:	e00a      	b.n	80e1bce <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80e1bb8:	697a      	ldr	r2, [r7, #20]
 80e1bba:	6a3b      	ldr	r3, [r7, #32]
 80e1bbc:	441a      	add	r2, r3
 80e1bbe:	6839      	ldr	r1, [r7, #0]
 80e1bc0:	6a3b      	ldr	r3, [r7, #32]
 80e1bc2:	440b      	add	r3, r1
 80e1bc4:	7812      	ldrb	r2, [r2, #0]
 80e1bc6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80e1bc8:	6a3b      	ldr	r3, [r7, #32]
 80e1bca:	3301      	adds	r3, #1
 80e1bcc:	623b      	str	r3, [r7, #32]
 80e1bce:	687b      	ldr	r3, [r7, #4]
 80e1bd0:	68db      	ldr	r3, [r3, #12]
 80e1bd2:	0c1b      	lsrs	r3, r3, #16
 80e1bd4:	4a1f      	ldr	r2, [pc, #124]	; (80e1c54 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80e1bd6:	5cd3      	ldrb	r3, [r2, r3]
 80e1bd8:	461a      	mov	r2, r3
 80e1bda:	6a3b      	ldr	r3, [r7, #32]
 80e1bdc:	4293      	cmp	r3, r2
 80e1bde:	d3eb      	bcc.n	80e1bb8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80e1be0:	68bb      	ldr	r3, [r7, #8]
 80e1be2:	2b40      	cmp	r3, #64	; 0x40
 80e1be4:	d105      	bne.n	80e1bf2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80e1be6:	68fb      	ldr	r3, [r7, #12]
 80e1be8:	681b      	ldr	r3, [r3, #0]
 80e1bea:	69fa      	ldr	r2, [r7, #28]
 80e1bec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80e1bf0:	e01e      	b.n	80e1c30 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80e1bf2:	68bb      	ldr	r3, [r7, #8]
 80e1bf4:	2b41      	cmp	r3, #65	; 0x41
 80e1bf6:	d105      	bne.n	80e1c04 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80e1bf8:	68fb      	ldr	r3, [r7, #12]
 80e1bfa:	681b      	ldr	r3, [r3, #0]
 80e1bfc:	69fa      	ldr	r2, [r7, #28]
 80e1bfe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80e1c02:	e015      	b.n	80e1c30 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80e1c04:	68bb      	ldr	r3, [r7, #8]
 80e1c06:	2b1f      	cmp	r3, #31
 80e1c08:	d808      	bhi.n	80e1c1c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80e1c0a:	68fb      	ldr	r3, [r7, #12]
 80e1c0c:	681b      	ldr	r3, [r3, #0]
 80e1c0e:	2101      	movs	r1, #1
 80e1c10:	68ba      	ldr	r2, [r7, #8]
 80e1c12:	fa01 f202 	lsl.w	r2, r1, r2
 80e1c16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80e1c1a:	e009      	b.n	80e1c30 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80e1c1c:	68bb      	ldr	r3, [r7, #8]
 80e1c1e:	f003 021f 	and.w	r2, r3, #31
 80e1c22:	68fb      	ldr	r3, [r7, #12]
 80e1c24:	681b      	ldr	r3, [r3, #0]
 80e1c26:	2101      	movs	r1, #1
 80e1c28:	fa01 f202 	lsl.w	r2, r1, r2
 80e1c2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80e1c30:	2300      	movs	r3, #0
 80e1c32:	e008      	b.n	80e1c46 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80e1c34:	68fb      	ldr	r3, [r7, #12]
 80e1c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1c3a:	f043 0208 	orr.w	r2, r3, #8
 80e1c3e:	68fb      	ldr	r3, [r7, #12]
 80e1c40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1c44:	2301      	movs	r3, #1
  }
}
 80e1c46:	4618      	mov	r0, r3
 80e1c48:	372c      	adds	r7, #44	; 0x2c
 80e1c4a:	46bd      	mov	sp, r7
 80e1c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1c50:	4770      	bx	lr
 80e1c52:	bf00      	nop
 80e1c54:	080e4884 	.word	0x080e4884

080e1c58 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80e1c58:	b480      	push	{r7}
 80e1c5a:	b087      	sub	sp, #28
 80e1c5c:	af00      	add	r7, sp, #0
 80e1c5e:	60f8      	str	r0, [r7, #12]
 80e1c60:	60b9      	str	r1, [r7, #8]
 80e1c62:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80e1c64:	68fb      	ldr	r3, [r7, #12]
 80e1c66:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1c6a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80e1c6c:	7dfb      	ldrb	r3, [r7, #23]
 80e1c6e:	2b01      	cmp	r3, #1
 80e1c70:	d002      	beq.n	80e1c78 <HAL_FDCAN_ActivateNotification+0x20>
 80e1c72:	7dfb      	ldrb	r3, [r7, #23]
 80e1c74:	2b02      	cmp	r3, #2
 80e1c76:	d155      	bne.n	80e1d24 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80e1c78:	68fb      	ldr	r3, [r7, #12]
 80e1c7a:	681b      	ldr	r3, [r3, #0]
 80e1c7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80e1c7e:	68bb      	ldr	r3, [r7, #8]
 80e1c80:	4013      	ands	r3, r2
 80e1c82:	2b00      	cmp	r3, #0
 80e1c84:	d108      	bne.n	80e1c98 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80e1c86:	68fb      	ldr	r3, [r7, #12]
 80e1c88:	681b      	ldr	r3, [r3, #0]
 80e1c8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e1c8c:	68fb      	ldr	r3, [r7, #12]
 80e1c8e:	681b      	ldr	r3, [r3, #0]
 80e1c90:	f042 0201 	orr.w	r2, r2, #1
 80e1c94:	65da      	str	r2, [r3, #92]	; 0x5c
 80e1c96:	e014      	b.n	80e1cc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80e1c98:	68fb      	ldr	r3, [r7, #12]
 80e1c9a:	681b      	ldr	r3, [r3, #0]
 80e1c9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80e1c9e:	68bb      	ldr	r3, [r7, #8]
 80e1ca0:	4013      	ands	r3, r2
 80e1ca2:	68ba      	ldr	r2, [r7, #8]
 80e1ca4:	429a      	cmp	r2, r3
 80e1ca6:	d108      	bne.n	80e1cba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80e1ca8:	68fb      	ldr	r3, [r7, #12]
 80e1caa:	681b      	ldr	r3, [r3, #0]
 80e1cac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e1cae:	68fb      	ldr	r3, [r7, #12]
 80e1cb0:	681b      	ldr	r3, [r3, #0]
 80e1cb2:	f042 0202 	orr.w	r2, r2, #2
 80e1cb6:	65da      	str	r2, [r3, #92]	; 0x5c
 80e1cb8:	e003      	b.n	80e1cc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80e1cba:	68fb      	ldr	r3, [r7, #12]
 80e1cbc:	681b      	ldr	r3, [r3, #0]
 80e1cbe:	2203      	movs	r2, #3
 80e1cc0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80e1cc2:	68bb      	ldr	r3, [r7, #8]
 80e1cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80e1cc8:	2b00      	cmp	r3, #0
 80e1cca:	d009      	beq.n	80e1ce0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80e1ccc:	68fb      	ldr	r3, [r7, #12]
 80e1cce:	681b      	ldr	r3, [r3, #0]
 80e1cd0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80e1cd4:	68fb      	ldr	r3, [r7, #12]
 80e1cd6:	681b      	ldr	r3, [r3, #0]
 80e1cd8:	687a      	ldr	r2, [r7, #4]
 80e1cda:	430a      	orrs	r2, r1
 80e1cdc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80e1ce0:	68bb      	ldr	r3, [r7, #8]
 80e1ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80e1ce6:	2b00      	cmp	r3, #0
 80e1ce8:	d009      	beq.n	80e1cfe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80e1cea:	68fb      	ldr	r3, [r7, #12]
 80e1cec:	681b      	ldr	r3, [r3, #0]
 80e1cee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80e1cf2:	68fb      	ldr	r3, [r7, #12]
 80e1cf4:	681b      	ldr	r3, [r3, #0]
 80e1cf6:	687a      	ldr	r2, [r7, #4]
 80e1cf8:	430a      	orrs	r2, r1
 80e1cfa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80e1cfe:	68fb      	ldr	r3, [r7, #12]
 80e1d00:	681b      	ldr	r3, [r3, #0]
 80e1d02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80e1d04:	68ba      	ldr	r2, [r7, #8]
 80e1d06:	4b0f      	ldr	r3, [pc, #60]	; (80e1d44 <HAL_FDCAN_ActivateNotification+0xec>)
 80e1d08:	4013      	ands	r3, r2
 80e1d0a:	68fa      	ldr	r2, [r7, #12]
 80e1d0c:	6812      	ldr	r2, [r2, #0]
 80e1d0e:	430b      	orrs	r3, r1
 80e1d10:	6553      	str	r3, [r2, #84]	; 0x54
 80e1d12:	4b0d      	ldr	r3, [pc, #52]	; (80e1d48 <HAL_FDCAN_ActivateNotification+0xf0>)
 80e1d14:	695a      	ldr	r2, [r3, #20]
 80e1d16:	68bb      	ldr	r3, [r7, #8]
 80e1d18:	0f9b      	lsrs	r3, r3, #30
 80e1d1a:	490b      	ldr	r1, [pc, #44]	; (80e1d48 <HAL_FDCAN_ActivateNotification+0xf0>)
 80e1d1c:	4313      	orrs	r3, r2
 80e1d1e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80e1d20:	2300      	movs	r3, #0
 80e1d22:	e008      	b.n	80e1d36 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80e1d24:	68fb      	ldr	r3, [r7, #12]
 80e1d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1d2a:	f043 0202 	orr.w	r2, r3, #2
 80e1d2e:	68fb      	ldr	r3, [r7, #12]
 80e1d30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1d34:	2301      	movs	r3, #1
  }
}
 80e1d36:	4618      	mov	r0, r3
 80e1d38:	371c      	adds	r7, #28
 80e1d3a:	46bd      	mov	sp, r7
 80e1d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1d40:	4770      	bx	lr
 80e1d42:	bf00      	nop
 80e1d44:	3fcfffff 	.word	0x3fcfffff
 80e1d48:	4000a800 	.word	0x4000a800

080e1d4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80e1d4c:	b480      	push	{r7}
 80e1d4e:	b085      	sub	sp, #20
 80e1d50:	af00      	add	r7, sp, #0
 80e1d52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80e1d54:	687b      	ldr	r3, [r7, #4]
 80e1d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e1d58:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80e1d5a:	687b      	ldr	r3, [r7, #4]
 80e1d5c:	681b      	ldr	r3, [r3, #0]
 80e1d5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e1d62:	4ba7      	ldr	r3, [pc, #668]	; (80e2000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1d64:	4013      	ands	r3, r2
 80e1d66:	68ba      	ldr	r2, [r7, #8]
 80e1d68:	0091      	lsls	r1, r2, #2
 80e1d6a:	687a      	ldr	r2, [r7, #4]
 80e1d6c:	6812      	ldr	r2, [r2, #0]
 80e1d6e:	430b      	orrs	r3, r1
 80e1d70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80e1d74:	687b      	ldr	r3, [r7, #4]
 80e1d76:	681b      	ldr	r3, [r3, #0]
 80e1d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80e1d7c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80e1d80:	687b      	ldr	r3, [r7, #4]
 80e1d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e1d84:	041a      	lsls	r2, r3, #16
 80e1d86:	687b      	ldr	r3, [r7, #4]
 80e1d88:	681b      	ldr	r3, [r3, #0]
 80e1d8a:	430a      	orrs	r2, r1
 80e1d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80e1d90:	687b      	ldr	r3, [r7, #4]
 80e1d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e1d94:	68ba      	ldr	r2, [r7, #8]
 80e1d96:	4413      	add	r3, r2
 80e1d98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80e1d9a:	687b      	ldr	r3, [r7, #4]
 80e1d9c:	681b      	ldr	r3, [r3, #0]
 80e1d9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80e1da2:	4b97      	ldr	r3, [pc, #604]	; (80e2000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1da4:	4013      	ands	r3, r2
 80e1da6:	68ba      	ldr	r2, [r7, #8]
 80e1da8:	0091      	lsls	r1, r2, #2
 80e1daa:	687a      	ldr	r2, [r7, #4]
 80e1dac:	6812      	ldr	r2, [r2, #0]
 80e1dae:	430b      	orrs	r3, r1
 80e1db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80e1db4:	687b      	ldr	r3, [r7, #4]
 80e1db6:	681b      	ldr	r3, [r3, #0]
 80e1db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e1dbc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e1dc0:	687b      	ldr	r3, [r7, #4]
 80e1dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e1dc4:	041a      	lsls	r2, r3, #16
 80e1dc6:	687b      	ldr	r3, [r7, #4]
 80e1dc8:	681b      	ldr	r3, [r3, #0]
 80e1dca:	430a      	orrs	r2, r1
 80e1dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80e1dd0:	687b      	ldr	r3, [r7, #4]
 80e1dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e1dd4:	005b      	lsls	r3, r3, #1
 80e1dd6:	68ba      	ldr	r2, [r7, #8]
 80e1dd8:	4413      	add	r3, r2
 80e1dda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80e1ddc:	687b      	ldr	r3, [r7, #4]
 80e1dde:	681b      	ldr	r3, [r3, #0]
 80e1de0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80e1de4:	4b86      	ldr	r3, [pc, #536]	; (80e2000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1de6:	4013      	ands	r3, r2
 80e1de8:	68ba      	ldr	r2, [r7, #8]
 80e1dea:	0091      	lsls	r1, r2, #2
 80e1dec:	687a      	ldr	r2, [r7, #4]
 80e1dee:	6812      	ldr	r2, [r2, #0]
 80e1df0:	430b      	orrs	r3, r1
 80e1df2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80e1df6:	687b      	ldr	r3, [r7, #4]
 80e1df8:	681b      	ldr	r3, [r3, #0]
 80e1dfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e1dfe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e1e02:	687b      	ldr	r3, [r7, #4]
 80e1e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e1e06:	041a      	lsls	r2, r3, #16
 80e1e08:	687b      	ldr	r3, [r7, #4]
 80e1e0a:	681b      	ldr	r3, [r3, #0]
 80e1e0c:	430a      	orrs	r2, r1
 80e1e0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80e1e12:	687b      	ldr	r3, [r7, #4]
 80e1e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e1e16:	687a      	ldr	r2, [r7, #4]
 80e1e18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80e1e1a:	fb02 f303 	mul.w	r3, r2, r3
 80e1e1e:	68ba      	ldr	r2, [r7, #8]
 80e1e20:	4413      	add	r3, r2
 80e1e22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80e1e24:	687b      	ldr	r3, [r7, #4]
 80e1e26:	681b      	ldr	r3, [r3, #0]
 80e1e28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80e1e2c:	4b74      	ldr	r3, [pc, #464]	; (80e2000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1e2e:	4013      	ands	r3, r2
 80e1e30:	68ba      	ldr	r2, [r7, #8]
 80e1e32:	0091      	lsls	r1, r2, #2
 80e1e34:	687a      	ldr	r2, [r7, #4]
 80e1e36:	6812      	ldr	r2, [r2, #0]
 80e1e38:	430b      	orrs	r3, r1
 80e1e3a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80e1e3e:	687b      	ldr	r3, [r7, #4]
 80e1e40:	681b      	ldr	r3, [r3, #0]
 80e1e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e1e46:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e1e4a:	687b      	ldr	r3, [r7, #4]
 80e1e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e1e4e:	041a      	lsls	r2, r3, #16
 80e1e50:	687b      	ldr	r3, [r7, #4]
 80e1e52:	681b      	ldr	r3, [r3, #0]
 80e1e54:	430a      	orrs	r2, r1
 80e1e56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80e1e5a:	687b      	ldr	r3, [r7, #4]
 80e1e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e1e5e:	687a      	ldr	r2, [r7, #4]
 80e1e60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80e1e62:	fb02 f303 	mul.w	r3, r2, r3
 80e1e66:	68ba      	ldr	r2, [r7, #8]
 80e1e68:	4413      	add	r3, r2
 80e1e6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80e1e6c:	687b      	ldr	r3, [r7, #4]
 80e1e6e:	681b      	ldr	r3, [r3, #0]
 80e1e70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80e1e74:	4b62      	ldr	r3, [pc, #392]	; (80e2000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1e76:	4013      	ands	r3, r2
 80e1e78:	68ba      	ldr	r2, [r7, #8]
 80e1e7a:	0091      	lsls	r1, r2, #2
 80e1e7c:	687a      	ldr	r2, [r7, #4]
 80e1e7e:	6812      	ldr	r2, [r2, #0]
 80e1e80:	430b      	orrs	r3, r1
 80e1e82:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80e1e86:	687b      	ldr	r3, [r7, #4]
 80e1e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e1e8a:	687a      	ldr	r2, [r7, #4]
 80e1e8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80e1e8e:	fb02 f303 	mul.w	r3, r2, r3
 80e1e92:	68ba      	ldr	r2, [r7, #8]
 80e1e94:	4413      	add	r3, r2
 80e1e96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80e1e98:	687b      	ldr	r3, [r7, #4]
 80e1e9a:	681b      	ldr	r3, [r3, #0]
 80e1e9c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80e1ea0:	4b57      	ldr	r3, [pc, #348]	; (80e2000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1ea2:	4013      	ands	r3, r2
 80e1ea4:	68ba      	ldr	r2, [r7, #8]
 80e1ea6:	0091      	lsls	r1, r2, #2
 80e1ea8:	687a      	ldr	r2, [r7, #4]
 80e1eaa:	6812      	ldr	r2, [r2, #0]
 80e1eac:	430b      	orrs	r3, r1
 80e1eae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80e1eb2:	687b      	ldr	r3, [r7, #4]
 80e1eb4:	681b      	ldr	r3, [r3, #0]
 80e1eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80e1eba:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80e1ebe:	687b      	ldr	r3, [r7, #4]
 80e1ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e1ec2:	041a      	lsls	r2, r3, #16
 80e1ec4:	687b      	ldr	r3, [r7, #4]
 80e1ec6:	681b      	ldr	r3, [r3, #0]
 80e1ec8:	430a      	orrs	r2, r1
 80e1eca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80e1ece:	687b      	ldr	r3, [r7, #4]
 80e1ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e1ed2:	005b      	lsls	r3, r3, #1
 80e1ed4:	68ba      	ldr	r2, [r7, #8]
 80e1ed6:	4413      	add	r3, r2
 80e1ed8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80e1eda:	687b      	ldr	r3, [r7, #4]
 80e1edc:	681b      	ldr	r3, [r3, #0]
 80e1ede:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80e1ee2:	4b47      	ldr	r3, [pc, #284]	; (80e2000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1ee4:	4013      	ands	r3, r2
 80e1ee6:	68ba      	ldr	r2, [r7, #8]
 80e1ee8:	0091      	lsls	r1, r2, #2
 80e1eea:	687a      	ldr	r2, [r7, #4]
 80e1eec:	6812      	ldr	r2, [r2, #0]
 80e1eee:	430b      	orrs	r3, r1
 80e1ef0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80e1ef4:	687b      	ldr	r3, [r7, #4]
 80e1ef6:	681b      	ldr	r3, [r3, #0]
 80e1ef8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e1efc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80e1f00:	687b      	ldr	r3, [r7, #4]
 80e1f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e1f04:	041a      	lsls	r2, r3, #16
 80e1f06:	687b      	ldr	r3, [r7, #4]
 80e1f08:	681b      	ldr	r3, [r3, #0]
 80e1f0a:	430a      	orrs	r2, r1
 80e1f0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80e1f10:	687b      	ldr	r3, [r7, #4]
 80e1f12:	681b      	ldr	r3, [r3, #0]
 80e1f14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e1f18:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80e1f1c:	687b      	ldr	r3, [r7, #4]
 80e1f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e1f20:	061a      	lsls	r2, r3, #24
 80e1f22:	687b      	ldr	r3, [r7, #4]
 80e1f24:	681b      	ldr	r3, [r3, #0]
 80e1f26:	430a      	orrs	r2, r1
 80e1f28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80e1f2c:	687b      	ldr	r3, [r7, #4]
 80e1f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80e1f30:	4b34      	ldr	r3, [pc, #208]	; (80e2004 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80e1f32:	4413      	add	r3, r2
 80e1f34:	009a      	lsls	r2, r3, #2
 80e1f36:	687b      	ldr	r3, [r7, #4]
 80e1f38:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80e1f3a:	687b      	ldr	r3, [r7, #4]
 80e1f3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80e1f3e:	687b      	ldr	r3, [r7, #4]
 80e1f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e1f42:	009b      	lsls	r3, r3, #2
 80e1f44:	441a      	add	r2, r3
 80e1f46:	687b      	ldr	r3, [r7, #4]
 80e1f48:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80e1f4a:	687b      	ldr	r3, [r7, #4]
 80e1f4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e1f4e:	687b      	ldr	r3, [r7, #4]
 80e1f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e1f52:	00db      	lsls	r3, r3, #3
 80e1f54:	441a      	add	r2, r3
 80e1f56:	687b      	ldr	r3, [r7, #4]
 80e1f58:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80e1f5a:	687b      	ldr	r3, [r7, #4]
 80e1f5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80e1f5e:	687b      	ldr	r3, [r7, #4]
 80e1f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e1f62:	6879      	ldr	r1, [r7, #4]
 80e1f64:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80e1f66:	fb01 f303 	mul.w	r3, r1, r3
 80e1f6a:	009b      	lsls	r3, r3, #2
 80e1f6c:	441a      	add	r2, r3
 80e1f6e:	687b      	ldr	r3, [r7, #4]
 80e1f70:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80e1f72:	687b      	ldr	r3, [r7, #4]
 80e1f74:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80e1f76:	687b      	ldr	r3, [r7, #4]
 80e1f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e1f7a:	6879      	ldr	r1, [r7, #4]
 80e1f7c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80e1f7e:	fb01 f303 	mul.w	r3, r1, r3
 80e1f82:	009b      	lsls	r3, r3, #2
 80e1f84:	441a      	add	r2, r3
 80e1f86:	687b      	ldr	r3, [r7, #4]
 80e1f88:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80e1f8a:	687b      	ldr	r3, [r7, #4]
 80e1f8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80e1f8e:	687b      	ldr	r3, [r7, #4]
 80e1f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e1f92:	6879      	ldr	r1, [r7, #4]
 80e1f94:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80e1f96:	fb01 f303 	mul.w	r3, r1, r3
 80e1f9a:	009b      	lsls	r3, r3, #2
 80e1f9c:	441a      	add	r2, r3
 80e1f9e:	687b      	ldr	r3, [r7, #4]
 80e1fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80e1fa4:	687b      	ldr	r3, [r7, #4]
 80e1fa6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80e1faa:	687b      	ldr	r3, [r7, #4]
 80e1fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e1fae:	00db      	lsls	r3, r3, #3
 80e1fb0:	441a      	add	r2, r3
 80e1fb2:	687b      	ldr	r3, [r7, #4]
 80e1fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80e1fb8:	687b      	ldr	r3, [r7, #4]
 80e1fba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e1fbe:	687b      	ldr	r3, [r7, #4]
 80e1fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e1fc2:	6879      	ldr	r1, [r7, #4]
 80e1fc4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80e1fc6:	fb01 f303 	mul.w	r3, r1, r3
 80e1fca:	009b      	lsls	r3, r3, #2
 80e1fcc:	441a      	add	r2, r3
 80e1fce:	687b      	ldr	r3, [r7, #4]
 80e1fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80e1fd4:	687b      	ldr	r3, [r7, #4]
 80e1fd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80e1fda:	687b      	ldr	r3, [r7, #4]
 80e1fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e1fde:	6879      	ldr	r1, [r7, #4]
 80e1fe0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80e1fe2:	fb01 f303 	mul.w	r3, r1, r3
 80e1fe6:	009b      	lsls	r3, r3, #2
 80e1fe8:	441a      	add	r2, r3
 80e1fea:	687b      	ldr	r3, [r7, #4]
 80e1fec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80e1ff0:	687b      	ldr	r3, [r7, #4]
 80e1ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e1ff6:	4a04      	ldr	r2, [pc, #16]	; (80e2008 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80e1ff8:	4293      	cmp	r3, r2
 80e1ffa:	d915      	bls.n	80e2028 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80e1ffc:	e006      	b.n	80e200c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80e1ffe:	bf00      	nop
 80e2000:	ffff0003 	.word	0xffff0003
 80e2004:	10002b00 	.word	0x10002b00
 80e2008:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e200c:	687b      	ldr	r3, [r7, #4]
 80e200e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e2012:	f043 0220 	orr.w	r2, r3, #32
 80e2016:	687b      	ldr	r3, [r7, #4]
 80e2018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e201c:	687b      	ldr	r3, [r7, #4]
 80e201e:	2203      	movs	r2, #3
 80e2020:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80e2024:	2301      	movs	r3, #1
 80e2026:	e010      	b.n	80e204a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80e2028:	687b      	ldr	r3, [r7, #4]
 80e202a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80e202c:	60fb      	str	r3, [r7, #12]
 80e202e:	e005      	b.n	80e203c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80e2030:	68fb      	ldr	r3, [r7, #12]
 80e2032:	2200      	movs	r2, #0
 80e2034:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80e2036:	68fb      	ldr	r3, [r7, #12]
 80e2038:	3304      	adds	r3, #4
 80e203a:	60fb      	str	r3, [r7, #12]
 80e203c:	687b      	ldr	r3, [r7, #4]
 80e203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e2042:	68fa      	ldr	r2, [r7, #12]
 80e2044:	429a      	cmp	r2, r3
 80e2046:	d3f3      	bcc.n	80e2030 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80e2048:	2300      	movs	r3, #0
}
 80e204a:	4618      	mov	r0, r3
 80e204c:	3714      	adds	r7, #20
 80e204e:	46bd      	mov	sp, r7
 80e2050:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2054:	4770      	bx	lr
 80e2056:	bf00      	nop

080e2058 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80e2058:	b480      	push	{r7}
 80e205a:	b089      	sub	sp, #36	; 0x24
 80e205c:	af00      	add	r7, sp, #0
 80e205e:	60f8      	str	r0, [r7, #12]
 80e2060:	60b9      	str	r1, [r7, #8]
 80e2062:	607a      	str	r2, [r7, #4]
 80e2064:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80e2066:	68bb      	ldr	r3, [r7, #8]
 80e2068:	685b      	ldr	r3, [r3, #4]
 80e206a:	2b00      	cmp	r3, #0
 80e206c:	d10a      	bne.n	80e2084 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e206e:	68bb      	ldr	r3, [r7, #8]
 80e2070:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80e2072:	68bb      	ldr	r3, [r7, #8]
 80e2074:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80e2076:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80e2078:	68bb      	ldr	r3, [r7, #8]
 80e207a:	681b      	ldr	r3, [r3, #0]
 80e207c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e207e:	4313      	orrs	r3, r2
 80e2080:	61fb      	str	r3, [r7, #28]
 80e2082:	e00a      	b.n	80e209a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e2084:	68bb      	ldr	r3, [r7, #8]
 80e2086:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80e2088:	68bb      	ldr	r3, [r7, #8]
 80e208a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80e208c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80e208e:	68bb      	ldr	r3, [r7, #8]
 80e2090:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80e2092:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e2094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80e2098:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e209a:	68bb      	ldr	r3, [r7, #8]
 80e209c:	6a1b      	ldr	r3, [r3, #32]
 80e209e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80e20a0:	68bb      	ldr	r3, [r7, #8]
 80e20a2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e20a4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80e20a6:	68bb      	ldr	r3, [r7, #8]
 80e20a8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80e20aa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80e20ac:	68bb      	ldr	r3, [r7, #8]
 80e20ae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80e20b0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80e20b2:	68bb      	ldr	r3, [r7, #8]
 80e20b4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e20b6:	4313      	orrs	r3, r2
 80e20b8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80e20ba:	68fb      	ldr	r3, [r7, #12]
 80e20bc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e20c0:	68fb      	ldr	r3, [r7, #12]
 80e20c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e20c4:	6839      	ldr	r1, [r7, #0]
 80e20c6:	fb01 f303 	mul.w	r3, r1, r3
 80e20ca:	009b      	lsls	r3, r3, #2
 80e20cc:	4413      	add	r3, r2
 80e20ce:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80e20d0:	69bb      	ldr	r3, [r7, #24]
 80e20d2:	69fa      	ldr	r2, [r7, #28]
 80e20d4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80e20d6:	69bb      	ldr	r3, [r7, #24]
 80e20d8:	3304      	adds	r3, #4
 80e20da:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80e20dc:	69bb      	ldr	r3, [r7, #24]
 80e20de:	693a      	ldr	r2, [r7, #16]
 80e20e0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80e20e2:	69bb      	ldr	r3, [r7, #24]
 80e20e4:	3304      	adds	r3, #4
 80e20e6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80e20e8:	2300      	movs	r3, #0
 80e20ea:	617b      	str	r3, [r7, #20]
 80e20ec:	e020      	b.n	80e2130 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e20ee:	697b      	ldr	r3, [r7, #20]
 80e20f0:	3303      	adds	r3, #3
 80e20f2:	687a      	ldr	r2, [r7, #4]
 80e20f4:	4413      	add	r3, r2
 80e20f6:	781b      	ldrb	r3, [r3, #0]
 80e20f8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80e20fa:	697b      	ldr	r3, [r7, #20]
 80e20fc:	3302      	adds	r3, #2
 80e20fe:	6879      	ldr	r1, [r7, #4]
 80e2100:	440b      	add	r3, r1
 80e2102:	781b      	ldrb	r3, [r3, #0]
 80e2104:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e2106:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80e2108:	697b      	ldr	r3, [r7, #20]
 80e210a:	3301      	adds	r3, #1
 80e210c:	6879      	ldr	r1, [r7, #4]
 80e210e:	440b      	add	r3, r1
 80e2110:	781b      	ldrb	r3, [r3, #0]
 80e2112:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80e2114:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80e2116:	6879      	ldr	r1, [r7, #4]
 80e2118:	697a      	ldr	r2, [r7, #20]
 80e211a:	440a      	add	r2, r1
 80e211c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80e211e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e2120:	69bb      	ldr	r3, [r7, #24]
 80e2122:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80e2124:	69bb      	ldr	r3, [r7, #24]
 80e2126:	3304      	adds	r3, #4
 80e2128:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80e212a:	697b      	ldr	r3, [r7, #20]
 80e212c:	3304      	adds	r3, #4
 80e212e:	617b      	str	r3, [r7, #20]
 80e2130:	68bb      	ldr	r3, [r7, #8]
 80e2132:	68db      	ldr	r3, [r3, #12]
 80e2134:	0c1b      	lsrs	r3, r3, #16
 80e2136:	4a06      	ldr	r2, [pc, #24]	; (80e2150 <FDCAN_CopyMessageToRAM+0xf8>)
 80e2138:	5cd3      	ldrb	r3, [r2, r3]
 80e213a:	461a      	mov	r2, r3
 80e213c:	697b      	ldr	r3, [r7, #20]
 80e213e:	4293      	cmp	r3, r2
 80e2140:	d3d5      	bcc.n	80e20ee <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80e2142:	bf00      	nop
 80e2144:	bf00      	nop
 80e2146:	3724      	adds	r7, #36	; 0x24
 80e2148:	46bd      	mov	sp, r7
 80e214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e214e:	4770      	bx	lr
 80e2150:	080e4884 	.word	0x080e4884

080e2154 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80e2154:	b580      	push	{r7, lr}
 80e2156:	b08a      	sub	sp, #40	; 0x28
 80e2158:	af00      	add	r7, sp, #0
 80e215a:	60f8      	str	r0, [r7, #12]
 80e215c:	60b9      	str	r1, [r7, #8]
 80e215e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80e2160:	68bb      	ldr	r3, [r7, #8]
 80e2162:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80e2164:	687b      	ldr	r3, [r7, #4]
 80e2166:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80e2168:	2308      	movs	r3, #8
 80e216a:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80e216c:	4b2e      	ldr	r3, [pc, #184]	; (80e2228 <HAL_FLASH_Program+0xd4>)
 80e216e:	7d1b      	ldrb	r3, [r3, #20]
 80e2170:	2b01      	cmp	r3, #1
 80e2172:	d101      	bne.n	80e2178 <HAL_FLASH_Program+0x24>
 80e2174:	2302      	movs	r3, #2
 80e2176:	e053      	b.n	80e2220 <HAL_FLASH_Program+0xcc>
 80e2178:	4b2b      	ldr	r3, [pc, #172]	; (80e2228 <HAL_FLASH_Program+0xd4>)
 80e217a:	2201      	movs	r2, #1
 80e217c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80e217e:	68bb      	ldr	r3, [r7, #8]
 80e2180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80e2184:	d315      	bcc.n	80e21b2 <HAL_FLASH_Program+0x5e>
 80e2186:	68bb      	ldr	r3, [r7, #8]
 80e2188:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80e218c:	d211      	bcs.n	80e21b2 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80e218e:	2301      	movs	r3, #1
 80e2190:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80e2192:	4b25      	ldr	r3, [pc, #148]	; (80e2228 <HAL_FLASH_Program+0xd4>)
 80e2194:	2200      	movs	r2, #0
 80e2196:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80e2198:	6979      	ldr	r1, [r7, #20]
 80e219a:	f24c 3050 	movw	r0, #50000	; 0xc350
 80e219e:	f000 f881 	bl	80e22a4 <FLASH_WaitForLastOperation>
 80e21a2:	4603      	mov	r3, r0
 80e21a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 80e21a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80e21ac:	2b00      	cmp	r3, #0
 80e21ae:	d002      	beq.n	80e21b6 <HAL_FLASH_Program+0x62>
 80e21b0:	e031      	b.n	80e2216 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 80e21b2:	2301      	movs	r3, #1
 80e21b4:	e034      	b.n	80e2220 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80e21b6:	4b1d      	ldr	r3, [pc, #116]	; (80e222c <HAL_FLASH_Program+0xd8>)
 80e21b8:	68db      	ldr	r3, [r3, #12]
 80e21ba:	4a1c      	ldr	r2, [pc, #112]	; (80e222c <HAL_FLASH_Program+0xd8>)
 80e21bc:	f043 0302 	orr.w	r3, r3, #2
 80e21c0:	60d3      	str	r3, [r2, #12]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80e21c2:	f3bf 8f6f 	isb	sy
}
 80e21c6:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80e21c8:	f3bf 8f4f 	dsb	sy
}
 80e21cc:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80e21ce:	69fb      	ldr	r3, [r7, #28]
 80e21d0:	681a      	ldr	r2, [r3, #0]
 80e21d2:	6a3b      	ldr	r3, [r7, #32]
 80e21d4:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80e21d6:	6a3b      	ldr	r3, [r7, #32]
 80e21d8:	3304      	adds	r3, #4
 80e21da:	623b      	str	r3, [r7, #32]
        src_addr++;
 80e21dc:	69fb      	ldr	r3, [r7, #28]
 80e21de:	3304      	adds	r3, #4
 80e21e0:	61fb      	str	r3, [r7, #28]
        row_index--;
 80e21e2:	7efb      	ldrb	r3, [r7, #27]
 80e21e4:	3b01      	subs	r3, #1
 80e21e6:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 80e21e8:	7efb      	ldrb	r3, [r7, #27]
 80e21ea:	2b00      	cmp	r3, #0
 80e21ec:	d1ef      	bne.n	80e21ce <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 80e21ee:	f3bf 8f6f 	isb	sy
}
 80e21f2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80e21f4:	f3bf 8f4f 	dsb	sy
}
 80e21f8:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80e21fa:	6979      	ldr	r1, [r7, #20]
 80e21fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80e2200:	f000 f850 	bl	80e22a4 <FLASH_WaitForLastOperation>
 80e2204:	4603      	mov	r3, r0
 80e2206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80e220a:	4b08      	ldr	r3, [pc, #32]	; (80e222c <HAL_FLASH_Program+0xd8>)
 80e220c:	68db      	ldr	r3, [r3, #12]
 80e220e:	4a07      	ldr	r2, [pc, #28]	; (80e222c <HAL_FLASH_Program+0xd8>)
 80e2210:	f023 0302 	bic.w	r3, r3, #2
 80e2214:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80e2216:	4b04      	ldr	r3, [pc, #16]	; (80e2228 <HAL_FLASH_Program+0xd4>)
 80e2218:	2200      	movs	r2, #0
 80e221a:	751a      	strb	r2, [r3, #20]

  return status;
 80e221c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80e2220:	4618      	mov	r0, r3
 80e2222:	3728      	adds	r7, #40	; 0x28
 80e2224:	46bd      	mov	sp, r7
 80e2226:	bd80      	pop	{r7, pc}
 80e2228:	24000130 	.word	0x24000130
 80e222c:	52002000 	.word	0x52002000

080e2230 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80e2230:	b480      	push	{r7}
 80e2232:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80e2234:	4b0c      	ldr	r3, [pc, #48]	; (80e2268 <HAL_FLASH_Unlock+0x38>)
 80e2236:	68db      	ldr	r3, [r3, #12]
 80e2238:	f003 0301 	and.w	r3, r3, #1
 80e223c:	2b00      	cmp	r3, #0
 80e223e:	d00d      	beq.n	80e225c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80e2240:	4b09      	ldr	r3, [pc, #36]	; (80e2268 <HAL_FLASH_Unlock+0x38>)
 80e2242:	4a0a      	ldr	r2, [pc, #40]	; (80e226c <HAL_FLASH_Unlock+0x3c>)
 80e2244:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80e2246:	4b08      	ldr	r3, [pc, #32]	; (80e2268 <HAL_FLASH_Unlock+0x38>)
 80e2248:	4a09      	ldr	r2, [pc, #36]	; (80e2270 <HAL_FLASH_Unlock+0x40>)
 80e224a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80e224c:	4b06      	ldr	r3, [pc, #24]	; (80e2268 <HAL_FLASH_Unlock+0x38>)
 80e224e:	68db      	ldr	r3, [r3, #12]
 80e2250:	f003 0301 	and.w	r3, r3, #1
 80e2254:	2b00      	cmp	r3, #0
 80e2256:	d001      	beq.n	80e225c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80e2258:	2301      	movs	r3, #1
 80e225a:	e000      	b.n	80e225e <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80e225c:	2300      	movs	r3, #0
}
 80e225e:	4618      	mov	r0, r3
 80e2260:	46bd      	mov	sp, r7
 80e2262:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2266:	4770      	bx	lr
 80e2268:	52002000 	.word	0x52002000
 80e226c:	45670123 	.word	0x45670123
 80e2270:	cdef89ab 	.word	0xcdef89ab

080e2274 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80e2274:	b480      	push	{r7}
 80e2276:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80e2278:	4b09      	ldr	r3, [pc, #36]	; (80e22a0 <HAL_FLASH_Lock+0x2c>)
 80e227a:	68db      	ldr	r3, [r3, #12]
 80e227c:	4a08      	ldr	r2, [pc, #32]	; (80e22a0 <HAL_FLASH_Lock+0x2c>)
 80e227e:	f043 0301 	orr.w	r3, r3, #1
 80e2282:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80e2284:	4b06      	ldr	r3, [pc, #24]	; (80e22a0 <HAL_FLASH_Lock+0x2c>)
 80e2286:	68db      	ldr	r3, [r3, #12]
 80e2288:	f003 0301 	and.w	r3, r3, #1
 80e228c:	2b00      	cmp	r3, #0
 80e228e:	d101      	bne.n	80e2294 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80e2290:	2301      	movs	r3, #1
 80e2292:	e000      	b.n	80e2296 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80e2294:	2300      	movs	r3, #0
}
 80e2296:	4618      	mov	r0, r3
 80e2298:	46bd      	mov	sp, r7
 80e229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e229e:	4770      	bx	lr
 80e22a0:	52002000 	.word	0x52002000

080e22a4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80e22a4:	b580      	push	{r7, lr}
 80e22a6:	b086      	sub	sp, #24
 80e22a8:	af00      	add	r7, sp, #0
 80e22aa:	6078      	str	r0, [r7, #4]
 80e22ac:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80e22ae:	2304      	movs	r3, #4
 80e22b0:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 80e22b2:	2300      	movs	r3, #0
 80e22b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80e22b6:	f7fe ffe9 	bl	80e128c <HAL_GetTick>
 80e22ba:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80e22bc:	e010      	b.n	80e22e0 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80e22be:	687b      	ldr	r3, [r7, #4]
 80e22c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80e22c4:	d00c      	beq.n	80e22e0 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80e22c6:	f7fe ffe1 	bl	80e128c <HAL_GetTick>
 80e22ca:	4602      	mov	r2, r0
 80e22cc:	68fb      	ldr	r3, [r7, #12]
 80e22ce:	1ad3      	subs	r3, r2, r3
 80e22d0:	687a      	ldr	r2, [r7, #4]
 80e22d2:	429a      	cmp	r2, r3
 80e22d4:	d302      	bcc.n	80e22dc <FLASH_WaitForLastOperation+0x38>
 80e22d6:	687b      	ldr	r3, [r7, #4]
 80e22d8:	2b00      	cmp	r3, #0
 80e22da:	d101      	bne.n	80e22e0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80e22dc:	2303      	movs	r3, #3
 80e22de:	e02d      	b.n	80e233c <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80e22e0:	4b18      	ldr	r3, [pc, #96]	; (80e2344 <FLASH_WaitForLastOperation+0xa0>)
 80e22e2:	691a      	ldr	r2, [r3, #16]
 80e22e4:	693b      	ldr	r3, [r7, #16]
 80e22e6:	4013      	ands	r3, r2
 80e22e8:	693a      	ldr	r2, [r7, #16]
 80e22ea:	429a      	cmp	r2, r3
 80e22ec:	d0e7      	beq.n	80e22be <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80e22ee:	683b      	ldr	r3, [r7, #0]
 80e22f0:	2b01      	cmp	r3, #1
 80e22f2:	d104      	bne.n	80e22fe <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80e22f4:	4b13      	ldr	r3, [pc, #76]	; (80e2344 <FLASH_WaitForLastOperation+0xa0>)
 80e22f6:	691a      	ldr	r2, [r3, #16]
 80e22f8:	4b13      	ldr	r3, [pc, #76]	; (80e2348 <FLASH_WaitForLastOperation+0xa4>)
 80e22fa:	4013      	ands	r3, r2
 80e22fc:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80e22fe:	697b      	ldr	r3, [r7, #20]
 80e2300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80e2304:	2b00      	cmp	r3, #0
 80e2306:	d00a      	beq.n	80e231e <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80e2308:	4b10      	ldr	r3, [pc, #64]	; (80e234c <FLASH_WaitForLastOperation+0xa8>)
 80e230a:	699a      	ldr	r2, [r3, #24]
 80e230c:	697b      	ldr	r3, [r7, #20]
 80e230e:	4313      	orrs	r3, r2
 80e2310:	4a0e      	ldr	r2, [pc, #56]	; (80e234c <FLASH_WaitForLastOperation+0xa8>)
 80e2312:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80e2314:	4a0b      	ldr	r2, [pc, #44]	; (80e2344 <FLASH_WaitForLastOperation+0xa0>)
 80e2316:	697b      	ldr	r3, [r7, #20]
 80e2318:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 80e231a:	2301      	movs	r3, #1
 80e231c:	e00e      	b.n	80e233c <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80e231e:	683b      	ldr	r3, [r7, #0]
 80e2320:	2b01      	cmp	r3, #1
 80e2322:	d10a      	bne.n	80e233a <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80e2324:	4b07      	ldr	r3, [pc, #28]	; (80e2344 <FLASH_WaitForLastOperation+0xa0>)
 80e2326:	691b      	ldr	r3, [r3, #16]
 80e2328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80e232c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e2330:	d103      	bne.n	80e233a <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80e2332:	4b04      	ldr	r3, [pc, #16]	; (80e2344 <FLASH_WaitForLastOperation+0xa0>)
 80e2334:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80e2338:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80e233a:	2300      	movs	r3, #0
}
 80e233c:	4618      	mov	r0, r3
 80e233e:	3718      	adds	r7, #24
 80e2340:	46bd      	mov	sp, r7
 80e2342:	bd80      	pop	{r7, pc}
 80e2344:	52002000 	.word	0x52002000
 80e2348:	17ee0000 	.word	0x17ee0000
 80e234c:	24000130 	.word	0x24000130

080e2350 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80e2350:	b580      	push	{r7, lr}
 80e2352:	b084      	sub	sp, #16
 80e2354:	af00      	add	r7, sp, #0
 80e2356:	6078      	str	r0, [r7, #4]
 80e2358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80e235a:	2300      	movs	r3, #0
 80e235c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80e235e:	4b3f      	ldr	r3, [pc, #252]	; (80e245c <HAL_FLASHEx_Erase+0x10c>)
 80e2360:	7d1b      	ldrb	r3, [r3, #20]
 80e2362:	2b01      	cmp	r3, #1
 80e2364:	d101      	bne.n	80e236a <HAL_FLASHEx_Erase+0x1a>
 80e2366:	2302      	movs	r3, #2
 80e2368:	e074      	b.n	80e2454 <HAL_FLASHEx_Erase+0x104>
 80e236a:	4b3c      	ldr	r3, [pc, #240]	; (80e245c <HAL_FLASHEx_Erase+0x10c>)
 80e236c:	2201      	movs	r2, #1
 80e236e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80e2370:	4b3a      	ldr	r3, [pc, #232]	; (80e245c <HAL_FLASHEx_Erase+0x10c>)
 80e2372:	2200      	movs	r2, #0
 80e2374:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80e2376:	687b      	ldr	r3, [r7, #4]
 80e2378:	685b      	ldr	r3, [r3, #4]
 80e237a:	f003 0301 	and.w	r3, r3, #1
 80e237e:	2b00      	cmp	r3, #0
 80e2380:	d009      	beq.n	80e2396 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80e2382:	2101      	movs	r1, #1
 80e2384:	f24c 3050 	movw	r0, #50000	; 0xc350
 80e2388:	f7ff ff8c 	bl	80e22a4 <FLASH_WaitForLastOperation>
 80e238c:	4603      	mov	r3, r0
 80e238e:	2b00      	cmp	r3, #0
 80e2390:	d001      	beq.n	80e2396 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 80e2392:	2301      	movs	r3, #1
 80e2394:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 80e2396:	7bfb      	ldrb	r3, [r7, #15]
 80e2398:	2b00      	cmp	r3, #0
 80e239a:	d157      	bne.n	80e244c <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80e239c:	687b      	ldr	r3, [r7, #4]
 80e239e:	681b      	ldr	r3, [r3, #0]
 80e23a0:	2b01      	cmp	r3, #1
 80e23a2:	d11e      	bne.n	80e23e2 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80e23a4:	687b      	ldr	r3, [r7, #4]
 80e23a6:	691a      	ldr	r2, [r3, #16]
 80e23a8:	687b      	ldr	r3, [r7, #4]
 80e23aa:	685b      	ldr	r3, [r3, #4]
 80e23ac:	4619      	mov	r1, r3
 80e23ae:	4610      	mov	r0, r2
 80e23b0:	f000 f85a 	bl	80e2468 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80e23b4:	687b      	ldr	r3, [r7, #4]
 80e23b6:	685b      	ldr	r3, [r3, #4]
 80e23b8:	f003 0301 	and.w	r3, r3, #1
 80e23bc:	2b00      	cmp	r3, #0
 80e23be:	d045      	beq.n	80e244c <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80e23c0:	2101      	movs	r1, #1
 80e23c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80e23c6:	f7ff ff6d 	bl	80e22a4 <FLASH_WaitForLastOperation>
 80e23ca:	4603      	mov	r3, r0
 80e23cc:	2b00      	cmp	r3, #0
 80e23ce:	d001      	beq.n	80e23d4 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 80e23d0:	2301      	movs	r3, #1
 80e23d2:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80e23d4:	4b22      	ldr	r3, [pc, #136]	; (80e2460 <HAL_FLASHEx_Erase+0x110>)
 80e23d6:	68db      	ldr	r3, [r3, #12]
 80e23d8:	4a21      	ldr	r2, [pc, #132]	; (80e2460 <HAL_FLASHEx_Erase+0x110>)
 80e23da:	f023 0308 	bic.w	r3, r3, #8
 80e23de:	60d3      	str	r3, [r2, #12]
 80e23e0:	e034      	b.n	80e244c <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80e23e2:	683b      	ldr	r3, [r7, #0]
 80e23e4:	f04f 32ff 	mov.w	r2, #4294967295
 80e23e8:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80e23ea:	687b      	ldr	r3, [r7, #4]
 80e23ec:	689b      	ldr	r3, [r3, #8]
 80e23ee:	60bb      	str	r3, [r7, #8]
 80e23f0:	e024      	b.n	80e243c <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80e23f2:	687b      	ldr	r3, [r7, #4]
 80e23f4:	6859      	ldr	r1, [r3, #4]
 80e23f6:	687b      	ldr	r3, [r7, #4]
 80e23f8:	691b      	ldr	r3, [r3, #16]
 80e23fa:	461a      	mov	r2, r3
 80e23fc:	68b8      	ldr	r0, [r7, #8]
 80e23fe:	f000 f857 	bl	80e24b0 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80e2402:	687b      	ldr	r3, [r7, #4]
 80e2404:	685b      	ldr	r3, [r3, #4]
 80e2406:	f003 0301 	and.w	r3, r3, #1
 80e240a:	2b00      	cmp	r3, #0
 80e240c:	d00c      	beq.n	80e2428 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80e240e:	2101      	movs	r1, #1
 80e2410:	f24c 3050 	movw	r0, #50000	; 0xc350
 80e2414:	f7ff ff46 	bl	80e22a4 <FLASH_WaitForLastOperation>
 80e2418:	4603      	mov	r3, r0
 80e241a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80e241c:	4b10      	ldr	r3, [pc, #64]	; (80e2460 <HAL_FLASHEx_Erase+0x110>)
 80e241e:	68da      	ldr	r2, [r3, #12]
 80e2420:	490f      	ldr	r1, [pc, #60]	; (80e2460 <HAL_FLASHEx_Erase+0x110>)
 80e2422:	4b10      	ldr	r3, [pc, #64]	; (80e2464 <HAL_FLASHEx_Erase+0x114>)
 80e2424:	4013      	ands	r3, r2
 80e2426:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80e2428:	7bfb      	ldrb	r3, [r7, #15]
 80e242a:	2b00      	cmp	r3, #0
 80e242c:	d003      	beq.n	80e2436 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80e242e:	683b      	ldr	r3, [r7, #0]
 80e2430:	68ba      	ldr	r2, [r7, #8]
 80e2432:	601a      	str	r2, [r3, #0]
          break;
 80e2434:	e00a      	b.n	80e244c <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80e2436:	68bb      	ldr	r3, [r7, #8]
 80e2438:	3301      	adds	r3, #1
 80e243a:	60bb      	str	r3, [r7, #8]
 80e243c:	687b      	ldr	r3, [r7, #4]
 80e243e:	68da      	ldr	r2, [r3, #12]
 80e2440:	687b      	ldr	r3, [r7, #4]
 80e2442:	689b      	ldr	r3, [r3, #8]
 80e2444:	4413      	add	r3, r2
 80e2446:	68ba      	ldr	r2, [r7, #8]
 80e2448:	429a      	cmp	r2, r3
 80e244a:	d3d2      	bcc.n	80e23f2 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80e244c:	4b03      	ldr	r3, [pc, #12]	; (80e245c <HAL_FLASHEx_Erase+0x10c>)
 80e244e:	2200      	movs	r2, #0
 80e2450:	751a      	strb	r2, [r3, #20]

  return status;
 80e2452:	7bfb      	ldrb	r3, [r7, #15]
}
 80e2454:	4618      	mov	r0, r3
 80e2456:	3710      	adds	r7, #16
 80e2458:	46bd      	mov	sp, r7
 80e245a:	bd80      	pop	{r7, pc}
 80e245c:	24000130 	.word	0x24000130
 80e2460:	52002000 	.word	0x52002000
 80e2464:	fffff8fb 	.word	0xfffff8fb

080e2468 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80e2468:	b480      	push	{r7}
 80e246a:	b083      	sub	sp, #12
 80e246c:	af00      	add	r7, sp, #0
 80e246e:	6078      	str	r0, [r7, #4]
 80e2470:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80e2472:	683b      	ldr	r3, [r7, #0]
 80e2474:	f003 0301 	and.w	r3, r3, #1
 80e2478:	2b00      	cmp	r3, #0
 80e247a:	d011      	beq.n	80e24a0 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80e247c:	4b0b      	ldr	r3, [pc, #44]	; (80e24ac <FLASH_MassErase+0x44>)
 80e247e:	68db      	ldr	r3, [r3, #12]
 80e2480:	4a0a      	ldr	r2, [pc, #40]	; (80e24ac <FLASH_MassErase+0x44>)
 80e2482:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80e2486:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 80e2488:	4b08      	ldr	r3, [pc, #32]	; (80e24ac <FLASH_MassErase+0x44>)
 80e248a:	68da      	ldr	r2, [r3, #12]
 80e248c:	4907      	ldr	r1, [pc, #28]	; (80e24ac <FLASH_MassErase+0x44>)
 80e248e:	687b      	ldr	r3, [r7, #4]
 80e2490:	4313      	orrs	r3, r2
 80e2492:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 80e2494:	4b05      	ldr	r3, [pc, #20]	; (80e24ac <FLASH_MassErase+0x44>)
 80e2496:	68db      	ldr	r3, [r3, #12]
 80e2498:	4a04      	ldr	r2, [pc, #16]	; (80e24ac <FLASH_MassErase+0x44>)
 80e249a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80e249e:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80e24a0:	bf00      	nop
 80e24a2:	370c      	adds	r7, #12
 80e24a4:	46bd      	mov	sp, r7
 80e24a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e24aa:	4770      	bx	lr
 80e24ac:	52002000 	.word	0x52002000

080e24b0 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80e24b0:	b480      	push	{r7}
 80e24b2:	b085      	sub	sp, #20
 80e24b4:	af00      	add	r7, sp, #0
 80e24b6:	60f8      	str	r0, [r7, #12]
 80e24b8:	60b9      	str	r1, [r7, #8]
 80e24ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80e24bc:	68bb      	ldr	r3, [r7, #8]
 80e24be:	f003 0301 	and.w	r3, r3, #1
 80e24c2:	2b00      	cmp	r3, #0
 80e24c4:	d010      	beq.n	80e24e8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80e24c6:	4b0b      	ldr	r3, [pc, #44]	; (80e24f4 <FLASH_Erase_Sector+0x44>)
 80e24c8:	68db      	ldr	r3, [r3, #12]
 80e24ca:	4a0a      	ldr	r2, [pc, #40]	; (80e24f4 <FLASH_Erase_Sector+0x44>)
 80e24cc:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80e24d0:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80e24d2:	4b08      	ldr	r3, [pc, #32]	; (80e24f4 <FLASH_Erase_Sector+0x44>)
 80e24d4:	68da      	ldr	r2, [r3, #12]
 80e24d6:	68fb      	ldr	r3, [r7, #12]
 80e24d8:	0219      	lsls	r1, r3, #8
 80e24da:	687b      	ldr	r3, [r7, #4]
 80e24dc:	430b      	orrs	r3, r1
 80e24de:	4313      	orrs	r3, r2
 80e24e0:	4a04      	ldr	r2, [pc, #16]	; (80e24f4 <FLASH_Erase_Sector+0x44>)
 80e24e2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80e24e6:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80e24e8:	bf00      	nop
 80e24ea:	3714      	adds	r7, #20
 80e24ec:	46bd      	mov	sp, r7
 80e24ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e24f2:	4770      	bx	lr
 80e24f4:	52002000 	.word	0x52002000

080e24f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80e24f8:	b480      	push	{r7}
 80e24fa:	b089      	sub	sp, #36	; 0x24
 80e24fc:	af00      	add	r7, sp, #0
 80e24fe:	6078      	str	r0, [r7, #4]
 80e2500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80e2502:	2300      	movs	r3, #0
 80e2504:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80e2506:	4b86      	ldr	r3, [pc, #536]	; (80e2720 <HAL_GPIO_Init+0x228>)
 80e2508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80e250a:	e18c      	b.n	80e2826 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80e250c:	683b      	ldr	r3, [r7, #0]
 80e250e:	681a      	ldr	r2, [r3, #0]
 80e2510:	2101      	movs	r1, #1
 80e2512:	69fb      	ldr	r3, [r7, #28]
 80e2514:	fa01 f303 	lsl.w	r3, r1, r3
 80e2518:	4013      	ands	r3, r2
 80e251a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80e251c:	693b      	ldr	r3, [r7, #16]
 80e251e:	2b00      	cmp	r3, #0
 80e2520:	f000 817e 	beq.w	80e2820 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80e2524:	683b      	ldr	r3, [r7, #0]
 80e2526:	685b      	ldr	r3, [r3, #4]
 80e2528:	f003 0303 	and.w	r3, r3, #3
 80e252c:	2b01      	cmp	r3, #1
 80e252e:	d005      	beq.n	80e253c <HAL_GPIO_Init+0x44>
 80e2530:	683b      	ldr	r3, [r7, #0]
 80e2532:	685b      	ldr	r3, [r3, #4]
 80e2534:	f003 0303 	and.w	r3, r3, #3
 80e2538:	2b02      	cmp	r3, #2
 80e253a:	d130      	bne.n	80e259e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80e253c:	687b      	ldr	r3, [r7, #4]
 80e253e:	689b      	ldr	r3, [r3, #8]
 80e2540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80e2542:	69fb      	ldr	r3, [r7, #28]
 80e2544:	005b      	lsls	r3, r3, #1
 80e2546:	2203      	movs	r2, #3
 80e2548:	fa02 f303 	lsl.w	r3, r2, r3
 80e254c:	43db      	mvns	r3, r3
 80e254e:	69ba      	ldr	r2, [r7, #24]
 80e2550:	4013      	ands	r3, r2
 80e2552:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80e2554:	683b      	ldr	r3, [r7, #0]
 80e2556:	68da      	ldr	r2, [r3, #12]
 80e2558:	69fb      	ldr	r3, [r7, #28]
 80e255a:	005b      	lsls	r3, r3, #1
 80e255c:	fa02 f303 	lsl.w	r3, r2, r3
 80e2560:	69ba      	ldr	r2, [r7, #24]
 80e2562:	4313      	orrs	r3, r2
 80e2564:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80e2566:	687b      	ldr	r3, [r7, #4]
 80e2568:	69ba      	ldr	r2, [r7, #24]
 80e256a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80e256c:	687b      	ldr	r3, [r7, #4]
 80e256e:	685b      	ldr	r3, [r3, #4]
 80e2570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80e2572:	2201      	movs	r2, #1
 80e2574:	69fb      	ldr	r3, [r7, #28]
 80e2576:	fa02 f303 	lsl.w	r3, r2, r3
 80e257a:	43db      	mvns	r3, r3
 80e257c:	69ba      	ldr	r2, [r7, #24]
 80e257e:	4013      	ands	r3, r2
 80e2580:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80e2582:	683b      	ldr	r3, [r7, #0]
 80e2584:	685b      	ldr	r3, [r3, #4]
 80e2586:	091b      	lsrs	r3, r3, #4
 80e2588:	f003 0201 	and.w	r2, r3, #1
 80e258c:	69fb      	ldr	r3, [r7, #28]
 80e258e:	fa02 f303 	lsl.w	r3, r2, r3
 80e2592:	69ba      	ldr	r2, [r7, #24]
 80e2594:	4313      	orrs	r3, r2
 80e2596:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80e2598:	687b      	ldr	r3, [r7, #4]
 80e259a:	69ba      	ldr	r2, [r7, #24]
 80e259c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80e259e:	683b      	ldr	r3, [r7, #0]
 80e25a0:	685b      	ldr	r3, [r3, #4]
 80e25a2:	f003 0303 	and.w	r3, r3, #3
 80e25a6:	2b03      	cmp	r3, #3
 80e25a8:	d017      	beq.n	80e25da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80e25aa:	687b      	ldr	r3, [r7, #4]
 80e25ac:	68db      	ldr	r3, [r3, #12]
 80e25ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80e25b0:	69fb      	ldr	r3, [r7, #28]
 80e25b2:	005b      	lsls	r3, r3, #1
 80e25b4:	2203      	movs	r2, #3
 80e25b6:	fa02 f303 	lsl.w	r3, r2, r3
 80e25ba:	43db      	mvns	r3, r3
 80e25bc:	69ba      	ldr	r2, [r7, #24]
 80e25be:	4013      	ands	r3, r2
 80e25c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80e25c2:	683b      	ldr	r3, [r7, #0]
 80e25c4:	689a      	ldr	r2, [r3, #8]
 80e25c6:	69fb      	ldr	r3, [r7, #28]
 80e25c8:	005b      	lsls	r3, r3, #1
 80e25ca:	fa02 f303 	lsl.w	r3, r2, r3
 80e25ce:	69ba      	ldr	r2, [r7, #24]
 80e25d0:	4313      	orrs	r3, r2
 80e25d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80e25d4:	687b      	ldr	r3, [r7, #4]
 80e25d6:	69ba      	ldr	r2, [r7, #24]
 80e25d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80e25da:	683b      	ldr	r3, [r7, #0]
 80e25dc:	685b      	ldr	r3, [r3, #4]
 80e25de:	f003 0303 	and.w	r3, r3, #3
 80e25e2:	2b02      	cmp	r3, #2
 80e25e4:	d123      	bne.n	80e262e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80e25e6:	69fb      	ldr	r3, [r7, #28]
 80e25e8:	08da      	lsrs	r2, r3, #3
 80e25ea:	687b      	ldr	r3, [r7, #4]
 80e25ec:	3208      	adds	r2, #8
 80e25ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80e25f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80e25f4:	69fb      	ldr	r3, [r7, #28]
 80e25f6:	f003 0307 	and.w	r3, r3, #7
 80e25fa:	009b      	lsls	r3, r3, #2
 80e25fc:	220f      	movs	r2, #15
 80e25fe:	fa02 f303 	lsl.w	r3, r2, r3
 80e2602:	43db      	mvns	r3, r3
 80e2604:	69ba      	ldr	r2, [r7, #24]
 80e2606:	4013      	ands	r3, r2
 80e2608:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80e260a:	683b      	ldr	r3, [r7, #0]
 80e260c:	691a      	ldr	r2, [r3, #16]
 80e260e:	69fb      	ldr	r3, [r7, #28]
 80e2610:	f003 0307 	and.w	r3, r3, #7
 80e2614:	009b      	lsls	r3, r3, #2
 80e2616:	fa02 f303 	lsl.w	r3, r2, r3
 80e261a:	69ba      	ldr	r2, [r7, #24]
 80e261c:	4313      	orrs	r3, r2
 80e261e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80e2620:	69fb      	ldr	r3, [r7, #28]
 80e2622:	08da      	lsrs	r2, r3, #3
 80e2624:	687b      	ldr	r3, [r7, #4]
 80e2626:	3208      	adds	r2, #8
 80e2628:	69b9      	ldr	r1, [r7, #24]
 80e262a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80e262e:	687b      	ldr	r3, [r7, #4]
 80e2630:	681b      	ldr	r3, [r3, #0]
 80e2632:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80e2634:	69fb      	ldr	r3, [r7, #28]
 80e2636:	005b      	lsls	r3, r3, #1
 80e2638:	2203      	movs	r2, #3
 80e263a:	fa02 f303 	lsl.w	r3, r2, r3
 80e263e:	43db      	mvns	r3, r3
 80e2640:	69ba      	ldr	r2, [r7, #24]
 80e2642:	4013      	ands	r3, r2
 80e2644:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80e2646:	683b      	ldr	r3, [r7, #0]
 80e2648:	685b      	ldr	r3, [r3, #4]
 80e264a:	f003 0203 	and.w	r2, r3, #3
 80e264e:	69fb      	ldr	r3, [r7, #28]
 80e2650:	005b      	lsls	r3, r3, #1
 80e2652:	fa02 f303 	lsl.w	r3, r2, r3
 80e2656:	69ba      	ldr	r2, [r7, #24]
 80e2658:	4313      	orrs	r3, r2
 80e265a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80e265c:	687b      	ldr	r3, [r7, #4]
 80e265e:	69ba      	ldr	r2, [r7, #24]
 80e2660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80e2662:	683b      	ldr	r3, [r7, #0]
 80e2664:	685b      	ldr	r3, [r3, #4]
 80e2666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80e266a:	2b00      	cmp	r3, #0
 80e266c:	f000 80d8 	beq.w	80e2820 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80e2670:	4b2c      	ldr	r3, [pc, #176]	; (80e2724 <HAL_GPIO_Init+0x22c>)
 80e2672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e2676:	4a2b      	ldr	r2, [pc, #172]	; (80e2724 <HAL_GPIO_Init+0x22c>)
 80e2678:	f043 0302 	orr.w	r3, r3, #2
 80e267c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80e2680:	4b28      	ldr	r3, [pc, #160]	; (80e2724 <HAL_GPIO_Init+0x22c>)
 80e2682:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e2686:	f003 0302 	and.w	r3, r3, #2
 80e268a:	60fb      	str	r3, [r7, #12]
 80e268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80e268e:	4a26      	ldr	r2, [pc, #152]	; (80e2728 <HAL_GPIO_Init+0x230>)
 80e2690:	69fb      	ldr	r3, [r7, #28]
 80e2692:	089b      	lsrs	r3, r3, #2
 80e2694:	3302      	adds	r3, #2
 80e2696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80e269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80e269c:	69fb      	ldr	r3, [r7, #28]
 80e269e:	f003 0303 	and.w	r3, r3, #3
 80e26a2:	009b      	lsls	r3, r3, #2
 80e26a4:	220f      	movs	r2, #15
 80e26a6:	fa02 f303 	lsl.w	r3, r2, r3
 80e26aa:	43db      	mvns	r3, r3
 80e26ac:	69ba      	ldr	r2, [r7, #24]
 80e26ae:	4013      	ands	r3, r2
 80e26b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80e26b2:	687b      	ldr	r3, [r7, #4]
 80e26b4:	4a1d      	ldr	r2, [pc, #116]	; (80e272c <HAL_GPIO_Init+0x234>)
 80e26b6:	4293      	cmp	r3, r2
 80e26b8:	d04a      	beq.n	80e2750 <HAL_GPIO_Init+0x258>
 80e26ba:	687b      	ldr	r3, [r7, #4]
 80e26bc:	4a1c      	ldr	r2, [pc, #112]	; (80e2730 <HAL_GPIO_Init+0x238>)
 80e26be:	4293      	cmp	r3, r2
 80e26c0:	d02b      	beq.n	80e271a <HAL_GPIO_Init+0x222>
 80e26c2:	687b      	ldr	r3, [r7, #4]
 80e26c4:	4a1b      	ldr	r2, [pc, #108]	; (80e2734 <HAL_GPIO_Init+0x23c>)
 80e26c6:	4293      	cmp	r3, r2
 80e26c8:	d025      	beq.n	80e2716 <HAL_GPIO_Init+0x21e>
 80e26ca:	687b      	ldr	r3, [r7, #4]
 80e26cc:	4a1a      	ldr	r2, [pc, #104]	; (80e2738 <HAL_GPIO_Init+0x240>)
 80e26ce:	4293      	cmp	r3, r2
 80e26d0:	d01f      	beq.n	80e2712 <HAL_GPIO_Init+0x21a>
 80e26d2:	687b      	ldr	r3, [r7, #4]
 80e26d4:	4a19      	ldr	r2, [pc, #100]	; (80e273c <HAL_GPIO_Init+0x244>)
 80e26d6:	4293      	cmp	r3, r2
 80e26d8:	d019      	beq.n	80e270e <HAL_GPIO_Init+0x216>
 80e26da:	687b      	ldr	r3, [r7, #4]
 80e26dc:	4a18      	ldr	r2, [pc, #96]	; (80e2740 <HAL_GPIO_Init+0x248>)
 80e26de:	4293      	cmp	r3, r2
 80e26e0:	d013      	beq.n	80e270a <HAL_GPIO_Init+0x212>
 80e26e2:	687b      	ldr	r3, [r7, #4]
 80e26e4:	4a17      	ldr	r2, [pc, #92]	; (80e2744 <HAL_GPIO_Init+0x24c>)
 80e26e6:	4293      	cmp	r3, r2
 80e26e8:	d00d      	beq.n	80e2706 <HAL_GPIO_Init+0x20e>
 80e26ea:	687b      	ldr	r3, [r7, #4]
 80e26ec:	4a16      	ldr	r2, [pc, #88]	; (80e2748 <HAL_GPIO_Init+0x250>)
 80e26ee:	4293      	cmp	r3, r2
 80e26f0:	d007      	beq.n	80e2702 <HAL_GPIO_Init+0x20a>
 80e26f2:	687b      	ldr	r3, [r7, #4]
 80e26f4:	4a15      	ldr	r2, [pc, #84]	; (80e274c <HAL_GPIO_Init+0x254>)
 80e26f6:	4293      	cmp	r3, r2
 80e26f8:	d101      	bne.n	80e26fe <HAL_GPIO_Init+0x206>
 80e26fa:	2309      	movs	r3, #9
 80e26fc:	e029      	b.n	80e2752 <HAL_GPIO_Init+0x25a>
 80e26fe:	230a      	movs	r3, #10
 80e2700:	e027      	b.n	80e2752 <HAL_GPIO_Init+0x25a>
 80e2702:	2307      	movs	r3, #7
 80e2704:	e025      	b.n	80e2752 <HAL_GPIO_Init+0x25a>
 80e2706:	2306      	movs	r3, #6
 80e2708:	e023      	b.n	80e2752 <HAL_GPIO_Init+0x25a>
 80e270a:	2305      	movs	r3, #5
 80e270c:	e021      	b.n	80e2752 <HAL_GPIO_Init+0x25a>
 80e270e:	2304      	movs	r3, #4
 80e2710:	e01f      	b.n	80e2752 <HAL_GPIO_Init+0x25a>
 80e2712:	2303      	movs	r3, #3
 80e2714:	e01d      	b.n	80e2752 <HAL_GPIO_Init+0x25a>
 80e2716:	2302      	movs	r3, #2
 80e2718:	e01b      	b.n	80e2752 <HAL_GPIO_Init+0x25a>
 80e271a:	2301      	movs	r3, #1
 80e271c:	e019      	b.n	80e2752 <HAL_GPIO_Init+0x25a>
 80e271e:	bf00      	nop
 80e2720:	58000080 	.word	0x58000080
 80e2724:	58024400 	.word	0x58024400
 80e2728:	58000400 	.word	0x58000400
 80e272c:	58020000 	.word	0x58020000
 80e2730:	58020400 	.word	0x58020400
 80e2734:	58020800 	.word	0x58020800
 80e2738:	58020c00 	.word	0x58020c00
 80e273c:	58021000 	.word	0x58021000
 80e2740:	58021400 	.word	0x58021400
 80e2744:	58021800 	.word	0x58021800
 80e2748:	58021c00 	.word	0x58021c00
 80e274c:	58022400 	.word	0x58022400
 80e2750:	2300      	movs	r3, #0
 80e2752:	69fa      	ldr	r2, [r7, #28]
 80e2754:	f002 0203 	and.w	r2, r2, #3
 80e2758:	0092      	lsls	r2, r2, #2
 80e275a:	4093      	lsls	r3, r2
 80e275c:	69ba      	ldr	r2, [r7, #24]
 80e275e:	4313      	orrs	r3, r2
 80e2760:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80e2762:	4938      	ldr	r1, [pc, #224]	; (80e2844 <HAL_GPIO_Init+0x34c>)
 80e2764:	69fb      	ldr	r3, [r7, #28]
 80e2766:	089b      	lsrs	r3, r3, #2
 80e2768:	3302      	adds	r3, #2
 80e276a:	69ba      	ldr	r2, [r7, #24]
 80e276c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80e2770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80e2774:	681b      	ldr	r3, [r3, #0]
 80e2776:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e2778:	693b      	ldr	r3, [r7, #16]
 80e277a:	43db      	mvns	r3, r3
 80e277c:	69ba      	ldr	r2, [r7, #24]
 80e277e:	4013      	ands	r3, r2
 80e2780:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80e2782:	683b      	ldr	r3, [r7, #0]
 80e2784:	685b      	ldr	r3, [r3, #4]
 80e2786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80e278a:	2b00      	cmp	r3, #0
 80e278c:	d003      	beq.n	80e2796 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80e278e:	69ba      	ldr	r2, [r7, #24]
 80e2790:	693b      	ldr	r3, [r7, #16]
 80e2792:	4313      	orrs	r3, r2
 80e2794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80e2796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80e279a:	69bb      	ldr	r3, [r7, #24]
 80e279c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80e279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80e27a2:	685b      	ldr	r3, [r3, #4]
 80e27a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e27a6:	693b      	ldr	r3, [r7, #16]
 80e27a8:	43db      	mvns	r3, r3
 80e27aa:	69ba      	ldr	r2, [r7, #24]
 80e27ac:	4013      	ands	r3, r2
 80e27ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80e27b0:	683b      	ldr	r3, [r7, #0]
 80e27b2:	685b      	ldr	r3, [r3, #4]
 80e27b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e27b8:	2b00      	cmp	r3, #0
 80e27ba:	d003      	beq.n	80e27c4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80e27bc:	69ba      	ldr	r2, [r7, #24]
 80e27be:	693b      	ldr	r3, [r7, #16]
 80e27c0:	4313      	orrs	r3, r2
 80e27c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80e27c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80e27c8:	69bb      	ldr	r3, [r7, #24]
 80e27ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80e27cc:	697b      	ldr	r3, [r7, #20]
 80e27ce:	685b      	ldr	r3, [r3, #4]
 80e27d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e27d2:	693b      	ldr	r3, [r7, #16]
 80e27d4:	43db      	mvns	r3, r3
 80e27d6:	69ba      	ldr	r2, [r7, #24]
 80e27d8:	4013      	ands	r3, r2
 80e27da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80e27dc:	683b      	ldr	r3, [r7, #0]
 80e27de:	685b      	ldr	r3, [r3, #4]
 80e27e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e27e4:	2b00      	cmp	r3, #0
 80e27e6:	d003      	beq.n	80e27f0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80e27e8:	69ba      	ldr	r2, [r7, #24]
 80e27ea:	693b      	ldr	r3, [r7, #16]
 80e27ec:	4313      	orrs	r3, r2
 80e27ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80e27f0:	697b      	ldr	r3, [r7, #20]
 80e27f2:	69ba      	ldr	r2, [r7, #24]
 80e27f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80e27f6:	697b      	ldr	r3, [r7, #20]
 80e27f8:	681b      	ldr	r3, [r3, #0]
 80e27fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e27fc:	693b      	ldr	r3, [r7, #16]
 80e27fe:	43db      	mvns	r3, r3
 80e2800:	69ba      	ldr	r2, [r7, #24]
 80e2802:	4013      	ands	r3, r2
 80e2804:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80e2806:	683b      	ldr	r3, [r7, #0]
 80e2808:	685b      	ldr	r3, [r3, #4]
 80e280a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80e280e:	2b00      	cmp	r3, #0
 80e2810:	d003      	beq.n	80e281a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80e2812:	69ba      	ldr	r2, [r7, #24]
 80e2814:	693b      	ldr	r3, [r7, #16]
 80e2816:	4313      	orrs	r3, r2
 80e2818:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80e281a:	697b      	ldr	r3, [r7, #20]
 80e281c:	69ba      	ldr	r2, [r7, #24]
 80e281e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80e2820:	69fb      	ldr	r3, [r7, #28]
 80e2822:	3301      	adds	r3, #1
 80e2824:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80e2826:	683b      	ldr	r3, [r7, #0]
 80e2828:	681a      	ldr	r2, [r3, #0]
 80e282a:	69fb      	ldr	r3, [r7, #28]
 80e282c:	fa22 f303 	lsr.w	r3, r2, r3
 80e2830:	2b00      	cmp	r3, #0
 80e2832:	f47f ae6b 	bne.w	80e250c <HAL_GPIO_Init+0x14>
  }
}
 80e2836:	bf00      	nop
 80e2838:	bf00      	nop
 80e283a:	3724      	adds	r7, #36	; 0x24
 80e283c:	46bd      	mov	sp, r7
 80e283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2842:	4770      	bx	lr
 80e2844:	58000400 	.word	0x58000400

080e2848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80e2848:	b480      	push	{r7}
 80e284a:	b083      	sub	sp, #12
 80e284c:	af00      	add	r7, sp, #0
 80e284e:	6078      	str	r0, [r7, #4]
 80e2850:	460b      	mov	r3, r1
 80e2852:	807b      	strh	r3, [r7, #2]
 80e2854:	4613      	mov	r3, r2
 80e2856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80e2858:	787b      	ldrb	r3, [r7, #1]
 80e285a:	2b00      	cmp	r3, #0
 80e285c:	d003      	beq.n	80e2866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80e285e:	887a      	ldrh	r2, [r7, #2]
 80e2860:	687b      	ldr	r3, [r7, #4]
 80e2862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80e2864:	e003      	b.n	80e286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80e2866:	887b      	ldrh	r3, [r7, #2]
 80e2868:	041a      	lsls	r2, r3, #16
 80e286a:	687b      	ldr	r3, [r7, #4]
 80e286c:	619a      	str	r2, [r3, #24]
}
 80e286e:	bf00      	nop
 80e2870:	370c      	adds	r7, #12
 80e2872:	46bd      	mov	sp, r7
 80e2874:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2878:	4770      	bx	lr

080e287a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80e287a:	b480      	push	{r7}
 80e287c:	b085      	sub	sp, #20
 80e287e:	af00      	add	r7, sp, #0
 80e2880:	6078      	str	r0, [r7, #4]
 80e2882:	460b      	mov	r3, r1
 80e2884:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80e2886:	687b      	ldr	r3, [r7, #4]
 80e2888:	695b      	ldr	r3, [r3, #20]
 80e288a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80e288c:	887a      	ldrh	r2, [r7, #2]
 80e288e:	68fb      	ldr	r3, [r7, #12]
 80e2890:	4013      	ands	r3, r2
 80e2892:	041a      	lsls	r2, r3, #16
 80e2894:	68fb      	ldr	r3, [r7, #12]
 80e2896:	43d9      	mvns	r1, r3
 80e2898:	887b      	ldrh	r3, [r7, #2]
 80e289a:	400b      	ands	r3, r1
 80e289c:	431a      	orrs	r2, r3
 80e289e:	687b      	ldr	r3, [r7, #4]
 80e28a0:	619a      	str	r2, [r3, #24]
}
 80e28a2:	bf00      	nop
 80e28a4:	3714      	adds	r7, #20
 80e28a6:	46bd      	mov	sp, r7
 80e28a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e28ac:	4770      	bx	lr
	...

080e28b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80e28b0:	b580      	push	{r7, lr}
 80e28b2:	b084      	sub	sp, #16
 80e28b4:	af00      	add	r7, sp, #0
 80e28b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80e28b8:	4b19      	ldr	r3, [pc, #100]	; (80e2920 <HAL_PWREx_ConfigSupply+0x70>)
 80e28ba:	68db      	ldr	r3, [r3, #12]
 80e28bc:	f003 0304 	and.w	r3, r3, #4
 80e28c0:	2b04      	cmp	r3, #4
 80e28c2:	d00a      	beq.n	80e28da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80e28c4:	4b16      	ldr	r3, [pc, #88]	; (80e2920 <HAL_PWREx_ConfigSupply+0x70>)
 80e28c6:	68db      	ldr	r3, [r3, #12]
 80e28c8:	f003 0307 	and.w	r3, r3, #7
 80e28cc:	687a      	ldr	r2, [r7, #4]
 80e28ce:	429a      	cmp	r2, r3
 80e28d0:	d001      	beq.n	80e28d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80e28d2:	2301      	movs	r3, #1
 80e28d4:	e01f      	b.n	80e2916 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80e28d6:	2300      	movs	r3, #0
 80e28d8:	e01d      	b.n	80e2916 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80e28da:	4b11      	ldr	r3, [pc, #68]	; (80e2920 <HAL_PWREx_ConfigSupply+0x70>)
 80e28dc:	68db      	ldr	r3, [r3, #12]
 80e28de:	f023 0207 	bic.w	r2, r3, #7
 80e28e2:	490f      	ldr	r1, [pc, #60]	; (80e2920 <HAL_PWREx_ConfigSupply+0x70>)
 80e28e4:	687b      	ldr	r3, [r7, #4]
 80e28e6:	4313      	orrs	r3, r2
 80e28e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80e28ea:	f7fe fccf 	bl	80e128c <HAL_GetTick>
 80e28ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80e28f0:	e009      	b.n	80e2906 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80e28f2:	f7fe fccb 	bl	80e128c <HAL_GetTick>
 80e28f6:	4602      	mov	r2, r0
 80e28f8:	68fb      	ldr	r3, [r7, #12]
 80e28fa:	1ad3      	subs	r3, r2, r3
 80e28fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80e2900:	d901      	bls.n	80e2906 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80e2902:	2301      	movs	r3, #1
 80e2904:	e007      	b.n	80e2916 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80e2906:	4b06      	ldr	r3, [pc, #24]	; (80e2920 <HAL_PWREx_ConfigSupply+0x70>)
 80e2908:	685b      	ldr	r3, [r3, #4]
 80e290a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e290e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e2912:	d1ee      	bne.n	80e28f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80e2914:	2300      	movs	r3, #0
}
 80e2916:	4618      	mov	r0, r3
 80e2918:	3710      	adds	r7, #16
 80e291a:	46bd      	mov	sp, r7
 80e291c:	bd80      	pop	{r7, pc}
 80e291e:	bf00      	nop
 80e2920:	58024800 	.word	0x58024800

080e2924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80e2924:	b580      	push	{r7, lr}
 80e2926:	b08c      	sub	sp, #48	; 0x30
 80e2928:	af00      	add	r7, sp, #0
 80e292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80e292c:	687b      	ldr	r3, [r7, #4]
 80e292e:	2b00      	cmp	r3, #0
 80e2930:	d101      	bne.n	80e2936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80e2932:	2301      	movs	r3, #1
 80e2934:	e39d      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80e2936:	687b      	ldr	r3, [r7, #4]
 80e2938:	681b      	ldr	r3, [r3, #0]
 80e293a:	f003 0301 	and.w	r3, r3, #1
 80e293e:	2b00      	cmp	r3, #0
 80e2940:	f000 8087 	beq.w	80e2a52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e2944:	4b88      	ldr	r3, [pc, #544]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2946:	691b      	ldr	r3, [r3, #16]
 80e2948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e294c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e294e:	4b86      	ldr	r3, [pc, #536]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2952:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80e2954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80e2956:	2b10      	cmp	r3, #16
 80e2958:	d007      	beq.n	80e296a <HAL_RCC_OscConfig+0x46>
 80e295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80e295c:	2b18      	cmp	r3, #24
 80e295e:	d110      	bne.n	80e2982 <HAL_RCC_OscConfig+0x5e>
 80e2960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80e2962:	f003 0303 	and.w	r3, r3, #3
 80e2966:	2b02      	cmp	r3, #2
 80e2968:	d10b      	bne.n	80e2982 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80e296a:	4b7f      	ldr	r3, [pc, #508]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e296c:	681b      	ldr	r3, [r3, #0]
 80e296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e2972:	2b00      	cmp	r3, #0
 80e2974:	d06c      	beq.n	80e2a50 <HAL_RCC_OscConfig+0x12c>
 80e2976:	687b      	ldr	r3, [r7, #4]
 80e2978:	685b      	ldr	r3, [r3, #4]
 80e297a:	2b00      	cmp	r3, #0
 80e297c:	d168      	bne.n	80e2a50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80e297e:	2301      	movs	r3, #1
 80e2980:	e377      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80e2982:	687b      	ldr	r3, [r7, #4]
 80e2984:	685b      	ldr	r3, [r3, #4]
 80e2986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e298a:	d106      	bne.n	80e299a <HAL_RCC_OscConfig+0x76>
 80e298c:	4b76      	ldr	r3, [pc, #472]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e298e:	681b      	ldr	r3, [r3, #0]
 80e2990:	4a75      	ldr	r2, [pc, #468]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e2996:	6013      	str	r3, [r2, #0]
 80e2998:	e02e      	b.n	80e29f8 <HAL_RCC_OscConfig+0xd4>
 80e299a:	687b      	ldr	r3, [r7, #4]
 80e299c:	685b      	ldr	r3, [r3, #4]
 80e299e:	2b00      	cmp	r3, #0
 80e29a0:	d10c      	bne.n	80e29bc <HAL_RCC_OscConfig+0x98>
 80e29a2:	4b71      	ldr	r3, [pc, #452]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29a4:	681b      	ldr	r3, [r3, #0]
 80e29a6:	4a70      	ldr	r2, [pc, #448]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e29ac:	6013      	str	r3, [r2, #0]
 80e29ae:	4b6e      	ldr	r3, [pc, #440]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29b0:	681b      	ldr	r3, [r3, #0]
 80e29b2:	4a6d      	ldr	r2, [pc, #436]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e29b8:	6013      	str	r3, [r2, #0]
 80e29ba:	e01d      	b.n	80e29f8 <HAL_RCC_OscConfig+0xd4>
 80e29bc:	687b      	ldr	r3, [r7, #4]
 80e29be:	685b      	ldr	r3, [r3, #4]
 80e29c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e29c4:	d10c      	bne.n	80e29e0 <HAL_RCC_OscConfig+0xbc>
 80e29c6:	4b68      	ldr	r3, [pc, #416]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29c8:	681b      	ldr	r3, [r3, #0]
 80e29ca:	4a67      	ldr	r2, [pc, #412]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80e29d0:	6013      	str	r3, [r2, #0]
 80e29d2:	4b65      	ldr	r3, [pc, #404]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29d4:	681b      	ldr	r3, [r3, #0]
 80e29d6:	4a64      	ldr	r2, [pc, #400]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e29dc:	6013      	str	r3, [r2, #0]
 80e29de:	e00b      	b.n	80e29f8 <HAL_RCC_OscConfig+0xd4>
 80e29e0:	4b61      	ldr	r3, [pc, #388]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29e2:	681b      	ldr	r3, [r3, #0]
 80e29e4:	4a60      	ldr	r2, [pc, #384]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e29ea:	6013      	str	r3, [r2, #0]
 80e29ec:	4b5e      	ldr	r3, [pc, #376]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29ee:	681b      	ldr	r3, [r3, #0]
 80e29f0:	4a5d      	ldr	r2, [pc, #372]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e29f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e29f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80e29f8:	687b      	ldr	r3, [r7, #4]
 80e29fa:	685b      	ldr	r3, [r3, #4]
 80e29fc:	2b00      	cmp	r3, #0
 80e29fe:	d013      	beq.n	80e2a28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2a00:	f7fe fc44 	bl	80e128c <HAL_GetTick>
 80e2a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e2a06:	e008      	b.n	80e2a1a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80e2a08:	f7fe fc40 	bl	80e128c <HAL_GetTick>
 80e2a0c:	4602      	mov	r2, r0
 80e2a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2a10:	1ad3      	subs	r3, r2, r3
 80e2a12:	2b64      	cmp	r3, #100	; 0x64
 80e2a14:	d901      	bls.n	80e2a1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80e2a16:	2303      	movs	r3, #3
 80e2a18:	e32b      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e2a1a:	4b53      	ldr	r3, [pc, #332]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2a1c:	681b      	ldr	r3, [r3, #0]
 80e2a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e2a22:	2b00      	cmp	r3, #0
 80e2a24:	d0f0      	beq.n	80e2a08 <HAL_RCC_OscConfig+0xe4>
 80e2a26:	e014      	b.n	80e2a52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2a28:	f7fe fc30 	bl	80e128c <HAL_GetTick>
 80e2a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80e2a2e:	e008      	b.n	80e2a42 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80e2a30:	f7fe fc2c 	bl	80e128c <HAL_GetTick>
 80e2a34:	4602      	mov	r2, r0
 80e2a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2a38:	1ad3      	subs	r3, r2, r3
 80e2a3a:	2b64      	cmp	r3, #100	; 0x64
 80e2a3c:	d901      	bls.n	80e2a42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80e2a3e:	2303      	movs	r3, #3
 80e2a40:	e317      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80e2a42:	4b49      	ldr	r3, [pc, #292]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2a44:	681b      	ldr	r3, [r3, #0]
 80e2a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e2a4a:	2b00      	cmp	r3, #0
 80e2a4c:	d1f0      	bne.n	80e2a30 <HAL_RCC_OscConfig+0x10c>
 80e2a4e:	e000      	b.n	80e2a52 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80e2a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80e2a52:	687b      	ldr	r3, [r7, #4]
 80e2a54:	681b      	ldr	r3, [r3, #0]
 80e2a56:	f003 0302 	and.w	r3, r3, #2
 80e2a5a:	2b00      	cmp	r3, #0
 80e2a5c:	f000 808c 	beq.w	80e2b78 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e2a60:	4b41      	ldr	r3, [pc, #260]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2a62:	691b      	ldr	r3, [r3, #16]
 80e2a64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e2a68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e2a6a:	4b3f      	ldr	r3, [pc, #252]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2a6e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80e2a70:	6a3b      	ldr	r3, [r7, #32]
 80e2a72:	2b00      	cmp	r3, #0
 80e2a74:	d007      	beq.n	80e2a86 <HAL_RCC_OscConfig+0x162>
 80e2a76:	6a3b      	ldr	r3, [r7, #32]
 80e2a78:	2b18      	cmp	r3, #24
 80e2a7a:	d137      	bne.n	80e2aec <HAL_RCC_OscConfig+0x1c8>
 80e2a7c:	69fb      	ldr	r3, [r7, #28]
 80e2a7e:	f003 0303 	and.w	r3, r3, #3
 80e2a82:	2b00      	cmp	r3, #0
 80e2a84:	d132      	bne.n	80e2aec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80e2a86:	4b38      	ldr	r3, [pc, #224]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2a88:	681b      	ldr	r3, [r3, #0]
 80e2a8a:	f003 0304 	and.w	r3, r3, #4
 80e2a8e:	2b00      	cmp	r3, #0
 80e2a90:	d005      	beq.n	80e2a9e <HAL_RCC_OscConfig+0x17a>
 80e2a92:	687b      	ldr	r3, [r7, #4]
 80e2a94:	68db      	ldr	r3, [r3, #12]
 80e2a96:	2b00      	cmp	r3, #0
 80e2a98:	d101      	bne.n	80e2a9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80e2a9a:	2301      	movs	r3, #1
 80e2a9c:	e2e9      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80e2a9e:	4b32      	ldr	r3, [pc, #200]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2aa0:	681b      	ldr	r3, [r3, #0]
 80e2aa2:	f023 0219 	bic.w	r2, r3, #25
 80e2aa6:	687b      	ldr	r3, [r7, #4]
 80e2aa8:	68db      	ldr	r3, [r3, #12]
 80e2aaa:	492f      	ldr	r1, [pc, #188]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2aac:	4313      	orrs	r3, r2
 80e2aae:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80e2ab0:	f7fe fbec 	bl	80e128c <HAL_GetTick>
 80e2ab4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2ab6:	e008      	b.n	80e2aca <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e2ab8:	f7fe fbe8 	bl	80e128c <HAL_GetTick>
 80e2abc:	4602      	mov	r2, r0
 80e2abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2ac0:	1ad3      	subs	r3, r2, r3
 80e2ac2:	2b02      	cmp	r3, #2
 80e2ac4:	d901      	bls.n	80e2aca <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80e2ac6:	2303      	movs	r3, #3
 80e2ac8:	e2d3      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2aca:	4b27      	ldr	r3, [pc, #156]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2acc:	681b      	ldr	r3, [r3, #0]
 80e2ace:	f003 0304 	and.w	r3, r3, #4
 80e2ad2:	2b00      	cmp	r3, #0
 80e2ad4:	d0f0      	beq.n	80e2ab8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80e2ad6:	4b24      	ldr	r3, [pc, #144]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2ad8:	685b      	ldr	r3, [r3, #4]
 80e2ada:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80e2ade:	687b      	ldr	r3, [r7, #4]
 80e2ae0:	691b      	ldr	r3, [r3, #16]
 80e2ae2:	061b      	lsls	r3, r3, #24
 80e2ae4:	4920      	ldr	r1, [pc, #128]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2ae6:	4313      	orrs	r3, r2
 80e2ae8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80e2aea:	e045      	b.n	80e2b78 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80e2aec:	687b      	ldr	r3, [r7, #4]
 80e2aee:	68db      	ldr	r3, [r3, #12]
 80e2af0:	2b00      	cmp	r3, #0
 80e2af2:	d026      	beq.n	80e2b42 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80e2af4:	4b1c      	ldr	r3, [pc, #112]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2af6:	681b      	ldr	r3, [r3, #0]
 80e2af8:	f023 0219 	bic.w	r2, r3, #25
 80e2afc:	687b      	ldr	r3, [r7, #4]
 80e2afe:	68db      	ldr	r3, [r3, #12]
 80e2b00:	4919      	ldr	r1, [pc, #100]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2b02:	4313      	orrs	r3, r2
 80e2b04:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2b06:	f7fe fbc1 	bl	80e128c <HAL_GetTick>
 80e2b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2b0c:	e008      	b.n	80e2b20 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e2b0e:	f7fe fbbd 	bl	80e128c <HAL_GetTick>
 80e2b12:	4602      	mov	r2, r0
 80e2b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2b16:	1ad3      	subs	r3, r2, r3
 80e2b18:	2b02      	cmp	r3, #2
 80e2b1a:	d901      	bls.n	80e2b20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80e2b1c:	2303      	movs	r3, #3
 80e2b1e:	e2a8      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2b20:	4b11      	ldr	r3, [pc, #68]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2b22:	681b      	ldr	r3, [r3, #0]
 80e2b24:	f003 0304 	and.w	r3, r3, #4
 80e2b28:	2b00      	cmp	r3, #0
 80e2b2a:	d0f0      	beq.n	80e2b0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80e2b2c:	4b0e      	ldr	r3, [pc, #56]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2b2e:	685b      	ldr	r3, [r3, #4]
 80e2b30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80e2b34:	687b      	ldr	r3, [r7, #4]
 80e2b36:	691b      	ldr	r3, [r3, #16]
 80e2b38:	061b      	lsls	r3, r3, #24
 80e2b3a:	490b      	ldr	r1, [pc, #44]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2b3c:	4313      	orrs	r3, r2
 80e2b3e:	604b      	str	r3, [r1, #4]
 80e2b40:	e01a      	b.n	80e2b78 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80e2b42:	4b09      	ldr	r3, [pc, #36]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2b44:	681b      	ldr	r3, [r3, #0]
 80e2b46:	4a08      	ldr	r2, [pc, #32]	; (80e2b68 <HAL_RCC_OscConfig+0x244>)
 80e2b48:	f023 0301 	bic.w	r3, r3, #1
 80e2b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2b4e:	f7fe fb9d 	bl	80e128c <HAL_GetTick>
 80e2b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80e2b54:	e00a      	b.n	80e2b6c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e2b56:	f7fe fb99 	bl	80e128c <HAL_GetTick>
 80e2b5a:	4602      	mov	r2, r0
 80e2b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2b5e:	1ad3      	subs	r3, r2, r3
 80e2b60:	2b02      	cmp	r3, #2
 80e2b62:	d903      	bls.n	80e2b6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80e2b64:	2303      	movs	r3, #3
 80e2b66:	e284      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
 80e2b68:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80e2b6c:	4b96      	ldr	r3, [pc, #600]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2b6e:	681b      	ldr	r3, [r3, #0]
 80e2b70:	f003 0304 	and.w	r3, r3, #4
 80e2b74:	2b00      	cmp	r3, #0
 80e2b76:	d1ee      	bne.n	80e2b56 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80e2b78:	687b      	ldr	r3, [r7, #4]
 80e2b7a:	681b      	ldr	r3, [r3, #0]
 80e2b7c:	f003 0310 	and.w	r3, r3, #16
 80e2b80:	2b00      	cmp	r3, #0
 80e2b82:	d06a      	beq.n	80e2c5a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e2b84:	4b90      	ldr	r3, [pc, #576]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2b86:	691b      	ldr	r3, [r3, #16]
 80e2b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e2b8c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e2b8e:	4b8e      	ldr	r3, [pc, #568]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2b92:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80e2b94:	69bb      	ldr	r3, [r7, #24]
 80e2b96:	2b08      	cmp	r3, #8
 80e2b98:	d007      	beq.n	80e2baa <HAL_RCC_OscConfig+0x286>
 80e2b9a:	69bb      	ldr	r3, [r7, #24]
 80e2b9c:	2b18      	cmp	r3, #24
 80e2b9e:	d11b      	bne.n	80e2bd8 <HAL_RCC_OscConfig+0x2b4>
 80e2ba0:	697b      	ldr	r3, [r7, #20]
 80e2ba2:	f003 0303 	and.w	r3, r3, #3
 80e2ba6:	2b01      	cmp	r3, #1
 80e2ba8:	d116      	bne.n	80e2bd8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80e2baa:	4b87      	ldr	r3, [pc, #540]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2bac:	681b      	ldr	r3, [r3, #0]
 80e2bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2bb2:	2b00      	cmp	r3, #0
 80e2bb4:	d005      	beq.n	80e2bc2 <HAL_RCC_OscConfig+0x29e>
 80e2bb6:	687b      	ldr	r3, [r7, #4]
 80e2bb8:	69db      	ldr	r3, [r3, #28]
 80e2bba:	2b80      	cmp	r3, #128	; 0x80
 80e2bbc:	d001      	beq.n	80e2bc2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80e2bbe:	2301      	movs	r3, #1
 80e2bc0:	e257      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80e2bc2:	4b81      	ldr	r3, [pc, #516]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2bc4:	68db      	ldr	r3, [r3, #12]
 80e2bc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80e2bca:	687b      	ldr	r3, [r7, #4]
 80e2bcc:	6a1b      	ldr	r3, [r3, #32]
 80e2bce:	061b      	lsls	r3, r3, #24
 80e2bd0:	497d      	ldr	r1, [pc, #500]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2bd2:	4313      	orrs	r3, r2
 80e2bd4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80e2bd6:	e040      	b.n	80e2c5a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80e2bd8:	687b      	ldr	r3, [r7, #4]
 80e2bda:	69db      	ldr	r3, [r3, #28]
 80e2bdc:	2b00      	cmp	r3, #0
 80e2bde:	d023      	beq.n	80e2c28 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80e2be0:	4b79      	ldr	r3, [pc, #484]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2be2:	681b      	ldr	r3, [r3, #0]
 80e2be4:	4a78      	ldr	r2, [pc, #480]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80e2bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2bec:	f7fe fb4e 	bl	80e128c <HAL_GetTick>
 80e2bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e2bf2:	e008      	b.n	80e2c06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80e2bf4:	f7fe fb4a 	bl	80e128c <HAL_GetTick>
 80e2bf8:	4602      	mov	r2, r0
 80e2bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2bfc:	1ad3      	subs	r3, r2, r3
 80e2bfe:	2b02      	cmp	r3, #2
 80e2c00:	d901      	bls.n	80e2c06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80e2c02:	2303      	movs	r3, #3
 80e2c04:	e235      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e2c06:	4b70      	ldr	r3, [pc, #448]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2c08:	681b      	ldr	r3, [r3, #0]
 80e2c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2c0e:	2b00      	cmp	r3, #0
 80e2c10:	d0f0      	beq.n	80e2bf4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80e2c12:	4b6d      	ldr	r3, [pc, #436]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2c14:	68db      	ldr	r3, [r3, #12]
 80e2c16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80e2c1a:	687b      	ldr	r3, [r7, #4]
 80e2c1c:	6a1b      	ldr	r3, [r3, #32]
 80e2c1e:	061b      	lsls	r3, r3, #24
 80e2c20:	4969      	ldr	r1, [pc, #420]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2c22:	4313      	orrs	r3, r2
 80e2c24:	60cb      	str	r3, [r1, #12]
 80e2c26:	e018      	b.n	80e2c5a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80e2c28:	4b67      	ldr	r3, [pc, #412]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2c2a:	681b      	ldr	r3, [r3, #0]
 80e2c2c:	4a66      	ldr	r2, [pc, #408]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80e2c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2c34:	f7fe fb2a 	bl	80e128c <HAL_GetTick>
 80e2c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80e2c3a:	e008      	b.n	80e2c4e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80e2c3c:	f7fe fb26 	bl	80e128c <HAL_GetTick>
 80e2c40:	4602      	mov	r2, r0
 80e2c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2c44:	1ad3      	subs	r3, r2, r3
 80e2c46:	2b02      	cmp	r3, #2
 80e2c48:	d901      	bls.n	80e2c4e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80e2c4a:	2303      	movs	r3, #3
 80e2c4c:	e211      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80e2c4e:	4b5e      	ldr	r3, [pc, #376]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2c50:	681b      	ldr	r3, [r3, #0]
 80e2c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2c56:	2b00      	cmp	r3, #0
 80e2c58:	d1f0      	bne.n	80e2c3c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80e2c5a:	687b      	ldr	r3, [r7, #4]
 80e2c5c:	681b      	ldr	r3, [r3, #0]
 80e2c5e:	f003 0308 	and.w	r3, r3, #8
 80e2c62:	2b00      	cmp	r3, #0
 80e2c64:	d036      	beq.n	80e2cd4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80e2c66:	687b      	ldr	r3, [r7, #4]
 80e2c68:	695b      	ldr	r3, [r3, #20]
 80e2c6a:	2b00      	cmp	r3, #0
 80e2c6c:	d019      	beq.n	80e2ca2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80e2c6e:	4b56      	ldr	r3, [pc, #344]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e2c72:	4a55      	ldr	r2, [pc, #340]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2c74:	f043 0301 	orr.w	r3, r3, #1
 80e2c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e2c7a:	f7fe fb07 	bl	80e128c <HAL_GetTick>
 80e2c7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80e2c80:	e008      	b.n	80e2c94 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80e2c82:	f7fe fb03 	bl	80e128c <HAL_GetTick>
 80e2c86:	4602      	mov	r2, r0
 80e2c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2c8a:	1ad3      	subs	r3, r2, r3
 80e2c8c:	2b02      	cmp	r3, #2
 80e2c8e:	d901      	bls.n	80e2c94 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80e2c90:	2303      	movs	r3, #3
 80e2c92:	e1ee      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80e2c94:	4b4c      	ldr	r3, [pc, #304]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e2c98:	f003 0302 	and.w	r3, r3, #2
 80e2c9c:	2b00      	cmp	r3, #0
 80e2c9e:	d0f0      	beq.n	80e2c82 <HAL_RCC_OscConfig+0x35e>
 80e2ca0:	e018      	b.n	80e2cd4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80e2ca2:	4b49      	ldr	r3, [pc, #292]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e2ca6:	4a48      	ldr	r2, [pc, #288]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2ca8:	f023 0301 	bic.w	r3, r3, #1
 80e2cac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e2cae:	f7fe faed 	bl	80e128c <HAL_GetTick>
 80e2cb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80e2cb4:	e008      	b.n	80e2cc8 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80e2cb6:	f7fe fae9 	bl	80e128c <HAL_GetTick>
 80e2cba:	4602      	mov	r2, r0
 80e2cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2cbe:	1ad3      	subs	r3, r2, r3
 80e2cc0:	2b02      	cmp	r3, #2
 80e2cc2:	d901      	bls.n	80e2cc8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80e2cc4:	2303      	movs	r3, #3
 80e2cc6:	e1d4      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80e2cc8:	4b3f      	ldr	r3, [pc, #252]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e2ccc:	f003 0302 	and.w	r3, r3, #2
 80e2cd0:	2b00      	cmp	r3, #0
 80e2cd2:	d1f0      	bne.n	80e2cb6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80e2cd4:	687b      	ldr	r3, [r7, #4]
 80e2cd6:	681b      	ldr	r3, [r3, #0]
 80e2cd8:	f003 0320 	and.w	r3, r3, #32
 80e2cdc:	2b00      	cmp	r3, #0
 80e2cde:	d036      	beq.n	80e2d4e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80e2ce0:	687b      	ldr	r3, [r7, #4]
 80e2ce2:	699b      	ldr	r3, [r3, #24]
 80e2ce4:	2b00      	cmp	r3, #0
 80e2ce6:	d019      	beq.n	80e2d1c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80e2ce8:	4b37      	ldr	r3, [pc, #220]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2cea:	681b      	ldr	r3, [r3, #0]
 80e2cec:	4a36      	ldr	r2, [pc, #216]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2cee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80e2cf2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80e2cf4:	f7fe faca 	bl	80e128c <HAL_GetTick>
 80e2cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80e2cfa:	e008      	b.n	80e2d0e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80e2cfc:	f7fe fac6 	bl	80e128c <HAL_GetTick>
 80e2d00:	4602      	mov	r2, r0
 80e2d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2d04:	1ad3      	subs	r3, r2, r3
 80e2d06:	2b02      	cmp	r3, #2
 80e2d08:	d901      	bls.n	80e2d0e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80e2d0a:	2303      	movs	r3, #3
 80e2d0c:	e1b1      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80e2d0e:	4b2e      	ldr	r3, [pc, #184]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2d10:	681b      	ldr	r3, [r3, #0]
 80e2d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e2d16:	2b00      	cmp	r3, #0
 80e2d18:	d0f0      	beq.n	80e2cfc <HAL_RCC_OscConfig+0x3d8>
 80e2d1a:	e018      	b.n	80e2d4e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80e2d1c:	4b2a      	ldr	r3, [pc, #168]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2d1e:	681b      	ldr	r3, [r3, #0]
 80e2d20:	4a29      	ldr	r2, [pc, #164]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80e2d26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80e2d28:	f7fe fab0 	bl	80e128c <HAL_GetTick>
 80e2d2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80e2d2e:	e008      	b.n	80e2d42 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80e2d30:	f7fe faac 	bl	80e128c <HAL_GetTick>
 80e2d34:	4602      	mov	r2, r0
 80e2d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2d38:	1ad3      	subs	r3, r2, r3
 80e2d3a:	2b02      	cmp	r3, #2
 80e2d3c:	d901      	bls.n	80e2d42 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80e2d3e:	2303      	movs	r3, #3
 80e2d40:	e197      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80e2d42:	4b21      	ldr	r3, [pc, #132]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2d44:	681b      	ldr	r3, [r3, #0]
 80e2d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e2d4a:	2b00      	cmp	r3, #0
 80e2d4c:	d1f0      	bne.n	80e2d30 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80e2d4e:	687b      	ldr	r3, [r7, #4]
 80e2d50:	681b      	ldr	r3, [r3, #0]
 80e2d52:	f003 0304 	and.w	r3, r3, #4
 80e2d56:	2b00      	cmp	r3, #0
 80e2d58:	f000 8086 	beq.w	80e2e68 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80e2d5c:	4b1b      	ldr	r3, [pc, #108]	; (80e2dcc <HAL_RCC_OscConfig+0x4a8>)
 80e2d5e:	681b      	ldr	r3, [r3, #0]
 80e2d60:	4a1a      	ldr	r2, [pc, #104]	; (80e2dcc <HAL_RCC_OscConfig+0x4a8>)
 80e2d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e2d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80e2d68:	f7fe fa90 	bl	80e128c <HAL_GetTick>
 80e2d6c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e2d6e:	e008      	b.n	80e2d82 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80e2d70:	f7fe fa8c 	bl	80e128c <HAL_GetTick>
 80e2d74:	4602      	mov	r2, r0
 80e2d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2d78:	1ad3      	subs	r3, r2, r3
 80e2d7a:	2b64      	cmp	r3, #100	; 0x64
 80e2d7c:	d901      	bls.n	80e2d82 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80e2d7e:	2303      	movs	r3, #3
 80e2d80:	e177      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e2d82:	4b12      	ldr	r3, [pc, #72]	; (80e2dcc <HAL_RCC_OscConfig+0x4a8>)
 80e2d84:	681b      	ldr	r3, [r3, #0]
 80e2d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2d8a:	2b00      	cmp	r3, #0
 80e2d8c:	d0f0      	beq.n	80e2d70 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80e2d8e:	687b      	ldr	r3, [r7, #4]
 80e2d90:	689b      	ldr	r3, [r3, #8]
 80e2d92:	2b01      	cmp	r3, #1
 80e2d94:	d106      	bne.n	80e2da4 <HAL_RCC_OscConfig+0x480>
 80e2d96:	4b0c      	ldr	r3, [pc, #48]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2d9a:	4a0b      	ldr	r2, [pc, #44]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2d9c:	f043 0301 	orr.w	r3, r3, #1
 80e2da0:	6713      	str	r3, [r2, #112]	; 0x70
 80e2da2:	e032      	b.n	80e2e0a <HAL_RCC_OscConfig+0x4e6>
 80e2da4:	687b      	ldr	r3, [r7, #4]
 80e2da6:	689b      	ldr	r3, [r3, #8]
 80e2da8:	2b00      	cmp	r3, #0
 80e2daa:	d111      	bne.n	80e2dd0 <HAL_RCC_OscConfig+0x4ac>
 80e2dac:	4b06      	ldr	r3, [pc, #24]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2db0:	4a05      	ldr	r2, [pc, #20]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2db2:	f023 0301 	bic.w	r3, r3, #1
 80e2db6:	6713      	str	r3, [r2, #112]	; 0x70
 80e2db8:	4b03      	ldr	r3, [pc, #12]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2dbc:	4a02      	ldr	r2, [pc, #8]	; (80e2dc8 <HAL_RCC_OscConfig+0x4a4>)
 80e2dbe:	f023 0304 	bic.w	r3, r3, #4
 80e2dc2:	6713      	str	r3, [r2, #112]	; 0x70
 80e2dc4:	e021      	b.n	80e2e0a <HAL_RCC_OscConfig+0x4e6>
 80e2dc6:	bf00      	nop
 80e2dc8:	58024400 	.word	0x58024400
 80e2dcc:	58024800 	.word	0x58024800
 80e2dd0:	687b      	ldr	r3, [r7, #4]
 80e2dd2:	689b      	ldr	r3, [r3, #8]
 80e2dd4:	2b05      	cmp	r3, #5
 80e2dd6:	d10c      	bne.n	80e2df2 <HAL_RCC_OscConfig+0x4ce>
 80e2dd8:	4b83      	ldr	r3, [pc, #524]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2ddc:	4a82      	ldr	r2, [pc, #520]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2dde:	f043 0304 	orr.w	r3, r3, #4
 80e2de2:	6713      	str	r3, [r2, #112]	; 0x70
 80e2de4:	4b80      	ldr	r3, [pc, #512]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2de8:	4a7f      	ldr	r2, [pc, #508]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2dea:	f043 0301 	orr.w	r3, r3, #1
 80e2dee:	6713      	str	r3, [r2, #112]	; 0x70
 80e2df0:	e00b      	b.n	80e2e0a <HAL_RCC_OscConfig+0x4e6>
 80e2df2:	4b7d      	ldr	r3, [pc, #500]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2df6:	4a7c      	ldr	r2, [pc, #496]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2df8:	f023 0301 	bic.w	r3, r3, #1
 80e2dfc:	6713      	str	r3, [r2, #112]	; 0x70
 80e2dfe:	4b7a      	ldr	r3, [pc, #488]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2e02:	4a79      	ldr	r2, [pc, #484]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2e04:	f023 0304 	bic.w	r3, r3, #4
 80e2e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80e2e0a:	687b      	ldr	r3, [r7, #4]
 80e2e0c:	689b      	ldr	r3, [r3, #8]
 80e2e0e:	2b00      	cmp	r3, #0
 80e2e10:	d015      	beq.n	80e2e3e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e2e12:	f7fe fa3b 	bl	80e128c <HAL_GetTick>
 80e2e16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e2e18:	e00a      	b.n	80e2e30 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80e2e1a:	f7fe fa37 	bl	80e128c <HAL_GetTick>
 80e2e1e:	4602      	mov	r2, r0
 80e2e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2e22:	1ad3      	subs	r3, r2, r3
 80e2e24:	f241 3288 	movw	r2, #5000	; 0x1388
 80e2e28:	4293      	cmp	r3, r2
 80e2e2a:	d901      	bls.n	80e2e30 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80e2e2c:	2303      	movs	r3, #3
 80e2e2e:	e120      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e2e30:	4b6d      	ldr	r3, [pc, #436]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2e34:	f003 0302 	and.w	r3, r3, #2
 80e2e38:	2b00      	cmp	r3, #0
 80e2e3a:	d0ee      	beq.n	80e2e1a <HAL_RCC_OscConfig+0x4f6>
 80e2e3c:	e014      	b.n	80e2e68 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e2e3e:	f7fe fa25 	bl	80e128c <HAL_GetTick>
 80e2e42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80e2e44:	e00a      	b.n	80e2e5c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80e2e46:	f7fe fa21 	bl	80e128c <HAL_GetTick>
 80e2e4a:	4602      	mov	r2, r0
 80e2e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2e4e:	1ad3      	subs	r3, r2, r3
 80e2e50:	f241 3288 	movw	r2, #5000	; 0x1388
 80e2e54:	4293      	cmp	r3, r2
 80e2e56:	d901      	bls.n	80e2e5c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80e2e58:	2303      	movs	r3, #3
 80e2e5a:	e10a      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80e2e5c:	4b62      	ldr	r3, [pc, #392]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2e60:	f003 0302 	and.w	r3, r3, #2
 80e2e64:	2b00      	cmp	r3, #0
 80e2e66:	d1ee      	bne.n	80e2e46 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80e2e68:	687b      	ldr	r3, [r7, #4]
 80e2e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e2e6c:	2b00      	cmp	r3, #0
 80e2e6e:	f000 80ff 	beq.w	80e3070 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80e2e72:	4b5d      	ldr	r3, [pc, #372]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2e74:	691b      	ldr	r3, [r3, #16]
 80e2e76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e2e7a:	2b18      	cmp	r3, #24
 80e2e7c:	f000 80ba 	beq.w	80e2ff4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80e2e80:	687b      	ldr	r3, [r7, #4]
 80e2e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e2e84:	2b02      	cmp	r3, #2
 80e2e86:	f040 8095 	bne.w	80e2fb4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80e2e8a:	4b57      	ldr	r3, [pc, #348]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2e8c:	681b      	ldr	r3, [r3, #0]
 80e2e8e:	4a56      	ldr	r2, [pc, #344]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80e2e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2e96:	f7fe f9f9 	bl	80e128c <HAL_GetTick>
 80e2e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e2e9c:	e008      	b.n	80e2eb0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e2e9e:	f7fe f9f5 	bl	80e128c <HAL_GetTick>
 80e2ea2:	4602      	mov	r2, r0
 80e2ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2ea6:	1ad3      	subs	r3, r2, r3
 80e2ea8:	2b02      	cmp	r3, #2
 80e2eaa:	d901      	bls.n	80e2eb0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80e2eac:	2303      	movs	r3, #3
 80e2eae:	e0e0      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e2eb0:	4b4d      	ldr	r3, [pc, #308]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2eb2:	681b      	ldr	r3, [r3, #0]
 80e2eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e2eb8:	2b00      	cmp	r3, #0
 80e2eba:	d1f0      	bne.n	80e2e9e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80e2ebc:	4b4a      	ldr	r3, [pc, #296]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80e2ec0:	4b4a      	ldr	r3, [pc, #296]	; (80e2fec <HAL_RCC_OscConfig+0x6c8>)
 80e2ec2:	4013      	ands	r3, r2
 80e2ec4:	687a      	ldr	r2, [r7, #4]
 80e2ec6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80e2ec8:	687a      	ldr	r2, [r7, #4]
 80e2eca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80e2ecc:	0112      	lsls	r2, r2, #4
 80e2ece:	430a      	orrs	r2, r1
 80e2ed0:	4945      	ldr	r1, [pc, #276]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2ed2:	4313      	orrs	r3, r2
 80e2ed4:	628b      	str	r3, [r1, #40]	; 0x28
 80e2ed6:	687b      	ldr	r3, [r7, #4]
 80e2ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2eda:	3b01      	subs	r3, #1
 80e2edc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e2ee0:	687b      	ldr	r3, [r7, #4]
 80e2ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e2ee4:	3b01      	subs	r3, #1
 80e2ee6:	025b      	lsls	r3, r3, #9
 80e2ee8:	b29b      	uxth	r3, r3
 80e2eea:	431a      	orrs	r2, r3
 80e2eec:	687b      	ldr	r3, [r7, #4]
 80e2eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e2ef0:	3b01      	subs	r3, #1
 80e2ef2:	041b      	lsls	r3, r3, #16
 80e2ef4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e2ef8:	431a      	orrs	r2, r3
 80e2efa:	687b      	ldr	r3, [r7, #4]
 80e2efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e2efe:	3b01      	subs	r3, #1
 80e2f00:	061b      	lsls	r3, r3, #24
 80e2f02:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e2f06:	4938      	ldr	r1, [pc, #224]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f08:	4313      	orrs	r3, r2
 80e2f0a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80e2f0c:	4b36      	ldr	r3, [pc, #216]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2f10:	4a35      	ldr	r2, [pc, #212]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f12:	f023 0301 	bic.w	r3, r3, #1
 80e2f16:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80e2f18:	4b33      	ldr	r3, [pc, #204]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80e2f1c:	4b34      	ldr	r3, [pc, #208]	; (80e2ff0 <HAL_RCC_OscConfig+0x6cc>)
 80e2f1e:	4013      	ands	r3, r2
 80e2f20:	687a      	ldr	r2, [r7, #4]
 80e2f22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80e2f24:	00d2      	lsls	r2, r2, #3
 80e2f26:	4930      	ldr	r1, [pc, #192]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f28:	4313      	orrs	r3, r2
 80e2f2a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80e2f2c:	4b2e      	ldr	r3, [pc, #184]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2f30:	f023 020c 	bic.w	r2, r3, #12
 80e2f34:	687b      	ldr	r3, [r7, #4]
 80e2f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e2f38:	492b      	ldr	r1, [pc, #172]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f3a:	4313      	orrs	r3, r2
 80e2f3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80e2f3e:	4b2a      	ldr	r3, [pc, #168]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2f42:	f023 0202 	bic.w	r2, r3, #2
 80e2f46:	687b      	ldr	r3, [r7, #4]
 80e2f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e2f4a:	4927      	ldr	r1, [pc, #156]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f4c:	4313      	orrs	r3, r2
 80e2f4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80e2f50:	4b25      	ldr	r3, [pc, #148]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2f54:	4a24      	ldr	r2, [pc, #144]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e2f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2f5c:	4b22      	ldr	r3, [pc, #136]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2f60:	4a21      	ldr	r2, [pc, #132]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2f66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80e2f68:	4b1f      	ldr	r3, [pc, #124]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2f6c:	4a1e      	ldr	r2, [pc, #120]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80e2f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80e2f74:	4b1c      	ldr	r3, [pc, #112]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2f78:	4a1b      	ldr	r2, [pc, #108]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f7a:	f043 0301 	orr.w	r3, r3, #1
 80e2f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80e2f80:	4b19      	ldr	r3, [pc, #100]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f82:	681b      	ldr	r3, [r3, #0]
 80e2f84:	4a18      	ldr	r2, [pc, #96]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80e2f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2f8c:	f7fe f97e 	bl	80e128c <HAL_GetTick>
 80e2f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e2f92:	e008      	b.n	80e2fa6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e2f94:	f7fe f97a 	bl	80e128c <HAL_GetTick>
 80e2f98:	4602      	mov	r2, r0
 80e2f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2f9c:	1ad3      	subs	r3, r2, r3
 80e2f9e:	2b02      	cmp	r3, #2
 80e2fa0:	d901      	bls.n	80e2fa6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80e2fa2:	2303      	movs	r3, #3
 80e2fa4:	e065      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e2fa6:	4b10      	ldr	r3, [pc, #64]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2fa8:	681b      	ldr	r3, [r3, #0]
 80e2faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e2fae:	2b00      	cmp	r3, #0
 80e2fb0:	d0f0      	beq.n	80e2f94 <HAL_RCC_OscConfig+0x670>
 80e2fb2:	e05d      	b.n	80e3070 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80e2fb4:	4b0c      	ldr	r3, [pc, #48]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2fb6:	681b      	ldr	r3, [r3, #0]
 80e2fb8:	4a0b      	ldr	r2, [pc, #44]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80e2fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2fc0:	f7fe f964 	bl	80e128c <HAL_GetTick>
 80e2fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e2fc6:	e008      	b.n	80e2fda <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e2fc8:	f7fe f960 	bl	80e128c <HAL_GetTick>
 80e2fcc:	4602      	mov	r2, r0
 80e2fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2fd0:	1ad3      	subs	r3, r2, r3
 80e2fd2:	2b02      	cmp	r3, #2
 80e2fd4:	d901      	bls.n	80e2fda <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80e2fd6:	2303      	movs	r3, #3
 80e2fd8:	e04b      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e2fda:	4b03      	ldr	r3, [pc, #12]	; (80e2fe8 <HAL_RCC_OscConfig+0x6c4>)
 80e2fdc:	681b      	ldr	r3, [r3, #0]
 80e2fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e2fe2:	2b00      	cmp	r3, #0
 80e2fe4:	d1f0      	bne.n	80e2fc8 <HAL_RCC_OscConfig+0x6a4>
 80e2fe6:	e043      	b.n	80e3070 <HAL_RCC_OscConfig+0x74c>
 80e2fe8:	58024400 	.word	0x58024400
 80e2fec:	fffffc0c 	.word	0xfffffc0c
 80e2ff0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80e2ff4:	4b21      	ldr	r3, [pc, #132]	; (80e307c <HAL_RCC_OscConfig+0x758>)
 80e2ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2ff8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80e2ffa:	4b20      	ldr	r3, [pc, #128]	; (80e307c <HAL_RCC_OscConfig+0x758>)
 80e2ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2ffe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80e3000:	687b      	ldr	r3, [r7, #4]
 80e3002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e3004:	2b01      	cmp	r3, #1
 80e3006:	d031      	beq.n	80e306c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80e3008:	693b      	ldr	r3, [r7, #16]
 80e300a:	f003 0203 	and.w	r2, r3, #3
 80e300e:	687b      	ldr	r3, [r7, #4]
 80e3010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80e3012:	429a      	cmp	r2, r3
 80e3014:	d12a      	bne.n	80e306c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80e3016:	693b      	ldr	r3, [r7, #16]
 80e3018:	091b      	lsrs	r3, r3, #4
 80e301a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80e301e:	687b      	ldr	r3, [r7, #4]
 80e3020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80e3022:	429a      	cmp	r2, r3
 80e3024:	d122      	bne.n	80e306c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80e3026:	68fb      	ldr	r3, [r7, #12]
 80e3028:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e302c:	687b      	ldr	r3, [r7, #4]
 80e302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e3030:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80e3032:	429a      	cmp	r2, r3
 80e3034:	d11a      	bne.n	80e306c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80e3036:	68fb      	ldr	r3, [r7, #12]
 80e3038:	0a5b      	lsrs	r3, r3, #9
 80e303a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e303e:	687b      	ldr	r3, [r7, #4]
 80e3040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e3042:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80e3044:	429a      	cmp	r2, r3
 80e3046:	d111      	bne.n	80e306c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80e3048:	68fb      	ldr	r3, [r7, #12]
 80e304a:	0c1b      	lsrs	r3, r3, #16
 80e304c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e3050:	687b      	ldr	r3, [r7, #4]
 80e3052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e3054:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80e3056:	429a      	cmp	r2, r3
 80e3058:	d108      	bne.n	80e306c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80e305a:	68fb      	ldr	r3, [r7, #12]
 80e305c:	0e1b      	lsrs	r3, r3, #24
 80e305e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e3062:	687b      	ldr	r3, [r7, #4]
 80e3064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e3066:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80e3068:	429a      	cmp	r2, r3
 80e306a:	d001      	beq.n	80e3070 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80e306c:	2301      	movs	r3, #1
 80e306e:	e000      	b.n	80e3072 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80e3070:	2300      	movs	r3, #0
}
 80e3072:	4618      	mov	r0, r3
 80e3074:	3730      	adds	r7, #48	; 0x30
 80e3076:	46bd      	mov	sp, r7
 80e3078:	bd80      	pop	{r7, pc}
 80e307a:	bf00      	nop
 80e307c:	58024400 	.word	0x58024400

080e3080 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80e3080:	b580      	push	{r7, lr}
 80e3082:	b086      	sub	sp, #24
 80e3084:	af00      	add	r7, sp, #0
 80e3086:	6078      	str	r0, [r7, #4]
 80e3088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80e308a:	687b      	ldr	r3, [r7, #4]
 80e308c:	2b00      	cmp	r3, #0
 80e308e:	d101      	bne.n	80e3094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80e3090:	2301      	movs	r3, #1
 80e3092:	e19c      	b.n	80e33ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80e3094:	4b8a      	ldr	r3, [pc, #552]	; (80e32c0 <HAL_RCC_ClockConfig+0x240>)
 80e3096:	681b      	ldr	r3, [r3, #0]
 80e3098:	f003 030f 	and.w	r3, r3, #15
 80e309c:	683a      	ldr	r2, [r7, #0]
 80e309e:	429a      	cmp	r2, r3
 80e30a0:	d910      	bls.n	80e30c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80e30a2:	4b87      	ldr	r3, [pc, #540]	; (80e32c0 <HAL_RCC_ClockConfig+0x240>)
 80e30a4:	681b      	ldr	r3, [r3, #0]
 80e30a6:	f023 020f 	bic.w	r2, r3, #15
 80e30aa:	4985      	ldr	r1, [pc, #532]	; (80e32c0 <HAL_RCC_ClockConfig+0x240>)
 80e30ac:	683b      	ldr	r3, [r7, #0]
 80e30ae:	4313      	orrs	r3, r2
 80e30b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80e30b2:	4b83      	ldr	r3, [pc, #524]	; (80e32c0 <HAL_RCC_ClockConfig+0x240>)
 80e30b4:	681b      	ldr	r3, [r3, #0]
 80e30b6:	f003 030f 	and.w	r3, r3, #15
 80e30ba:	683a      	ldr	r2, [r7, #0]
 80e30bc:	429a      	cmp	r2, r3
 80e30be:	d001      	beq.n	80e30c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80e30c0:	2301      	movs	r3, #1
 80e30c2:	e184      	b.n	80e33ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80e30c4:	687b      	ldr	r3, [r7, #4]
 80e30c6:	681b      	ldr	r3, [r3, #0]
 80e30c8:	f003 0304 	and.w	r3, r3, #4
 80e30cc:	2b00      	cmp	r3, #0
 80e30ce:	d010      	beq.n	80e30f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80e30d0:	687b      	ldr	r3, [r7, #4]
 80e30d2:	691a      	ldr	r2, [r3, #16]
 80e30d4:	4b7b      	ldr	r3, [pc, #492]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e30d6:	699b      	ldr	r3, [r3, #24]
 80e30d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e30dc:	429a      	cmp	r2, r3
 80e30de:	d908      	bls.n	80e30f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80e30e0:	4b78      	ldr	r3, [pc, #480]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e30e2:	699b      	ldr	r3, [r3, #24]
 80e30e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e30e8:	687b      	ldr	r3, [r7, #4]
 80e30ea:	691b      	ldr	r3, [r3, #16]
 80e30ec:	4975      	ldr	r1, [pc, #468]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e30ee:	4313      	orrs	r3, r2
 80e30f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80e30f2:	687b      	ldr	r3, [r7, #4]
 80e30f4:	681b      	ldr	r3, [r3, #0]
 80e30f6:	f003 0308 	and.w	r3, r3, #8
 80e30fa:	2b00      	cmp	r3, #0
 80e30fc:	d010      	beq.n	80e3120 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80e30fe:	687b      	ldr	r3, [r7, #4]
 80e3100:	695a      	ldr	r2, [r3, #20]
 80e3102:	4b70      	ldr	r3, [pc, #448]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3104:	69db      	ldr	r3, [r3, #28]
 80e3106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e310a:	429a      	cmp	r2, r3
 80e310c:	d908      	bls.n	80e3120 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80e310e:	4b6d      	ldr	r3, [pc, #436]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3110:	69db      	ldr	r3, [r3, #28]
 80e3112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e3116:	687b      	ldr	r3, [r7, #4]
 80e3118:	695b      	ldr	r3, [r3, #20]
 80e311a:	496a      	ldr	r1, [pc, #424]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e311c:	4313      	orrs	r3, r2
 80e311e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80e3120:	687b      	ldr	r3, [r7, #4]
 80e3122:	681b      	ldr	r3, [r3, #0]
 80e3124:	f003 0310 	and.w	r3, r3, #16
 80e3128:	2b00      	cmp	r3, #0
 80e312a:	d010      	beq.n	80e314e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80e312c:	687b      	ldr	r3, [r7, #4]
 80e312e:	699a      	ldr	r2, [r3, #24]
 80e3130:	4b64      	ldr	r3, [pc, #400]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3132:	69db      	ldr	r3, [r3, #28]
 80e3134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80e3138:	429a      	cmp	r2, r3
 80e313a:	d908      	bls.n	80e314e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80e313c:	4b61      	ldr	r3, [pc, #388]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e313e:	69db      	ldr	r3, [r3, #28]
 80e3140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80e3144:	687b      	ldr	r3, [r7, #4]
 80e3146:	699b      	ldr	r3, [r3, #24]
 80e3148:	495e      	ldr	r1, [pc, #376]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e314a:	4313      	orrs	r3, r2
 80e314c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80e314e:	687b      	ldr	r3, [r7, #4]
 80e3150:	681b      	ldr	r3, [r3, #0]
 80e3152:	f003 0320 	and.w	r3, r3, #32
 80e3156:	2b00      	cmp	r3, #0
 80e3158:	d010      	beq.n	80e317c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80e315a:	687b      	ldr	r3, [r7, #4]
 80e315c:	69da      	ldr	r2, [r3, #28]
 80e315e:	4b59      	ldr	r3, [pc, #356]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3160:	6a1b      	ldr	r3, [r3, #32]
 80e3162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e3166:	429a      	cmp	r2, r3
 80e3168:	d908      	bls.n	80e317c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80e316a:	4b56      	ldr	r3, [pc, #344]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e316c:	6a1b      	ldr	r3, [r3, #32]
 80e316e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e3172:	687b      	ldr	r3, [r7, #4]
 80e3174:	69db      	ldr	r3, [r3, #28]
 80e3176:	4953      	ldr	r1, [pc, #332]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3178:	4313      	orrs	r3, r2
 80e317a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80e317c:	687b      	ldr	r3, [r7, #4]
 80e317e:	681b      	ldr	r3, [r3, #0]
 80e3180:	f003 0302 	and.w	r3, r3, #2
 80e3184:	2b00      	cmp	r3, #0
 80e3186:	d010      	beq.n	80e31aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80e3188:	687b      	ldr	r3, [r7, #4]
 80e318a:	68da      	ldr	r2, [r3, #12]
 80e318c:	4b4d      	ldr	r3, [pc, #308]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e318e:	699b      	ldr	r3, [r3, #24]
 80e3190:	f003 030f 	and.w	r3, r3, #15
 80e3194:	429a      	cmp	r2, r3
 80e3196:	d908      	bls.n	80e31aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80e3198:	4b4a      	ldr	r3, [pc, #296]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e319a:	699b      	ldr	r3, [r3, #24]
 80e319c:	f023 020f 	bic.w	r2, r3, #15
 80e31a0:	687b      	ldr	r3, [r7, #4]
 80e31a2:	68db      	ldr	r3, [r3, #12]
 80e31a4:	4947      	ldr	r1, [pc, #284]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e31a6:	4313      	orrs	r3, r2
 80e31a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80e31aa:	687b      	ldr	r3, [r7, #4]
 80e31ac:	681b      	ldr	r3, [r3, #0]
 80e31ae:	f003 0301 	and.w	r3, r3, #1
 80e31b2:	2b00      	cmp	r3, #0
 80e31b4:	d055      	beq.n	80e3262 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80e31b6:	4b43      	ldr	r3, [pc, #268]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e31b8:	699b      	ldr	r3, [r3, #24]
 80e31ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80e31be:	687b      	ldr	r3, [r7, #4]
 80e31c0:	689b      	ldr	r3, [r3, #8]
 80e31c2:	4940      	ldr	r1, [pc, #256]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e31c4:	4313      	orrs	r3, r2
 80e31c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80e31c8:	687b      	ldr	r3, [r7, #4]
 80e31ca:	685b      	ldr	r3, [r3, #4]
 80e31cc:	2b02      	cmp	r3, #2
 80e31ce:	d107      	bne.n	80e31e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e31d0:	4b3c      	ldr	r3, [pc, #240]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e31d2:	681b      	ldr	r3, [r3, #0]
 80e31d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e31d8:	2b00      	cmp	r3, #0
 80e31da:	d121      	bne.n	80e3220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e31dc:	2301      	movs	r3, #1
 80e31de:	e0f6      	b.n	80e33ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80e31e0:	687b      	ldr	r3, [r7, #4]
 80e31e2:	685b      	ldr	r3, [r3, #4]
 80e31e4:	2b03      	cmp	r3, #3
 80e31e6:	d107      	bne.n	80e31f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e31e8:	4b36      	ldr	r3, [pc, #216]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e31ea:	681b      	ldr	r3, [r3, #0]
 80e31ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e31f0:	2b00      	cmp	r3, #0
 80e31f2:	d115      	bne.n	80e3220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e31f4:	2301      	movs	r3, #1
 80e31f6:	e0ea      	b.n	80e33ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80e31f8:	687b      	ldr	r3, [r7, #4]
 80e31fa:	685b      	ldr	r3, [r3, #4]
 80e31fc:	2b01      	cmp	r3, #1
 80e31fe:	d107      	bne.n	80e3210 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e3200:	4b30      	ldr	r3, [pc, #192]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3202:	681b      	ldr	r3, [r3, #0]
 80e3204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e3208:	2b00      	cmp	r3, #0
 80e320a:	d109      	bne.n	80e3220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e320c:	2301      	movs	r3, #1
 80e320e:	e0de      	b.n	80e33ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e3210:	4b2c      	ldr	r3, [pc, #176]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3212:	681b      	ldr	r3, [r3, #0]
 80e3214:	f003 0304 	and.w	r3, r3, #4
 80e3218:	2b00      	cmp	r3, #0
 80e321a:	d101      	bne.n	80e3220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e321c:	2301      	movs	r3, #1
 80e321e:	e0d6      	b.n	80e33ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80e3220:	4b28      	ldr	r3, [pc, #160]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3222:	691b      	ldr	r3, [r3, #16]
 80e3224:	f023 0207 	bic.w	r2, r3, #7
 80e3228:	687b      	ldr	r3, [r7, #4]
 80e322a:	685b      	ldr	r3, [r3, #4]
 80e322c:	4925      	ldr	r1, [pc, #148]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e322e:	4313      	orrs	r3, r2
 80e3230:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e3232:	f7fe f82b 	bl	80e128c <HAL_GetTick>
 80e3236:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80e3238:	e00a      	b.n	80e3250 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80e323a:	f7fe f827 	bl	80e128c <HAL_GetTick>
 80e323e:	4602      	mov	r2, r0
 80e3240:	697b      	ldr	r3, [r7, #20]
 80e3242:	1ad3      	subs	r3, r2, r3
 80e3244:	f241 3288 	movw	r2, #5000	; 0x1388
 80e3248:	4293      	cmp	r3, r2
 80e324a:	d901      	bls.n	80e3250 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80e324c:	2303      	movs	r3, #3
 80e324e:	e0be      	b.n	80e33ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80e3250:	4b1c      	ldr	r3, [pc, #112]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3252:	691b      	ldr	r3, [r3, #16]
 80e3254:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80e3258:	687b      	ldr	r3, [r7, #4]
 80e325a:	685b      	ldr	r3, [r3, #4]
 80e325c:	00db      	lsls	r3, r3, #3
 80e325e:	429a      	cmp	r2, r3
 80e3260:	d1eb      	bne.n	80e323a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80e3262:	687b      	ldr	r3, [r7, #4]
 80e3264:	681b      	ldr	r3, [r3, #0]
 80e3266:	f003 0302 	and.w	r3, r3, #2
 80e326a:	2b00      	cmp	r3, #0
 80e326c:	d010      	beq.n	80e3290 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80e326e:	687b      	ldr	r3, [r7, #4]
 80e3270:	68da      	ldr	r2, [r3, #12]
 80e3272:	4b14      	ldr	r3, [pc, #80]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3274:	699b      	ldr	r3, [r3, #24]
 80e3276:	f003 030f 	and.w	r3, r3, #15
 80e327a:	429a      	cmp	r2, r3
 80e327c:	d208      	bcs.n	80e3290 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80e327e:	4b11      	ldr	r3, [pc, #68]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e3280:	699b      	ldr	r3, [r3, #24]
 80e3282:	f023 020f 	bic.w	r2, r3, #15
 80e3286:	687b      	ldr	r3, [r7, #4]
 80e3288:	68db      	ldr	r3, [r3, #12]
 80e328a:	490e      	ldr	r1, [pc, #56]	; (80e32c4 <HAL_RCC_ClockConfig+0x244>)
 80e328c:	4313      	orrs	r3, r2
 80e328e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80e3290:	4b0b      	ldr	r3, [pc, #44]	; (80e32c0 <HAL_RCC_ClockConfig+0x240>)
 80e3292:	681b      	ldr	r3, [r3, #0]
 80e3294:	f003 030f 	and.w	r3, r3, #15
 80e3298:	683a      	ldr	r2, [r7, #0]
 80e329a:	429a      	cmp	r2, r3
 80e329c:	d214      	bcs.n	80e32c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80e329e:	4b08      	ldr	r3, [pc, #32]	; (80e32c0 <HAL_RCC_ClockConfig+0x240>)
 80e32a0:	681b      	ldr	r3, [r3, #0]
 80e32a2:	f023 020f 	bic.w	r2, r3, #15
 80e32a6:	4906      	ldr	r1, [pc, #24]	; (80e32c0 <HAL_RCC_ClockConfig+0x240>)
 80e32a8:	683b      	ldr	r3, [r7, #0]
 80e32aa:	4313      	orrs	r3, r2
 80e32ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80e32ae:	4b04      	ldr	r3, [pc, #16]	; (80e32c0 <HAL_RCC_ClockConfig+0x240>)
 80e32b0:	681b      	ldr	r3, [r3, #0]
 80e32b2:	f003 030f 	and.w	r3, r3, #15
 80e32b6:	683a      	ldr	r2, [r7, #0]
 80e32b8:	429a      	cmp	r2, r3
 80e32ba:	d005      	beq.n	80e32c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80e32bc:	2301      	movs	r3, #1
 80e32be:	e086      	b.n	80e33ce <HAL_RCC_ClockConfig+0x34e>
 80e32c0:	52002000 	.word	0x52002000
 80e32c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80e32c8:	687b      	ldr	r3, [r7, #4]
 80e32ca:	681b      	ldr	r3, [r3, #0]
 80e32cc:	f003 0304 	and.w	r3, r3, #4
 80e32d0:	2b00      	cmp	r3, #0
 80e32d2:	d010      	beq.n	80e32f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80e32d4:	687b      	ldr	r3, [r7, #4]
 80e32d6:	691a      	ldr	r2, [r3, #16]
 80e32d8:	4b3f      	ldr	r3, [pc, #252]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e32da:	699b      	ldr	r3, [r3, #24]
 80e32dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e32e0:	429a      	cmp	r2, r3
 80e32e2:	d208      	bcs.n	80e32f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80e32e4:	4b3c      	ldr	r3, [pc, #240]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e32e6:	699b      	ldr	r3, [r3, #24]
 80e32e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e32ec:	687b      	ldr	r3, [r7, #4]
 80e32ee:	691b      	ldr	r3, [r3, #16]
 80e32f0:	4939      	ldr	r1, [pc, #228]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e32f2:	4313      	orrs	r3, r2
 80e32f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80e32f6:	687b      	ldr	r3, [r7, #4]
 80e32f8:	681b      	ldr	r3, [r3, #0]
 80e32fa:	f003 0308 	and.w	r3, r3, #8
 80e32fe:	2b00      	cmp	r3, #0
 80e3300:	d010      	beq.n	80e3324 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80e3302:	687b      	ldr	r3, [r7, #4]
 80e3304:	695a      	ldr	r2, [r3, #20]
 80e3306:	4b34      	ldr	r3, [pc, #208]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e3308:	69db      	ldr	r3, [r3, #28]
 80e330a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e330e:	429a      	cmp	r2, r3
 80e3310:	d208      	bcs.n	80e3324 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80e3312:	4b31      	ldr	r3, [pc, #196]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e3314:	69db      	ldr	r3, [r3, #28]
 80e3316:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e331a:	687b      	ldr	r3, [r7, #4]
 80e331c:	695b      	ldr	r3, [r3, #20]
 80e331e:	492e      	ldr	r1, [pc, #184]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e3320:	4313      	orrs	r3, r2
 80e3322:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80e3324:	687b      	ldr	r3, [r7, #4]
 80e3326:	681b      	ldr	r3, [r3, #0]
 80e3328:	f003 0310 	and.w	r3, r3, #16
 80e332c:	2b00      	cmp	r3, #0
 80e332e:	d010      	beq.n	80e3352 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80e3330:	687b      	ldr	r3, [r7, #4]
 80e3332:	699a      	ldr	r2, [r3, #24]
 80e3334:	4b28      	ldr	r3, [pc, #160]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e3336:	69db      	ldr	r3, [r3, #28]
 80e3338:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80e333c:	429a      	cmp	r2, r3
 80e333e:	d208      	bcs.n	80e3352 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80e3340:	4b25      	ldr	r3, [pc, #148]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e3342:	69db      	ldr	r3, [r3, #28]
 80e3344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80e3348:	687b      	ldr	r3, [r7, #4]
 80e334a:	699b      	ldr	r3, [r3, #24]
 80e334c:	4922      	ldr	r1, [pc, #136]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e334e:	4313      	orrs	r3, r2
 80e3350:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80e3352:	687b      	ldr	r3, [r7, #4]
 80e3354:	681b      	ldr	r3, [r3, #0]
 80e3356:	f003 0320 	and.w	r3, r3, #32
 80e335a:	2b00      	cmp	r3, #0
 80e335c:	d010      	beq.n	80e3380 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80e335e:	687b      	ldr	r3, [r7, #4]
 80e3360:	69da      	ldr	r2, [r3, #28]
 80e3362:	4b1d      	ldr	r3, [pc, #116]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e3364:	6a1b      	ldr	r3, [r3, #32]
 80e3366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e336a:	429a      	cmp	r2, r3
 80e336c:	d208      	bcs.n	80e3380 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80e336e:	4b1a      	ldr	r3, [pc, #104]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e3370:	6a1b      	ldr	r3, [r3, #32]
 80e3372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e3376:	687b      	ldr	r3, [r7, #4]
 80e3378:	69db      	ldr	r3, [r3, #28]
 80e337a:	4917      	ldr	r1, [pc, #92]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e337c:	4313      	orrs	r3, r2
 80e337e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80e3380:	f000 f834 	bl	80e33ec <HAL_RCC_GetSysClockFreq>
 80e3384:	4602      	mov	r2, r0
 80e3386:	4b14      	ldr	r3, [pc, #80]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e3388:	699b      	ldr	r3, [r3, #24]
 80e338a:	0a1b      	lsrs	r3, r3, #8
 80e338c:	f003 030f 	and.w	r3, r3, #15
 80e3390:	4912      	ldr	r1, [pc, #72]	; (80e33dc <HAL_RCC_ClockConfig+0x35c>)
 80e3392:	5ccb      	ldrb	r3, [r1, r3]
 80e3394:	f003 031f 	and.w	r3, r3, #31
 80e3398:	fa22 f303 	lsr.w	r3, r2, r3
 80e339c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80e339e:	4b0e      	ldr	r3, [pc, #56]	; (80e33d8 <HAL_RCC_ClockConfig+0x358>)
 80e33a0:	699b      	ldr	r3, [r3, #24]
 80e33a2:	f003 030f 	and.w	r3, r3, #15
 80e33a6:	4a0d      	ldr	r2, [pc, #52]	; (80e33dc <HAL_RCC_ClockConfig+0x35c>)
 80e33a8:	5cd3      	ldrb	r3, [r2, r3]
 80e33aa:	f003 031f 	and.w	r3, r3, #31
 80e33ae:	693a      	ldr	r2, [r7, #16]
 80e33b0:	fa22 f303 	lsr.w	r3, r2, r3
 80e33b4:	4a0a      	ldr	r2, [pc, #40]	; (80e33e0 <HAL_RCC_ClockConfig+0x360>)
 80e33b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80e33b8:	4a0a      	ldr	r2, [pc, #40]	; (80e33e4 <HAL_RCC_ClockConfig+0x364>)
 80e33ba:	693b      	ldr	r3, [r7, #16]
 80e33bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80e33be:	4b0a      	ldr	r3, [pc, #40]	; (80e33e8 <HAL_RCC_ClockConfig+0x368>)
 80e33c0:	681b      	ldr	r3, [r3, #0]
 80e33c2:	4618      	mov	r0, r3
 80e33c4:	f7fd ff18 	bl	80e11f8 <HAL_InitTick>
 80e33c8:	4603      	mov	r3, r0
 80e33ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80e33cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80e33ce:	4618      	mov	r0, r3
 80e33d0:	3718      	adds	r7, #24
 80e33d2:	46bd      	mov	sp, r7
 80e33d4:	bd80      	pop	{r7, pc}
 80e33d6:	bf00      	nop
 80e33d8:	58024400 	.word	0x58024400
 80e33dc:	080e4874 	.word	0x080e4874
 80e33e0:	24000004 	.word	0x24000004
 80e33e4:	24000000 	.word	0x24000000
 80e33e8:	24000008 	.word	0x24000008

080e33ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80e33ec:	b480      	push	{r7}
 80e33ee:	b089      	sub	sp, #36	; 0x24
 80e33f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80e33f2:	4bb3      	ldr	r3, [pc, #716]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e33f4:	691b      	ldr	r3, [r3, #16]
 80e33f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e33fa:	2b18      	cmp	r3, #24
 80e33fc:	f200 8155 	bhi.w	80e36aa <HAL_RCC_GetSysClockFreq+0x2be>
 80e3400:	a201      	add	r2, pc, #4	; (adr r2, 80e3408 <HAL_RCC_GetSysClockFreq+0x1c>)
 80e3402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e3406:	bf00      	nop
 80e3408:	080e346d 	.word	0x080e346d
 80e340c:	080e36ab 	.word	0x080e36ab
 80e3410:	080e36ab 	.word	0x080e36ab
 80e3414:	080e36ab 	.word	0x080e36ab
 80e3418:	080e36ab 	.word	0x080e36ab
 80e341c:	080e36ab 	.word	0x080e36ab
 80e3420:	080e36ab 	.word	0x080e36ab
 80e3424:	080e36ab 	.word	0x080e36ab
 80e3428:	080e3493 	.word	0x080e3493
 80e342c:	080e36ab 	.word	0x080e36ab
 80e3430:	080e36ab 	.word	0x080e36ab
 80e3434:	080e36ab 	.word	0x080e36ab
 80e3438:	080e36ab 	.word	0x080e36ab
 80e343c:	080e36ab 	.word	0x080e36ab
 80e3440:	080e36ab 	.word	0x080e36ab
 80e3444:	080e36ab 	.word	0x080e36ab
 80e3448:	080e3499 	.word	0x080e3499
 80e344c:	080e36ab 	.word	0x080e36ab
 80e3450:	080e36ab 	.word	0x080e36ab
 80e3454:	080e36ab 	.word	0x080e36ab
 80e3458:	080e36ab 	.word	0x080e36ab
 80e345c:	080e36ab 	.word	0x080e36ab
 80e3460:	080e36ab 	.word	0x080e36ab
 80e3464:	080e36ab 	.word	0x080e36ab
 80e3468:	080e349f 	.word	0x080e349f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80e346c:	4b94      	ldr	r3, [pc, #592]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e346e:	681b      	ldr	r3, [r3, #0]
 80e3470:	f003 0320 	and.w	r3, r3, #32
 80e3474:	2b00      	cmp	r3, #0
 80e3476:	d009      	beq.n	80e348c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80e3478:	4b91      	ldr	r3, [pc, #580]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e347a:	681b      	ldr	r3, [r3, #0]
 80e347c:	08db      	lsrs	r3, r3, #3
 80e347e:	f003 0303 	and.w	r3, r3, #3
 80e3482:	4a90      	ldr	r2, [pc, #576]	; (80e36c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e3484:	fa22 f303 	lsr.w	r3, r2, r3
 80e3488:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80e348a:	e111      	b.n	80e36b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80e348c:	4b8d      	ldr	r3, [pc, #564]	; (80e36c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e348e:	61bb      	str	r3, [r7, #24]
    break;
 80e3490:	e10e      	b.n	80e36b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80e3492:	4b8d      	ldr	r3, [pc, #564]	; (80e36c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80e3494:	61bb      	str	r3, [r7, #24]
    break;
 80e3496:	e10b      	b.n	80e36b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80e3498:	4b8c      	ldr	r3, [pc, #560]	; (80e36cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80e349a:	61bb      	str	r3, [r7, #24]
    break;
 80e349c:	e108      	b.n	80e36b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80e349e:	4b88      	ldr	r3, [pc, #544]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e34a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e34a2:	f003 0303 	and.w	r3, r3, #3
 80e34a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80e34a8:	4b85      	ldr	r3, [pc, #532]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e34aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e34ac:	091b      	lsrs	r3, r3, #4
 80e34ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e34b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80e34b4:	4b82      	ldr	r3, [pc, #520]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e34b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e34b8:	f003 0301 	and.w	r3, r3, #1
 80e34bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80e34be:	4b80      	ldr	r3, [pc, #512]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e34c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e34c2:	08db      	lsrs	r3, r3, #3
 80e34c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80e34c8:	68fa      	ldr	r2, [r7, #12]
 80e34ca:	fb02 f303 	mul.w	r3, r2, r3
 80e34ce:	ee07 3a90 	vmov	s15, r3
 80e34d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e34d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80e34da:	693b      	ldr	r3, [r7, #16]
 80e34dc:	2b00      	cmp	r3, #0
 80e34de:	f000 80e1 	beq.w	80e36a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80e34e2:	697b      	ldr	r3, [r7, #20]
 80e34e4:	2b02      	cmp	r3, #2
 80e34e6:	f000 8083 	beq.w	80e35f0 <HAL_RCC_GetSysClockFreq+0x204>
 80e34ea:	697b      	ldr	r3, [r7, #20]
 80e34ec:	2b02      	cmp	r3, #2
 80e34ee:	f200 80a1 	bhi.w	80e3634 <HAL_RCC_GetSysClockFreq+0x248>
 80e34f2:	697b      	ldr	r3, [r7, #20]
 80e34f4:	2b00      	cmp	r3, #0
 80e34f6:	d003      	beq.n	80e3500 <HAL_RCC_GetSysClockFreq+0x114>
 80e34f8:	697b      	ldr	r3, [r7, #20]
 80e34fa:	2b01      	cmp	r3, #1
 80e34fc:	d056      	beq.n	80e35ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80e34fe:	e099      	b.n	80e3634 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80e3500:	4b6f      	ldr	r3, [pc, #444]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e3502:	681b      	ldr	r3, [r3, #0]
 80e3504:	f003 0320 	and.w	r3, r3, #32
 80e3508:	2b00      	cmp	r3, #0
 80e350a:	d02d      	beq.n	80e3568 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80e350c:	4b6c      	ldr	r3, [pc, #432]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e350e:	681b      	ldr	r3, [r3, #0]
 80e3510:	08db      	lsrs	r3, r3, #3
 80e3512:	f003 0303 	and.w	r3, r3, #3
 80e3516:	4a6b      	ldr	r2, [pc, #428]	; (80e36c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e3518:	fa22 f303 	lsr.w	r3, r2, r3
 80e351c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e351e:	687b      	ldr	r3, [r7, #4]
 80e3520:	ee07 3a90 	vmov	s15, r3
 80e3524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e3528:	693b      	ldr	r3, [r7, #16]
 80e352a:	ee07 3a90 	vmov	s15, r3
 80e352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e3532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e3536:	4b62      	ldr	r3, [pc, #392]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e3538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e353a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e353e:	ee07 3a90 	vmov	s15, r3
 80e3542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e3546:	ed97 6a02 	vldr	s12, [r7, #8]
 80e354a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80e36d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e354e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e3552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e3556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e355a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e355e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e3562:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80e3566:	e087      	b.n	80e3678 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e3568:	693b      	ldr	r3, [r7, #16]
 80e356a:	ee07 3a90 	vmov	s15, r3
 80e356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e3572:	eddf 6a58 	vldr	s13, [pc, #352]	; 80e36d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 80e3576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e357a:	4b51      	ldr	r3, [pc, #324]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e3582:	ee07 3a90 	vmov	s15, r3
 80e3586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e358a:	ed97 6a02 	vldr	s12, [r7, #8]
 80e358e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80e36d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e3592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e3596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e359a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e35a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e35a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e35aa:	e065      	b.n	80e3678 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e35ac:	693b      	ldr	r3, [r7, #16]
 80e35ae:	ee07 3a90 	vmov	s15, r3
 80e35b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e35b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80e36d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80e35ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e35be:	4b40      	ldr	r3, [pc, #256]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e35c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e35c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e35c6:	ee07 3a90 	vmov	s15, r3
 80e35ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e35ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80e35d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80e36d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e35d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e35da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e35de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e35e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e35e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e35ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e35ee:	e043      	b.n	80e3678 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e35f0:	693b      	ldr	r3, [r7, #16]
 80e35f2:	ee07 3a90 	vmov	s15, r3
 80e35f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e35fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80e36dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80e35fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e3602:	4b2f      	ldr	r3, [pc, #188]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e3604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e3606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e360a:	ee07 3a90 	vmov	s15, r3
 80e360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e3612:	ed97 6a02 	vldr	s12, [r7, #8]
 80e3616:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80e36d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e361a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e361e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e3622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e3626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e362e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e3632:	e021      	b.n	80e3678 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e3634:	693b      	ldr	r3, [r7, #16]
 80e3636:	ee07 3a90 	vmov	s15, r3
 80e363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e363e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80e36d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80e3642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e3646:	4b1e      	ldr	r3, [pc, #120]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e3648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e364e:	ee07 3a90 	vmov	s15, r3
 80e3652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e3656:	ed97 6a02 	vldr	s12, [r7, #8]
 80e365a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80e36d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e365e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e3662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e3666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e366a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e3672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e3676:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80e3678:	4b11      	ldr	r3, [pc, #68]	; (80e36c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e367c:	0a5b      	lsrs	r3, r3, #9
 80e367e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e3682:	3301      	adds	r3, #1
 80e3684:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80e3686:	683b      	ldr	r3, [r7, #0]
 80e3688:	ee07 3a90 	vmov	s15, r3
 80e368c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80e3690:	edd7 6a07 	vldr	s13, [r7, #28]
 80e3694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80e3698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80e369c:	ee17 3a90 	vmov	r3, s15
 80e36a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80e36a2:	e005      	b.n	80e36b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80e36a4:	2300      	movs	r3, #0
 80e36a6:	61bb      	str	r3, [r7, #24]
    break;
 80e36a8:	e002      	b.n	80e36b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80e36aa:	4b07      	ldr	r3, [pc, #28]	; (80e36c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80e36ac:	61bb      	str	r3, [r7, #24]
    break;
 80e36ae:	bf00      	nop
  }

  return sysclockfreq;
 80e36b0:	69bb      	ldr	r3, [r7, #24]
}
 80e36b2:	4618      	mov	r0, r3
 80e36b4:	3724      	adds	r7, #36	; 0x24
 80e36b6:	46bd      	mov	sp, r7
 80e36b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e36bc:	4770      	bx	lr
 80e36be:	bf00      	nop
 80e36c0:	58024400 	.word	0x58024400
 80e36c4:	03d09000 	.word	0x03d09000
 80e36c8:	003d0900 	.word	0x003d0900
 80e36cc:	017d7840 	.word	0x017d7840
 80e36d0:	46000000 	.word	0x46000000
 80e36d4:	4c742400 	.word	0x4c742400
 80e36d8:	4a742400 	.word	0x4a742400
 80e36dc:	4bbebc20 	.word	0x4bbebc20

080e36e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80e36e0:	b580      	push	{r7, lr}
 80e36e2:	b086      	sub	sp, #24
 80e36e4:	af00      	add	r7, sp, #0
 80e36e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80e36e8:	2300      	movs	r3, #0
 80e36ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80e36ec:	2300      	movs	r3, #0
 80e36ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80e36f0:	687b      	ldr	r3, [r7, #4]
 80e36f2:	681b      	ldr	r3, [r3, #0]
 80e36f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e36f8:	2b00      	cmp	r3, #0
 80e36fa:	d03f      	beq.n	80e377c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80e36fc:	687b      	ldr	r3, [r7, #4]
 80e36fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e3700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e3704:	d02a      	beq.n	80e375c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80e3706:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e370a:	d824      	bhi.n	80e3756 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80e370c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e3710:	d018      	beq.n	80e3744 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80e3712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e3716:	d81e      	bhi.n	80e3756 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80e3718:	2b00      	cmp	r3, #0
 80e371a:	d003      	beq.n	80e3724 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80e371c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80e3720:	d007      	beq.n	80e3732 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80e3722:	e018      	b.n	80e3756 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3724:	4ba4      	ldr	r3, [pc, #656]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3728:	4aa3      	ldr	r2, [pc, #652]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e372a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e372e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e3730:	e015      	b.n	80e375e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e3732:	687b      	ldr	r3, [r7, #4]
 80e3734:	3304      	adds	r3, #4
 80e3736:	2102      	movs	r1, #2
 80e3738:	4618      	mov	r0, r3
 80e373a:	f000 fecb 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e373e:	4603      	mov	r3, r0
 80e3740:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e3742:	e00c      	b.n	80e375e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e3744:	687b      	ldr	r3, [r7, #4]
 80e3746:	3324      	adds	r3, #36	; 0x24
 80e3748:	2102      	movs	r1, #2
 80e374a:	4618      	mov	r0, r3
 80e374c:	f000 ff74 	bl	80e4638 <RCCEx_PLL3_Config>
 80e3750:	4603      	mov	r3, r0
 80e3752:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e3754:	e003      	b.n	80e375e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3756:	2301      	movs	r3, #1
 80e3758:	75fb      	strb	r3, [r7, #23]
      break;
 80e375a:	e000      	b.n	80e375e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80e375c:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e375e:	7dfb      	ldrb	r3, [r7, #23]
 80e3760:	2b00      	cmp	r3, #0
 80e3762:	d109      	bne.n	80e3778 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80e3764:	4b94      	ldr	r3, [pc, #592]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80e376c:	687b      	ldr	r3, [r7, #4]
 80e376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e3770:	4991      	ldr	r1, [pc, #580]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3772:	4313      	orrs	r3, r2
 80e3774:	650b      	str	r3, [r1, #80]	; 0x50
 80e3776:	e001      	b.n	80e377c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3778:	7dfb      	ldrb	r3, [r7, #23]
 80e377a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80e377c:	687b      	ldr	r3, [r7, #4]
 80e377e:	681b      	ldr	r3, [r3, #0]
 80e3780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e3784:	2b00      	cmp	r3, #0
 80e3786:	d03d      	beq.n	80e3804 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80e3788:	687b      	ldr	r3, [r7, #4]
 80e378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e378c:	2b04      	cmp	r3, #4
 80e378e:	d826      	bhi.n	80e37de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80e3790:	a201      	add	r2, pc, #4	; (adr r2, 80e3798 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80e3792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e3796:	bf00      	nop
 80e3798:	080e37ad 	.word	0x080e37ad
 80e379c:	080e37bb 	.word	0x080e37bb
 80e37a0:	080e37cd 	.word	0x080e37cd
 80e37a4:	080e37e5 	.word	0x080e37e5
 80e37a8:	080e37e5 	.word	0x080e37e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e37ac:	4b82      	ldr	r3, [pc, #520]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e37ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e37b0:	4a81      	ldr	r2, [pc, #516]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e37b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e37b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e37b8:	e015      	b.n	80e37e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e37ba:	687b      	ldr	r3, [r7, #4]
 80e37bc:	3304      	adds	r3, #4
 80e37be:	2100      	movs	r1, #0
 80e37c0:	4618      	mov	r0, r3
 80e37c2:	f000 fe87 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e37c6:	4603      	mov	r3, r0
 80e37c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e37ca:	e00c      	b.n	80e37e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e37cc:	687b      	ldr	r3, [r7, #4]
 80e37ce:	3324      	adds	r3, #36	; 0x24
 80e37d0:	2100      	movs	r1, #0
 80e37d2:	4618      	mov	r0, r3
 80e37d4:	f000 ff30 	bl	80e4638 <RCCEx_PLL3_Config>
 80e37d8:	4603      	mov	r3, r0
 80e37da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e37dc:	e003      	b.n	80e37e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e37de:	2301      	movs	r3, #1
 80e37e0:	75fb      	strb	r3, [r7, #23]
      break;
 80e37e2:	e000      	b.n	80e37e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80e37e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e37e6:	7dfb      	ldrb	r3, [r7, #23]
 80e37e8:	2b00      	cmp	r3, #0
 80e37ea:	d109      	bne.n	80e3800 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80e37ec:	4b72      	ldr	r3, [pc, #456]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e37ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e37f0:	f023 0207 	bic.w	r2, r3, #7
 80e37f4:	687b      	ldr	r3, [r7, #4]
 80e37f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e37f8:	496f      	ldr	r1, [pc, #444]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e37fa:	4313      	orrs	r3, r2
 80e37fc:	650b      	str	r3, [r1, #80]	; 0x50
 80e37fe:	e001      	b.n	80e3804 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3800:	7dfb      	ldrb	r3, [r7, #23]
 80e3802:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80e3804:	687b      	ldr	r3, [r7, #4]
 80e3806:	681b      	ldr	r3, [r3, #0]
 80e3808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80e380c:	2b00      	cmp	r3, #0
 80e380e:	d051      	beq.n	80e38b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80e3810:	687b      	ldr	r3, [r7, #4]
 80e3812:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e3816:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80e381a:	d036      	beq.n	80e388a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80e381c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80e3820:	d830      	bhi.n	80e3884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e3822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80e3826:	d032      	beq.n	80e388e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80e3828:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80e382c:	d82a      	bhi.n	80e3884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e382e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80e3832:	d02e      	beq.n	80e3892 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80e3834:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80e3838:	d824      	bhi.n	80e3884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e383a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80e383e:	d018      	beq.n	80e3872 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80e3840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80e3844:	d81e      	bhi.n	80e3884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e3846:	2b00      	cmp	r3, #0
 80e3848:	d003      	beq.n	80e3852 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80e384a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e384e:	d007      	beq.n	80e3860 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80e3850:	e018      	b.n	80e3884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3852:	4b59      	ldr	r3, [pc, #356]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3856:	4a58      	ldr	r2, [pc, #352]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e385c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e385e:	e019      	b.n	80e3894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3860:	687b      	ldr	r3, [r7, #4]
 80e3862:	3304      	adds	r3, #4
 80e3864:	2100      	movs	r1, #0
 80e3866:	4618      	mov	r0, r3
 80e3868:	f000 fe34 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e386c:	4603      	mov	r3, r0
 80e386e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80e3870:	e010      	b.n	80e3894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e3872:	687b      	ldr	r3, [r7, #4]
 80e3874:	3324      	adds	r3, #36	; 0x24
 80e3876:	2100      	movs	r1, #0
 80e3878:	4618      	mov	r0, r3
 80e387a:	f000 fedd 	bl	80e4638 <RCCEx_PLL3_Config>
 80e387e:	4603      	mov	r3, r0
 80e3880:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3882:	e007      	b.n	80e3894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80e3884:	2301      	movs	r3, #1
 80e3886:	75fb      	strb	r3, [r7, #23]
      break;
 80e3888:	e004      	b.n	80e3894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e388a:	bf00      	nop
 80e388c:	e002      	b.n	80e3894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e388e:	bf00      	nop
 80e3890:	e000      	b.n	80e3894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e3892:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3894:	7dfb      	ldrb	r3, [r7, #23]
 80e3896:	2b00      	cmp	r3, #0
 80e3898:	d10a      	bne.n	80e38b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80e389a:	4b47      	ldr	r3, [pc, #284]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e389e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80e38a2:	687b      	ldr	r3, [r7, #4]
 80e38a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e38a8:	4943      	ldr	r1, [pc, #268]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e38aa:	4313      	orrs	r3, r2
 80e38ac:	658b      	str	r3, [r1, #88]	; 0x58
 80e38ae:	e001      	b.n	80e38b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e38b0:	7dfb      	ldrb	r3, [r7, #23]
 80e38b2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80e38b4:	687b      	ldr	r3, [r7, #4]
 80e38b6:	681b      	ldr	r3, [r3, #0]
 80e38b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80e38bc:	2b00      	cmp	r3, #0
 80e38be:	d051      	beq.n	80e3964 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80e38c0:	687b      	ldr	r3, [r7, #4]
 80e38c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e38c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80e38ca:	d036      	beq.n	80e393a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80e38cc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80e38d0:	d830      	bhi.n	80e3934 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e38d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80e38d6:	d032      	beq.n	80e393e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80e38d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80e38dc:	d82a      	bhi.n	80e3934 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e38de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80e38e2:	d02e      	beq.n	80e3942 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80e38e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80e38e8:	d824      	bhi.n	80e3934 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e38ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80e38ee:	d018      	beq.n	80e3922 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80e38f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80e38f4:	d81e      	bhi.n	80e3934 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e38f6:	2b00      	cmp	r3, #0
 80e38f8:	d003      	beq.n	80e3902 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80e38fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80e38fe:	d007      	beq.n	80e3910 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80e3900:	e018      	b.n	80e3934 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3902:	4b2d      	ldr	r3, [pc, #180]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3906:	4a2c      	ldr	r2, [pc, #176]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e390c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e390e:	e019      	b.n	80e3944 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3910:	687b      	ldr	r3, [r7, #4]
 80e3912:	3304      	adds	r3, #4
 80e3914:	2100      	movs	r1, #0
 80e3916:	4618      	mov	r0, r3
 80e3918:	f000 fddc 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e391c:	4603      	mov	r3, r0
 80e391e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80e3920:	e010      	b.n	80e3944 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80e3922:	687b      	ldr	r3, [r7, #4]
 80e3924:	3324      	adds	r3, #36	; 0x24
 80e3926:	2100      	movs	r1, #0
 80e3928:	4618      	mov	r0, r3
 80e392a:	f000 fe85 	bl	80e4638 <RCCEx_PLL3_Config>
 80e392e:	4603      	mov	r3, r0
 80e3930:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3932:	e007      	b.n	80e3944 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80e3934:	2301      	movs	r3, #1
 80e3936:	75fb      	strb	r3, [r7, #23]
      break;
 80e3938:	e004      	b.n	80e3944 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e393a:	bf00      	nop
 80e393c:	e002      	b.n	80e3944 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e393e:	bf00      	nop
 80e3940:	e000      	b.n	80e3944 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e3942:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3944:	7dfb      	ldrb	r3, [r7, #23]
 80e3946:	2b00      	cmp	r3, #0
 80e3948:	d10a      	bne.n	80e3960 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80e394a:	4b1b      	ldr	r3, [pc, #108]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e394e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80e3952:	687b      	ldr	r3, [r7, #4]
 80e3954:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e3958:	4917      	ldr	r1, [pc, #92]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e395a:	4313      	orrs	r3, r2
 80e395c:	658b      	str	r3, [r1, #88]	; 0x58
 80e395e:	e001      	b.n	80e3964 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3960:	7dfb      	ldrb	r3, [r7, #23]
 80e3962:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80e3964:	687b      	ldr	r3, [r7, #4]
 80e3966:	681b      	ldr	r3, [r3, #0]
 80e3968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e396c:	2b00      	cmp	r3, #0
 80e396e:	d035      	beq.n	80e39dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80e3970:	687b      	ldr	r3, [r7, #4]
 80e3972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e3974:	2b30      	cmp	r3, #48	; 0x30
 80e3976:	d01c      	beq.n	80e39b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80e3978:	2b30      	cmp	r3, #48	; 0x30
 80e397a:	d817      	bhi.n	80e39ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80e397c:	2b20      	cmp	r3, #32
 80e397e:	d00c      	beq.n	80e399a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80e3980:	2b20      	cmp	r3, #32
 80e3982:	d813      	bhi.n	80e39ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80e3984:	2b00      	cmp	r3, #0
 80e3986:	d019      	beq.n	80e39bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80e3988:	2b10      	cmp	r3, #16
 80e398a:	d10f      	bne.n	80e39ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e398c:	4b0a      	ldr	r3, [pc, #40]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3990:	4a09      	ldr	r2, [pc, #36]	; (80e39b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80e3998:	e011      	b.n	80e39be <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e399a:	687b      	ldr	r3, [r7, #4]
 80e399c:	3304      	adds	r3, #4
 80e399e:	2102      	movs	r1, #2
 80e39a0:	4618      	mov	r0, r3
 80e39a2:	f000 fd97 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e39a6:	4603      	mov	r3, r0
 80e39a8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80e39aa:	e008      	b.n	80e39be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80e39ac:	2301      	movs	r3, #1
 80e39ae:	75fb      	strb	r3, [r7, #23]
      break;
 80e39b0:	e005      	b.n	80e39be <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80e39b2:	bf00      	nop
 80e39b4:	e003      	b.n	80e39be <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80e39b6:	bf00      	nop
 80e39b8:	58024400 	.word	0x58024400
      break;
 80e39bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e39be:	7dfb      	ldrb	r3, [r7, #23]
 80e39c0:	2b00      	cmp	r3, #0
 80e39c2:	d109      	bne.n	80e39d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80e39c4:	4ba3      	ldr	r3, [pc, #652]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e39c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e39c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80e39cc:	687b      	ldr	r3, [r7, #4]
 80e39ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e39d0:	49a0      	ldr	r1, [pc, #640]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e39d2:	4313      	orrs	r3, r2
 80e39d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e39d6:	e001      	b.n	80e39dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e39d8:	7dfb      	ldrb	r3, [r7, #23]
 80e39da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80e39dc:	687b      	ldr	r3, [r7, #4]
 80e39de:	681b      	ldr	r3, [r3, #0]
 80e39e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80e39e4:	2b00      	cmp	r3, #0
 80e39e6:	d047      	beq.n	80e3a78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80e39e8:	687b      	ldr	r3, [r7, #4]
 80e39ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e39ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e39f0:	d030      	beq.n	80e3a54 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80e39f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e39f6:	d82a      	bhi.n	80e3a4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e39f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80e39fc:	d02c      	beq.n	80e3a58 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80e39fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80e3a02:	d824      	bhi.n	80e3a4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e3a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e3a08:	d018      	beq.n	80e3a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80e3a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e3a0e:	d81e      	bhi.n	80e3a4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e3a10:	2b00      	cmp	r3, #0
 80e3a12:	d003      	beq.n	80e3a1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80e3a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e3a18:	d007      	beq.n	80e3a2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80e3a1a:	e018      	b.n	80e3a4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3a1c:	4b8d      	ldr	r3, [pc, #564]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3a20:	4a8c      	ldr	r2, [pc, #560]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e3a28:	e017      	b.n	80e3a5a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3a2a:	687b      	ldr	r3, [r7, #4]
 80e3a2c:	3304      	adds	r3, #4
 80e3a2e:	2100      	movs	r1, #0
 80e3a30:	4618      	mov	r0, r3
 80e3a32:	f000 fd4f 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e3a36:	4603      	mov	r3, r0
 80e3a38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e3a3a:	e00e      	b.n	80e3a5a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e3a3c:	687b      	ldr	r3, [r7, #4]
 80e3a3e:	3324      	adds	r3, #36	; 0x24
 80e3a40:	2100      	movs	r1, #0
 80e3a42:	4618      	mov	r0, r3
 80e3a44:	f000 fdf8 	bl	80e4638 <RCCEx_PLL3_Config>
 80e3a48:	4603      	mov	r3, r0
 80e3a4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e3a4c:	e005      	b.n	80e3a5a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3a4e:	2301      	movs	r3, #1
 80e3a50:	75fb      	strb	r3, [r7, #23]
      break;
 80e3a52:	e002      	b.n	80e3a5a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80e3a54:	bf00      	nop
 80e3a56:	e000      	b.n	80e3a5a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80e3a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3a5a:	7dfb      	ldrb	r3, [r7, #23]
 80e3a5c:	2b00      	cmp	r3, #0
 80e3a5e:	d109      	bne.n	80e3a74 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80e3a60:	4b7c      	ldr	r3, [pc, #496]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3a64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80e3a68:	687b      	ldr	r3, [r7, #4]
 80e3a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3a6c:	4979      	ldr	r1, [pc, #484]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3a6e:	4313      	orrs	r3, r2
 80e3a70:	650b      	str	r3, [r1, #80]	; 0x50
 80e3a72:	e001      	b.n	80e3a78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3a74:	7dfb      	ldrb	r3, [r7, #23]
 80e3a76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80e3a78:	687b      	ldr	r3, [r7, #4]
 80e3a7a:	681b      	ldr	r3, [r3, #0]
 80e3a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e3a80:	2b00      	cmp	r3, #0
 80e3a82:	d049      	beq.n	80e3b18 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80e3a84:	687b      	ldr	r3, [r7, #4]
 80e3a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e3a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e3a8c:	d02e      	beq.n	80e3aec <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80e3a8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e3a92:	d828      	bhi.n	80e3ae6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e3a94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80e3a98:	d02a      	beq.n	80e3af0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80e3a9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80e3a9e:	d822      	bhi.n	80e3ae6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e3aa0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80e3aa4:	d026      	beq.n	80e3af4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80e3aa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80e3aaa:	d81c      	bhi.n	80e3ae6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e3aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e3ab0:	d010      	beq.n	80e3ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80e3ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e3ab6:	d816      	bhi.n	80e3ae6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e3ab8:	2b00      	cmp	r3, #0
 80e3aba:	d01d      	beq.n	80e3af8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80e3abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e3ac0:	d111      	bne.n	80e3ae6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3ac2:	687b      	ldr	r3, [r7, #4]
 80e3ac4:	3304      	adds	r3, #4
 80e3ac6:	2101      	movs	r1, #1
 80e3ac8:	4618      	mov	r0, r3
 80e3aca:	f000 fd03 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e3ace:	4603      	mov	r3, r0
 80e3ad0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80e3ad2:	e012      	b.n	80e3afa <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e3ad4:	687b      	ldr	r3, [r7, #4]
 80e3ad6:	3324      	adds	r3, #36	; 0x24
 80e3ad8:	2101      	movs	r1, #1
 80e3ada:	4618      	mov	r0, r3
 80e3adc:	f000 fdac 	bl	80e4638 <RCCEx_PLL3_Config>
 80e3ae0:	4603      	mov	r3, r0
 80e3ae2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80e3ae4:	e009      	b.n	80e3afa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3ae6:	2301      	movs	r3, #1
 80e3ae8:	75fb      	strb	r3, [r7, #23]
      break;
 80e3aea:	e006      	b.n	80e3afa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3aec:	bf00      	nop
 80e3aee:	e004      	b.n	80e3afa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3af0:	bf00      	nop
 80e3af2:	e002      	b.n	80e3afa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3af4:	bf00      	nop
 80e3af6:	e000      	b.n	80e3afa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3afa:	7dfb      	ldrb	r3, [r7, #23]
 80e3afc:	2b00      	cmp	r3, #0
 80e3afe:	d109      	bne.n	80e3b14 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80e3b00:	4b54      	ldr	r3, [pc, #336]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3b04:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80e3b08:	687b      	ldr	r3, [r7, #4]
 80e3b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e3b0c:	4951      	ldr	r1, [pc, #324]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3b0e:	4313      	orrs	r3, r2
 80e3b10:	650b      	str	r3, [r1, #80]	; 0x50
 80e3b12:	e001      	b.n	80e3b18 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3b14:	7dfb      	ldrb	r3, [r7, #23]
 80e3b16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80e3b18:	687b      	ldr	r3, [r7, #4]
 80e3b1a:	681b      	ldr	r3, [r3, #0]
 80e3b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80e3b20:	2b00      	cmp	r3, #0
 80e3b22:	d04b      	beq.n	80e3bbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80e3b24:	687b      	ldr	r3, [r7, #4]
 80e3b26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80e3b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e3b2e:	d02e      	beq.n	80e3b8e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80e3b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e3b34:	d828      	bhi.n	80e3b88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e3b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e3b3a:	d02a      	beq.n	80e3b92 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80e3b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e3b40:	d822      	bhi.n	80e3b88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e3b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e3b46:	d026      	beq.n	80e3b96 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80e3b48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e3b4c:	d81c      	bhi.n	80e3b88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e3b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3b52:	d010      	beq.n	80e3b76 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80e3b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3b58:	d816      	bhi.n	80e3b88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e3b5a:	2b00      	cmp	r3, #0
 80e3b5c:	d01d      	beq.n	80e3b9a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80e3b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e3b62:	d111      	bne.n	80e3b88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3b64:	687b      	ldr	r3, [r7, #4]
 80e3b66:	3304      	adds	r3, #4
 80e3b68:	2101      	movs	r1, #1
 80e3b6a:	4618      	mov	r0, r3
 80e3b6c:	f000 fcb2 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e3b70:	4603      	mov	r3, r0
 80e3b72:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80e3b74:	e012      	b.n	80e3b9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e3b76:	687b      	ldr	r3, [r7, #4]
 80e3b78:	3324      	adds	r3, #36	; 0x24
 80e3b7a:	2101      	movs	r1, #1
 80e3b7c:	4618      	mov	r0, r3
 80e3b7e:	f000 fd5b 	bl	80e4638 <RCCEx_PLL3_Config>
 80e3b82:	4603      	mov	r3, r0
 80e3b84:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80e3b86:	e009      	b.n	80e3b9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80e3b88:	2301      	movs	r3, #1
 80e3b8a:	75fb      	strb	r3, [r7, #23]
      break;
 80e3b8c:	e006      	b.n	80e3b9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e3b8e:	bf00      	nop
 80e3b90:	e004      	b.n	80e3b9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e3b92:	bf00      	nop
 80e3b94:	e002      	b.n	80e3b9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e3b96:	bf00      	nop
 80e3b98:	e000      	b.n	80e3b9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e3b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3b9c:	7dfb      	ldrb	r3, [r7, #23]
 80e3b9e:	2b00      	cmp	r3, #0
 80e3ba0:	d10a      	bne.n	80e3bb8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80e3ba2:	4b2c      	ldr	r3, [pc, #176]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3ba6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80e3baa:	687b      	ldr	r3, [r7, #4]
 80e3bac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80e3bb0:	4928      	ldr	r1, [pc, #160]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3bb2:	4313      	orrs	r3, r2
 80e3bb4:	658b      	str	r3, [r1, #88]	; 0x58
 80e3bb6:	e001      	b.n	80e3bbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3bb8:	7dfb      	ldrb	r3, [r7, #23]
 80e3bba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80e3bbc:	687b      	ldr	r3, [r7, #4]
 80e3bbe:	681b      	ldr	r3, [r3, #0]
 80e3bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80e3bc4:	2b00      	cmp	r3, #0
 80e3bc6:	d02f      	beq.n	80e3c28 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80e3bc8:	687b      	ldr	r3, [r7, #4]
 80e3bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e3bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3bd0:	d00e      	beq.n	80e3bf0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80e3bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3bd6:	d814      	bhi.n	80e3c02 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80e3bd8:	2b00      	cmp	r3, #0
 80e3bda:	d015      	beq.n	80e3c08 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80e3bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e3be0:	d10f      	bne.n	80e3c02 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3be2:	4b1c      	ldr	r3, [pc, #112]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3be6:	4a1b      	ldr	r2, [pc, #108]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80e3bee:	e00c      	b.n	80e3c0a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3bf0:	687b      	ldr	r3, [r7, #4]
 80e3bf2:	3304      	adds	r3, #4
 80e3bf4:	2101      	movs	r1, #1
 80e3bf6:	4618      	mov	r0, r3
 80e3bf8:	f000 fc6c 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e3bfc:	4603      	mov	r3, r0
 80e3bfe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80e3c00:	e003      	b.n	80e3c0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3c02:	2301      	movs	r3, #1
 80e3c04:	75fb      	strb	r3, [r7, #23]
      break;
 80e3c06:	e000      	b.n	80e3c0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80e3c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3c0a:	7dfb      	ldrb	r3, [r7, #23]
 80e3c0c:	2b00      	cmp	r3, #0
 80e3c0e:	d109      	bne.n	80e3c24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80e3c10:	4b10      	ldr	r3, [pc, #64]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3c14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80e3c18:	687b      	ldr	r3, [r7, #4]
 80e3c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e3c1c:	490d      	ldr	r1, [pc, #52]	; (80e3c54 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3c1e:	4313      	orrs	r3, r2
 80e3c20:	650b      	str	r3, [r1, #80]	; 0x50
 80e3c22:	e001      	b.n	80e3c28 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3c24:	7dfb      	ldrb	r3, [r7, #23]
 80e3c26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80e3c28:	687b      	ldr	r3, [r7, #4]
 80e3c2a:	681b      	ldr	r3, [r3, #0]
 80e3c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80e3c30:	2b00      	cmp	r3, #0
 80e3c32:	d034      	beq.n	80e3c9e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80e3c34:	687b      	ldr	r3, [r7, #4]
 80e3c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e3c38:	2b03      	cmp	r3, #3
 80e3c3a:	d81d      	bhi.n	80e3c78 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80e3c3c:	a201      	add	r2, pc, #4	; (adr r2, 80e3c44 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80e3c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e3c42:	bf00      	nop
 80e3c44:	080e3c7f 	.word	0x080e3c7f
 80e3c48:	080e3c59 	.word	0x080e3c59
 80e3c4c:	080e3c67 	.word	0x080e3c67
 80e3c50:	080e3c7f 	.word	0x080e3c7f
 80e3c54:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3c58:	4bb1      	ldr	r3, [pc, #708]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3c5c:	4ab0      	ldr	r2, [pc, #704]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80e3c64:	e00c      	b.n	80e3c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e3c66:	687b      	ldr	r3, [r7, #4]
 80e3c68:	3304      	adds	r3, #4
 80e3c6a:	2102      	movs	r1, #2
 80e3c6c:	4618      	mov	r0, r3
 80e3c6e:	f000 fc31 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e3c72:	4603      	mov	r3, r0
 80e3c74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80e3c76:	e003      	b.n	80e3c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80e3c78:	2301      	movs	r3, #1
 80e3c7a:	75fb      	strb	r3, [r7, #23]
      break;
 80e3c7c:	e000      	b.n	80e3c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80e3c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3c80:	7dfb      	ldrb	r3, [r7, #23]
 80e3c82:	2b00      	cmp	r3, #0
 80e3c84:	d109      	bne.n	80e3c9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80e3c86:	4ba6      	ldr	r3, [pc, #664]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3c8a:	f023 0203 	bic.w	r2, r3, #3
 80e3c8e:	687b      	ldr	r3, [r7, #4]
 80e3c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e3c92:	49a3      	ldr	r1, [pc, #652]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3c94:	4313      	orrs	r3, r2
 80e3c96:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e3c98:	e001      	b.n	80e3c9e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3c9a:	7dfb      	ldrb	r3, [r7, #23]
 80e3c9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80e3c9e:	687b      	ldr	r3, [r7, #4]
 80e3ca0:	681b      	ldr	r3, [r3, #0]
 80e3ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80e3ca6:	2b00      	cmp	r3, #0
 80e3ca8:	f000 8086 	beq.w	80e3db8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80e3cac:	4b9d      	ldr	r3, [pc, #628]	; (80e3f24 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e3cae:	681b      	ldr	r3, [r3, #0]
 80e3cb0:	4a9c      	ldr	r2, [pc, #624]	; (80e3f24 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e3cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e3cb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80e3cb8:	f7fd fae8 	bl	80e128c <HAL_GetTick>
 80e3cbc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e3cbe:	e009      	b.n	80e3cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80e3cc0:	f7fd fae4 	bl	80e128c <HAL_GetTick>
 80e3cc4:	4602      	mov	r2, r0
 80e3cc6:	693b      	ldr	r3, [r7, #16]
 80e3cc8:	1ad3      	subs	r3, r2, r3
 80e3cca:	2b64      	cmp	r3, #100	; 0x64
 80e3ccc:	d902      	bls.n	80e3cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80e3cce:	2303      	movs	r3, #3
 80e3cd0:	75fb      	strb	r3, [r7, #23]
        break;
 80e3cd2:	e005      	b.n	80e3ce0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e3cd4:	4b93      	ldr	r3, [pc, #588]	; (80e3f24 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e3cd6:	681b      	ldr	r3, [r3, #0]
 80e3cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e3cdc:	2b00      	cmp	r3, #0
 80e3cde:	d0ef      	beq.n	80e3cc0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80e3ce0:	7dfb      	ldrb	r3, [r7, #23]
 80e3ce2:	2b00      	cmp	r3, #0
 80e3ce4:	d166      	bne.n	80e3db4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80e3ce6:	4b8e      	ldr	r3, [pc, #568]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3ce8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e3cea:	687b      	ldr	r3, [r7, #4]
 80e3cec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3cf0:	4053      	eors	r3, r2
 80e3cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80e3cf6:	2b00      	cmp	r3, #0
 80e3cf8:	d013      	beq.n	80e3d22 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80e3cfa:	4b89      	ldr	r3, [pc, #548]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80e3d02:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80e3d04:	4b86      	ldr	r3, [pc, #536]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3d08:	4a85      	ldr	r2, [pc, #532]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e3d0e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80e3d10:	4b83      	ldr	r3, [pc, #524]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3d14:	4a82      	ldr	r2, [pc, #520]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e3d1a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80e3d1c:	4a80      	ldr	r2, [pc, #512]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d1e:	68fb      	ldr	r3, [r7, #12]
 80e3d20:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80e3d22:	687b      	ldr	r3, [r7, #4]
 80e3d24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e3d2c:	d115      	bne.n	80e3d5a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e3d2e:	f7fd faad 	bl	80e128c <HAL_GetTick>
 80e3d32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e3d34:	e00b      	b.n	80e3d4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80e3d36:	f7fd faa9 	bl	80e128c <HAL_GetTick>
 80e3d3a:	4602      	mov	r2, r0
 80e3d3c:	693b      	ldr	r3, [r7, #16]
 80e3d3e:	1ad3      	subs	r3, r2, r3
 80e3d40:	f241 3288 	movw	r2, #5000	; 0x1388
 80e3d44:	4293      	cmp	r3, r2
 80e3d46:	d902      	bls.n	80e3d4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80e3d48:	2303      	movs	r3, #3
 80e3d4a:	75fb      	strb	r3, [r7, #23]
            break;
 80e3d4c:	e005      	b.n	80e3d5a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e3d4e:	4b74      	ldr	r3, [pc, #464]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3d52:	f003 0302 	and.w	r3, r3, #2
 80e3d56:	2b00      	cmp	r3, #0
 80e3d58:	d0ed      	beq.n	80e3d36 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80e3d5a:	7dfb      	ldrb	r3, [r7, #23]
 80e3d5c:	2b00      	cmp	r3, #0
 80e3d5e:	d126      	bne.n	80e3dae <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80e3d60:	687b      	ldr	r3, [r7, #4]
 80e3d62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80e3d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e3d6e:	d10d      	bne.n	80e3d8c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80e3d70:	4b6b      	ldr	r3, [pc, #428]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d72:	691b      	ldr	r3, [r3, #16]
 80e3d74:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80e3d78:	687b      	ldr	r3, [r7, #4]
 80e3d7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3d7e:	0919      	lsrs	r1, r3, #4
 80e3d80:	4b69      	ldr	r3, [pc, #420]	; (80e3f28 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80e3d82:	400b      	ands	r3, r1
 80e3d84:	4966      	ldr	r1, [pc, #408]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d86:	4313      	orrs	r3, r2
 80e3d88:	610b      	str	r3, [r1, #16]
 80e3d8a:	e005      	b.n	80e3d98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80e3d8c:	4b64      	ldr	r3, [pc, #400]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d8e:	691b      	ldr	r3, [r3, #16]
 80e3d90:	4a63      	ldr	r2, [pc, #396]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80e3d96:	6113      	str	r3, [r2, #16]
 80e3d98:	4b61      	ldr	r3, [pc, #388]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3d9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e3d9c:	687b      	ldr	r3, [r7, #4]
 80e3d9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80e3da6:	495e      	ldr	r1, [pc, #376]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3da8:	4313      	orrs	r3, r2
 80e3daa:	670b      	str	r3, [r1, #112]	; 0x70
 80e3dac:	e004      	b.n	80e3db8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80e3dae:	7dfb      	ldrb	r3, [r7, #23]
 80e3db0:	75bb      	strb	r3, [r7, #22]
 80e3db2:	e001      	b.n	80e3db8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3db4:	7dfb      	ldrb	r3, [r7, #23]
 80e3db6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80e3db8:	687b      	ldr	r3, [r7, #4]
 80e3dba:	681b      	ldr	r3, [r3, #0]
 80e3dbc:	f003 0301 	and.w	r3, r3, #1
 80e3dc0:	2b00      	cmp	r3, #0
 80e3dc2:	d07e      	beq.n	80e3ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80e3dc4:	687b      	ldr	r3, [r7, #4]
 80e3dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e3dc8:	2b28      	cmp	r3, #40	; 0x28
 80e3dca:	d867      	bhi.n	80e3e9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80e3dcc:	a201      	add	r2, pc, #4	; (adr r2, 80e3dd4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80e3dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e3dd2:	bf00      	nop
 80e3dd4:	080e3ea3 	.word	0x080e3ea3
 80e3dd8:	080e3e9d 	.word	0x080e3e9d
 80e3ddc:	080e3e9d 	.word	0x080e3e9d
 80e3de0:	080e3e9d 	.word	0x080e3e9d
 80e3de4:	080e3e9d 	.word	0x080e3e9d
 80e3de8:	080e3e9d 	.word	0x080e3e9d
 80e3dec:	080e3e9d 	.word	0x080e3e9d
 80e3df0:	080e3e9d 	.word	0x080e3e9d
 80e3df4:	080e3e79 	.word	0x080e3e79
 80e3df8:	080e3e9d 	.word	0x080e3e9d
 80e3dfc:	080e3e9d 	.word	0x080e3e9d
 80e3e00:	080e3e9d 	.word	0x080e3e9d
 80e3e04:	080e3e9d 	.word	0x080e3e9d
 80e3e08:	080e3e9d 	.word	0x080e3e9d
 80e3e0c:	080e3e9d 	.word	0x080e3e9d
 80e3e10:	080e3e9d 	.word	0x080e3e9d
 80e3e14:	080e3e8b 	.word	0x080e3e8b
 80e3e18:	080e3e9d 	.word	0x080e3e9d
 80e3e1c:	080e3e9d 	.word	0x080e3e9d
 80e3e20:	080e3e9d 	.word	0x080e3e9d
 80e3e24:	080e3e9d 	.word	0x080e3e9d
 80e3e28:	080e3e9d 	.word	0x080e3e9d
 80e3e2c:	080e3e9d 	.word	0x080e3e9d
 80e3e30:	080e3e9d 	.word	0x080e3e9d
 80e3e34:	080e3ea3 	.word	0x080e3ea3
 80e3e38:	080e3e9d 	.word	0x080e3e9d
 80e3e3c:	080e3e9d 	.word	0x080e3e9d
 80e3e40:	080e3e9d 	.word	0x080e3e9d
 80e3e44:	080e3e9d 	.word	0x080e3e9d
 80e3e48:	080e3e9d 	.word	0x080e3e9d
 80e3e4c:	080e3e9d 	.word	0x080e3e9d
 80e3e50:	080e3e9d 	.word	0x080e3e9d
 80e3e54:	080e3ea3 	.word	0x080e3ea3
 80e3e58:	080e3e9d 	.word	0x080e3e9d
 80e3e5c:	080e3e9d 	.word	0x080e3e9d
 80e3e60:	080e3e9d 	.word	0x080e3e9d
 80e3e64:	080e3e9d 	.word	0x080e3e9d
 80e3e68:	080e3e9d 	.word	0x080e3e9d
 80e3e6c:	080e3e9d 	.word	0x080e3e9d
 80e3e70:	080e3e9d 	.word	0x080e3e9d
 80e3e74:	080e3ea3 	.word	0x080e3ea3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3e78:	687b      	ldr	r3, [r7, #4]
 80e3e7a:	3304      	adds	r3, #4
 80e3e7c:	2101      	movs	r1, #1
 80e3e7e:	4618      	mov	r0, r3
 80e3e80:	f000 fb28 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e3e84:	4603      	mov	r3, r0
 80e3e86:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80e3e88:	e00c      	b.n	80e3ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e3e8a:	687b      	ldr	r3, [r7, #4]
 80e3e8c:	3324      	adds	r3, #36	; 0x24
 80e3e8e:	2101      	movs	r1, #1
 80e3e90:	4618      	mov	r0, r3
 80e3e92:	f000 fbd1 	bl	80e4638 <RCCEx_PLL3_Config>
 80e3e96:	4603      	mov	r3, r0
 80e3e98:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80e3e9a:	e003      	b.n	80e3ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3e9c:	2301      	movs	r3, #1
 80e3e9e:	75fb      	strb	r3, [r7, #23]
      break;
 80e3ea0:	e000      	b.n	80e3ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80e3ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3ea4:	7dfb      	ldrb	r3, [r7, #23]
 80e3ea6:	2b00      	cmp	r3, #0
 80e3ea8:	d109      	bne.n	80e3ebe <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80e3eaa:	4b1d      	ldr	r3, [pc, #116]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3eae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80e3eb2:	687b      	ldr	r3, [r7, #4]
 80e3eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e3eb6:	491a      	ldr	r1, [pc, #104]	; (80e3f20 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3eb8:	4313      	orrs	r3, r2
 80e3eba:	654b      	str	r3, [r1, #84]	; 0x54
 80e3ebc:	e001      	b.n	80e3ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3ebe:	7dfb      	ldrb	r3, [r7, #23]
 80e3ec0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80e3ec2:	687b      	ldr	r3, [r7, #4]
 80e3ec4:	681b      	ldr	r3, [r3, #0]
 80e3ec6:	f003 0302 	and.w	r3, r3, #2
 80e3eca:	2b00      	cmp	r3, #0
 80e3ecc:	d03e      	beq.n	80e3f4c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80e3ece:	687b      	ldr	r3, [r7, #4]
 80e3ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3ed2:	2b05      	cmp	r3, #5
 80e3ed4:	d820      	bhi.n	80e3f18 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80e3ed6:	a201      	add	r2, pc, #4	; (adr r2, 80e3edc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80e3ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e3edc:	080e3f2d 	.word	0x080e3f2d
 80e3ee0:	080e3ef5 	.word	0x080e3ef5
 80e3ee4:	080e3f07 	.word	0x080e3f07
 80e3ee8:	080e3f2d 	.word	0x080e3f2d
 80e3eec:	080e3f2d 	.word	0x080e3f2d
 80e3ef0:	080e3f2d 	.word	0x080e3f2d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3ef4:	687b      	ldr	r3, [r7, #4]
 80e3ef6:	3304      	adds	r3, #4
 80e3ef8:	2101      	movs	r1, #1
 80e3efa:	4618      	mov	r0, r3
 80e3efc:	f000 faea 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e3f00:	4603      	mov	r3, r0
 80e3f02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80e3f04:	e013      	b.n	80e3f2e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e3f06:	687b      	ldr	r3, [r7, #4]
 80e3f08:	3324      	adds	r3, #36	; 0x24
 80e3f0a:	2101      	movs	r1, #1
 80e3f0c:	4618      	mov	r0, r3
 80e3f0e:	f000 fb93 	bl	80e4638 <RCCEx_PLL3_Config>
 80e3f12:	4603      	mov	r3, r0
 80e3f14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80e3f16:	e00a      	b.n	80e3f2e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3f18:	2301      	movs	r3, #1
 80e3f1a:	75fb      	strb	r3, [r7, #23]
      break;
 80e3f1c:	e007      	b.n	80e3f2e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80e3f1e:	bf00      	nop
 80e3f20:	58024400 	.word	0x58024400
 80e3f24:	58024800 	.word	0x58024800
 80e3f28:	00ffffcf 	.word	0x00ffffcf
      break;
 80e3f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3f2e:	7dfb      	ldrb	r3, [r7, #23]
 80e3f30:	2b00      	cmp	r3, #0
 80e3f32:	d109      	bne.n	80e3f48 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80e3f34:	4b9f      	ldr	r3, [pc, #636]	; (80e41b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3f38:	f023 0207 	bic.w	r2, r3, #7
 80e3f3c:	687b      	ldr	r3, [r7, #4]
 80e3f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3f40:	499c      	ldr	r1, [pc, #624]	; (80e41b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3f42:	4313      	orrs	r3, r2
 80e3f44:	654b      	str	r3, [r1, #84]	; 0x54
 80e3f46:	e001      	b.n	80e3f4c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3f48:	7dfb      	ldrb	r3, [r7, #23]
 80e3f4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80e3f4c:	687b      	ldr	r3, [r7, #4]
 80e3f4e:	681b      	ldr	r3, [r3, #0]
 80e3f50:	f003 0304 	and.w	r3, r3, #4
 80e3f54:	2b00      	cmp	r3, #0
 80e3f56:	d039      	beq.n	80e3fcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80e3f58:	687b      	ldr	r3, [r7, #4]
 80e3f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80e3f5e:	2b05      	cmp	r3, #5
 80e3f60:	d820      	bhi.n	80e3fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80e3f62:	a201      	add	r2, pc, #4	; (adr r2, 80e3f68 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80e3f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e3f68:	080e3fab 	.word	0x080e3fab
 80e3f6c:	080e3f81 	.word	0x080e3f81
 80e3f70:	080e3f93 	.word	0x080e3f93
 80e3f74:	080e3fab 	.word	0x080e3fab
 80e3f78:	080e3fab 	.word	0x080e3fab
 80e3f7c:	080e3fab 	.word	0x080e3fab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3f80:	687b      	ldr	r3, [r7, #4]
 80e3f82:	3304      	adds	r3, #4
 80e3f84:	2101      	movs	r1, #1
 80e3f86:	4618      	mov	r0, r3
 80e3f88:	f000 faa4 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e3f8c:	4603      	mov	r3, r0
 80e3f8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80e3f90:	e00c      	b.n	80e3fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e3f92:	687b      	ldr	r3, [r7, #4]
 80e3f94:	3324      	adds	r3, #36	; 0x24
 80e3f96:	2101      	movs	r1, #1
 80e3f98:	4618      	mov	r0, r3
 80e3f9a:	f000 fb4d 	bl	80e4638 <RCCEx_PLL3_Config>
 80e3f9e:	4603      	mov	r3, r0
 80e3fa0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80e3fa2:	e003      	b.n	80e3fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3fa4:	2301      	movs	r3, #1
 80e3fa6:	75fb      	strb	r3, [r7, #23]
      break;
 80e3fa8:	e000      	b.n	80e3fac <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80e3faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3fac:	7dfb      	ldrb	r3, [r7, #23]
 80e3fae:	2b00      	cmp	r3, #0
 80e3fb0:	d10a      	bne.n	80e3fc8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80e3fb2:	4b80      	ldr	r3, [pc, #512]	; (80e41b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3fb6:	f023 0207 	bic.w	r2, r3, #7
 80e3fba:	687b      	ldr	r3, [r7, #4]
 80e3fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80e3fc0:	497c      	ldr	r1, [pc, #496]	; (80e41b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3fc2:	4313      	orrs	r3, r2
 80e3fc4:	658b      	str	r3, [r1, #88]	; 0x58
 80e3fc6:	e001      	b.n	80e3fcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3fc8:	7dfb      	ldrb	r3, [r7, #23]
 80e3fca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80e3fcc:	687b      	ldr	r3, [r7, #4]
 80e3fce:	681b      	ldr	r3, [r3, #0]
 80e3fd0:	f003 0320 	and.w	r3, r3, #32
 80e3fd4:	2b00      	cmp	r3, #0
 80e3fd6:	d04b      	beq.n	80e4070 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80e3fd8:	687b      	ldr	r3, [r7, #4]
 80e3fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e3fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e3fe2:	d02e      	beq.n	80e4042 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80e3fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e3fe8:	d828      	bhi.n	80e403c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e3fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e3fee:	d02a      	beq.n	80e4046 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80e3ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e3ff4:	d822      	bhi.n	80e403c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e3ff6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e3ffa:	d026      	beq.n	80e404a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80e3ffc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e4000:	d81c      	bhi.n	80e403c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e4002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e4006:	d010      	beq.n	80e402a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80e4008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e400c:	d816      	bhi.n	80e403c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e400e:	2b00      	cmp	r3, #0
 80e4010:	d01d      	beq.n	80e404e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80e4012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e4016:	d111      	bne.n	80e403c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e4018:	687b      	ldr	r3, [r7, #4]
 80e401a:	3304      	adds	r3, #4
 80e401c:	2100      	movs	r1, #0
 80e401e:	4618      	mov	r0, r3
 80e4020:	f000 fa58 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e4024:	4603      	mov	r3, r0
 80e4026:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80e4028:	e012      	b.n	80e4050 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e402a:	687b      	ldr	r3, [r7, #4]
 80e402c:	3324      	adds	r3, #36	; 0x24
 80e402e:	2102      	movs	r1, #2
 80e4030:	4618      	mov	r0, r3
 80e4032:	f000 fb01 	bl	80e4638 <RCCEx_PLL3_Config>
 80e4036:	4603      	mov	r3, r0
 80e4038:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80e403a:	e009      	b.n	80e4050 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e403c:	2301      	movs	r3, #1
 80e403e:	75fb      	strb	r3, [r7, #23]
      break;
 80e4040:	e006      	b.n	80e4050 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e4042:	bf00      	nop
 80e4044:	e004      	b.n	80e4050 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e4046:	bf00      	nop
 80e4048:	e002      	b.n	80e4050 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e404a:	bf00      	nop
 80e404c:	e000      	b.n	80e4050 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e404e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e4050:	7dfb      	ldrb	r3, [r7, #23]
 80e4052:	2b00      	cmp	r3, #0
 80e4054:	d10a      	bne.n	80e406c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80e4056:	4b57      	ldr	r3, [pc, #348]	; (80e41b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e4058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e405a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80e405e:	687b      	ldr	r3, [r7, #4]
 80e4060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e4064:	4953      	ldr	r1, [pc, #332]	; (80e41b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e4066:	4313      	orrs	r3, r2
 80e4068:	654b      	str	r3, [r1, #84]	; 0x54
 80e406a:	e001      	b.n	80e4070 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e406c:	7dfb      	ldrb	r3, [r7, #23]
 80e406e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80e4070:	687b      	ldr	r3, [r7, #4]
 80e4072:	681b      	ldr	r3, [r3, #0]
 80e4074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80e4078:	2b00      	cmp	r3, #0
 80e407a:	d04b      	beq.n	80e4114 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80e407c:	687b      	ldr	r3, [r7, #4]
 80e407e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80e4082:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80e4086:	d02e      	beq.n	80e40e6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80e4088:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80e408c:	d828      	bhi.n	80e40e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e408e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e4092:	d02a      	beq.n	80e40ea <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80e4094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e4098:	d822      	bhi.n	80e40e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e409a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80e409e:	d026      	beq.n	80e40ee <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80e40a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80e40a4:	d81c      	bhi.n	80e40e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e40a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80e40aa:	d010      	beq.n	80e40ce <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80e40ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80e40b0:	d816      	bhi.n	80e40e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e40b2:	2b00      	cmp	r3, #0
 80e40b4:	d01d      	beq.n	80e40f2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80e40b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80e40ba:	d111      	bne.n	80e40e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e40bc:	687b      	ldr	r3, [r7, #4]
 80e40be:	3304      	adds	r3, #4
 80e40c0:	2100      	movs	r1, #0
 80e40c2:	4618      	mov	r0, r3
 80e40c4:	f000 fa06 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e40c8:	4603      	mov	r3, r0
 80e40ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80e40cc:	e012      	b.n	80e40f4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e40ce:	687b      	ldr	r3, [r7, #4]
 80e40d0:	3324      	adds	r3, #36	; 0x24
 80e40d2:	2102      	movs	r1, #2
 80e40d4:	4618      	mov	r0, r3
 80e40d6:	f000 faaf 	bl	80e4638 <RCCEx_PLL3_Config>
 80e40da:	4603      	mov	r3, r0
 80e40dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80e40de:	e009      	b.n	80e40f4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e40e0:	2301      	movs	r3, #1
 80e40e2:	75fb      	strb	r3, [r7, #23]
      break;
 80e40e4:	e006      	b.n	80e40f4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e40e6:	bf00      	nop
 80e40e8:	e004      	b.n	80e40f4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e40ea:	bf00      	nop
 80e40ec:	e002      	b.n	80e40f4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e40ee:	bf00      	nop
 80e40f0:	e000      	b.n	80e40f4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e40f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e40f4:	7dfb      	ldrb	r3, [r7, #23]
 80e40f6:	2b00      	cmp	r3, #0
 80e40f8:	d10a      	bne.n	80e4110 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80e40fa:	4b2e      	ldr	r3, [pc, #184]	; (80e41b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e40fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e40fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80e4102:	687b      	ldr	r3, [r7, #4]
 80e4104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80e4108:	492a      	ldr	r1, [pc, #168]	; (80e41b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e410a:	4313      	orrs	r3, r2
 80e410c:	658b      	str	r3, [r1, #88]	; 0x58
 80e410e:	e001      	b.n	80e4114 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e4110:	7dfb      	ldrb	r3, [r7, #23]
 80e4112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80e4114:	687b      	ldr	r3, [r7, #4]
 80e4116:	681b      	ldr	r3, [r3, #0]
 80e4118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80e411c:	2b00      	cmp	r3, #0
 80e411e:	d04d      	beq.n	80e41bc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80e4120:	687b      	ldr	r3, [r7, #4]
 80e4122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80e4126:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80e412a:	d02e      	beq.n	80e418a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80e412c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80e4130:	d828      	bhi.n	80e4184 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e4132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80e4136:	d02a      	beq.n	80e418e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80e4138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80e413c:	d822      	bhi.n	80e4184 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e413e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80e4142:	d026      	beq.n	80e4192 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80e4144:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80e4148:	d81c      	bhi.n	80e4184 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e414a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e414e:	d010      	beq.n	80e4172 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80e4150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e4154:	d816      	bhi.n	80e4184 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e4156:	2b00      	cmp	r3, #0
 80e4158:	d01d      	beq.n	80e4196 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80e415a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e415e:	d111      	bne.n	80e4184 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e4160:	687b      	ldr	r3, [r7, #4]
 80e4162:	3304      	adds	r3, #4
 80e4164:	2100      	movs	r1, #0
 80e4166:	4618      	mov	r0, r3
 80e4168:	f000 f9b4 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e416c:	4603      	mov	r3, r0
 80e416e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80e4170:	e012      	b.n	80e4198 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e4172:	687b      	ldr	r3, [r7, #4]
 80e4174:	3324      	adds	r3, #36	; 0x24
 80e4176:	2102      	movs	r1, #2
 80e4178:	4618      	mov	r0, r3
 80e417a:	f000 fa5d 	bl	80e4638 <RCCEx_PLL3_Config>
 80e417e:	4603      	mov	r3, r0
 80e4180:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80e4182:	e009      	b.n	80e4198 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e4184:	2301      	movs	r3, #1
 80e4186:	75fb      	strb	r3, [r7, #23]
      break;
 80e4188:	e006      	b.n	80e4198 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e418a:	bf00      	nop
 80e418c:	e004      	b.n	80e4198 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e418e:	bf00      	nop
 80e4190:	e002      	b.n	80e4198 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e4192:	bf00      	nop
 80e4194:	e000      	b.n	80e4198 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e4196:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e4198:	7dfb      	ldrb	r3, [r7, #23]
 80e419a:	2b00      	cmp	r3, #0
 80e419c:	d10c      	bne.n	80e41b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80e419e:	4b05      	ldr	r3, [pc, #20]	; (80e41b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e41a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e41a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80e41a6:	687b      	ldr	r3, [r7, #4]
 80e41a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80e41ac:	4901      	ldr	r1, [pc, #4]	; (80e41b4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e41ae:	4313      	orrs	r3, r2
 80e41b0:	658b      	str	r3, [r1, #88]	; 0x58
 80e41b2:	e003      	b.n	80e41bc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80e41b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e41b8:	7dfb      	ldrb	r3, [r7, #23]
 80e41ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80e41bc:	687b      	ldr	r3, [r7, #4]
 80e41be:	681b      	ldr	r3, [r3, #0]
 80e41c0:	f003 0308 	and.w	r3, r3, #8
 80e41c4:	2b00      	cmp	r3, #0
 80e41c6:	d018      	beq.n	80e41fa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80e41c8:	687b      	ldr	r3, [r7, #4]
 80e41ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80e41cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e41d0:	d10a      	bne.n	80e41e8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80e41d2:	687b      	ldr	r3, [r7, #4]
 80e41d4:	3324      	adds	r3, #36	; 0x24
 80e41d6:	2102      	movs	r1, #2
 80e41d8:	4618      	mov	r0, r3
 80e41da:	f000 fa2d 	bl	80e4638 <RCCEx_PLL3_Config>
 80e41de:	4603      	mov	r3, r0
 80e41e0:	2b00      	cmp	r3, #0
 80e41e2:	d001      	beq.n	80e41e8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80e41e4:	2301      	movs	r3, #1
 80e41e6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80e41e8:	4b8a      	ldr	r3, [pc, #552]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e41ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e41ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80e41f0:	687b      	ldr	r3, [r7, #4]
 80e41f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80e41f4:	4987      	ldr	r1, [pc, #540]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e41f6:	4313      	orrs	r3, r2
 80e41f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80e41fa:	687b      	ldr	r3, [r7, #4]
 80e41fc:	681b      	ldr	r3, [r3, #0]
 80e41fe:	f003 0310 	and.w	r3, r3, #16
 80e4202:	2b00      	cmp	r3, #0
 80e4204:	d01a      	beq.n	80e423c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80e4206:	687b      	ldr	r3, [r7, #4]
 80e4208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e420c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e4210:	d10a      	bne.n	80e4228 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80e4212:	687b      	ldr	r3, [r7, #4]
 80e4214:	3324      	adds	r3, #36	; 0x24
 80e4216:	2102      	movs	r1, #2
 80e4218:	4618      	mov	r0, r3
 80e421a:	f000 fa0d 	bl	80e4638 <RCCEx_PLL3_Config>
 80e421e:	4603      	mov	r3, r0
 80e4220:	2b00      	cmp	r3, #0
 80e4222:	d001      	beq.n	80e4228 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80e4224:	2301      	movs	r3, #1
 80e4226:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80e4228:	4b7a      	ldr	r3, [pc, #488]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e422c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80e4230:	687b      	ldr	r3, [r7, #4]
 80e4232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e4236:	4977      	ldr	r1, [pc, #476]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4238:	4313      	orrs	r3, r2
 80e423a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80e423c:	687b      	ldr	r3, [r7, #4]
 80e423e:	681b      	ldr	r3, [r3, #0]
 80e4240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80e4244:	2b00      	cmp	r3, #0
 80e4246:	d034      	beq.n	80e42b2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80e4248:	687b      	ldr	r3, [r7, #4]
 80e424a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e424e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e4252:	d01d      	beq.n	80e4290 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80e4254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e4258:	d817      	bhi.n	80e428a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80e425a:	2b00      	cmp	r3, #0
 80e425c:	d003      	beq.n	80e4266 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80e425e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e4262:	d009      	beq.n	80e4278 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80e4264:	e011      	b.n	80e428a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e4266:	687b      	ldr	r3, [r7, #4]
 80e4268:	3304      	adds	r3, #4
 80e426a:	2100      	movs	r1, #0
 80e426c:	4618      	mov	r0, r3
 80e426e:	f000 f931 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e4272:	4603      	mov	r3, r0
 80e4274:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80e4276:	e00c      	b.n	80e4292 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e4278:	687b      	ldr	r3, [r7, #4]
 80e427a:	3324      	adds	r3, #36	; 0x24
 80e427c:	2102      	movs	r1, #2
 80e427e:	4618      	mov	r0, r3
 80e4280:	f000 f9da 	bl	80e4638 <RCCEx_PLL3_Config>
 80e4284:	4603      	mov	r3, r0
 80e4286:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80e4288:	e003      	b.n	80e4292 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e428a:	2301      	movs	r3, #1
 80e428c:	75fb      	strb	r3, [r7, #23]
      break;
 80e428e:	e000      	b.n	80e4292 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80e4290:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e4292:	7dfb      	ldrb	r3, [r7, #23]
 80e4294:	2b00      	cmp	r3, #0
 80e4296:	d10a      	bne.n	80e42ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80e4298:	4b5e      	ldr	r3, [pc, #376]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e429c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80e42a0:	687b      	ldr	r3, [r7, #4]
 80e42a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e42a6:	495b      	ldr	r1, [pc, #364]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e42a8:	4313      	orrs	r3, r2
 80e42aa:	658b      	str	r3, [r1, #88]	; 0x58
 80e42ac:	e001      	b.n	80e42b2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e42ae:	7dfb      	ldrb	r3, [r7, #23]
 80e42b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80e42b2:	687b      	ldr	r3, [r7, #4]
 80e42b4:	681b      	ldr	r3, [r3, #0]
 80e42b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80e42ba:	2b00      	cmp	r3, #0
 80e42bc:	d033      	beq.n	80e4326 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80e42be:	687b      	ldr	r3, [r7, #4]
 80e42c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80e42c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e42c8:	d01c      	beq.n	80e4304 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80e42ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e42ce:	d816      	bhi.n	80e42fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80e42d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80e42d4:	d003      	beq.n	80e42de <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80e42d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e42da:	d007      	beq.n	80e42ec <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80e42dc:	e00f      	b.n	80e42fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e42de:	4b4d      	ldr	r3, [pc, #308]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e42e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e42e2:	4a4c      	ldr	r2, [pc, #304]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e42e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e42e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80e42ea:	e00c      	b.n	80e4306 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e42ec:	687b      	ldr	r3, [r7, #4]
 80e42ee:	3324      	adds	r3, #36	; 0x24
 80e42f0:	2101      	movs	r1, #1
 80e42f2:	4618      	mov	r0, r3
 80e42f4:	f000 f9a0 	bl	80e4638 <RCCEx_PLL3_Config>
 80e42f8:	4603      	mov	r3, r0
 80e42fa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80e42fc:	e003      	b.n	80e4306 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e42fe:	2301      	movs	r3, #1
 80e4300:	75fb      	strb	r3, [r7, #23]
      break;
 80e4302:	e000      	b.n	80e4306 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80e4304:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e4306:	7dfb      	ldrb	r3, [r7, #23]
 80e4308:	2b00      	cmp	r3, #0
 80e430a:	d10a      	bne.n	80e4322 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80e430c:	4b41      	ldr	r3, [pc, #260]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e4310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80e4314:	687b      	ldr	r3, [r7, #4]
 80e4316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80e431a:	493e      	ldr	r1, [pc, #248]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e431c:	4313      	orrs	r3, r2
 80e431e:	654b      	str	r3, [r1, #84]	; 0x54
 80e4320:	e001      	b.n	80e4326 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e4322:	7dfb      	ldrb	r3, [r7, #23]
 80e4324:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80e4326:	687b      	ldr	r3, [r7, #4]
 80e4328:	681b      	ldr	r3, [r3, #0]
 80e432a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80e432e:	2b00      	cmp	r3, #0
 80e4330:	d029      	beq.n	80e4386 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80e4332:	687b      	ldr	r3, [r7, #4]
 80e4334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e4336:	2b00      	cmp	r3, #0
 80e4338:	d003      	beq.n	80e4342 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80e433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e433e:	d007      	beq.n	80e4350 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80e4340:	e00f      	b.n	80e4362 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e4342:	4b34      	ldr	r3, [pc, #208]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4346:	4a33      	ldr	r2, [pc, #204]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e434c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80e434e:	e00b      	b.n	80e4368 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e4350:	687b      	ldr	r3, [r7, #4]
 80e4352:	3304      	adds	r3, #4
 80e4354:	2102      	movs	r1, #2
 80e4356:	4618      	mov	r0, r3
 80e4358:	f000 f8bc 	bl	80e44d4 <RCCEx_PLL2_Config>
 80e435c:	4603      	mov	r3, r0
 80e435e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80e4360:	e002      	b.n	80e4368 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80e4362:	2301      	movs	r3, #1
 80e4364:	75fb      	strb	r3, [r7, #23]
      break;
 80e4366:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e4368:	7dfb      	ldrb	r3, [r7, #23]
 80e436a:	2b00      	cmp	r3, #0
 80e436c:	d109      	bne.n	80e4382 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80e436e:	4b29      	ldr	r3, [pc, #164]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e4372:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80e4376:	687b      	ldr	r3, [r7, #4]
 80e4378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e437a:	4926      	ldr	r1, [pc, #152]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e437c:	4313      	orrs	r3, r2
 80e437e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e4380:	e001      	b.n	80e4386 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e4382:	7dfb      	ldrb	r3, [r7, #23]
 80e4384:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80e4386:	687b      	ldr	r3, [r7, #4]
 80e4388:	681b      	ldr	r3, [r3, #0]
 80e438a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e438e:	2b00      	cmp	r3, #0
 80e4390:	d00a      	beq.n	80e43a8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80e4392:	687b      	ldr	r3, [r7, #4]
 80e4394:	3324      	adds	r3, #36	; 0x24
 80e4396:	2102      	movs	r1, #2
 80e4398:	4618      	mov	r0, r3
 80e439a:	f000 f94d 	bl	80e4638 <RCCEx_PLL3_Config>
 80e439e:	4603      	mov	r3, r0
 80e43a0:	2b00      	cmp	r3, #0
 80e43a2:	d001      	beq.n	80e43a8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80e43a4:	2301      	movs	r3, #1
 80e43a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80e43a8:	687b      	ldr	r3, [r7, #4]
 80e43aa:	681b      	ldr	r3, [r3, #0]
 80e43ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e43b0:	2b00      	cmp	r3, #0
 80e43b2:	d033      	beq.n	80e441c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80e43b4:	687b      	ldr	r3, [r7, #4]
 80e43b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80e43b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e43bc:	d017      	beq.n	80e43ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80e43be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e43c2:	d811      	bhi.n	80e43e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80e43c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80e43c8:	d013      	beq.n	80e43f2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80e43ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80e43ce:	d80b      	bhi.n	80e43e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80e43d0:	2b00      	cmp	r3, #0
 80e43d2:	d010      	beq.n	80e43f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80e43d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e43d8:	d106      	bne.n	80e43e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e43da:	4b0e      	ldr	r3, [pc, #56]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e43dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e43de:	4a0d      	ldr	r2, [pc, #52]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e43e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e43e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80e43e6:	e007      	b.n	80e43f8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e43e8:	2301      	movs	r3, #1
 80e43ea:	75fb      	strb	r3, [r7, #23]
      break;
 80e43ec:	e004      	b.n	80e43f8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e43ee:	bf00      	nop
 80e43f0:	e002      	b.n	80e43f8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e43f2:	bf00      	nop
 80e43f4:	e000      	b.n	80e43f8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e43f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e43f8:	7dfb      	ldrb	r3, [r7, #23]
 80e43fa:	2b00      	cmp	r3, #0
 80e43fc:	d10c      	bne.n	80e4418 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80e43fe:	4b05      	ldr	r3, [pc, #20]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e4400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e4402:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80e4406:	687b      	ldr	r3, [r7, #4]
 80e4408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80e440a:	4902      	ldr	r1, [pc, #8]	; (80e4414 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e440c:	4313      	orrs	r3, r2
 80e440e:	654b      	str	r3, [r1, #84]	; 0x54
 80e4410:	e004      	b.n	80e441c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80e4412:	bf00      	nop
 80e4414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e4418:	7dfb      	ldrb	r3, [r7, #23]
 80e441a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80e441c:	687b      	ldr	r3, [r7, #4]
 80e441e:	681b      	ldr	r3, [r3, #0]
 80e4420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80e4424:	2b00      	cmp	r3, #0
 80e4426:	d008      	beq.n	80e443a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80e4428:	4b29      	ldr	r3, [pc, #164]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e442a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e442c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80e4430:	687b      	ldr	r3, [r7, #4]
 80e4432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80e4434:	4926      	ldr	r1, [pc, #152]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e4436:	4313      	orrs	r3, r2
 80e4438:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80e443a:	687b      	ldr	r3, [r7, #4]
 80e443c:	681b      	ldr	r3, [r3, #0]
 80e443e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e4442:	2b00      	cmp	r3, #0
 80e4444:	d008      	beq.n	80e4458 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80e4446:	4b22      	ldr	r3, [pc, #136]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e4448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e444a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80e444e:	687b      	ldr	r3, [r7, #4]
 80e4450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80e4452:	491f      	ldr	r1, [pc, #124]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e4454:	4313      	orrs	r3, r2
 80e4456:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80e4458:	687b      	ldr	r3, [r7, #4]
 80e445a:	681b      	ldr	r3, [r3, #0]
 80e445c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80e4460:	2b00      	cmp	r3, #0
 80e4462:	d00d      	beq.n	80e4480 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80e4464:	4b1a      	ldr	r3, [pc, #104]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e4466:	691b      	ldr	r3, [r3, #16]
 80e4468:	4a19      	ldr	r2, [pc, #100]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e446a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80e446e:	6113      	str	r3, [r2, #16]
 80e4470:	4b17      	ldr	r3, [pc, #92]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e4472:	691a      	ldr	r2, [r3, #16]
 80e4474:	687b      	ldr	r3, [r7, #4]
 80e4476:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e447a:	4915      	ldr	r1, [pc, #84]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e447c:	4313      	orrs	r3, r2
 80e447e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80e4480:	687b      	ldr	r3, [r7, #4]
 80e4482:	681b      	ldr	r3, [r3, #0]
 80e4484:	2b00      	cmp	r3, #0
 80e4486:	da08      	bge.n	80e449a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80e4488:	4b11      	ldr	r3, [pc, #68]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e448a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e448c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80e4490:	687b      	ldr	r3, [r7, #4]
 80e4492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e4494:	490e      	ldr	r1, [pc, #56]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e4496:	4313      	orrs	r3, r2
 80e4498:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80e449a:	687b      	ldr	r3, [r7, #4]
 80e449c:	681b      	ldr	r3, [r3, #0]
 80e449e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80e44a2:	2b00      	cmp	r3, #0
 80e44a4:	d009      	beq.n	80e44ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80e44a6:	4b0a      	ldr	r3, [pc, #40]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e44a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e44aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80e44ae:	687b      	ldr	r3, [r7, #4]
 80e44b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80e44b4:	4906      	ldr	r1, [pc, #24]	; (80e44d0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e44b6:	4313      	orrs	r3, r2
 80e44b8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80e44ba:	7dbb      	ldrb	r3, [r7, #22]
 80e44bc:	2b00      	cmp	r3, #0
 80e44be:	d101      	bne.n	80e44c4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80e44c0:	2300      	movs	r3, #0
 80e44c2:	e000      	b.n	80e44c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80e44c4:	2301      	movs	r3, #1
}
 80e44c6:	4618      	mov	r0, r3
 80e44c8:	3718      	adds	r7, #24
 80e44ca:	46bd      	mov	sp, r7
 80e44cc:	bd80      	pop	{r7, pc}
 80e44ce:	bf00      	nop
 80e44d0:	58024400 	.word	0x58024400

080e44d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80e44d4:	b580      	push	{r7, lr}
 80e44d6:	b084      	sub	sp, #16
 80e44d8:	af00      	add	r7, sp, #0
 80e44da:	6078      	str	r0, [r7, #4]
 80e44dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80e44de:	2300      	movs	r3, #0
 80e44e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80e44e2:	4b53      	ldr	r3, [pc, #332]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e44e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e44e6:	f003 0303 	and.w	r3, r3, #3
 80e44ea:	2b03      	cmp	r3, #3
 80e44ec:	d101      	bne.n	80e44f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80e44ee:	2301      	movs	r3, #1
 80e44f0:	e099      	b.n	80e4626 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80e44f2:	4b4f      	ldr	r3, [pc, #316]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e44f4:	681b      	ldr	r3, [r3, #0]
 80e44f6:	4a4e      	ldr	r2, [pc, #312]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e44f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80e44fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e44fe:	f7fc fec5 	bl	80e128c <HAL_GetTick>
 80e4502:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80e4504:	e008      	b.n	80e4518 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80e4506:	f7fc fec1 	bl	80e128c <HAL_GetTick>
 80e450a:	4602      	mov	r2, r0
 80e450c:	68bb      	ldr	r3, [r7, #8]
 80e450e:	1ad3      	subs	r3, r2, r3
 80e4510:	2b02      	cmp	r3, #2
 80e4512:	d901      	bls.n	80e4518 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80e4514:	2303      	movs	r3, #3
 80e4516:	e086      	b.n	80e4626 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80e4518:	4b45      	ldr	r3, [pc, #276]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e451a:	681b      	ldr	r3, [r3, #0]
 80e451c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e4520:	2b00      	cmp	r3, #0
 80e4522:	d1f0      	bne.n	80e4506 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80e4524:	4b42      	ldr	r3, [pc, #264]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e4526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e4528:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80e452c:	687b      	ldr	r3, [r7, #4]
 80e452e:	681b      	ldr	r3, [r3, #0]
 80e4530:	031b      	lsls	r3, r3, #12
 80e4532:	493f      	ldr	r1, [pc, #252]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e4534:	4313      	orrs	r3, r2
 80e4536:	628b      	str	r3, [r1, #40]	; 0x28
 80e4538:	687b      	ldr	r3, [r7, #4]
 80e453a:	685b      	ldr	r3, [r3, #4]
 80e453c:	3b01      	subs	r3, #1
 80e453e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e4542:	687b      	ldr	r3, [r7, #4]
 80e4544:	689b      	ldr	r3, [r3, #8]
 80e4546:	3b01      	subs	r3, #1
 80e4548:	025b      	lsls	r3, r3, #9
 80e454a:	b29b      	uxth	r3, r3
 80e454c:	431a      	orrs	r2, r3
 80e454e:	687b      	ldr	r3, [r7, #4]
 80e4550:	68db      	ldr	r3, [r3, #12]
 80e4552:	3b01      	subs	r3, #1
 80e4554:	041b      	lsls	r3, r3, #16
 80e4556:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e455a:	431a      	orrs	r2, r3
 80e455c:	687b      	ldr	r3, [r7, #4]
 80e455e:	691b      	ldr	r3, [r3, #16]
 80e4560:	3b01      	subs	r3, #1
 80e4562:	061b      	lsls	r3, r3, #24
 80e4564:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e4568:	4931      	ldr	r1, [pc, #196]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e456a:	4313      	orrs	r3, r2
 80e456c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80e456e:	4b30      	ldr	r3, [pc, #192]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e4570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4572:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80e4576:	687b      	ldr	r3, [r7, #4]
 80e4578:	695b      	ldr	r3, [r3, #20]
 80e457a:	492d      	ldr	r1, [pc, #180]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e457c:	4313      	orrs	r3, r2
 80e457e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80e4580:	4b2b      	ldr	r3, [pc, #172]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e4582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4584:	f023 0220 	bic.w	r2, r3, #32
 80e4588:	687b      	ldr	r3, [r7, #4]
 80e458a:	699b      	ldr	r3, [r3, #24]
 80e458c:	4928      	ldr	r1, [pc, #160]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e458e:	4313      	orrs	r3, r2
 80e4590:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80e4592:	4b27      	ldr	r3, [pc, #156]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e4594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4596:	4a26      	ldr	r2, [pc, #152]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e4598:	f023 0310 	bic.w	r3, r3, #16
 80e459c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80e459e:	4b24      	ldr	r3, [pc, #144]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80e45a2:	4b24      	ldr	r3, [pc, #144]	; (80e4634 <RCCEx_PLL2_Config+0x160>)
 80e45a4:	4013      	ands	r3, r2
 80e45a6:	687a      	ldr	r2, [r7, #4]
 80e45a8:	69d2      	ldr	r2, [r2, #28]
 80e45aa:	00d2      	lsls	r2, r2, #3
 80e45ac:	4920      	ldr	r1, [pc, #128]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45ae:	4313      	orrs	r3, r2
 80e45b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80e45b2:	4b1f      	ldr	r3, [pc, #124]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e45b6:	4a1e      	ldr	r2, [pc, #120]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45b8:	f043 0310 	orr.w	r3, r3, #16
 80e45bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80e45be:	683b      	ldr	r3, [r7, #0]
 80e45c0:	2b00      	cmp	r3, #0
 80e45c2:	d106      	bne.n	80e45d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80e45c4:	4b1a      	ldr	r3, [pc, #104]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e45c8:	4a19      	ldr	r2, [pc, #100]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80e45ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e45d0:	e00f      	b.n	80e45f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80e45d2:	683b      	ldr	r3, [r7, #0]
 80e45d4:	2b01      	cmp	r3, #1
 80e45d6:	d106      	bne.n	80e45e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80e45d8:	4b15      	ldr	r3, [pc, #84]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e45dc:	4a14      	ldr	r2, [pc, #80]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80e45e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e45e4:	e005      	b.n	80e45f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80e45e6:	4b12      	ldr	r3, [pc, #72]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e45ea:	4a11      	ldr	r2, [pc, #68]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80e45f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80e45f2:	4b0f      	ldr	r3, [pc, #60]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45f4:	681b      	ldr	r3, [r3, #0]
 80e45f6:	4a0e      	ldr	r2, [pc, #56]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e45f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80e45fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e45fe:	f7fc fe45 	bl	80e128c <HAL_GetTick>
 80e4602:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80e4604:	e008      	b.n	80e4618 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80e4606:	f7fc fe41 	bl	80e128c <HAL_GetTick>
 80e460a:	4602      	mov	r2, r0
 80e460c:	68bb      	ldr	r3, [r7, #8]
 80e460e:	1ad3      	subs	r3, r2, r3
 80e4610:	2b02      	cmp	r3, #2
 80e4612:	d901      	bls.n	80e4618 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80e4614:	2303      	movs	r3, #3
 80e4616:	e006      	b.n	80e4626 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80e4618:	4b05      	ldr	r3, [pc, #20]	; (80e4630 <RCCEx_PLL2_Config+0x15c>)
 80e461a:	681b      	ldr	r3, [r3, #0]
 80e461c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e4620:	2b00      	cmp	r3, #0
 80e4622:	d0f0      	beq.n	80e4606 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80e4624:	7bfb      	ldrb	r3, [r7, #15]
}
 80e4626:	4618      	mov	r0, r3
 80e4628:	3710      	adds	r7, #16
 80e462a:	46bd      	mov	sp, r7
 80e462c:	bd80      	pop	{r7, pc}
 80e462e:	bf00      	nop
 80e4630:	58024400 	.word	0x58024400
 80e4634:	ffff0007 	.word	0xffff0007

080e4638 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80e4638:	b580      	push	{r7, lr}
 80e463a:	b084      	sub	sp, #16
 80e463c:	af00      	add	r7, sp, #0
 80e463e:	6078      	str	r0, [r7, #4]
 80e4640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80e4642:	2300      	movs	r3, #0
 80e4644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80e4646:	4b53      	ldr	r3, [pc, #332]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e4648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e464a:	f003 0303 	and.w	r3, r3, #3
 80e464e:	2b03      	cmp	r3, #3
 80e4650:	d101      	bne.n	80e4656 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80e4652:	2301      	movs	r3, #1
 80e4654:	e099      	b.n	80e478a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80e4656:	4b4f      	ldr	r3, [pc, #316]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e4658:	681b      	ldr	r3, [r3, #0]
 80e465a:	4a4e      	ldr	r2, [pc, #312]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e465c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80e4660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e4662:	f7fc fe13 	bl	80e128c <HAL_GetTick>
 80e4666:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80e4668:	e008      	b.n	80e467c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80e466a:	f7fc fe0f 	bl	80e128c <HAL_GetTick>
 80e466e:	4602      	mov	r2, r0
 80e4670:	68bb      	ldr	r3, [r7, #8]
 80e4672:	1ad3      	subs	r3, r2, r3
 80e4674:	2b02      	cmp	r3, #2
 80e4676:	d901      	bls.n	80e467c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80e4678:	2303      	movs	r3, #3
 80e467a:	e086      	b.n	80e478a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80e467c:	4b45      	ldr	r3, [pc, #276]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e467e:	681b      	ldr	r3, [r3, #0]
 80e4680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e4684:	2b00      	cmp	r3, #0
 80e4686:	d1f0      	bne.n	80e466a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80e4688:	4b42      	ldr	r3, [pc, #264]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e468c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80e4690:	687b      	ldr	r3, [r7, #4]
 80e4692:	681b      	ldr	r3, [r3, #0]
 80e4694:	051b      	lsls	r3, r3, #20
 80e4696:	493f      	ldr	r1, [pc, #252]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e4698:	4313      	orrs	r3, r2
 80e469a:	628b      	str	r3, [r1, #40]	; 0x28
 80e469c:	687b      	ldr	r3, [r7, #4]
 80e469e:	685b      	ldr	r3, [r3, #4]
 80e46a0:	3b01      	subs	r3, #1
 80e46a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e46a6:	687b      	ldr	r3, [r7, #4]
 80e46a8:	689b      	ldr	r3, [r3, #8]
 80e46aa:	3b01      	subs	r3, #1
 80e46ac:	025b      	lsls	r3, r3, #9
 80e46ae:	b29b      	uxth	r3, r3
 80e46b0:	431a      	orrs	r2, r3
 80e46b2:	687b      	ldr	r3, [r7, #4]
 80e46b4:	68db      	ldr	r3, [r3, #12]
 80e46b6:	3b01      	subs	r3, #1
 80e46b8:	041b      	lsls	r3, r3, #16
 80e46ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e46be:	431a      	orrs	r2, r3
 80e46c0:	687b      	ldr	r3, [r7, #4]
 80e46c2:	691b      	ldr	r3, [r3, #16]
 80e46c4:	3b01      	subs	r3, #1
 80e46c6:	061b      	lsls	r3, r3, #24
 80e46c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e46cc:	4931      	ldr	r1, [pc, #196]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e46ce:	4313      	orrs	r3, r2
 80e46d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80e46d2:	4b30      	ldr	r3, [pc, #192]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e46d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e46d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80e46da:	687b      	ldr	r3, [r7, #4]
 80e46dc:	695b      	ldr	r3, [r3, #20]
 80e46de:	492d      	ldr	r1, [pc, #180]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e46e0:	4313      	orrs	r3, r2
 80e46e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80e46e4:	4b2b      	ldr	r3, [pc, #172]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e46e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e46e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80e46ec:	687b      	ldr	r3, [r7, #4]
 80e46ee:	699b      	ldr	r3, [r3, #24]
 80e46f0:	4928      	ldr	r1, [pc, #160]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e46f2:	4313      	orrs	r3, r2
 80e46f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80e46f6:	4b27      	ldr	r3, [pc, #156]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e46f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e46fa:	4a26      	ldr	r2, [pc, #152]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e46fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80e4700:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80e4702:	4b24      	ldr	r3, [pc, #144]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e4704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80e4706:	4b24      	ldr	r3, [pc, #144]	; (80e4798 <RCCEx_PLL3_Config+0x160>)
 80e4708:	4013      	ands	r3, r2
 80e470a:	687a      	ldr	r2, [r7, #4]
 80e470c:	69d2      	ldr	r2, [r2, #28]
 80e470e:	00d2      	lsls	r2, r2, #3
 80e4710:	4920      	ldr	r1, [pc, #128]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e4712:	4313      	orrs	r3, r2
 80e4714:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80e4716:	4b1f      	ldr	r3, [pc, #124]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e4718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e471a:	4a1e      	ldr	r2, [pc, #120]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e4720:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80e4722:	683b      	ldr	r3, [r7, #0]
 80e4724:	2b00      	cmp	r3, #0
 80e4726:	d106      	bne.n	80e4736 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80e4728:	4b1a      	ldr	r3, [pc, #104]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e472c:	4a19      	ldr	r2, [pc, #100]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e472e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80e4732:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e4734:	e00f      	b.n	80e4756 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80e4736:	683b      	ldr	r3, [r7, #0]
 80e4738:	2b01      	cmp	r3, #1
 80e473a:	d106      	bne.n	80e474a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80e473c:	4b15      	ldr	r3, [pc, #84]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e4740:	4a14      	ldr	r2, [pc, #80]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e4742:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80e4746:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e4748:	e005      	b.n	80e4756 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80e474a:	4b12      	ldr	r3, [pc, #72]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e474e:	4a11      	ldr	r2, [pc, #68]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e4750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80e4754:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80e4756:	4b0f      	ldr	r3, [pc, #60]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e4758:	681b      	ldr	r3, [r3, #0]
 80e475a:	4a0e      	ldr	r2, [pc, #56]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e475c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80e4760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e4762:	f7fc fd93 	bl	80e128c <HAL_GetTick>
 80e4766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80e4768:	e008      	b.n	80e477c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80e476a:	f7fc fd8f 	bl	80e128c <HAL_GetTick>
 80e476e:	4602      	mov	r2, r0
 80e4770:	68bb      	ldr	r3, [r7, #8]
 80e4772:	1ad3      	subs	r3, r2, r3
 80e4774:	2b02      	cmp	r3, #2
 80e4776:	d901      	bls.n	80e477c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80e4778:	2303      	movs	r3, #3
 80e477a:	e006      	b.n	80e478a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80e477c:	4b05      	ldr	r3, [pc, #20]	; (80e4794 <RCCEx_PLL3_Config+0x15c>)
 80e477e:	681b      	ldr	r3, [r3, #0]
 80e4780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e4784:	2b00      	cmp	r3, #0
 80e4786:	d0f0      	beq.n	80e476a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80e4788:	7bfb      	ldrb	r3, [r7, #15]
}
 80e478a:	4618      	mov	r0, r3
 80e478c:	3710      	adds	r7, #16
 80e478e:	46bd      	mov	sp, r7
 80e4790:	bd80      	pop	{r7, pc}
 80e4792:	bf00      	nop
 80e4794:	58024400 	.word	0x58024400
 80e4798:	ffff0007 	.word	0xffff0007

080e479c <__libc_init_array>:
 80e479c:	b570      	push	{r4, r5, r6, lr}
 80e479e:	4d0d      	ldr	r5, [pc, #52]	; (80e47d4 <__libc_init_array+0x38>)
 80e47a0:	4c0d      	ldr	r4, [pc, #52]	; (80e47d8 <__libc_init_array+0x3c>)
 80e47a2:	1b64      	subs	r4, r4, r5
 80e47a4:	10a4      	asrs	r4, r4, #2
 80e47a6:	2600      	movs	r6, #0
 80e47a8:	42a6      	cmp	r6, r4
 80e47aa:	d109      	bne.n	80e47c0 <__libc_init_array+0x24>
 80e47ac:	4d0b      	ldr	r5, [pc, #44]	; (80e47dc <__libc_init_array+0x40>)
 80e47ae:	4c0c      	ldr	r4, [pc, #48]	; (80e47e0 <__libc_init_array+0x44>)
 80e47b0:	f000 f82e 	bl	80e4810 <_init>
 80e47b4:	1b64      	subs	r4, r4, r5
 80e47b6:	10a4      	asrs	r4, r4, #2
 80e47b8:	2600      	movs	r6, #0
 80e47ba:	42a6      	cmp	r6, r4
 80e47bc:	d105      	bne.n	80e47ca <__libc_init_array+0x2e>
 80e47be:	bd70      	pop	{r4, r5, r6, pc}
 80e47c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80e47c4:	4798      	blx	r3
 80e47c6:	3601      	adds	r6, #1
 80e47c8:	e7ee      	b.n	80e47a8 <__libc_init_array+0xc>
 80e47ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80e47ce:	4798      	blx	r3
 80e47d0:	3601      	adds	r6, #1
 80e47d2:	e7f2      	b.n	80e47ba <__libc_init_array+0x1e>
 80e47d4:	080e4894 	.word	0x080e4894
 80e47d8:	080e4894 	.word	0x080e4894
 80e47dc:	080e4894 	.word	0x080e4894
 80e47e0:	080e4898 	.word	0x080e4898

080e47e4 <memcpy>:
 80e47e4:	440a      	add	r2, r1
 80e47e6:	4291      	cmp	r1, r2
 80e47e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80e47ec:	d100      	bne.n	80e47f0 <memcpy+0xc>
 80e47ee:	4770      	bx	lr
 80e47f0:	b510      	push	{r4, lr}
 80e47f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80e47f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80e47fa:	4291      	cmp	r1, r2
 80e47fc:	d1f9      	bne.n	80e47f2 <memcpy+0xe>
 80e47fe:	bd10      	pop	{r4, pc}

080e4800 <memset>:
 80e4800:	4402      	add	r2, r0
 80e4802:	4603      	mov	r3, r0
 80e4804:	4293      	cmp	r3, r2
 80e4806:	d100      	bne.n	80e480a <memset+0xa>
 80e4808:	4770      	bx	lr
 80e480a:	f803 1b01 	strb.w	r1, [r3], #1
 80e480e:	e7f9      	b.n	80e4804 <memset+0x4>

080e4810 <_init>:
 80e4810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80e4812:	bf00      	nop
 80e4814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80e4816:	bc08      	pop	{r3}
 80e4818:	469e      	mov	lr, r3
 80e481a:	4770      	bx	lr

080e481c <_fini>:
 80e481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80e481e:	bf00      	nop
 80e4820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80e4822:	bc08      	pop	{r3}
 80e4824:	469e      	mov	lr, r3
 80e4826:	4770      	bx	lr
