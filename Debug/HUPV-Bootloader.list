
HUPV-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  080e0000  080e0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d94  080e02cc  080e02cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080e4060  080e4060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080e40cc  080e40cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080e40d0  080e40d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080e40d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  24000010  080e40e4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000fc  080e40e4  000200fc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dcd4  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ab6  00000000  00000000  0002dd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ac0  00000000  00000000  0002f7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009f8  00000000  00000000  00030288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000020bd  00000000  00000000  00030c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b9bb  00000000  00000000  00032d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00141999  00000000  00000000  0003e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00180091  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c70  00000000  00000000  001800e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080e02cc <__do_global_dtors_aux>:
 80e02cc:	b510      	push	{r4, lr}
 80e02ce:	4c05      	ldr	r4, [pc, #20]	; (80e02e4 <__do_global_dtors_aux+0x18>)
 80e02d0:	7823      	ldrb	r3, [r4, #0]
 80e02d2:	b933      	cbnz	r3, 80e02e2 <__do_global_dtors_aux+0x16>
 80e02d4:	4b04      	ldr	r3, [pc, #16]	; (80e02e8 <__do_global_dtors_aux+0x1c>)
 80e02d6:	b113      	cbz	r3, 80e02de <__do_global_dtors_aux+0x12>
 80e02d8:	4804      	ldr	r0, [pc, #16]	; (80e02ec <__do_global_dtors_aux+0x20>)
 80e02da:	f3af 8000 	nop.w
 80e02de:	2301      	movs	r3, #1
 80e02e0:	7023      	strb	r3, [r4, #0]
 80e02e2:	bd10      	pop	{r4, pc}
 80e02e4:	24000010 	.word	0x24000010
 80e02e8:	00000000 	.word	0x00000000
 80e02ec:	080e4048 	.word	0x080e4048

080e02f0 <frame_dummy>:
 80e02f0:	b508      	push	{r3, lr}
 80e02f2:	4b03      	ldr	r3, [pc, #12]	; (80e0300 <frame_dummy+0x10>)
 80e02f4:	b11b      	cbz	r3, 80e02fe <frame_dummy+0xe>
 80e02f6:	4903      	ldr	r1, [pc, #12]	; (80e0304 <frame_dummy+0x14>)
 80e02f8:	4803      	ldr	r0, [pc, #12]	; (80e0308 <frame_dummy+0x18>)
 80e02fa:	f3af 8000 	nop.w
 80e02fe:	bd08      	pop	{r3, pc}
 80e0300:	00000000 	.word	0x00000000
 80e0304:	24000014 	.word	0x24000014
 80e0308:	080e4048 	.word	0x080e4048

080e030c <fdcan_start>:

extern FDCAN_HandleTypeDef hfdcan1;

fdcan_instance_t fdcan_instance = {};

fdcan_error_t const fdcan_start(void){
 80e030c:	b580      	push	{r7, lr}
 80e030e:	b082      	sub	sp, #8
 80e0310:	af00      	add	r7, sp, #0
	fdcan_instance.hfdcan = &hfdcan1;
 80e0312:	4b22      	ldr	r3, [pc, #136]	; (80e039c <fdcan_start+0x90>)
 80e0314:	4a22      	ldr	r2, [pc, #136]	; (80e03a0 <fdcan_start+0x94>)
 80e0316:	601a      	str	r2, [r3, #0]
	fdcan_instance.rx_location = FDCAN_RX_FIFO0;
 80e0318:	4b20      	ldr	r3, [pc, #128]	; (80e039c <fdcan_start+0x90>)
 80e031a:	2240      	movs	r2, #64	; 0x40
 80e031c:	629a      	str	r2, [r3, #40]	; 0x28

	FDCAN_TxHeaderTypeDef* header = &fdcan_instance.tx_header;
 80e031e:	4b21      	ldr	r3, [pc, #132]	; (80e03a4 <fdcan_start+0x98>)
 80e0320:	607b      	str	r3, [r7, #4]

	header->FDFormat = FDCAN_FD_CAN;
 80e0322:	687b      	ldr	r3, [r7, #4]
 80e0324:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80e0328:	619a      	str	r2, [r3, #24]
	header->DataLength = FDCAN_DLC_BYTES_64;
 80e032a:	687b      	ldr	r3, [r7, #4]
 80e032c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80e0330:	60da      	str	r2, [r3, #12]
	header->TxFrameType = FDCAN_DATA_FRAME;
 80e0332:	687b      	ldr	r3, [r7, #4]
 80e0334:	2200      	movs	r2, #0
 80e0336:	609a      	str	r2, [r3, #8]
	header->BitRateSwitch = FDCAN_BRS_ON;
 80e0338:	687b      	ldr	r3, [r7, #4]
 80e033a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80e033e:	615a      	str	r2, [r3, #20]
	header->ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 80e0340:	687b      	ldr	r3, [r7, #4]
 80e0342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80e0346:	611a      	str	r2, [r3, #16]
	header->FDFormat = FDCAN_FRAME_FD_BRS;
 80e0348:	687b      	ldr	r3, [r7, #4]
 80e034a:	f44f 7240 	mov.w	r2, #768	; 0x300
 80e034e:	619a      	str	r2, [r3, #24]
	header->IdType = FDCAN_STANDARD_ID;
 80e0350:	687b      	ldr	r3, [r7, #4]
 80e0352:	2200      	movs	r2, #0
 80e0354:	605a      	str	r2, [r3, #4]
	header->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80e0356:	687b      	ldr	r3, [r7, #4]
 80e0358:	2200      	movs	r2, #0
 80e035a:	61da      	str	r2, [r3, #28]
	header->MessageMarker = 0;
 80e035c:	687b      	ldr	r3, [r7, #4]
 80e035e:	2200      	movs	r2, #0
 80e0360:	621a      	str	r2, [r3, #32]
	header->Identifier = 0x0;
 80e0362:	687b      	ldr	r3, [r7, #4]
 80e0364:	2200      	movs	r2, #0
 80e0366:	601a      	str	r2, [r3, #0]

	if(HAL_FDCAN_Start(fdcan_instance.hfdcan) != HAL_OK){
 80e0368:	4b0c      	ldr	r3, [pc, #48]	; (80e039c <fdcan_start+0x90>)
 80e036a:	681b      	ldr	r3, [r3, #0]
 80e036c:	4618      	mov	r0, r3
 80e036e:	f000 feeb 	bl	80e1148 <HAL_FDCAN_Start>
 80e0372:	4603      	mov	r3, r0
 80e0374:	2b00      	cmp	r3, #0
 80e0376:	d001      	beq.n	80e037c <fdcan_start+0x70>
		return FDCAN_ERROR;
 80e0378:	23ff      	movs	r3, #255	; 0xff
 80e037a:	e00b      	b.n	80e0394 <fdcan_start+0x88>
	}

	 if(HAL_FDCAN_ActivateNotification(fdcan_instance.hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 80e037c:	4b07      	ldr	r3, [pc, #28]	; (80e039c <fdcan_start+0x90>)
 80e037e:	681b      	ldr	r3, [r3, #0]
 80e0380:	2200      	movs	r2, #0
 80e0382:	2101      	movs	r1, #1
 80e0384:	4618      	mov	r0, r3
 80e0386:	f000 ff65 	bl	80e1254 <HAL_FDCAN_ActivateNotification>
 80e038a:	4603      	mov	r3, r0
 80e038c:	2b00      	cmp	r3, #0
 80e038e:	d001      	beq.n	80e0394 <fdcan_start+0x88>
		return FDCAN_ERROR;
 80e0390:	23ff      	movs	r3, #255	; 0xff
 80e0392:	e7ff      	b.n	80e0394 <fdcan_start+0x88>
	}

}
 80e0394:	4618      	mov	r0, r3
 80e0396:	3708      	adds	r7, #8
 80e0398:	46bd      	mov	sp, r7
 80e039a:	bd80      	pop	{r7, pc}
 80e039c:	2400002c 	.word	0x2400002c
 80e03a0:	24000058 	.word	0x24000058
 80e03a4:	24000030 	.word	0x24000030

080e03a8 <fdcan_transmit>:

fdcan_error_t const fdcan_transmit(fdcan_packet_t* data){
 80e03a8:	b580      	push	{r7, lr}
 80e03aa:	b082      	sub	sp, #8
 80e03ac:	af00      	add	r7, sp, #0
 80e03ae:	6078      	str	r0, [r7, #4]
	fdcan_instance.tx_header.Identifier = data->identifier;
 80e03b0:	687b      	ldr	r3, [r7, #4]
 80e03b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80e03b6:	461a      	mov	r2, r3
 80e03b8:	4b09      	ldr	r3, [pc, #36]	; (80e03e0 <fdcan_transmit+0x38>)
 80e03ba:	605a      	str	r2, [r3, #4]

	if (HAL_FDCAN_AddMessageToTxFifoQ(fdcan_instance.hfdcan, &fdcan_instance.tx_header, data->data) != HAL_OK) {
 80e03bc:	4b08      	ldr	r3, [pc, #32]	; (80e03e0 <fdcan_transmit+0x38>)
 80e03be:	681b      	ldr	r3, [r3, #0]
 80e03c0:	687a      	ldr	r2, [r7, #4]
 80e03c2:	4908      	ldr	r1, [pc, #32]	; (80e03e4 <fdcan_transmit+0x3c>)
 80e03c4:	4618      	mov	r0, r3
 80e03c6:	f000 feea 	bl	80e119e <HAL_FDCAN_AddMessageToTxFifoQ>
 80e03ca:	4603      	mov	r3, r0
 80e03cc:	2b00      	cmp	r3, #0
 80e03ce:	d001      	beq.n	80e03d4 <fdcan_transmit+0x2c>
		return FDCAN_ERROR;
 80e03d0:	23ff      	movs	r3, #255	; 0xff
 80e03d2:	e000      	b.n	80e03d6 <fdcan_transmit+0x2e>
	}

	return FDCAN_OK;
 80e03d4:	2300      	movs	r3, #0
}
 80e03d6:	4618      	mov	r0, r3
 80e03d8:	3708      	adds	r7, #8
 80e03da:	46bd      	mov	sp, r7
 80e03dc:	bd80      	pop	{r7, pc}
 80e03de:	bf00      	nop
 80e03e0:	2400002c 	.word	0x2400002c
 80e03e4:	24000030 	.word	0x24000030

080e03e8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80e03e8:	b480      	push	{r7}
 80e03ea:	b083      	sub	sp, #12
 80e03ec:	af00      	add	r7, sp, #0
 80e03ee:	6078      	str	r0, [r7, #4]
 80e03f0:	6039      	str	r1, [r7, #0]


}
 80e03f2:	bf00      	nop
 80e03f4:	370c      	adds	r7, #12
 80e03f6:	46bd      	mov	sp, r7
 80e03f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e03fc:	4770      	bx	lr

080e03fe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80e03fe:	b580      	push	{r7, lr}
 80e0400:	b0a4      	sub	sp, #144	; 0x90
 80e0402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80e0404:	f000 fb20 	bl	80e0a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80e0408:	f000 f834 	bl	80e0474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80e040c:	f000 f910 	bl	80e0630 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80e0410:	f000 f8a8 	bl	80e0564 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  //bootloader_init();
  fdcan_start();
 80e0414:	f7ff ff7a 	bl	80e030c <fdcan_start>

  uint8_t data[64];
  int i;
  uint8_t d = 0xA;
 80e0418:	230a      	movs	r3, #10
 80e041a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  for (i = 0; i < 64; ++i) {
 80e041e:	2300      	movs	r3, #0
 80e0420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80e0424:	e00f      	b.n	80e0446 <main+0x48>
	data[i] = d++;
 80e0426:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80e042a:	1c5a      	adds	r2, r3, #1
 80e042c:	f887 208b 	strb.w	r2, [r7, #139]	; 0x8b
 80e0430:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80e0434:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80e0438:	440a      	add	r2, r1
 80e043a:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < 64; ++i) {
 80e043c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80e0440:	3301      	adds	r3, #1
 80e0442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80e0446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80e044a:	2b3f      	cmp	r3, #63	; 0x3f
 80e044c:	ddeb      	ble.n	80e0426 <main+0x28>
  }

  fdcan_packet_t p = {data, 69};
 80e044e:	1d3b      	adds	r3, r7, #4
 80e0450:	2242      	movs	r2, #66	; 0x42
 80e0452:	2100      	movs	r1, #0
 80e0454:	4618      	mov	r0, r3
 80e0456:	f003 fdef 	bl	80e4038 <memset>
 80e045a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80e045e:	b2db      	uxtb	r3, r3
 80e0460:	713b      	strb	r3, [r7, #4]
 80e0462:	2345      	movs	r3, #69	; 0x45
 80e0464:	717b      	strb	r3, [r7, #5]
  fdcan_transmit(data);
 80e0466:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80e046a:	4618      	mov	r0, r3
 80e046c:	f7ff ff9c 	bl	80e03a8 <fdcan_transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80e0470:	e7fe      	b.n	80e0470 <main+0x72>
	...

080e0474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80e0474:	b580      	push	{r7, lr}
 80e0476:	b09c      	sub	sp, #112	; 0x70
 80e0478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80e047a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80e047e:	224c      	movs	r2, #76	; 0x4c
 80e0480:	2100      	movs	r1, #0
 80e0482:	4618      	mov	r0, r3
 80e0484:	f003 fdd8 	bl	80e4038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80e0488:	1d3b      	adds	r3, r7, #4
 80e048a:	2220      	movs	r2, #32
 80e048c:	2100      	movs	r1, #0
 80e048e:	4618      	mov	r0, r3
 80e0490:	f003 fdd2 	bl	80e4038 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80e0494:	2002      	movs	r0, #2
 80e0496:	f001 fe27 	bl	80e20e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80e049a:	2300      	movs	r3, #0
 80e049c:	603b      	str	r3, [r7, #0]
 80e049e:	4b2f      	ldr	r3, [pc, #188]	; (80e055c <SystemClock_Config+0xe8>)
 80e04a0:	699b      	ldr	r3, [r3, #24]
 80e04a2:	4a2e      	ldr	r2, [pc, #184]	; (80e055c <SystemClock_Config+0xe8>)
 80e04a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80e04a8:	6193      	str	r3, [r2, #24]
 80e04aa:	4b2c      	ldr	r3, [pc, #176]	; (80e055c <SystemClock_Config+0xe8>)
 80e04ac:	699b      	ldr	r3, [r3, #24]
 80e04ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80e04b2:	603b      	str	r3, [r7, #0]
 80e04b4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80e04b6:	bf00      	nop
 80e04b8:	4b28      	ldr	r3, [pc, #160]	; (80e055c <SystemClock_Config+0xe8>)
 80e04ba:	699b      	ldr	r3, [r3, #24]
 80e04bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e04c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e04c4:	d1f8      	bne.n	80e04b8 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80e04c6:	4b26      	ldr	r3, [pc, #152]	; (80e0560 <SystemClock_Config+0xec>)
 80e04c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e04ca:	f023 0303 	bic.w	r3, r3, #3
 80e04ce:	4a24      	ldr	r2, [pc, #144]	; (80e0560 <SystemClock_Config+0xec>)
 80e04d0:	f043 0302 	orr.w	r3, r3, #2
 80e04d4:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80e04d6:	2301      	movs	r3, #1
 80e04d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80e04da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80e04de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80e04e0:	2302      	movs	r3, #2
 80e04e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80e04e4:	2302      	movs	r3, #2
 80e04e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80e04e8:	2302      	movs	r3, #2
 80e04ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80e04ec:	232c      	movs	r3, #44	; 0x2c
 80e04ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80e04f0:	2301      	movs	r3, #1
 80e04f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80e04f4:	2302      	movs	r3, #2
 80e04f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80e04f8:	2302      	movs	r3, #2
 80e04fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80e04fc:	230c      	movs	r3, #12
 80e04fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80e0500:	2300      	movs	r3, #0
 80e0502:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80e0504:	2300      	movs	r3, #0
 80e0506:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80e0508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80e050c:	4618      	mov	r0, r3
 80e050e:	f001 fe25 	bl	80e215c <HAL_RCC_OscConfig>
 80e0512:	4603      	mov	r3, r0
 80e0514:	2b00      	cmp	r3, #0
 80e0516:	d001      	beq.n	80e051c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80e0518:	f000 f8fe 	bl	80e0718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80e051c:	233f      	movs	r3, #63	; 0x3f
 80e051e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80e0520:	2303      	movs	r3, #3
 80e0522:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80e0524:	2300      	movs	r3, #0
 80e0526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80e0528:	2308      	movs	r3, #8
 80e052a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80e052c:	2340      	movs	r3, #64	; 0x40
 80e052e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80e0530:	2340      	movs	r3, #64	; 0x40
 80e0532:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80e0534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80e0538:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80e053a:	2340      	movs	r3, #64	; 0x40
 80e053c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80e053e:	1d3b      	adds	r3, r7, #4
 80e0540:	2103      	movs	r1, #3
 80e0542:	4618      	mov	r0, r3
 80e0544:	f002 f9b8 	bl	80e28b8 <HAL_RCC_ClockConfig>
 80e0548:	4603      	mov	r3, r0
 80e054a:	2b00      	cmp	r3, #0
 80e054c:	d001      	beq.n	80e0552 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80e054e:	f000 f8e3 	bl	80e0718 <Error_Handler>
  }
}
 80e0552:	bf00      	nop
 80e0554:	3770      	adds	r7, #112	; 0x70
 80e0556:	46bd      	mov	sp, r7
 80e0558:	bd80      	pop	{r7, pc}
 80e055a:	bf00      	nop
 80e055c:	58024800 	.word	0x58024800
 80e0560:	58024400 	.word	0x58024400

080e0564 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80e0564:	b580      	push	{r7, lr}
 80e0566:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80e0568:	4b2f      	ldr	r3, [pc, #188]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e056a:	4a30      	ldr	r2, [pc, #192]	; (80e062c <MX_FDCAN1_Init+0xc8>)
 80e056c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80e056e:	4b2e      	ldr	r3, [pc, #184]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e0570:	f44f 7240 	mov.w	r2, #768	; 0x300
 80e0574:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80e0576:	4b2c      	ldr	r3, [pc, #176]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e0578:	2200      	movs	r2, #0
 80e057a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80e057c:	4b2a      	ldr	r3, [pc, #168]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e057e:	2201      	movs	r2, #1
 80e0580:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80e0582:	4b29      	ldr	r3, [pc, #164]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e0584:	2200      	movs	r2, #0
 80e0586:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80e0588:	4b27      	ldr	r3, [pc, #156]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e058a:	2200      	movs	r2, #0
 80e058c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80e058e:	4b26      	ldr	r3, [pc, #152]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e0590:	2201      	movs	r2, #1
 80e0592:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80e0594:	4b24      	ldr	r3, [pc, #144]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e0596:	2210      	movs	r2, #16
 80e0598:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 59;
 80e059a:	4b23      	ldr	r3, [pc, #140]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e059c:	223b      	movs	r2, #59	; 0x3b
 80e059e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 80e05a0:	4b21      	ldr	r3, [pc, #132]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05a2:	2214      	movs	r2, #20
 80e05a4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80e05a6:	4b20      	ldr	r3, [pc, #128]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05a8:	2201      	movs	r2, #1
 80e05aa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80e05ac:	4b1e      	ldr	r3, [pc, #120]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05ae:	2204      	movs	r2, #4
 80e05b0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80e05b2:	4b1d      	ldr	r3, [pc, #116]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05b4:	220e      	movs	r2, #14
 80e05b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80e05b8:	4b1b      	ldr	r3, [pc, #108]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05ba:	2205      	movs	r2, #5
 80e05bc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80e05be:	4b1a      	ldr	r3, [pc, #104]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05c0:	2200      	movs	r2, #0
 80e05c2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80e05c4:	4b18      	ldr	r3, [pc, #96]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05c6:	2201      	movs	r2, #1
 80e05c8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80e05ca:	4b17      	ldr	r3, [pc, #92]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05cc:	2200      	movs	r2, #0
 80e05ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 16;
 80e05d0:	4b15      	ldr	r3, [pc, #84]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05d2:	2210      	movs	r2, #16
 80e05d4:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80e05d6:	4b14      	ldr	r3, [pc, #80]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05d8:	2212      	movs	r2, #18
 80e05da:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80e05dc:	4b12      	ldr	r3, [pc, #72]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05de:	2200      	movs	r2, #0
 80e05e0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 80e05e2:	4b11      	ldr	r3, [pc, #68]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05e4:	2212      	movs	r2, #18
 80e05e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80e05e8:	4b0f      	ldr	r3, [pc, #60]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05ea:	2200      	movs	r2, #0
 80e05ec:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 80e05ee:	4b0e      	ldr	r3, [pc, #56]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05f0:	2212      	movs	r2, #18
 80e05f2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80e05f4:	4b0c      	ldr	r3, [pc, #48]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05f6:	2200      	movs	r2, #0
 80e05f8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80e05fa:	4b0b      	ldr	r3, [pc, #44]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e05fc:	2200      	movs	r2, #0
 80e05fe:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80e0600:	4b09      	ldr	r3, [pc, #36]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e0602:	2200      	movs	r2, #0
 80e0604:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80e0606:	4b08      	ldr	r3, [pc, #32]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e0608:	2200      	movs	r2, #0
 80e060a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80e060c:	4b06      	ldr	r3, [pc, #24]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e060e:	2212      	movs	r2, #18
 80e0610:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80e0612:	4805      	ldr	r0, [pc, #20]	; (80e0628 <MX_FDCAN1_Init+0xc4>)
 80e0614:	f000 fbba 	bl	80e0d8c <HAL_FDCAN_Init>
 80e0618:	4603      	mov	r3, r0
 80e061a:	2b00      	cmp	r3, #0
 80e061c:	d001      	beq.n	80e0622 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80e061e:	f000 f87b 	bl	80e0718 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80e0622:	bf00      	nop
 80e0624:	bd80      	pop	{r7, pc}
 80e0626:	bf00      	nop
 80e0628:	24000058 	.word	0x24000058
 80e062c:	4000a000 	.word	0x4000a000

080e0630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80e0630:	b580      	push	{r7, lr}
 80e0632:	b08a      	sub	sp, #40	; 0x28
 80e0634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e0636:	f107 0314 	add.w	r3, r7, #20
 80e063a:	2200      	movs	r2, #0
 80e063c:	601a      	str	r2, [r3, #0]
 80e063e:	605a      	str	r2, [r3, #4]
 80e0640:	609a      	str	r2, [r3, #8]
 80e0642:	60da      	str	r2, [r3, #12]
 80e0644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80e0646:	4b32      	ldr	r3, [pc, #200]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e0648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e064c:	4a30      	ldr	r2, [pc, #192]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e064e:	f043 0304 	orr.w	r3, r3, #4
 80e0652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0656:	4b2e      	ldr	r3, [pc, #184]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e0658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e065c:	f003 0304 	and.w	r3, r3, #4
 80e0660:	613b      	str	r3, [r7, #16]
 80e0662:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80e0664:	4b2a      	ldr	r3, [pc, #168]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e0666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e066a:	4a29      	ldr	r2, [pc, #164]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80e0670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0674:	4b26      	ldr	r3, [pc, #152]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e0676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80e067e:	60fb      	str	r3, [r7, #12]
 80e0680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80e0682:	4b23      	ldr	r3, [pc, #140]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e0684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0688:	4a21      	ldr	r2, [pc, #132]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e068a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80e068e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0692:	4b1f      	ldr	r3, [pc, #124]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e0694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80e069c:	60bb      	str	r3, [r7, #8]
 80e069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80e06a0:	4b1b      	ldr	r3, [pc, #108]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e06a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e06a6:	4a1a      	ldr	r2, [pc, #104]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e06a8:	f043 0301 	orr.w	r3, r3, #1
 80e06ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e06b0:	4b17      	ldr	r3, [pc, #92]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e06b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e06b6:	f003 0301 	and.w	r3, r3, #1
 80e06ba:	607b      	str	r3, [r7, #4]
 80e06bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80e06be:	4b14      	ldr	r3, [pc, #80]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e06c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e06c4:	4a12      	ldr	r2, [pc, #72]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e06c6:	f043 0302 	orr.w	r3, r3, #2
 80e06ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e06ce:	4b10      	ldr	r3, [pc, #64]	; (80e0710 <MX_GPIO_Init+0xe0>)
 80e06d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e06d4:	f003 0302 	and.w	r3, r3, #2
 80e06d8:	603b      	str	r3, [r7, #0]
 80e06da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_CAN_Pin|LED_FLASH_Pin|LED_CANG6_Pin|LED_FAULT_Pin
 80e06dc:	2200      	movs	r2, #0
 80e06de:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80e06e2:	480c      	ldr	r0, [pc, #48]	; (80e0714 <MX_GPIO_Init+0xe4>)
 80e06e4:	f001 fce6 	bl	80e20b4 <HAL_GPIO_WritePin>
                          |LED_OP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_CAN_Pin LED_FLASH_Pin LED_CANG6_Pin LED_FAULT_Pin
                           LED_OP_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_FLASH_Pin|LED_CANG6_Pin|LED_FAULT_Pin
 80e06e8:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80e06ec:	617b      	str	r3, [r7, #20]
                          |LED_OP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80e06ee:	2301      	movs	r3, #1
 80e06f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e06f2:	2300      	movs	r3, #0
 80e06f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e06f6:	2300      	movs	r3, #0
 80e06f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80e06fa:	f107 0314 	add.w	r3, r7, #20
 80e06fe:	4619      	mov	r1, r3
 80e0700:	4804      	ldr	r0, [pc, #16]	; (80e0714 <MX_GPIO_Init+0xe4>)
 80e0702:	f001 fb2f 	bl	80e1d64 <HAL_GPIO_Init>

}
 80e0706:	bf00      	nop
 80e0708:	3728      	adds	r7, #40	; 0x28
 80e070a:	46bd      	mov	sp, r7
 80e070c:	bd80      	pop	{r7, pc}
 80e070e:	bf00      	nop
 80e0710:	58024400 	.word	0x58024400
 80e0714:	58021800 	.word	0x58021800

080e0718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80e0718:	b480      	push	{r7}
 80e071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80e071c:	b672      	cpsid	i
}
 80e071e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80e0720:	e7fe      	b.n	80e0720 <Error_Handler+0x8>
	...

080e0724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80e0724:	b480      	push	{r7}
 80e0726:	b083      	sub	sp, #12
 80e0728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80e072a:	4b0a      	ldr	r3, [pc, #40]	; (80e0754 <HAL_MspInit+0x30>)
 80e072c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e0730:	4a08      	ldr	r2, [pc, #32]	; (80e0754 <HAL_MspInit+0x30>)
 80e0732:	f043 0302 	orr.w	r3, r3, #2
 80e0736:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80e073a:	4b06      	ldr	r3, [pc, #24]	; (80e0754 <HAL_MspInit+0x30>)
 80e073c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e0740:	f003 0302 	and.w	r3, r3, #2
 80e0744:	607b      	str	r3, [r7, #4]
 80e0746:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80e0748:	bf00      	nop
 80e074a:	370c      	adds	r7, #12
 80e074c:	46bd      	mov	sp, r7
 80e074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0752:	4770      	bx	lr
 80e0754:	58024400 	.word	0x58024400

080e0758 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80e0758:	b580      	push	{r7, lr}
 80e075a:	b0b6      	sub	sp, #216	; 0xd8
 80e075c:	af00      	add	r7, sp, #0
 80e075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e0760:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80e0764:	2200      	movs	r2, #0
 80e0766:	601a      	str	r2, [r3, #0]
 80e0768:	605a      	str	r2, [r3, #4]
 80e076a:	609a      	str	r2, [r3, #8]
 80e076c:	60da      	str	r2, [r3, #12]
 80e076e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80e0770:	f107 0310 	add.w	r3, r7, #16
 80e0774:	22b4      	movs	r2, #180	; 0xb4
 80e0776:	2100      	movs	r1, #0
 80e0778:	4618      	mov	r0, r3
 80e077a:	f003 fc5d 	bl	80e4038 <memset>
  if(hfdcan->Instance==FDCAN1)
 80e077e:	687b      	ldr	r3, [r7, #4]
 80e0780:	681b      	ldr	r3, [r3, #0]
 80e0782:	4a39      	ldr	r2, [pc, #228]	; (80e0868 <HAL_FDCAN_MspInit+0x110>)
 80e0784:	4293      	cmp	r3, r2
 80e0786:	d16b      	bne.n	80e0860 <HAL_FDCAN_MspInit+0x108>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80e0788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80e078c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80e078e:	2319      	movs	r3, #25
 80e0790:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 80e0792:	23c8      	movs	r3, #200	; 0xc8
 80e0794:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80e0796:	2302      	movs	r3, #2
 80e0798:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80e079a:	230a      	movs	r3, #10
 80e079c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80e079e:	2302      	movs	r3, #2
 80e07a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80e07a2:	2300      	movs	r3, #0
 80e07a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80e07a6:	2320      	movs	r3, #32
 80e07a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80e07aa:	2300      	movs	r3, #0
 80e07ac:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80e07ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80e07b2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80e07b4:	f107 0310 	add.w	r3, r7, #16
 80e07b8:	4618      	mov	r0, r3
 80e07ba:	f002 fbad 	bl	80e2f18 <HAL_RCCEx_PeriphCLKConfig>
 80e07be:	4603      	mov	r3, r0
 80e07c0:	2b00      	cmp	r3, #0
 80e07c2:	d001      	beq.n	80e07c8 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 80e07c4:	f7ff ffa8 	bl	80e0718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80e07c8:	4b28      	ldr	r3, [pc, #160]	; (80e086c <HAL_FDCAN_MspInit+0x114>)
 80e07ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80e07ce:	4a27      	ldr	r2, [pc, #156]	; (80e086c <HAL_FDCAN_MspInit+0x114>)
 80e07d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e07d4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80e07d8:	4b24      	ldr	r3, [pc, #144]	; (80e086c <HAL_FDCAN_MspInit+0x114>)
 80e07da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80e07de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e07e2:	60fb      	str	r3, [r7, #12]
 80e07e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80e07e6:	4b21      	ldr	r3, [pc, #132]	; (80e086c <HAL_FDCAN_MspInit+0x114>)
 80e07e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e07ec:	4a1f      	ldr	r2, [pc, #124]	; (80e086c <HAL_FDCAN_MspInit+0x114>)
 80e07ee:	f043 0301 	orr.w	r3, r3, #1
 80e07f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e07f6:	4b1d      	ldr	r3, [pc, #116]	; (80e086c <HAL_FDCAN_MspInit+0x114>)
 80e07f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e07fc:	f003 0301 	and.w	r3, r3, #1
 80e0800:	60bb      	str	r3, [r7, #8]
 80e0802:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80e0804:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80e0808:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80e080c:	2302      	movs	r3, #2
 80e080e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e0812:	2300      	movs	r3, #0
 80e0814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80e0818:	2302      	movs	r3, #2
 80e081a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80e081e:	2309      	movs	r3, #9
 80e0820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80e0824:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80e0828:	4619      	mov	r1, r3
 80e082a:	4811      	ldr	r0, [pc, #68]	; (80e0870 <HAL_FDCAN_MspInit+0x118>)
 80e082c:	f001 fa9a 	bl	80e1d64 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80e0830:	2200      	movs	r2, #0
 80e0832:	2100      	movs	r1, #0
 80e0834:	2013      	movs	r0, #19
 80e0836:	f000 fa74 	bl	80e0d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80e083a:	2013      	movs	r0, #19
 80e083c:	f000 fa8b 	bl	80e0d56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80e0840:	2200      	movs	r2, #0
 80e0842:	2100      	movs	r1, #0
 80e0844:	2015      	movs	r0, #21
 80e0846:	f000 fa6c 	bl	80e0d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80e084a:	2015      	movs	r0, #21
 80e084c:	f000 fa83 	bl	80e0d56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 0, 0);
 80e0850:	2200      	movs	r2, #0
 80e0852:	2100      	movs	r1, #0
 80e0854:	203f      	movs	r0, #63	; 0x3f
 80e0856:	f000 fa64 	bl	80e0d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 80e085a:	203f      	movs	r0, #63	; 0x3f
 80e085c:	f000 fa7b 	bl	80e0d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80e0860:	bf00      	nop
 80e0862:	37d8      	adds	r7, #216	; 0xd8
 80e0864:	46bd      	mov	sp, r7
 80e0866:	bd80      	pop	{r7, pc}
 80e0868:	4000a000 	.word	0x4000a000
 80e086c:	58024400 	.word	0x58024400
 80e0870:	58020000 	.word	0x58020000

080e0874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80e0874:	b480      	push	{r7}
 80e0876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80e0878:	e7fe      	b.n	80e0878 <NMI_Handler+0x4>

080e087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80e087a:	b480      	push	{r7}
 80e087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80e087e:	e7fe      	b.n	80e087e <HardFault_Handler+0x4>

080e0880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80e0880:	b480      	push	{r7}
 80e0882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80e0884:	e7fe      	b.n	80e0884 <MemManage_Handler+0x4>

080e0886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80e0886:	b480      	push	{r7}
 80e0888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80e088a:	e7fe      	b.n	80e088a <BusFault_Handler+0x4>

080e088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80e088c:	b480      	push	{r7}
 80e088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80e0890:	e7fe      	b.n	80e0890 <UsageFault_Handler+0x4>

080e0892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80e0892:	b480      	push	{r7}
 80e0894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80e0896:	bf00      	nop
 80e0898:	46bd      	mov	sp, r7
 80e089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e089e:	4770      	bx	lr

080e08a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80e08a0:	b480      	push	{r7}
 80e08a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80e08a4:	bf00      	nop
 80e08a6:	46bd      	mov	sp, r7
 80e08a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e08ac:	4770      	bx	lr

080e08ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80e08ae:	b480      	push	{r7}
 80e08b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80e08b2:	bf00      	nop
 80e08b4:	46bd      	mov	sp, r7
 80e08b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e08ba:	4770      	bx	lr

080e08bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80e08bc:	b580      	push	{r7, lr}
 80e08be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80e08c0:	f000 f934 	bl	80e0b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80e08c4:	bf00      	nop
 80e08c6:	bd80      	pop	{r7, pc}

080e08c8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80e08c8:	b580      	push	{r7, lr}
 80e08ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80e08cc:	4802      	ldr	r0, [pc, #8]	; (80e08d8 <FDCAN1_IT0_IRQHandler+0x10>)
 80e08ce:	f000 fd3b 	bl	80e1348 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80e08d2:	bf00      	nop
 80e08d4:	bd80      	pop	{r7, pc}
 80e08d6:	bf00      	nop
 80e08d8:	24000058 	.word	0x24000058

080e08dc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80e08dc:	b580      	push	{r7, lr}
 80e08de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80e08e0:	4802      	ldr	r0, [pc, #8]	; (80e08ec <FDCAN1_IT1_IRQHandler+0x10>)
 80e08e2:	f000 fd31 	bl	80e1348 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80e08e6:	bf00      	nop
 80e08e8:	bd80      	pop	{r7, pc}
 80e08ea:	bf00      	nop
 80e08ec:	24000058 	.word	0x24000058

080e08f0 <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 80e08f0:	b580      	push	{r7, lr}
 80e08f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80e08f4:	4802      	ldr	r0, [pc, #8]	; (80e0900 <FDCAN_CAL_IRQHandler+0x10>)
 80e08f6:	f000 fd27 	bl	80e1348 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 80e08fa:	bf00      	nop
 80e08fc:	bd80      	pop	{r7, pc}
 80e08fe:	bf00      	nop
 80e0900:	24000058 	.word	0x24000058

080e0904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80e0904:	b480      	push	{r7}
 80e0906:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80e0908:	4b32      	ldr	r3, [pc, #200]	; (80e09d4 <SystemInit+0xd0>)
 80e090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e090e:	4a31      	ldr	r2, [pc, #196]	; (80e09d4 <SystemInit+0xd0>)
 80e0910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80e0914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80e0918:	4b2f      	ldr	r3, [pc, #188]	; (80e09d8 <SystemInit+0xd4>)
 80e091a:	681b      	ldr	r3, [r3, #0]
 80e091c:	f003 030f 	and.w	r3, r3, #15
 80e0920:	2b06      	cmp	r3, #6
 80e0922:	d807      	bhi.n	80e0934 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80e0924:	4b2c      	ldr	r3, [pc, #176]	; (80e09d8 <SystemInit+0xd4>)
 80e0926:	681b      	ldr	r3, [r3, #0]
 80e0928:	f023 030f 	bic.w	r3, r3, #15
 80e092c:	4a2a      	ldr	r2, [pc, #168]	; (80e09d8 <SystemInit+0xd4>)
 80e092e:	f043 0307 	orr.w	r3, r3, #7
 80e0932:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80e0934:	4b29      	ldr	r3, [pc, #164]	; (80e09dc <SystemInit+0xd8>)
 80e0936:	681b      	ldr	r3, [r3, #0]
 80e0938:	4a28      	ldr	r2, [pc, #160]	; (80e09dc <SystemInit+0xd8>)
 80e093a:	f043 0301 	orr.w	r3, r3, #1
 80e093e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80e0940:	4b26      	ldr	r3, [pc, #152]	; (80e09dc <SystemInit+0xd8>)
 80e0942:	2200      	movs	r2, #0
 80e0944:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80e0946:	4b25      	ldr	r3, [pc, #148]	; (80e09dc <SystemInit+0xd8>)
 80e0948:	681a      	ldr	r2, [r3, #0]
 80e094a:	4924      	ldr	r1, [pc, #144]	; (80e09dc <SystemInit+0xd8>)
 80e094c:	4b24      	ldr	r3, [pc, #144]	; (80e09e0 <SystemInit+0xdc>)
 80e094e:	4013      	ands	r3, r2
 80e0950:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80e0952:	4b21      	ldr	r3, [pc, #132]	; (80e09d8 <SystemInit+0xd4>)
 80e0954:	681b      	ldr	r3, [r3, #0]
 80e0956:	f003 0308 	and.w	r3, r3, #8
 80e095a:	2b00      	cmp	r3, #0
 80e095c:	d007      	beq.n	80e096e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80e095e:	4b1e      	ldr	r3, [pc, #120]	; (80e09d8 <SystemInit+0xd4>)
 80e0960:	681b      	ldr	r3, [r3, #0]
 80e0962:	f023 030f 	bic.w	r3, r3, #15
 80e0966:	4a1c      	ldr	r2, [pc, #112]	; (80e09d8 <SystemInit+0xd4>)
 80e0968:	f043 0307 	orr.w	r3, r3, #7
 80e096c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80e096e:	4b1b      	ldr	r3, [pc, #108]	; (80e09dc <SystemInit+0xd8>)
 80e0970:	2200      	movs	r2, #0
 80e0972:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80e0974:	4b19      	ldr	r3, [pc, #100]	; (80e09dc <SystemInit+0xd8>)
 80e0976:	2200      	movs	r2, #0
 80e0978:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80e097a:	4b18      	ldr	r3, [pc, #96]	; (80e09dc <SystemInit+0xd8>)
 80e097c:	2200      	movs	r2, #0
 80e097e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80e0980:	4b16      	ldr	r3, [pc, #88]	; (80e09dc <SystemInit+0xd8>)
 80e0982:	4a18      	ldr	r2, [pc, #96]	; (80e09e4 <SystemInit+0xe0>)
 80e0984:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80e0986:	4b15      	ldr	r3, [pc, #84]	; (80e09dc <SystemInit+0xd8>)
 80e0988:	4a17      	ldr	r2, [pc, #92]	; (80e09e8 <SystemInit+0xe4>)
 80e098a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80e098c:	4b13      	ldr	r3, [pc, #76]	; (80e09dc <SystemInit+0xd8>)
 80e098e:	4a17      	ldr	r2, [pc, #92]	; (80e09ec <SystemInit+0xe8>)
 80e0990:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80e0992:	4b12      	ldr	r3, [pc, #72]	; (80e09dc <SystemInit+0xd8>)
 80e0994:	2200      	movs	r2, #0
 80e0996:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80e0998:	4b10      	ldr	r3, [pc, #64]	; (80e09dc <SystemInit+0xd8>)
 80e099a:	4a14      	ldr	r2, [pc, #80]	; (80e09ec <SystemInit+0xe8>)
 80e099c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80e099e:	4b0f      	ldr	r3, [pc, #60]	; (80e09dc <SystemInit+0xd8>)
 80e09a0:	2200      	movs	r2, #0
 80e09a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80e09a4:	4b0d      	ldr	r3, [pc, #52]	; (80e09dc <SystemInit+0xd8>)
 80e09a6:	4a11      	ldr	r2, [pc, #68]	; (80e09ec <SystemInit+0xe8>)
 80e09a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80e09aa:	4b0c      	ldr	r3, [pc, #48]	; (80e09dc <SystemInit+0xd8>)
 80e09ac:	2200      	movs	r2, #0
 80e09ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80e09b0:	4b0a      	ldr	r3, [pc, #40]	; (80e09dc <SystemInit+0xd8>)
 80e09b2:	681b      	ldr	r3, [r3, #0]
 80e09b4:	4a09      	ldr	r2, [pc, #36]	; (80e09dc <SystemInit+0xd8>)
 80e09b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e09ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80e09bc:	4b07      	ldr	r3, [pc, #28]	; (80e09dc <SystemInit+0xd8>)
 80e09be:	2200      	movs	r2, #0
 80e09c0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80e09c2:	4b0b      	ldr	r3, [pc, #44]	; (80e09f0 <SystemInit+0xec>)
 80e09c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80e09c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80e09ca:	bf00      	nop
 80e09cc:	46bd      	mov	sp, r7
 80e09ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e09d2:	4770      	bx	lr
 80e09d4:	e000ed00 	.word	0xe000ed00
 80e09d8:	52002000 	.word	0x52002000
 80e09dc:	58024400 	.word	0x58024400
 80e09e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80e09e4:	02020200 	.word	0x02020200
 80e09e8:	01ff0000 	.word	0x01ff0000
 80e09ec:	01010280 	.word	0x01010280
 80e09f0:	52004000 	.word	0x52004000

080e09f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80e09f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80e0a2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80e09f8:	f7ff ff84 	bl	80e0904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80e09fc:	480c      	ldr	r0, [pc, #48]	; (80e0a30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80e09fe:	490d      	ldr	r1, [pc, #52]	; (80e0a34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80e0a00:	4a0d      	ldr	r2, [pc, #52]	; (80e0a38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80e0a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80e0a04:	e002      	b.n	80e0a0c <LoopCopyDataInit>

080e0a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80e0a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80e0a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80e0a0a:	3304      	adds	r3, #4

080e0a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80e0a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80e0a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80e0a10:	d3f9      	bcc.n	80e0a06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80e0a12:	4a0a      	ldr	r2, [pc, #40]	; (80e0a3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80e0a14:	4c0a      	ldr	r4, [pc, #40]	; (80e0a40 <LoopFillZerobss+0x22>)
  movs r3, #0
 80e0a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 80e0a18:	e001      	b.n	80e0a1e <LoopFillZerobss>

080e0a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80e0a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80e0a1c:	3204      	adds	r2, #4

080e0a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80e0a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80e0a20:	d3fb      	bcc.n	80e0a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80e0a22:	f003 fad7 	bl	80e3fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80e0a26:	f7ff fcea 	bl	80e03fe <main>
  bx  lr
 80e0a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80e0a2c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80e0a30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80e0a34:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80e0a38:	080e40d4 	.word	0x080e40d4
  ldr r2, =_sbss
 80e0a3c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80e0a40:	240000fc 	.word	0x240000fc

080e0a44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80e0a44:	e7fe      	b.n	80e0a44 <ADC3_IRQHandler>
	...

080e0a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80e0a48:	b580      	push	{r7, lr}
 80e0a4a:	b082      	sub	sp, #8
 80e0a4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80e0a4e:	2003      	movs	r0, #3
 80e0a50:	f000 f95c 	bl	80e0d0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80e0a54:	f002 f8e6 	bl	80e2c24 <HAL_RCC_GetSysClockFreq>
 80e0a58:	4602      	mov	r2, r0
 80e0a5a:	4b15      	ldr	r3, [pc, #84]	; (80e0ab0 <HAL_Init+0x68>)
 80e0a5c:	699b      	ldr	r3, [r3, #24]
 80e0a5e:	0a1b      	lsrs	r3, r3, #8
 80e0a60:	f003 030f 	and.w	r3, r3, #15
 80e0a64:	4913      	ldr	r1, [pc, #76]	; (80e0ab4 <HAL_Init+0x6c>)
 80e0a66:	5ccb      	ldrb	r3, [r1, r3]
 80e0a68:	f003 031f 	and.w	r3, r3, #31
 80e0a6c:	fa22 f303 	lsr.w	r3, r2, r3
 80e0a70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80e0a72:	4b0f      	ldr	r3, [pc, #60]	; (80e0ab0 <HAL_Init+0x68>)
 80e0a74:	699b      	ldr	r3, [r3, #24]
 80e0a76:	f003 030f 	and.w	r3, r3, #15
 80e0a7a:	4a0e      	ldr	r2, [pc, #56]	; (80e0ab4 <HAL_Init+0x6c>)
 80e0a7c:	5cd3      	ldrb	r3, [r2, r3]
 80e0a7e:	f003 031f 	and.w	r3, r3, #31
 80e0a82:	687a      	ldr	r2, [r7, #4]
 80e0a84:	fa22 f303 	lsr.w	r3, r2, r3
 80e0a88:	4a0b      	ldr	r2, [pc, #44]	; (80e0ab8 <HAL_Init+0x70>)
 80e0a8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80e0a8c:	4a0b      	ldr	r2, [pc, #44]	; (80e0abc <HAL_Init+0x74>)
 80e0a8e:	687b      	ldr	r3, [r7, #4]
 80e0a90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80e0a92:	200f      	movs	r0, #15
 80e0a94:	f000 f814 	bl	80e0ac0 <HAL_InitTick>
 80e0a98:	4603      	mov	r3, r0
 80e0a9a:	2b00      	cmp	r3, #0
 80e0a9c:	d001      	beq.n	80e0aa2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80e0a9e:	2301      	movs	r3, #1
 80e0aa0:	e002      	b.n	80e0aa8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80e0aa2:	f7ff fe3f 	bl	80e0724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80e0aa6:	2300      	movs	r3, #0
}
 80e0aa8:	4618      	mov	r0, r3
 80e0aaa:	3708      	adds	r7, #8
 80e0aac:	46bd      	mov	sp, r7
 80e0aae:	bd80      	pop	{r7, pc}
 80e0ab0:	58024400 	.word	0x58024400
 80e0ab4:	080e40ac 	.word	0x080e40ac
 80e0ab8:	24000004 	.word	0x24000004
 80e0abc:	24000000 	.word	0x24000000

080e0ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80e0ac0:	b580      	push	{r7, lr}
 80e0ac2:	b082      	sub	sp, #8
 80e0ac4:	af00      	add	r7, sp, #0
 80e0ac6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80e0ac8:	4b15      	ldr	r3, [pc, #84]	; (80e0b20 <HAL_InitTick+0x60>)
 80e0aca:	781b      	ldrb	r3, [r3, #0]
 80e0acc:	2b00      	cmp	r3, #0
 80e0ace:	d101      	bne.n	80e0ad4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80e0ad0:	2301      	movs	r3, #1
 80e0ad2:	e021      	b.n	80e0b18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80e0ad4:	4b13      	ldr	r3, [pc, #76]	; (80e0b24 <HAL_InitTick+0x64>)
 80e0ad6:	681a      	ldr	r2, [r3, #0]
 80e0ad8:	4b11      	ldr	r3, [pc, #68]	; (80e0b20 <HAL_InitTick+0x60>)
 80e0ada:	781b      	ldrb	r3, [r3, #0]
 80e0adc:	4619      	mov	r1, r3
 80e0ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80e0ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 80e0ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 80e0aea:	4618      	mov	r0, r3
 80e0aec:	f000 f941 	bl	80e0d72 <HAL_SYSTICK_Config>
 80e0af0:	4603      	mov	r3, r0
 80e0af2:	2b00      	cmp	r3, #0
 80e0af4:	d001      	beq.n	80e0afa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80e0af6:	2301      	movs	r3, #1
 80e0af8:	e00e      	b.n	80e0b18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80e0afa:	687b      	ldr	r3, [r7, #4]
 80e0afc:	2b0f      	cmp	r3, #15
 80e0afe:	d80a      	bhi.n	80e0b16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80e0b00:	2200      	movs	r2, #0
 80e0b02:	6879      	ldr	r1, [r7, #4]
 80e0b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80e0b08:	f000 f90b 	bl	80e0d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80e0b0c:	4a06      	ldr	r2, [pc, #24]	; (80e0b28 <HAL_InitTick+0x68>)
 80e0b0e:	687b      	ldr	r3, [r7, #4]
 80e0b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80e0b12:	2300      	movs	r3, #0
 80e0b14:	e000      	b.n	80e0b18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80e0b16:	2301      	movs	r3, #1
}
 80e0b18:	4618      	mov	r0, r3
 80e0b1a:	3708      	adds	r7, #8
 80e0b1c:	46bd      	mov	sp, r7
 80e0b1e:	bd80      	pop	{r7, pc}
 80e0b20:	2400000c 	.word	0x2400000c
 80e0b24:	24000000 	.word	0x24000000
 80e0b28:	24000008 	.word	0x24000008

080e0b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80e0b2c:	b480      	push	{r7}
 80e0b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80e0b30:	4b06      	ldr	r3, [pc, #24]	; (80e0b4c <HAL_IncTick+0x20>)
 80e0b32:	781b      	ldrb	r3, [r3, #0]
 80e0b34:	461a      	mov	r2, r3
 80e0b36:	4b06      	ldr	r3, [pc, #24]	; (80e0b50 <HAL_IncTick+0x24>)
 80e0b38:	681b      	ldr	r3, [r3, #0]
 80e0b3a:	4413      	add	r3, r2
 80e0b3c:	4a04      	ldr	r2, [pc, #16]	; (80e0b50 <HAL_IncTick+0x24>)
 80e0b3e:	6013      	str	r3, [r2, #0]
}
 80e0b40:	bf00      	nop
 80e0b42:	46bd      	mov	sp, r7
 80e0b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0b48:	4770      	bx	lr
 80e0b4a:	bf00      	nop
 80e0b4c:	2400000c 	.word	0x2400000c
 80e0b50:	240000f8 	.word	0x240000f8

080e0b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80e0b54:	b480      	push	{r7}
 80e0b56:	af00      	add	r7, sp, #0
  return uwTick;
 80e0b58:	4b03      	ldr	r3, [pc, #12]	; (80e0b68 <HAL_GetTick+0x14>)
 80e0b5a:	681b      	ldr	r3, [r3, #0]
}
 80e0b5c:	4618      	mov	r0, r3
 80e0b5e:	46bd      	mov	sp, r7
 80e0b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0b64:	4770      	bx	lr
 80e0b66:	bf00      	nop
 80e0b68:	240000f8 	.word	0x240000f8

080e0b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80e0b6c:	b480      	push	{r7}
 80e0b6e:	b085      	sub	sp, #20
 80e0b70:	af00      	add	r7, sp, #0
 80e0b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80e0b74:	687b      	ldr	r3, [r7, #4]
 80e0b76:	f003 0307 	and.w	r3, r3, #7
 80e0b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80e0b7c:	4b0b      	ldr	r3, [pc, #44]	; (80e0bac <__NVIC_SetPriorityGrouping+0x40>)
 80e0b7e:	68db      	ldr	r3, [r3, #12]
 80e0b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80e0b82:	68ba      	ldr	r2, [r7, #8]
 80e0b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80e0b88:	4013      	ands	r3, r2
 80e0b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80e0b8c:	68fb      	ldr	r3, [r7, #12]
 80e0b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80e0b90:	68bb      	ldr	r3, [r7, #8]
 80e0b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80e0b94:	4b06      	ldr	r3, [pc, #24]	; (80e0bb0 <__NVIC_SetPriorityGrouping+0x44>)
 80e0b96:	4313      	orrs	r3, r2
 80e0b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80e0b9a:	4a04      	ldr	r2, [pc, #16]	; (80e0bac <__NVIC_SetPriorityGrouping+0x40>)
 80e0b9c:	68bb      	ldr	r3, [r7, #8]
 80e0b9e:	60d3      	str	r3, [r2, #12]
}
 80e0ba0:	bf00      	nop
 80e0ba2:	3714      	adds	r7, #20
 80e0ba4:	46bd      	mov	sp, r7
 80e0ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0baa:	4770      	bx	lr
 80e0bac:	e000ed00 	.word	0xe000ed00
 80e0bb0:	05fa0000 	.word	0x05fa0000

080e0bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80e0bb4:	b480      	push	{r7}
 80e0bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80e0bb8:	4b04      	ldr	r3, [pc, #16]	; (80e0bcc <__NVIC_GetPriorityGrouping+0x18>)
 80e0bba:	68db      	ldr	r3, [r3, #12]
 80e0bbc:	0a1b      	lsrs	r3, r3, #8
 80e0bbe:	f003 0307 	and.w	r3, r3, #7
}
 80e0bc2:	4618      	mov	r0, r3
 80e0bc4:	46bd      	mov	sp, r7
 80e0bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0bca:	4770      	bx	lr
 80e0bcc:	e000ed00 	.word	0xe000ed00

080e0bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80e0bd0:	b480      	push	{r7}
 80e0bd2:	b083      	sub	sp, #12
 80e0bd4:	af00      	add	r7, sp, #0
 80e0bd6:	4603      	mov	r3, r0
 80e0bd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80e0bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e0bde:	2b00      	cmp	r3, #0
 80e0be0:	db0b      	blt.n	80e0bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80e0be2:	88fb      	ldrh	r3, [r7, #6]
 80e0be4:	f003 021f 	and.w	r2, r3, #31
 80e0be8:	4907      	ldr	r1, [pc, #28]	; (80e0c08 <__NVIC_EnableIRQ+0x38>)
 80e0bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e0bee:	095b      	lsrs	r3, r3, #5
 80e0bf0:	2001      	movs	r0, #1
 80e0bf2:	fa00 f202 	lsl.w	r2, r0, r2
 80e0bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80e0bfa:	bf00      	nop
 80e0bfc:	370c      	adds	r7, #12
 80e0bfe:	46bd      	mov	sp, r7
 80e0c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0c04:	4770      	bx	lr
 80e0c06:	bf00      	nop
 80e0c08:	e000e100 	.word	0xe000e100

080e0c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80e0c0c:	b480      	push	{r7}
 80e0c0e:	b083      	sub	sp, #12
 80e0c10:	af00      	add	r7, sp, #0
 80e0c12:	4603      	mov	r3, r0
 80e0c14:	6039      	str	r1, [r7, #0]
 80e0c16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80e0c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e0c1c:	2b00      	cmp	r3, #0
 80e0c1e:	db0a      	blt.n	80e0c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80e0c20:	683b      	ldr	r3, [r7, #0]
 80e0c22:	b2da      	uxtb	r2, r3
 80e0c24:	490c      	ldr	r1, [pc, #48]	; (80e0c58 <__NVIC_SetPriority+0x4c>)
 80e0c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e0c2a:	0112      	lsls	r2, r2, #4
 80e0c2c:	b2d2      	uxtb	r2, r2
 80e0c2e:	440b      	add	r3, r1
 80e0c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80e0c34:	e00a      	b.n	80e0c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80e0c36:	683b      	ldr	r3, [r7, #0]
 80e0c38:	b2da      	uxtb	r2, r3
 80e0c3a:	4908      	ldr	r1, [pc, #32]	; (80e0c5c <__NVIC_SetPriority+0x50>)
 80e0c3c:	88fb      	ldrh	r3, [r7, #6]
 80e0c3e:	f003 030f 	and.w	r3, r3, #15
 80e0c42:	3b04      	subs	r3, #4
 80e0c44:	0112      	lsls	r2, r2, #4
 80e0c46:	b2d2      	uxtb	r2, r2
 80e0c48:	440b      	add	r3, r1
 80e0c4a:	761a      	strb	r2, [r3, #24]
}
 80e0c4c:	bf00      	nop
 80e0c4e:	370c      	adds	r7, #12
 80e0c50:	46bd      	mov	sp, r7
 80e0c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0c56:	4770      	bx	lr
 80e0c58:	e000e100 	.word	0xe000e100
 80e0c5c:	e000ed00 	.word	0xe000ed00

080e0c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80e0c60:	b480      	push	{r7}
 80e0c62:	b089      	sub	sp, #36	; 0x24
 80e0c64:	af00      	add	r7, sp, #0
 80e0c66:	60f8      	str	r0, [r7, #12]
 80e0c68:	60b9      	str	r1, [r7, #8]
 80e0c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80e0c6c:	68fb      	ldr	r3, [r7, #12]
 80e0c6e:	f003 0307 	and.w	r3, r3, #7
 80e0c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80e0c74:	69fb      	ldr	r3, [r7, #28]
 80e0c76:	f1c3 0307 	rsb	r3, r3, #7
 80e0c7a:	2b04      	cmp	r3, #4
 80e0c7c:	bf28      	it	cs
 80e0c7e:	2304      	movcs	r3, #4
 80e0c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80e0c82:	69fb      	ldr	r3, [r7, #28]
 80e0c84:	3304      	adds	r3, #4
 80e0c86:	2b06      	cmp	r3, #6
 80e0c88:	d902      	bls.n	80e0c90 <NVIC_EncodePriority+0x30>
 80e0c8a:	69fb      	ldr	r3, [r7, #28]
 80e0c8c:	3b03      	subs	r3, #3
 80e0c8e:	e000      	b.n	80e0c92 <NVIC_EncodePriority+0x32>
 80e0c90:	2300      	movs	r3, #0
 80e0c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80e0c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80e0c98:	69bb      	ldr	r3, [r7, #24]
 80e0c9a:	fa02 f303 	lsl.w	r3, r2, r3
 80e0c9e:	43da      	mvns	r2, r3
 80e0ca0:	68bb      	ldr	r3, [r7, #8]
 80e0ca2:	401a      	ands	r2, r3
 80e0ca4:	697b      	ldr	r3, [r7, #20]
 80e0ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80e0ca8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80e0cac:	697b      	ldr	r3, [r7, #20]
 80e0cae:	fa01 f303 	lsl.w	r3, r1, r3
 80e0cb2:	43d9      	mvns	r1, r3
 80e0cb4:	687b      	ldr	r3, [r7, #4]
 80e0cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80e0cb8:	4313      	orrs	r3, r2
         );
}
 80e0cba:	4618      	mov	r0, r3
 80e0cbc:	3724      	adds	r7, #36	; 0x24
 80e0cbe:	46bd      	mov	sp, r7
 80e0cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0cc4:	4770      	bx	lr
	...

080e0cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80e0cc8:	b580      	push	{r7, lr}
 80e0cca:	b082      	sub	sp, #8
 80e0ccc:	af00      	add	r7, sp, #0
 80e0cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80e0cd0:	687b      	ldr	r3, [r7, #4]
 80e0cd2:	3b01      	subs	r3, #1
 80e0cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80e0cd8:	d301      	bcc.n	80e0cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80e0cda:	2301      	movs	r3, #1
 80e0cdc:	e00f      	b.n	80e0cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80e0cde:	4a0a      	ldr	r2, [pc, #40]	; (80e0d08 <SysTick_Config+0x40>)
 80e0ce0:	687b      	ldr	r3, [r7, #4]
 80e0ce2:	3b01      	subs	r3, #1
 80e0ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80e0ce6:	210f      	movs	r1, #15
 80e0ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80e0cec:	f7ff ff8e 	bl	80e0c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80e0cf0:	4b05      	ldr	r3, [pc, #20]	; (80e0d08 <SysTick_Config+0x40>)
 80e0cf2:	2200      	movs	r2, #0
 80e0cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80e0cf6:	4b04      	ldr	r3, [pc, #16]	; (80e0d08 <SysTick_Config+0x40>)
 80e0cf8:	2207      	movs	r2, #7
 80e0cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80e0cfc:	2300      	movs	r3, #0
}
 80e0cfe:	4618      	mov	r0, r3
 80e0d00:	3708      	adds	r7, #8
 80e0d02:	46bd      	mov	sp, r7
 80e0d04:	bd80      	pop	{r7, pc}
 80e0d06:	bf00      	nop
 80e0d08:	e000e010 	.word	0xe000e010

080e0d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80e0d0c:	b580      	push	{r7, lr}
 80e0d0e:	b082      	sub	sp, #8
 80e0d10:	af00      	add	r7, sp, #0
 80e0d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80e0d14:	6878      	ldr	r0, [r7, #4]
 80e0d16:	f7ff ff29 	bl	80e0b6c <__NVIC_SetPriorityGrouping>
}
 80e0d1a:	bf00      	nop
 80e0d1c:	3708      	adds	r7, #8
 80e0d1e:	46bd      	mov	sp, r7
 80e0d20:	bd80      	pop	{r7, pc}

080e0d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80e0d22:	b580      	push	{r7, lr}
 80e0d24:	b086      	sub	sp, #24
 80e0d26:	af00      	add	r7, sp, #0
 80e0d28:	4603      	mov	r3, r0
 80e0d2a:	60b9      	str	r1, [r7, #8]
 80e0d2c:	607a      	str	r2, [r7, #4]
 80e0d2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80e0d30:	f7ff ff40 	bl	80e0bb4 <__NVIC_GetPriorityGrouping>
 80e0d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80e0d36:	687a      	ldr	r2, [r7, #4]
 80e0d38:	68b9      	ldr	r1, [r7, #8]
 80e0d3a:	6978      	ldr	r0, [r7, #20]
 80e0d3c:	f7ff ff90 	bl	80e0c60 <NVIC_EncodePriority>
 80e0d40:	4602      	mov	r2, r0
 80e0d42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80e0d46:	4611      	mov	r1, r2
 80e0d48:	4618      	mov	r0, r3
 80e0d4a:	f7ff ff5f 	bl	80e0c0c <__NVIC_SetPriority>
}
 80e0d4e:	bf00      	nop
 80e0d50:	3718      	adds	r7, #24
 80e0d52:	46bd      	mov	sp, r7
 80e0d54:	bd80      	pop	{r7, pc}

080e0d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80e0d56:	b580      	push	{r7, lr}
 80e0d58:	b082      	sub	sp, #8
 80e0d5a:	af00      	add	r7, sp, #0
 80e0d5c:	4603      	mov	r3, r0
 80e0d5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80e0d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e0d64:	4618      	mov	r0, r3
 80e0d66:	f7ff ff33 	bl	80e0bd0 <__NVIC_EnableIRQ>
}
 80e0d6a:	bf00      	nop
 80e0d6c:	3708      	adds	r7, #8
 80e0d6e:	46bd      	mov	sp, r7
 80e0d70:	bd80      	pop	{r7, pc}

080e0d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80e0d72:	b580      	push	{r7, lr}
 80e0d74:	b082      	sub	sp, #8
 80e0d76:	af00      	add	r7, sp, #0
 80e0d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80e0d7a:	6878      	ldr	r0, [r7, #4]
 80e0d7c:	f7ff ffa4 	bl	80e0cc8 <SysTick_Config>
 80e0d80:	4603      	mov	r3, r0
}
 80e0d82:	4618      	mov	r0, r3
 80e0d84:	3708      	adds	r7, #8
 80e0d86:	46bd      	mov	sp, r7
 80e0d88:	bd80      	pop	{r7, pc}
	...

080e0d8c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80e0d8c:	b580      	push	{r7, lr}
 80e0d8e:	b098      	sub	sp, #96	; 0x60
 80e0d90:	af00      	add	r7, sp, #0
 80e0d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80e0d94:	4a84      	ldr	r2, [pc, #528]	; (80e0fa8 <HAL_FDCAN_Init+0x21c>)
 80e0d96:	f107 030c 	add.w	r3, r7, #12
 80e0d9a:	4611      	mov	r1, r2
 80e0d9c:	224c      	movs	r2, #76	; 0x4c
 80e0d9e:	4618      	mov	r0, r3
 80e0da0:	f003 f93c 	bl	80e401c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80e0da4:	687b      	ldr	r3, [r7, #4]
 80e0da6:	2b00      	cmp	r3, #0
 80e0da8:	d101      	bne.n	80e0dae <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80e0daa:	2301      	movs	r3, #1
 80e0dac:	e1c6      	b.n	80e113c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80e0dae:	687b      	ldr	r3, [r7, #4]
 80e0db0:	681b      	ldr	r3, [r3, #0]
 80e0db2:	4a7e      	ldr	r2, [pc, #504]	; (80e0fac <HAL_FDCAN_Init+0x220>)
 80e0db4:	4293      	cmp	r3, r2
 80e0db6:	d106      	bne.n	80e0dc6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80e0db8:	687b      	ldr	r3, [r7, #4]
 80e0dba:	681b      	ldr	r3, [r3, #0]
 80e0dbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80e0dc0:	461a      	mov	r2, r3
 80e0dc2:	687b      	ldr	r3, [r7, #4]
 80e0dc4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80e0dc6:	687b      	ldr	r3, [r7, #4]
 80e0dc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e0dcc:	b2db      	uxtb	r3, r3
 80e0dce:	2b00      	cmp	r3, #0
 80e0dd0:	d106      	bne.n	80e0de0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80e0dd2:	687b      	ldr	r3, [r7, #4]
 80e0dd4:	2200      	movs	r2, #0
 80e0dd6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80e0dda:	6878      	ldr	r0, [r7, #4]
 80e0ddc:	f7ff fcbc 	bl	80e0758 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80e0de0:	687b      	ldr	r3, [r7, #4]
 80e0de2:	681b      	ldr	r3, [r3, #0]
 80e0de4:	699a      	ldr	r2, [r3, #24]
 80e0de6:	687b      	ldr	r3, [r7, #4]
 80e0de8:	681b      	ldr	r3, [r3, #0]
 80e0dea:	f022 0210 	bic.w	r2, r2, #16
 80e0dee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80e0df0:	f7ff feb0 	bl	80e0b54 <HAL_GetTick>
 80e0df4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80e0df6:	e014      	b.n	80e0e22 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80e0df8:	f7ff feac 	bl	80e0b54 <HAL_GetTick>
 80e0dfc:	4602      	mov	r2, r0
 80e0dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80e0e00:	1ad3      	subs	r3, r2, r3
 80e0e02:	2b0a      	cmp	r3, #10
 80e0e04:	d90d      	bls.n	80e0e22 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80e0e06:	687b      	ldr	r3, [r7, #4]
 80e0e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e0e0c:	f043 0201 	orr.w	r2, r3, #1
 80e0e10:	687b      	ldr	r3, [r7, #4]
 80e0e12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e0e16:	687b      	ldr	r3, [r7, #4]
 80e0e18:	2203      	movs	r2, #3
 80e0e1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80e0e1e:	2301      	movs	r3, #1
 80e0e20:	e18c      	b.n	80e113c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80e0e22:	687b      	ldr	r3, [r7, #4]
 80e0e24:	681b      	ldr	r3, [r3, #0]
 80e0e26:	699b      	ldr	r3, [r3, #24]
 80e0e28:	f003 0308 	and.w	r3, r3, #8
 80e0e2c:	2b08      	cmp	r3, #8
 80e0e2e:	d0e3      	beq.n	80e0df8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80e0e30:	687b      	ldr	r3, [r7, #4]
 80e0e32:	681b      	ldr	r3, [r3, #0]
 80e0e34:	699a      	ldr	r2, [r3, #24]
 80e0e36:	687b      	ldr	r3, [r7, #4]
 80e0e38:	681b      	ldr	r3, [r3, #0]
 80e0e3a:	f042 0201 	orr.w	r2, r2, #1
 80e0e3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80e0e40:	f7ff fe88 	bl	80e0b54 <HAL_GetTick>
 80e0e44:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80e0e46:	e014      	b.n	80e0e72 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80e0e48:	f7ff fe84 	bl	80e0b54 <HAL_GetTick>
 80e0e4c:	4602      	mov	r2, r0
 80e0e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80e0e50:	1ad3      	subs	r3, r2, r3
 80e0e52:	2b0a      	cmp	r3, #10
 80e0e54:	d90d      	bls.n	80e0e72 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80e0e56:	687b      	ldr	r3, [r7, #4]
 80e0e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e0e5c:	f043 0201 	orr.w	r2, r3, #1
 80e0e60:	687b      	ldr	r3, [r7, #4]
 80e0e62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e0e66:	687b      	ldr	r3, [r7, #4]
 80e0e68:	2203      	movs	r2, #3
 80e0e6a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80e0e6e:	2301      	movs	r3, #1
 80e0e70:	e164      	b.n	80e113c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80e0e72:	687b      	ldr	r3, [r7, #4]
 80e0e74:	681b      	ldr	r3, [r3, #0]
 80e0e76:	699b      	ldr	r3, [r3, #24]
 80e0e78:	f003 0301 	and.w	r3, r3, #1
 80e0e7c:	2b00      	cmp	r3, #0
 80e0e7e:	d0e3      	beq.n	80e0e48 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80e0e80:	687b      	ldr	r3, [r7, #4]
 80e0e82:	681b      	ldr	r3, [r3, #0]
 80e0e84:	699a      	ldr	r2, [r3, #24]
 80e0e86:	687b      	ldr	r3, [r7, #4]
 80e0e88:	681b      	ldr	r3, [r3, #0]
 80e0e8a:	f042 0202 	orr.w	r2, r2, #2
 80e0e8e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80e0e90:	687b      	ldr	r3, [r7, #4]
 80e0e92:	7c1b      	ldrb	r3, [r3, #16]
 80e0e94:	2b01      	cmp	r3, #1
 80e0e96:	d108      	bne.n	80e0eaa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80e0e98:	687b      	ldr	r3, [r7, #4]
 80e0e9a:	681b      	ldr	r3, [r3, #0]
 80e0e9c:	699a      	ldr	r2, [r3, #24]
 80e0e9e:	687b      	ldr	r3, [r7, #4]
 80e0ea0:	681b      	ldr	r3, [r3, #0]
 80e0ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80e0ea6:	619a      	str	r2, [r3, #24]
 80e0ea8:	e007      	b.n	80e0eba <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80e0eaa:	687b      	ldr	r3, [r7, #4]
 80e0eac:	681b      	ldr	r3, [r3, #0]
 80e0eae:	699a      	ldr	r2, [r3, #24]
 80e0eb0:	687b      	ldr	r3, [r7, #4]
 80e0eb2:	681b      	ldr	r3, [r3, #0]
 80e0eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80e0eb8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80e0eba:	687b      	ldr	r3, [r7, #4]
 80e0ebc:	7c5b      	ldrb	r3, [r3, #17]
 80e0ebe:	2b01      	cmp	r3, #1
 80e0ec0:	d108      	bne.n	80e0ed4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80e0ec2:	687b      	ldr	r3, [r7, #4]
 80e0ec4:	681b      	ldr	r3, [r3, #0]
 80e0ec6:	699a      	ldr	r2, [r3, #24]
 80e0ec8:	687b      	ldr	r3, [r7, #4]
 80e0eca:	681b      	ldr	r3, [r3, #0]
 80e0ecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80e0ed0:	619a      	str	r2, [r3, #24]
 80e0ed2:	e007      	b.n	80e0ee4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80e0ed4:	687b      	ldr	r3, [r7, #4]
 80e0ed6:	681b      	ldr	r3, [r3, #0]
 80e0ed8:	699a      	ldr	r2, [r3, #24]
 80e0eda:	687b      	ldr	r3, [r7, #4]
 80e0edc:	681b      	ldr	r3, [r3, #0]
 80e0ede:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80e0ee2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80e0ee4:	687b      	ldr	r3, [r7, #4]
 80e0ee6:	7c9b      	ldrb	r3, [r3, #18]
 80e0ee8:	2b01      	cmp	r3, #1
 80e0eea:	d108      	bne.n	80e0efe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80e0eec:	687b      	ldr	r3, [r7, #4]
 80e0eee:	681b      	ldr	r3, [r3, #0]
 80e0ef0:	699a      	ldr	r2, [r3, #24]
 80e0ef2:	687b      	ldr	r3, [r7, #4]
 80e0ef4:	681b      	ldr	r3, [r3, #0]
 80e0ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80e0efa:	619a      	str	r2, [r3, #24]
 80e0efc:	e007      	b.n	80e0f0e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80e0efe:	687b      	ldr	r3, [r7, #4]
 80e0f00:	681b      	ldr	r3, [r3, #0]
 80e0f02:	699a      	ldr	r2, [r3, #24]
 80e0f04:	687b      	ldr	r3, [r7, #4]
 80e0f06:	681b      	ldr	r3, [r3, #0]
 80e0f08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80e0f0c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80e0f0e:	687b      	ldr	r3, [r7, #4]
 80e0f10:	681b      	ldr	r3, [r3, #0]
 80e0f12:	699b      	ldr	r3, [r3, #24]
 80e0f14:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80e0f18:	687b      	ldr	r3, [r7, #4]
 80e0f1a:	689a      	ldr	r2, [r3, #8]
 80e0f1c:	687b      	ldr	r3, [r7, #4]
 80e0f1e:	681b      	ldr	r3, [r3, #0]
 80e0f20:	430a      	orrs	r2, r1
 80e0f22:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80e0f24:	687b      	ldr	r3, [r7, #4]
 80e0f26:	681b      	ldr	r3, [r3, #0]
 80e0f28:	699a      	ldr	r2, [r3, #24]
 80e0f2a:	687b      	ldr	r3, [r7, #4]
 80e0f2c:	681b      	ldr	r3, [r3, #0]
 80e0f2e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80e0f32:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80e0f34:	687b      	ldr	r3, [r7, #4]
 80e0f36:	681b      	ldr	r3, [r3, #0]
 80e0f38:	691a      	ldr	r2, [r3, #16]
 80e0f3a:	687b      	ldr	r3, [r7, #4]
 80e0f3c:	681b      	ldr	r3, [r3, #0]
 80e0f3e:	f022 0210 	bic.w	r2, r2, #16
 80e0f42:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80e0f44:	687b      	ldr	r3, [r7, #4]
 80e0f46:	68db      	ldr	r3, [r3, #12]
 80e0f48:	2b01      	cmp	r3, #1
 80e0f4a:	d108      	bne.n	80e0f5e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80e0f4c:	687b      	ldr	r3, [r7, #4]
 80e0f4e:	681b      	ldr	r3, [r3, #0]
 80e0f50:	699a      	ldr	r2, [r3, #24]
 80e0f52:	687b      	ldr	r3, [r7, #4]
 80e0f54:	681b      	ldr	r3, [r3, #0]
 80e0f56:	f042 0204 	orr.w	r2, r2, #4
 80e0f5a:	619a      	str	r2, [r3, #24]
 80e0f5c:	e030      	b.n	80e0fc0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80e0f5e:	687b      	ldr	r3, [r7, #4]
 80e0f60:	68db      	ldr	r3, [r3, #12]
 80e0f62:	2b00      	cmp	r3, #0
 80e0f64:	d02c      	beq.n	80e0fc0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80e0f66:	687b      	ldr	r3, [r7, #4]
 80e0f68:	68db      	ldr	r3, [r3, #12]
 80e0f6a:	2b02      	cmp	r3, #2
 80e0f6c:	d020      	beq.n	80e0fb0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80e0f6e:	687b      	ldr	r3, [r7, #4]
 80e0f70:	681b      	ldr	r3, [r3, #0]
 80e0f72:	699a      	ldr	r2, [r3, #24]
 80e0f74:	687b      	ldr	r3, [r7, #4]
 80e0f76:	681b      	ldr	r3, [r3, #0]
 80e0f78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80e0f7c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80e0f7e:	687b      	ldr	r3, [r7, #4]
 80e0f80:	681b      	ldr	r3, [r3, #0]
 80e0f82:	691a      	ldr	r2, [r3, #16]
 80e0f84:	687b      	ldr	r3, [r7, #4]
 80e0f86:	681b      	ldr	r3, [r3, #0]
 80e0f88:	f042 0210 	orr.w	r2, r2, #16
 80e0f8c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80e0f8e:	687b      	ldr	r3, [r7, #4]
 80e0f90:	68db      	ldr	r3, [r3, #12]
 80e0f92:	2b03      	cmp	r3, #3
 80e0f94:	d114      	bne.n	80e0fc0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80e0f96:	687b      	ldr	r3, [r7, #4]
 80e0f98:	681b      	ldr	r3, [r3, #0]
 80e0f9a:	699a      	ldr	r2, [r3, #24]
 80e0f9c:	687b      	ldr	r3, [r7, #4]
 80e0f9e:	681b      	ldr	r3, [r3, #0]
 80e0fa0:	f042 0220 	orr.w	r2, r2, #32
 80e0fa4:	619a      	str	r2, [r3, #24]
 80e0fa6:	e00b      	b.n	80e0fc0 <HAL_FDCAN_Init+0x234>
 80e0fa8:	080e4060 	.word	0x080e4060
 80e0fac:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80e0fb0:	687b      	ldr	r3, [r7, #4]
 80e0fb2:	681b      	ldr	r3, [r3, #0]
 80e0fb4:	699a      	ldr	r2, [r3, #24]
 80e0fb6:	687b      	ldr	r3, [r7, #4]
 80e0fb8:	681b      	ldr	r3, [r3, #0]
 80e0fba:	f042 0220 	orr.w	r2, r2, #32
 80e0fbe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e0fc0:	687b      	ldr	r3, [r7, #4]
 80e0fc2:	699b      	ldr	r3, [r3, #24]
 80e0fc4:	3b01      	subs	r3, #1
 80e0fc6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80e0fc8:	687b      	ldr	r3, [r7, #4]
 80e0fca:	69db      	ldr	r3, [r3, #28]
 80e0fcc:	3b01      	subs	r3, #1
 80e0fce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e0fd0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80e0fd2:	687b      	ldr	r3, [r7, #4]
 80e0fd4:	6a1b      	ldr	r3, [r3, #32]
 80e0fd6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80e0fd8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80e0fdc:	687b      	ldr	r3, [r7, #4]
 80e0fde:	695b      	ldr	r3, [r3, #20]
 80e0fe0:	3b01      	subs	r3, #1
 80e0fe2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e0fe4:	687b      	ldr	r3, [r7, #4]
 80e0fe6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80e0fe8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e0fea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80e0fec:	687b      	ldr	r3, [r7, #4]
 80e0fee:	689b      	ldr	r3, [r3, #8]
 80e0ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e0ff4:	d115      	bne.n	80e1022 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e0ff6:	687b      	ldr	r3, [r7, #4]
 80e0ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e0ffa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80e0ffc:	687b      	ldr	r3, [r7, #4]
 80e0ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e1000:	3b01      	subs	r3, #1
 80e1002:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e1004:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80e1006:	687b      	ldr	r3, [r7, #4]
 80e1008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e100a:	3b01      	subs	r3, #1
 80e100c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80e100e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80e1012:	687b      	ldr	r3, [r7, #4]
 80e1014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e1016:	3b01      	subs	r3, #1
 80e1018:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e101a:	687b      	ldr	r3, [r7, #4]
 80e101c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80e101e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e1020:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80e1022:	687b      	ldr	r3, [r7, #4]
 80e1024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e1026:	2b00      	cmp	r3, #0
 80e1028:	d00a      	beq.n	80e1040 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80e102a:	687b      	ldr	r3, [r7, #4]
 80e102c:	681b      	ldr	r3, [r3, #0]
 80e102e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80e1032:	687b      	ldr	r3, [r7, #4]
 80e1034:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80e1036:	687b      	ldr	r3, [r7, #4]
 80e1038:	681b      	ldr	r3, [r3, #0]
 80e103a:	430a      	orrs	r2, r1
 80e103c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80e1040:	687b      	ldr	r3, [r7, #4]
 80e1042:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e1044:	687b      	ldr	r3, [r7, #4]
 80e1046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e1048:	4413      	add	r3, r2
 80e104a:	2b00      	cmp	r3, #0
 80e104c:	d011      	beq.n	80e1072 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80e104e:	687b      	ldr	r3, [r7, #4]
 80e1050:	681b      	ldr	r3, [r3, #0]
 80e1052:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80e1056:	f023 0107 	bic.w	r1, r3, #7
 80e105a:	687b      	ldr	r3, [r7, #4]
 80e105c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e105e:	009b      	lsls	r3, r3, #2
 80e1060:	3360      	adds	r3, #96	; 0x60
 80e1062:	443b      	add	r3, r7
 80e1064:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80e1068:	687b      	ldr	r3, [r7, #4]
 80e106a:	681b      	ldr	r3, [r3, #0]
 80e106c:	430a      	orrs	r2, r1
 80e106e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80e1072:	687b      	ldr	r3, [r7, #4]
 80e1074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e1076:	2b00      	cmp	r3, #0
 80e1078:	d011      	beq.n	80e109e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80e107a:	687b      	ldr	r3, [r7, #4]
 80e107c:	681b      	ldr	r3, [r3, #0]
 80e107e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e1082:	f023 0107 	bic.w	r1, r3, #7
 80e1086:	687b      	ldr	r3, [r7, #4]
 80e1088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e108a:	009b      	lsls	r3, r3, #2
 80e108c:	3360      	adds	r3, #96	; 0x60
 80e108e:	443b      	add	r3, r7
 80e1090:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80e1094:	687b      	ldr	r3, [r7, #4]
 80e1096:	681b      	ldr	r3, [r3, #0]
 80e1098:	430a      	orrs	r2, r1
 80e109a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80e109e:	687b      	ldr	r3, [r7, #4]
 80e10a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e10a2:	2b00      	cmp	r3, #0
 80e10a4:	d012      	beq.n	80e10cc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80e10a6:	687b      	ldr	r3, [r7, #4]
 80e10a8:	681b      	ldr	r3, [r3, #0]
 80e10aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e10ae:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80e10b2:	687b      	ldr	r3, [r7, #4]
 80e10b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e10b6:	009b      	lsls	r3, r3, #2
 80e10b8:	3360      	adds	r3, #96	; 0x60
 80e10ba:	443b      	add	r3, r7
 80e10bc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80e10c0:	011a      	lsls	r2, r3, #4
 80e10c2:	687b      	ldr	r3, [r7, #4]
 80e10c4:	681b      	ldr	r3, [r3, #0]
 80e10c6:	430a      	orrs	r2, r1
 80e10c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80e10cc:	687b      	ldr	r3, [r7, #4]
 80e10ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e10d0:	2b00      	cmp	r3, #0
 80e10d2:	d012      	beq.n	80e10fa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80e10d4:	687b      	ldr	r3, [r7, #4]
 80e10d6:	681b      	ldr	r3, [r3, #0]
 80e10d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e10dc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80e10e0:	687b      	ldr	r3, [r7, #4]
 80e10e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e10e4:	009b      	lsls	r3, r3, #2
 80e10e6:	3360      	adds	r3, #96	; 0x60
 80e10e8:	443b      	add	r3, r7
 80e10ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80e10ee:	021a      	lsls	r2, r3, #8
 80e10f0:	687b      	ldr	r3, [r7, #4]
 80e10f2:	681b      	ldr	r3, [r3, #0]
 80e10f4:	430a      	orrs	r2, r1
 80e10f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80e10fa:	687b      	ldr	r3, [r7, #4]
 80e10fc:	681b      	ldr	r3, [r3, #0]
 80e10fe:	4a11      	ldr	r2, [pc, #68]	; (80e1144 <HAL_FDCAN_Init+0x3b8>)
 80e1100:	4293      	cmp	r3, r2
 80e1102:	d107      	bne.n	80e1114 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80e1104:	687b      	ldr	r3, [r7, #4]
 80e1106:	685b      	ldr	r3, [r3, #4]
 80e1108:	689a      	ldr	r2, [r3, #8]
 80e110a:	687b      	ldr	r3, [r7, #4]
 80e110c:	685b      	ldr	r3, [r3, #4]
 80e110e:	f022 0203 	bic.w	r2, r2, #3
 80e1112:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80e1114:	687b      	ldr	r3, [r7, #4]
 80e1116:	2200      	movs	r2, #0
 80e1118:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80e111c:	687b      	ldr	r3, [r7, #4]
 80e111e:	2200      	movs	r2, #0
 80e1120:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80e1124:	687b      	ldr	r3, [r7, #4]
 80e1126:	2201      	movs	r2, #1
 80e1128:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80e112c:	6878      	ldr	r0, [r7, #4]
 80e112e:	f000 fc15 	bl	80e195c <FDCAN_CalcultateRamBlockAddresses>
 80e1132:	4603      	mov	r3, r0
 80e1134:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80e1138:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80e113c:	4618      	mov	r0, r3
 80e113e:	3760      	adds	r7, #96	; 0x60
 80e1140:	46bd      	mov	sp, r7
 80e1142:	bd80      	pop	{r7, pc}
 80e1144:	4000a000 	.word	0x4000a000

080e1148 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80e1148:	b480      	push	{r7}
 80e114a:	b083      	sub	sp, #12
 80e114c:	af00      	add	r7, sp, #0
 80e114e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80e1150:	687b      	ldr	r3, [r7, #4]
 80e1152:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1156:	b2db      	uxtb	r3, r3
 80e1158:	2b01      	cmp	r3, #1
 80e115a:	d111      	bne.n	80e1180 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80e115c:	687b      	ldr	r3, [r7, #4]
 80e115e:	2202      	movs	r2, #2
 80e1160:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80e1164:	687b      	ldr	r3, [r7, #4]
 80e1166:	681b      	ldr	r3, [r3, #0]
 80e1168:	699a      	ldr	r2, [r3, #24]
 80e116a:	687b      	ldr	r3, [r7, #4]
 80e116c:	681b      	ldr	r3, [r3, #0]
 80e116e:	f022 0201 	bic.w	r2, r2, #1
 80e1172:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80e1174:	687b      	ldr	r3, [r7, #4]
 80e1176:	2200      	movs	r2, #0
 80e1178:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80e117c:	2300      	movs	r3, #0
 80e117e:	e008      	b.n	80e1192 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80e1180:	687b      	ldr	r3, [r7, #4]
 80e1182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1186:	f043 0204 	orr.w	r2, r3, #4
 80e118a:	687b      	ldr	r3, [r7, #4]
 80e118c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1190:	2301      	movs	r3, #1
  }
}
 80e1192:	4618      	mov	r0, r3
 80e1194:	370c      	adds	r7, #12
 80e1196:	46bd      	mov	sp, r7
 80e1198:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e119c:	4770      	bx	lr

080e119e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80e119e:	b580      	push	{r7, lr}
 80e11a0:	b086      	sub	sp, #24
 80e11a2:	af00      	add	r7, sp, #0
 80e11a4:	60f8      	str	r0, [r7, #12]
 80e11a6:	60b9      	str	r1, [r7, #8]
 80e11a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80e11aa:	68fb      	ldr	r3, [r7, #12]
 80e11ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e11b0:	b2db      	uxtb	r3, r3
 80e11b2:	2b02      	cmp	r3, #2
 80e11b4:	d141      	bne.n	80e123a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80e11b6:	68fb      	ldr	r3, [r7, #12]
 80e11b8:	681b      	ldr	r3, [r3, #0]
 80e11ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e11be:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80e11c2:	2b00      	cmp	r3, #0
 80e11c4:	d109      	bne.n	80e11da <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e11c6:	68fb      	ldr	r3, [r7, #12]
 80e11c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e11cc:	f043 0220 	orr.w	r2, r3, #32
 80e11d0:	68fb      	ldr	r3, [r7, #12]
 80e11d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80e11d6:	2301      	movs	r3, #1
 80e11d8:	e038      	b.n	80e124c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80e11da:	68fb      	ldr	r3, [r7, #12]
 80e11dc:	681b      	ldr	r3, [r3, #0]
 80e11de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80e11e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e11e6:	2b00      	cmp	r3, #0
 80e11e8:	d009      	beq.n	80e11fe <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80e11ea:	68fb      	ldr	r3, [r7, #12]
 80e11ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e11f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80e11f4:	68fb      	ldr	r3, [r7, #12]
 80e11f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80e11fa:	2301      	movs	r3, #1
 80e11fc:	e026      	b.n	80e124c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80e11fe:	68fb      	ldr	r3, [r7, #12]
 80e1200:	681b      	ldr	r3, [r3, #0]
 80e1202:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80e1206:	0c1b      	lsrs	r3, r3, #16
 80e1208:	f003 031f 	and.w	r3, r3, #31
 80e120c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80e120e:	697b      	ldr	r3, [r7, #20]
 80e1210:	687a      	ldr	r2, [r7, #4]
 80e1212:	68b9      	ldr	r1, [r7, #8]
 80e1214:	68f8      	ldr	r0, [r7, #12]
 80e1216:	f000 fd27 	bl	80e1c68 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80e121a:	68fb      	ldr	r3, [r7, #12]
 80e121c:	681b      	ldr	r3, [r3, #0]
 80e121e:	2101      	movs	r1, #1
 80e1220:	697a      	ldr	r2, [r7, #20]
 80e1222:	fa01 f202 	lsl.w	r2, r1, r2
 80e1226:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80e122a:	2201      	movs	r2, #1
 80e122c:	697b      	ldr	r3, [r7, #20]
 80e122e:	409a      	lsls	r2, r3
 80e1230:	68fb      	ldr	r3, [r7, #12]
 80e1232:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80e1236:	2300      	movs	r3, #0
 80e1238:	e008      	b.n	80e124c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80e123a:	68fb      	ldr	r3, [r7, #12]
 80e123c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1240:	f043 0208 	orr.w	r2, r3, #8
 80e1244:	68fb      	ldr	r3, [r7, #12]
 80e1246:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e124a:	2301      	movs	r3, #1
  }
}
 80e124c:	4618      	mov	r0, r3
 80e124e:	3718      	adds	r7, #24
 80e1250:	46bd      	mov	sp, r7
 80e1252:	bd80      	pop	{r7, pc}

080e1254 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80e1254:	b480      	push	{r7}
 80e1256:	b087      	sub	sp, #28
 80e1258:	af00      	add	r7, sp, #0
 80e125a:	60f8      	str	r0, [r7, #12]
 80e125c:	60b9      	str	r1, [r7, #8]
 80e125e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80e1260:	68fb      	ldr	r3, [r7, #12]
 80e1262:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1266:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80e1268:	7dfb      	ldrb	r3, [r7, #23]
 80e126a:	2b01      	cmp	r3, #1
 80e126c:	d002      	beq.n	80e1274 <HAL_FDCAN_ActivateNotification+0x20>
 80e126e:	7dfb      	ldrb	r3, [r7, #23]
 80e1270:	2b02      	cmp	r3, #2
 80e1272:	d155      	bne.n	80e1320 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80e1274:	68fb      	ldr	r3, [r7, #12]
 80e1276:	681b      	ldr	r3, [r3, #0]
 80e1278:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80e127a:	68bb      	ldr	r3, [r7, #8]
 80e127c:	4013      	ands	r3, r2
 80e127e:	2b00      	cmp	r3, #0
 80e1280:	d108      	bne.n	80e1294 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80e1282:	68fb      	ldr	r3, [r7, #12]
 80e1284:	681b      	ldr	r3, [r3, #0]
 80e1286:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e1288:	68fb      	ldr	r3, [r7, #12]
 80e128a:	681b      	ldr	r3, [r3, #0]
 80e128c:	f042 0201 	orr.w	r2, r2, #1
 80e1290:	65da      	str	r2, [r3, #92]	; 0x5c
 80e1292:	e014      	b.n	80e12be <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80e1294:	68fb      	ldr	r3, [r7, #12]
 80e1296:	681b      	ldr	r3, [r3, #0]
 80e1298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80e129a:	68bb      	ldr	r3, [r7, #8]
 80e129c:	4013      	ands	r3, r2
 80e129e:	68ba      	ldr	r2, [r7, #8]
 80e12a0:	429a      	cmp	r2, r3
 80e12a2:	d108      	bne.n	80e12b6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80e12a4:	68fb      	ldr	r3, [r7, #12]
 80e12a6:	681b      	ldr	r3, [r3, #0]
 80e12a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e12aa:	68fb      	ldr	r3, [r7, #12]
 80e12ac:	681b      	ldr	r3, [r3, #0]
 80e12ae:	f042 0202 	orr.w	r2, r2, #2
 80e12b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80e12b4:	e003      	b.n	80e12be <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80e12b6:	68fb      	ldr	r3, [r7, #12]
 80e12b8:	681b      	ldr	r3, [r3, #0]
 80e12ba:	2203      	movs	r2, #3
 80e12bc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80e12be:	68bb      	ldr	r3, [r7, #8]
 80e12c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80e12c4:	2b00      	cmp	r3, #0
 80e12c6:	d009      	beq.n	80e12dc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80e12c8:	68fb      	ldr	r3, [r7, #12]
 80e12ca:	681b      	ldr	r3, [r3, #0]
 80e12cc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80e12d0:	68fb      	ldr	r3, [r7, #12]
 80e12d2:	681b      	ldr	r3, [r3, #0]
 80e12d4:	687a      	ldr	r2, [r7, #4]
 80e12d6:	430a      	orrs	r2, r1
 80e12d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80e12dc:	68bb      	ldr	r3, [r7, #8]
 80e12de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80e12e2:	2b00      	cmp	r3, #0
 80e12e4:	d009      	beq.n	80e12fa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80e12e6:	68fb      	ldr	r3, [r7, #12]
 80e12e8:	681b      	ldr	r3, [r3, #0]
 80e12ea:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80e12ee:	68fb      	ldr	r3, [r7, #12]
 80e12f0:	681b      	ldr	r3, [r3, #0]
 80e12f2:	687a      	ldr	r2, [r7, #4]
 80e12f4:	430a      	orrs	r2, r1
 80e12f6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80e12fa:	68fb      	ldr	r3, [r7, #12]
 80e12fc:	681b      	ldr	r3, [r3, #0]
 80e12fe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80e1300:	68ba      	ldr	r2, [r7, #8]
 80e1302:	4b0f      	ldr	r3, [pc, #60]	; (80e1340 <HAL_FDCAN_ActivateNotification+0xec>)
 80e1304:	4013      	ands	r3, r2
 80e1306:	68fa      	ldr	r2, [r7, #12]
 80e1308:	6812      	ldr	r2, [r2, #0]
 80e130a:	430b      	orrs	r3, r1
 80e130c:	6553      	str	r3, [r2, #84]	; 0x54
 80e130e:	4b0d      	ldr	r3, [pc, #52]	; (80e1344 <HAL_FDCAN_ActivateNotification+0xf0>)
 80e1310:	695a      	ldr	r2, [r3, #20]
 80e1312:	68bb      	ldr	r3, [r7, #8]
 80e1314:	0f9b      	lsrs	r3, r3, #30
 80e1316:	490b      	ldr	r1, [pc, #44]	; (80e1344 <HAL_FDCAN_ActivateNotification+0xf0>)
 80e1318:	4313      	orrs	r3, r2
 80e131a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80e131c:	2300      	movs	r3, #0
 80e131e:	e008      	b.n	80e1332 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80e1320:	68fb      	ldr	r3, [r7, #12]
 80e1322:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1326:	f043 0202 	orr.w	r2, r3, #2
 80e132a:	68fb      	ldr	r3, [r7, #12]
 80e132c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1330:	2301      	movs	r3, #1
  }
}
 80e1332:	4618      	mov	r0, r3
 80e1334:	371c      	adds	r7, #28
 80e1336:	46bd      	mov	sp, r7
 80e1338:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e133c:	4770      	bx	lr
 80e133e:	bf00      	nop
 80e1340:	3fcfffff 	.word	0x3fcfffff
 80e1344:	4000a800 	.word	0x4000a800

080e1348 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80e1348:	b580      	push	{r7, lr}
 80e134a:	b096      	sub	sp, #88	; 0x58
 80e134c:	af00      	add	r7, sp, #0
 80e134e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80e1350:	4b9a      	ldr	r3, [pc, #616]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e1352:	691b      	ldr	r3, [r3, #16]
 80e1354:	079b      	lsls	r3, r3, #30
 80e1356:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80e1358:	4b98      	ldr	r3, [pc, #608]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e135a:	695b      	ldr	r3, [r3, #20]
 80e135c:	079b      	lsls	r3, r3, #30
 80e135e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80e1360:	4013      	ands	r3, r2
 80e1362:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80e1364:	687b      	ldr	r3, [r7, #4]
 80e1366:	681b      	ldr	r3, [r3, #0]
 80e1368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e136a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80e136e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80e1370:	687b      	ldr	r3, [r7, #4]
 80e1372:	681b      	ldr	r3, [r3, #0]
 80e1374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e1376:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80e1378:	4013      	ands	r3, r2
 80e137a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80e137c:	687b      	ldr	r3, [r7, #4]
 80e137e:	681b      	ldr	r3, [r3, #0]
 80e1380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e1382:	f003 030f 	and.w	r3, r3, #15
 80e1386:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80e1388:	687b      	ldr	r3, [r7, #4]
 80e138a:	681b      	ldr	r3, [r3, #0]
 80e138c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e138e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80e1390:	4013      	ands	r3, r2
 80e1392:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80e1394:	687b      	ldr	r3, [r7, #4]
 80e1396:	681b      	ldr	r3, [r3, #0]
 80e1398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e139a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80e139e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80e13a0:	687b      	ldr	r3, [r7, #4]
 80e13a2:	681b      	ldr	r3, [r3, #0]
 80e13a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e13a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80e13a8:	4013      	ands	r3, r2
 80e13aa:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80e13ac:	687b      	ldr	r3, [r7, #4]
 80e13ae:	681b      	ldr	r3, [r3, #0]
 80e13b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e13b2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80e13b6:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80e13b8:	687b      	ldr	r3, [r7, #4]
 80e13ba:	681b      	ldr	r3, [r3, #0]
 80e13bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e13be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80e13c0:	4013      	ands	r3, r2
 80e13c2:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80e13c4:	687b      	ldr	r3, [r7, #4]
 80e13c6:	681b      	ldr	r3, [r3, #0]
 80e13c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e13ca:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80e13ce:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80e13d0:	687b      	ldr	r3, [r7, #4]
 80e13d2:	681b      	ldr	r3, [r3, #0]
 80e13d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e13d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80e13d8:	4013      	ands	r3, r2
 80e13da:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80e13dc:	687b      	ldr	r3, [r7, #4]
 80e13de:	681b      	ldr	r3, [r3, #0]
 80e13e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e13e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80e13e4:	687b      	ldr	r3, [r7, #4]
 80e13e6:	681b      	ldr	r3, [r3, #0]
 80e13e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e13ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80e13ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80e13ee:	0a1b      	lsrs	r3, r3, #8
 80e13f0:	f003 0301 	and.w	r3, r3, #1
 80e13f4:	2b00      	cmp	r3, #0
 80e13f6:	d010      	beq.n	80e141a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80e13f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80e13fa:	0a1b      	lsrs	r3, r3, #8
 80e13fc:	f003 0301 	and.w	r3, r3, #1
 80e1400:	2b00      	cmp	r3, #0
 80e1402:	d00a      	beq.n	80e141a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80e1404:	687b      	ldr	r3, [r7, #4]
 80e1406:	681b      	ldr	r3, [r3, #0]
 80e1408:	f44f 7280 	mov.w	r2, #256	; 0x100
 80e140c:	651a      	str	r2, [r3, #80]	; 0x50
 80e140e:	4b6b      	ldr	r3, [pc, #428]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e1410:	2200      	movs	r2, #0
 80e1412:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80e1414:	6878      	ldr	r0, [r7, #4]
 80e1416:	f000 fa54 	bl	80e18c2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80e141a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80e141c:	0a9b      	lsrs	r3, r3, #10
 80e141e:	f003 0301 	and.w	r3, r3, #1
 80e1422:	2b00      	cmp	r3, #0
 80e1424:	d01d      	beq.n	80e1462 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80e1426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80e1428:	0a9b      	lsrs	r3, r3, #10
 80e142a:	f003 0301 	and.w	r3, r3, #1
 80e142e:	2b00      	cmp	r3, #0
 80e1430:	d017      	beq.n	80e1462 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80e1432:	687b      	ldr	r3, [r7, #4]
 80e1434:	681b      	ldr	r3, [r3, #0]
 80e1436:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80e143a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80e143c:	687b      	ldr	r3, [r7, #4]
 80e143e:	681b      	ldr	r3, [r3, #0]
 80e1440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80e1444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80e1446:	4013      	ands	r3, r2
 80e1448:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80e144a:	687b      	ldr	r3, [r7, #4]
 80e144c:	681b      	ldr	r3, [r3, #0]
 80e144e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80e1452:	651a      	str	r2, [r3, #80]	; 0x50
 80e1454:	4b59      	ldr	r3, [pc, #356]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e1456:	2200      	movs	r2, #0
 80e1458:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80e145a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80e145c:	6878      	ldr	r0, [r7, #4]
 80e145e:	f000 fa07 	bl	80e1870 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80e1462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80e1464:	2b00      	cmp	r3, #0
 80e1466:	d00d      	beq.n	80e1484 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80e1468:	687b      	ldr	r3, [r7, #4]
 80e146a:	681a      	ldr	r2, [r3, #0]
 80e146c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80e146e:	4b54      	ldr	r3, [pc, #336]	; (80e15c0 <HAL_FDCAN_IRQHandler+0x278>)
 80e1470:	400b      	ands	r3, r1
 80e1472:	6513      	str	r3, [r2, #80]	; 0x50
 80e1474:	4a51      	ldr	r2, [pc, #324]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e1476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80e1478:	0f9b      	lsrs	r3, r3, #30
 80e147a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80e147c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80e147e:	6878      	ldr	r0, [r7, #4]
 80e1480:	f000 f9c0 	bl	80e1804 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80e1484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80e1486:	2b00      	cmp	r3, #0
 80e1488:	d00d      	beq.n	80e14a6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80e148a:	687b      	ldr	r3, [r7, #4]
 80e148c:	681a      	ldr	r2, [r3, #0]
 80e148e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80e1490:	4b4b      	ldr	r3, [pc, #300]	; (80e15c0 <HAL_FDCAN_IRQHandler+0x278>)
 80e1492:	400b      	ands	r3, r1
 80e1494:	6513      	str	r3, [r2, #80]	; 0x50
 80e1496:	4a49      	ldr	r2, [pc, #292]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e1498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80e149a:	0f9b      	lsrs	r3, r3, #30
 80e149c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80e149e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80e14a0:	6878      	ldr	r0, [r7, #4]
 80e14a2:	f000 f9ba 	bl	80e181a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80e14a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80e14a8:	2b00      	cmp	r3, #0
 80e14aa:	d00d      	beq.n	80e14c8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80e14ac:	687b      	ldr	r3, [r7, #4]
 80e14ae:	681a      	ldr	r2, [r3, #0]
 80e14b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80e14b2:	4b43      	ldr	r3, [pc, #268]	; (80e15c0 <HAL_FDCAN_IRQHandler+0x278>)
 80e14b4:	400b      	ands	r3, r1
 80e14b6:	6513      	str	r3, [r2, #80]	; 0x50
 80e14b8:	4a40      	ldr	r2, [pc, #256]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e14ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80e14bc:	0f9b      	lsrs	r3, r3, #30
 80e14be:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80e14c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80e14c2:	6878      	ldr	r0, [r7, #4]
 80e14c4:	f7fe ff90 	bl	80e03e8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80e14c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80e14ca:	2b00      	cmp	r3, #0
 80e14cc:	d00d      	beq.n	80e14ea <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80e14ce:	687b      	ldr	r3, [r7, #4]
 80e14d0:	681a      	ldr	r2, [r3, #0]
 80e14d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80e14d4:	4b3a      	ldr	r3, [pc, #232]	; (80e15c0 <HAL_FDCAN_IRQHandler+0x278>)
 80e14d6:	400b      	ands	r3, r1
 80e14d8:	6513      	str	r3, [r2, #80]	; 0x50
 80e14da:	4a38      	ldr	r2, [pc, #224]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e14dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80e14de:	0f9b      	lsrs	r3, r3, #30
 80e14e0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80e14e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80e14e4:	6878      	ldr	r0, [r7, #4]
 80e14e6:	f000 f9a3 	bl	80e1830 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80e14ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80e14ec:	0adb      	lsrs	r3, r3, #11
 80e14ee:	f003 0301 	and.w	r3, r3, #1
 80e14f2:	2b00      	cmp	r3, #0
 80e14f4:	d010      	beq.n	80e1518 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80e14f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80e14f8:	0adb      	lsrs	r3, r3, #11
 80e14fa:	f003 0301 	and.w	r3, r3, #1
 80e14fe:	2b00      	cmp	r3, #0
 80e1500:	d00a      	beq.n	80e1518 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80e1502:	687b      	ldr	r3, [r7, #4]
 80e1504:	681b      	ldr	r3, [r3, #0]
 80e1506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80e150a:	651a      	str	r2, [r3, #80]	; 0x50
 80e150c:	4b2b      	ldr	r3, [pc, #172]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e150e:	2200      	movs	r2, #0
 80e1510:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80e1512:	6878      	ldr	r0, [r7, #4]
 80e1514:	f000 f997 	bl	80e1846 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80e1518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80e151a:	0a5b      	lsrs	r3, r3, #9
 80e151c:	f003 0301 	and.w	r3, r3, #1
 80e1520:	2b00      	cmp	r3, #0
 80e1522:	d01d      	beq.n	80e1560 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80e1524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80e1526:	0a5b      	lsrs	r3, r3, #9
 80e1528:	f003 0301 	and.w	r3, r3, #1
 80e152c:	2b00      	cmp	r3, #0
 80e152e:	d017      	beq.n	80e1560 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80e1530:	687b      	ldr	r3, [r7, #4]
 80e1532:	681b      	ldr	r3, [r3, #0]
 80e1534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80e1538:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80e153a:	687b      	ldr	r3, [r7, #4]
 80e153c:	681b      	ldr	r3, [r3, #0]
 80e153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e1542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80e1544:	4013      	ands	r3, r2
 80e1546:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80e1548:	687b      	ldr	r3, [r7, #4]
 80e154a:	681b      	ldr	r3, [r3, #0]
 80e154c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80e1550:	651a      	str	r2, [r3, #80]	; 0x50
 80e1552:	4b1a      	ldr	r3, [pc, #104]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e1554:	2200      	movs	r2, #0
 80e1556:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80e1558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80e155a:	6878      	ldr	r0, [r7, #4]
 80e155c:	f000 f97d 	bl	80e185a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80e1560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80e1562:	0cdb      	lsrs	r3, r3, #19
 80e1564:	f003 0301 	and.w	r3, r3, #1
 80e1568:	2b00      	cmp	r3, #0
 80e156a:	d010      	beq.n	80e158e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80e156c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80e156e:	0cdb      	lsrs	r3, r3, #19
 80e1570:	f003 0301 	and.w	r3, r3, #1
 80e1574:	2b00      	cmp	r3, #0
 80e1576:	d00a      	beq.n	80e158e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80e1578:	687b      	ldr	r3, [r7, #4]
 80e157a:	681b      	ldr	r3, [r3, #0]
 80e157c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80e1580:	651a      	str	r2, [r3, #80]	; 0x50
 80e1582:	4b0e      	ldr	r3, [pc, #56]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e1584:	2200      	movs	r2, #0
 80e1586:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80e1588:	6878      	ldr	r0, [r7, #4]
 80e158a:	f000 f97c 	bl	80e1886 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80e158e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80e1590:	0c1b      	lsrs	r3, r3, #16
 80e1592:	f003 0301 	and.w	r3, r3, #1
 80e1596:	2b00      	cmp	r3, #0
 80e1598:	d016      	beq.n	80e15c8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80e159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80e159c:	0c1b      	lsrs	r3, r3, #16
 80e159e:	f003 0301 	and.w	r3, r3, #1
 80e15a2:	2b00      	cmp	r3, #0
 80e15a4:	d010      	beq.n	80e15c8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80e15a6:	687b      	ldr	r3, [r7, #4]
 80e15a8:	681b      	ldr	r3, [r3, #0]
 80e15aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80e15ae:	651a      	str	r2, [r3, #80]	; 0x50
 80e15b0:	4b02      	ldr	r3, [pc, #8]	; (80e15bc <HAL_FDCAN_IRQHandler+0x274>)
 80e15b2:	2200      	movs	r2, #0
 80e15b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80e15b6:	6878      	ldr	r0, [r7, #4]
 80e15b8:	e004      	b.n	80e15c4 <HAL_FDCAN_IRQHandler+0x27c>
 80e15ba:	bf00      	nop
 80e15bc:	4000a800 	.word	0x4000a800
 80e15c0:	3fcfffff 	.word	0x3fcfffff
 80e15c4:	f000 f969 	bl	80e189a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80e15c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80e15ca:	0c9b      	lsrs	r3, r3, #18
 80e15cc:	f003 0301 	and.w	r3, r3, #1
 80e15d0:	2b00      	cmp	r3, #0
 80e15d2:	d010      	beq.n	80e15f6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80e15d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80e15d6:	0c9b      	lsrs	r3, r3, #18
 80e15d8:	f003 0301 	and.w	r3, r3, #1
 80e15dc:	2b00      	cmp	r3, #0
 80e15de:	d00a      	beq.n	80e15f6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80e15e0:	687b      	ldr	r3, [r7, #4]
 80e15e2:	681b      	ldr	r3, [r3, #0]
 80e15e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80e15e8:	651a      	str	r2, [r3, #80]	; 0x50
 80e15ea:	4b83      	ldr	r3, [pc, #524]	; (80e17f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80e15ec:	2200      	movs	r2, #0
 80e15ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80e15f0:	6878      	ldr	r0, [r7, #4]
 80e15f2:	f000 f95c 	bl	80e18ae <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80e15f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80e15f8:	0c5b      	lsrs	r3, r3, #17
 80e15fa:	f003 0301 	and.w	r3, r3, #1
 80e15fe:	2b00      	cmp	r3, #0
 80e1600:	d015      	beq.n	80e162e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80e1602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80e1604:	0c5b      	lsrs	r3, r3, #17
 80e1606:	f003 0301 	and.w	r3, r3, #1
 80e160a:	2b00      	cmp	r3, #0
 80e160c:	d00f      	beq.n	80e162e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80e160e:	687b      	ldr	r3, [r7, #4]
 80e1610:	681b      	ldr	r3, [r3, #0]
 80e1612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80e1616:	651a      	str	r2, [r3, #80]	; 0x50
 80e1618:	4b77      	ldr	r3, [pc, #476]	; (80e17f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80e161a:	2200      	movs	r2, #0
 80e161c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80e161e:	687b      	ldr	r3, [r7, #4]
 80e1620:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1624:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80e1628:	687b      	ldr	r3, [r7, #4]
 80e162a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80e162e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80e1630:	2b00      	cmp	r3, #0
 80e1632:	d00d      	beq.n	80e1650 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80e1634:	687b      	ldr	r3, [r7, #4]
 80e1636:	681a      	ldr	r2, [r3, #0]
 80e1638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80e163a:	4b70      	ldr	r3, [pc, #448]	; (80e17fc <HAL_FDCAN_IRQHandler+0x4b4>)
 80e163c:	400b      	ands	r3, r1
 80e163e:	6513      	str	r3, [r2, #80]	; 0x50
 80e1640:	4a6d      	ldr	r2, [pc, #436]	; (80e17f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80e1642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80e1644:	0f9b      	lsrs	r3, r3, #30
 80e1646:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80e1648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80e164a:	6878      	ldr	r0, [r7, #4]
 80e164c:	f000 f94d 	bl	80e18ea <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80e1650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80e1652:	2b00      	cmp	r3, #0
 80e1654:	d011      	beq.n	80e167a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80e1656:	687b      	ldr	r3, [r7, #4]
 80e1658:	681a      	ldr	r2, [r3, #0]
 80e165a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80e165c:	4b67      	ldr	r3, [pc, #412]	; (80e17fc <HAL_FDCAN_IRQHandler+0x4b4>)
 80e165e:	400b      	ands	r3, r1
 80e1660:	6513      	str	r3, [r2, #80]	; 0x50
 80e1662:	4a65      	ldr	r2, [pc, #404]	; (80e17f8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80e1664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80e1666:	0f9b      	lsrs	r3, r3, #30
 80e1668:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80e166a:	687b      	ldr	r3, [r7, #4]
 80e166c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80e1670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80e1672:	431a      	orrs	r2, r3
 80e1674:	687b      	ldr	r3, [r7, #4]
 80e1676:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80e167a:	687b      	ldr	r3, [r7, #4]
 80e167c:	681b      	ldr	r3, [r3, #0]
 80e167e:	4a60      	ldr	r2, [pc, #384]	; (80e1800 <HAL_FDCAN_IRQHandler+0x4b8>)
 80e1680:	4293      	cmp	r3, r2
 80e1682:	f040 80ac 	bne.w	80e17de <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80e1686:	687b      	ldr	r3, [r7, #4]
 80e1688:	685b      	ldr	r3, [r3, #4]
 80e168a:	689b      	ldr	r3, [r3, #8]
 80e168c:	f003 0303 	and.w	r3, r3, #3
 80e1690:	2b00      	cmp	r3, #0
 80e1692:	f000 80a4 	beq.w	80e17de <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80e1696:	687b      	ldr	r3, [r7, #4]
 80e1698:	685b      	ldr	r3, [r3, #4]
 80e169a:	6a1b      	ldr	r3, [r3, #32]
 80e169c:	f003 030f 	and.w	r3, r3, #15
 80e16a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80e16a2:	687b      	ldr	r3, [r7, #4]
 80e16a4:	685b      	ldr	r3, [r3, #4]
 80e16a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e16a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80e16aa:	4013      	ands	r3, r2
 80e16ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80e16ae:	687b      	ldr	r3, [r7, #4]
 80e16b0:	685b      	ldr	r3, [r3, #4]
 80e16b2:	6a1b      	ldr	r3, [r3, #32]
 80e16b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80e16b8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80e16ba:	687b      	ldr	r3, [r7, #4]
 80e16bc:	685b      	ldr	r3, [r3, #4]
 80e16be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e16c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80e16c2:	4013      	ands	r3, r2
 80e16c4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80e16c6:	687b      	ldr	r3, [r7, #4]
 80e16c8:	685b      	ldr	r3, [r3, #4]
 80e16ca:	6a1b      	ldr	r3, [r3, #32]
 80e16cc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80e16d0:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80e16d2:	687b      	ldr	r3, [r7, #4]
 80e16d4:	685b      	ldr	r3, [r3, #4]
 80e16d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e16d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80e16da:	4013      	ands	r3, r2
 80e16dc:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80e16de:	687b      	ldr	r3, [r7, #4]
 80e16e0:	685b      	ldr	r3, [r3, #4]
 80e16e2:	6a1b      	ldr	r3, [r3, #32]
 80e16e4:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80e16e8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80e16ea:	687b      	ldr	r3, [r7, #4]
 80e16ec:	685b      	ldr	r3, [r3, #4]
 80e16ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e16f0:	6a3a      	ldr	r2, [r7, #32]
 80e16f2:	4013      	ands	r3, r2
 80e16f4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80e16f6:	687b      	ldr	r3, [r7, #4]
 80e16f8:	685b      	ldr	r3, [r3, #4]
 80e16fa:	6a1b      	ldr	r3, [r3, #32]
 80e16fc:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80e1700:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80e1702:	687b      	ldr	r3, [r7, #4]
 80e1704:	685b      	ldr	r3, [r3, #4]
 80e1706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e1708:	69fa      	ldr	r2, [r7, #28]
 80e170a:	4013      	ands	r3, r2
 80e170c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80e170e:	687b      	ldr	r3, [r7, #4]
 80e1710:	685b      	ldr	r3, [r3, #4]
 80e1712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e1714:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80e1716:	687b      	ldr	r3, [r7, #4]
 80e1718:	685b      	ldr	r3, [r3, #4]
 80e171a:	6a1b      	ldr	r3, [r3, #32]
 80e171c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80e171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80e1720:	2b00      	cmp	r3, #0
 80e1722:	d007      	beq.n	80e1734 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80e1724:	687b      	ldr	r3, [r7, #4]
 80e1726:	685b      	ldr	r3, [r3, #4]
 80e1728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80e172a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80e172c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80e172e:	6878      	ldr	r0, [r7, #4]
 80e1730:	f000 f8e6 	bl	80e1900 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80e1734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80e1736:	2b00      	cmp	r3, #0
 80e1738:	d007      	beq.n	80e174a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80e173a:	687b      	ldr	r3, [r7, #4]
 80e173c:	685b      	ldr	r3, [r3, #4]
 80e173e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80e1740:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80e1742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80e1744:	6878      	ldr	r0, [r7, #4]
 80e1746:	f000 f8e6 	bl	80e1916 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80e174a:	69bb      	ldr	r3, [r7, #24]
 80e174c:	099b      	lsrs	r3, r3, #6
 80e174e:	f003 0301 	and.w	r3, r3, #1
 80e1752:	2b00      	cmp	r3, #0
 80e1754:	d01a      	beq.n	80e178c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80e1756:	697b      	ldr	r3, [r7, #20]
 80e1758:	099b      	lsrs	r3, r3, #6
 80e175a:	f003 0301 	and.w	r3, r3, #1
 80e175e:	2b00      	cmp	r3, #0
 80e1760:	d014      	beq.n	80e178c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80e1762:	687b      	ldr	r3, [r7, #4]
 80e1764:	685b      	ldr	r3, [r3, #4]
 80e1766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e1768:	0c1b      	lsrs	r3, r3, #16
 80e176a:	b29b      	uxth	r3, r3
 80e176c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80e176e:	687b      	ldr	r3, [r7, #4]
 80e1770:	685b      	ldr	r3, [r3, #4]
 80e1772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e1774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e1778:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80e177a:	687b      	ldr	r3, [r7, #4]
 80e177c:	685b      	ldr	r3, [r3, #4]
 80e177e:	2240      	movs	r2, #64	; 0x40
 80e1780:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80e1782:	68fa      	ldr	r2, [r7, #12]
 80e1784:	6939      	ldr	r1, [r7, #16]
 80e1786:	6878      	ldr	r0, [r7, #4]
 80e1788:	f000 f8d0 	bl	80e192c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80e178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e178e:	2b00      	cmp	r3, #0
 80e1790:	d007      	beq.n	80e17a2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80e1792:	687b      	ldr	r3, [r7, #4]
 80e1794:	685b      	ldr	r3, [r3, #4]
 80e1796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80e1798:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80e179a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80e179c:	6878      	ldr	r0, [r7, #4]
 80e179e:	f000 f8d1 	bl	80e1944 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80e17a2:	6a3b      	ldr	r3, [r7, #32]
 80e17a4:	2b00      	cmp	r3, #0
 80e17a6:	d00b      	beq.n	80e17c0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80e17a8:	687b      	ldr	r3, [r7, #4]
 80e17aa:	685b      	ldr	r3, [r3, #4]
 80e17ac:	6a3a      	ldr	r2, [r7, #32]
 80e17ae:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80e17b0:	687b      	ldr	r3, [r7, #4]
 80e17b2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80e17b6:	6a3b      	ldr	r3, [r7, #32]
 80e17b8:	431a      	orrs	r2, r3
 80e17ba:	687b      	ldr	r3, [r7, #4]
 80e17bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80e17c0:	69fb      	ldr	r3, [r7, #28]
 80e17c2:	2b00      	cmp	r3, #0
 80e17c4:	d00b      	beq.n	80e17de <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80e17c6:	687b      	ldr	r3, [r7, #4]
 80e17c8:	685b      	ldr	r3, [r3, #4]
 80e17ca:	69fa      	ldr	r2, [r7, #28]
 80e17cc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80e17ce:	687b      	ldr	r3, [r7, #4]
 80e17d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80e17d4:	69fb      	ldr	r3, [r7, #28]
 80e17d6:	431a      	orrs	r2, r3
 80e17d8:	687b      	ldr	r3, [r7, #4]
 80e17da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80e17de:	687b      	ldr	r3, [r7, #4]
 80e17e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e17e4:	2b00      	cmp	r3, #0
 80e17e6:	d002      	beq.n	80e17ee <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80e17e8:	6878      	ldr	r0, [r7, #4]
 80e17ea:	f000 f874 	bl	80e18d6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80e17ee:	bf00      	nop
 80e17f0:	3758      	adds	r7, #88	; 0x58
 80e17f2:	46bd      	mov	sp, r7
 80e17f4:	bd80      	pop	{r7, pc}
 80e17f6:	bf00      	nop
 80e17f8:	4000a800 	.word	0x4000a800
 80e17fc:	3fcfffff 	.word	0x3fcfffff
 80e1800:	4000a000 	.word	0x4000a000

080e1804 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80e1804:	b480      	push	{r7}
 80e1806:	b083      	sub	sp, #12
 80e1808:	af00      	add	r7, sp, #0
 80e180a:	6078      	str	r0, [r7, #4]
 80e180c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80e180e:	bf00      	nop
 80e1810:	370c      	adds	r7, #12
 80e1812:	46bd      	mov	sp, r7
 80e1814:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1818:	4770      	bx	lr

080e181a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80e181a:	b480      	push	{r7}
 80e181c:	b083      	sub	sp, #12
 80e181e:	af00      	add	r7, sp, #0
 80e1820:	6078      	str	r0, [r7, #4]
 80e1822:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80e1824:	bf00      	nop
 80e1826:	370c      	adds	r7, #12
 80e1828:	46bd      	mov	sp, r7
 80e182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e182e:	4770      	bx	lr

080e1830 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80e1830:	b480      	push	{r7}
 80e1832:	b083      	sub	sp, #12
 80e1834:	af00      	add	r7, sp, #0
 80e1836:	6078      	str	r0, [r7, #4]
 80e1838:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80e183a:	bf00      	nop
 80e183c:	370c      	adds	r7, #12
 80e183e:	46bd      	mov	sp, r7
 80e1840:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1844:	4770      	bx	lr

080e1846 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80e1846:	b480      	push	{r7}
 80e1848:	b083      	sub	sp, #12
 80e184a:	af00      	add	r7, sp, #0
 80e184c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80e184e:	bf00      	nop
 80e1850:	370c      	adds	r7, #12
 80e1852:	46bd      	mov	sp, r7
 80e1854:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1858:	4770      	bx	lr

080e185a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80e185a:	b480      	push	{r7}
 80e185c:	b083      	sub	sp, #12
 80e185e:	af00      	add	r7, sp, #0
 80e1860:	6078      	str	r0, [r7, #4]
 80e1862:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80e1864:	bf00      	nop
 80e1866:	370c      	adds	r7, #12
 80e1868:	46bd      	mov	sp, r7
 80e186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e186e:	4770      	bx	lr

080e1870 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80e1870:	b480      	push	{r7}
 80e1872:	b083      	sub	sp, #12
 80e1874:	af00      	add	r7, sp, #0
 80e1876:	6078      	str	r0, [r7, #4]
 80e1878:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80e187a:	bf00      	nop
 80e187c:	370c      	adds	r7, #12
 80e187e:	46bd      	mov	sp, r7
 80e1880:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1884:	4770      	bx	lr

080e1886 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80e1886:	b480      	push	{r7}
 80e1888:	b083      	sub	sp, #12
 80e188a:	af00      	add	r7, sp, #0
 80e188c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80e188e:	bf00      	nop
 80e1890:	370c      	adds	r7, #12
 80e1892:	46bd      	mov	sp, r7
 80e1894:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1898:	4770      	bx	lr

080e189a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80e189a:	b480      	push	{r7}
 80e189c:	b083      	sub	sp, #12
 80e189e:	af00      	add	r7, sp, #0
 80e18a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80e18a2:	bf00      	nop
 80e18a4:	370c      	adds	r7, #12
 80e18a6:	46bd      	mov	sp, r7
 80e18a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e18ac:	4770      	bx	lr

080e18ae <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80e18ae:	b480      	push	{r7}
 80e18b0:	b083      	sub	sp, #12
 80e18b2:	af00      	add	r7, sp, #0
 80e18b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80e18b6:	bf00      	nop
 80e18b8:	370c      	adds	r7, #12
 80e18ba:	46bd      	mov	sp, r7
 80e18bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e18c0:	4770      	bx	lr

080e18c2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80e18c2:	b480      	push	{r7}
 80e18c4:	b083      	sub	sp, #12
 80e18c6:	af00      	add	r7, sp, #0
 80e18c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80e18ca:	bf00      	nop
 80e18cc:	370c      	adds	r7, #12
 80e18ce:	46bd      	mov	sp, r7
 80e18d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e18d4:	4770      	bx	lr

080e18d6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80e18d6:	b480      	push	{r7}
 80e18d8:	b083      	sub	sp, #12
 80e18da:	af00      	add	r7, sp, #0
 80e18dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80e18de:	bf00      	nop
 80e18e0:	370c      	adds	r7, #12
 80e18e2:	46bd      	mov	sp, r7
 80e18e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e18e8:	4770      	bx	lr

080e18ea <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80e18ea:	b480      	push	{r7}
 80e18ec:	b083      	sub	sp, #12
 80e18ee:	af00      	add	r7, sp, #0
 80e18f0:	6078      	str	r0, [r7, #4]
 80e18f2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80e18f4:	bf00      	nop
 80e18f6:	370c      	adds	r7, #12
 80e18f8:	46bd      	mov	sp, r7
 80e18fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e18fe:	4770      	bx	lr

080e1900 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80e1900:	b480      	push	{r7}
 80e1902:	b083      	sub	sp, #12
 80e1904:	af00      	add	r7, sp, #0
 80e1906:	6078      	str	r0, [r7, #4]
 80e1908:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80e190a:	bf00      	nop
 80e190c:	370c      	adds	r7, #12
 80e190e:	46bd      	mov	sp, r7
 80e1910:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1914:	4770      	bx	lr

080e1916 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80e1916:	b480      	push	{r7}
 80e1918:	b083      	sub	sp, #12
 80e191a:	af00      	add	r7, sp, #0
 80e191c:	6078      	str	r0, [r7, #4]
 80e191e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80e1920:	bf00      	nop
 80e1922:	370c      	adds	r7, #12
 80e1924:	46bd      	mov	sp, r7
 80e1926:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e192a:	4770      	bx	lr

080e192c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80e192c:	b480      	push	{r7}
 80e192e:	b085      	sub	sp, #20
 80e1930:	af00      	add	r7, sp, #0
 80e1932:	60f8      	str	r0, [r7, #12]
 80e1934:	60b9      	str	r1, [r7, #8]
 80e1936:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80e1938:	bf00      	nop
 80e193a:	3714      	adds	r7, #20
 80e193c:	46bd      	mov	sp, r7
 80e193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1942:	4770      	bx	lr

080e1944 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80e1944:	b480      	push	{r7}
 80e1946:	b083      	sub	sp, #12
 80e1948:	af00      	add	r7, sp, #0
 80e194a:	6078      	str	r0, [r7, #4]
 80e194c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80e194e:	bf00      	nop
 80e1950:	370c      	adds	r7, #12
 80e1952:	46bd      	mov	sp, r7
 80e1954:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1958:	4770      	bx	lr
	...

080e195c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80e195c:	b480      	push	{r7}
 80e195e:	b085      	sub	sp, #20
 80e1960:	af00      	add	r7, sp, #0
 80e1962:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80e1964:	687b      	ldr	r3, [r7, #4]
 80e1966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e1968:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80e196a:	687b      	ldr	r3, [r7, #4]
 80e196c:	681b      	ldr	r3, [r3, #0]
 80e196e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e1972:	4ba7      	ldr	r3, [pc, #668]	; (80e1c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1974:	4013      	ands	r3, r2
 80e1976:	68ba      	ldr	r2, [r7, #8]
 80e1978:	0091      	lsls	r1, r2, #2
 80e197a:	687a      	ldr	r2, [r7, #4]
 80e197c:	6812      	ldr	r2, [r2, #0]
 80e197e:	430b      	orrs	r3, r1
 80e1980:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80e1984:	687b      	ldr	r3, [r7, #4]
 80e1986:	681b      	ldr	r3, [r3, #0]
 80e1988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80e198c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80e1990:	687b      	ldr	r3, [r7, #4]
 80e1992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e1994:	041a      	lsls	r2, r3, #16
 80e1996:	687b      	ldr	r3, [r7, #4]
 80e1998:	681b      	ldr	r3, [r3, #0]
 80e199a:	430a      	orrs	r2, r1
 80e199c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80e19a0:	687b      	ldr	r3, [r7, #4]
 80e19a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e19a4:	68ba      	ldr	r2, [r7, #8]
 80e19a6:	4413      	add	r3, r2
 80e19a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80e19aa:	687b      	ldr	r3, [r7, #4]
 80e19ac:	681b      	ldr	r3, [r3, #0]
 80e19ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80e19b2:	4b97      	ldr	r3, [pc, #604]	; (80e1c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e19b4:	4013      	ands	r3, r2
 80e19b6:	68ba      	ldr	r2, [r7, #8]
 80e19b8:	0091      	lsls	r1, r2, #2
 80e19ba:	687a      	ldr	r2, [r7, #4]
 80e19bc:	6812      	ldr	r2, [r2, #0]
 80e19be:	430b      	orrs	r3, r1
 80e19c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80e19c4:	687b      	ldr	r3, [r7, #4]
 80e19c6:	681b      	ldr	r3, [r3, #0]
 80e19c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e19cc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e19d0:	687b      	ldr	r3, [r7, #4]
 80e19d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e19d4:	041a      	lsls	r2, r3, #16
 80e19d6:	687b      	ldr	r3, [r7, #4]
 80e19d8:	681b      	ldr	r3, [r3, #0]
 80e19da:	430a      	orrs	r2, r1
 80e19dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80e19e0:	687b      	ldr	r3, [r7, #4]
 80e19e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e19e4:	005b      	lsls	r3, r3, #1
 80e19e6:	68ba      	ldr	r2, [r7, #8]
 80e19e8:	4413      	add	r3, r2
 80e19ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80e19ec:	687b      	ldr	r3, [r7, #4]
 80e19ee:	681b      	ldr	r3, [r3, #0]
 80e19f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80e19f4:	4b86      	ldr	r3, [pc, #536]	; (80e1c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e19f6:	4013      	ands	r3, r2
 80e19f8:	68ba      	ldr	r2, [r7, #8]
 80e19fa:	0091      	lsls	r1, r2, #2
 80e19fc:	687a      	ldr	r2, [r7, #4]
 80e19fe:	6812      	ldr	r2, [r2, #0]
 80e1a00:	430b      	orrs	r3, r1
 80e1a02:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80e1a06:	687b      	ldr	r3, [r7, #4]
 80e1a08:	681b      	ldr	r3, [r3, #0]
 80e1a0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e1a0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e1a12:	687b      	ldr	r3, [r7, #4]
 80e1a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e1a16:	041a      	lsls	r2, r3, #16
 80e1a18:	687b      	ldr	r3, [r7, #4]
 80e1a1a:	681b      	ldr	r3, [r3, #0]
 80e1a1c:	430a      	orrs	r2, r1
 80e1a1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80e1a22:	687b      	ldr	r3, [r7, #4]
 80e1a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e1a26:	687a      	ldr	r2, [r7, #4]
 80e1a28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80e1a2a:	fb02 f303 	mul.w	r3, r2, r3
 80e1a2e:	68ba      	ldr	r2, [r7, #8]
 80e1a30:	4413      	add	r3, r2
 80e1a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80e1a34:	687b      	ldr	r3, [r7, #4]
 80e1a36:	681b      	ldr	r3, [r3, #0]
 80e1a38:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80e1a3c:	4b74      	ldr	r3, [pc, #464]	; (80e1c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1a3e:	4013      	ands	r3, r2
 80e1a40:	68ba      	ldr	r2, [r7, #8]
 80e1a42:	0091      	lsls	r1, r2, #2
 80e1a44:	687a      	ldr	r2, [r7, #4]
 80e1a46:	6812      	ldr	r2, [r2, #0]
 80e1a48:	430b      	orrs	r3, r1
 80e1a4a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80e1a4e:	687b      	ldr	r3, [r7, #4]
 80e1a50:	681b      	ldr	r3, [r3, #0]
 80e1a52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e1a56:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e1a5a:	687b      	ldr	r3, [r7, #4]
 80e1a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e1a5e:	041a      	lsls	r2, r3, #16
 80e1a60:	687b      	ldr	r3, [r7, #4]
 80e1a62:	681b      	ldr	r3, [r3, #0]
 80e1a64:	430a      	orrs	r2, r1
 80e1a66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80e1a6a:	687b      	ldr	r3, [r7, #4]
 80e1a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e1a6e:	687a      	ldr	r2, [r7, #4]
 80e1a70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80e1a72:	fb02 f303 	mul.w	r3, r2, r3
 80e1a76:	68ba      	ldr	r2, [r7, #8]
 80e1a78:	4413      	add	r3, r2
 80e1a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80e1a7c:	687b      	ldr	r3, [r7, #4]
 80e1a7e:	681b      	ldr	r3, [r3, #0]
 80e1a80:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80e1a84:	4b62      	ldr	r3, [pc, #392]	; (80e1c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1a86:	4013      	ands	r3, r2
 80e1a88:	68ba      	ldr	r2, [r7, #8]
 80e1a8a:	0091      	lsls	r1, r2, #2
 80e1a8c:	687a      	ldr	r2, [r7, #4]
 80e1a8e:	6812      	ldr	r2, [r2, #0]
 80e1a90:	430b      	orrs	r3, r1
 80e1a92:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80e1a96:	687b      	ldr	r3, [r7, #4]
 80e1a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e1a9a:	687a      	ldr	r2, [r7, #4]
 80e1a9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80e1a9e:	fb02 f303 	mul.w	r3, r2, r3
 80e1aa2:	68ba      	ldr	r2, [r7, #8]
 80e1aa4:	4413      	add	r3, r2
 80e1aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80e1aa8:	687b      	ldr	r3, [r7, #4]
 80e1aaa:	681b      	ldr	r3, [r3, #0]
 80e1aac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80e1ab0:	4b57      	ldr	r3, [pc, #348]	; (80e1c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1ab2:	4013      	ands	r3, r2
 80e1ab4:	68ba      	ldr	r2, [r7, #8]
 80e1ab6:	0091      	lsls	r1, r2, #2
 80e1ab8:	687a      	ldr	r2, [r7, #4]
 80e1aba:	6812      	ldr	r2, [r2, #0]
 80e1abc:	430b      	orrs	r3, r1
 80e1abe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80e1ac2:	687b      	ldr	r3, [r7, #4]
 80e1ac4:	681b      	ldr	r3, [r3, #0]
 80e1ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80e1aca:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80e1ace:	687b      	ldr	r3, [r7, #4]
 80e1ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e1ad2:	041a      	lsls	r2, r3, #16
 80e1ad4:	687b      	ldr	r3, [r7, #4]
 80e1ad6:	681b      	ldr	r3, [r3, #0]
 80e1ad8:	430a      	orrs	r2, r1
 80e1ada:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80e1ade:	687b      	ldr	r3, [r7, #4]
 80e1ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e1ae2:	005b      	lsls	r3, r3, #1
 80e1ae4:	68ba      	ldr	r2, [r7, #8]
 80e1ae6:	4413      	add	r3, r2
 80e1ae8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80e1aea:	687b      	ldr	r3, [r7, #4]
 80e1aec:	681b      	ldr	r3, [r3, #0]
 80e1aee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80e1af2:	4b47      	ldr	r3, [pc, #284]	; (80e1c10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1af4:	4013      	ands	r3, r2
 80e1af6:	68ba      	ldr	r2, [r7, #8]
 80e1af8:	0091      	lsls	r1, r2, #2
 80e1afa:	687a      	ldr	r2, [r7, #4]
 80e1afc:	6812      	ldr	r2, [r2, #0]
 80e1afe:	430b      	orrs	r3, r1
 80e1b00:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80e1b04:	687b      	ldr	r3, [r7, #4]
 80e1b06:	681b      	ldr	r3, [r3, #0]
 80e1b08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e1b0c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80e1b10:	687b      	ldr	r3, [r7, #4]
 80e1b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e1b14:	041a      	lsls	r2, r3, #16
 80e1b16:	687b      	ldr	r3, [r7, #4]
 80e1b18:	681b      	ldr	r3, [r3, #0]
 80e1b1a:	430a      	orrs	r2, r1
 80e1b1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80e1b20:	687b      	ldr	r3, [r7, #4]
 80e1b22:	681b      	ldr	r3, [r3, #0]
 80e1b24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e1b28:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80e1b2c:	687b      	ldr	r3, [r7, #4]
 80e1b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e1b30:	061a      	lsls	r2, r3, #24
 80e1b32:	687b      	ldr	r3, [r7, #4]
 80e1b34:	681b      	ldr	r3, [r3, #0]
 80e1b36:	430a      	orrs	r2, r1
 80e1b38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80e1b3c:	687b      	ldr	r3, [r7, #4]
 80e1b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80e1b40:	4b34      	ldr	r3, [pc, #208]	; (80e1c14 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80e1b42:	4413      	add	r3, r2
 80e1b44:	009a      	lsls	r2, r3, #2
 80e1b46:	687b      	ldr	r3, [r7, #4]
 80e1b48:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80e1b4a:	687b      	ldr	r3, [r7, #4]
 80e1b4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80e1b4e:	687b      	ldr	r3, [r7, #4]
 80e1b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e1b52:	009b      	lsls	r3, r3, #2
 80e1b54:	441a      	add	r2, r3
 80e1b56:	687b      	ldr	r3, [r7, #4]
 80e1b58:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80e1b5a:	687b      	ldr	r3, [r7, #4]
 80e1b5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e1b5e:	687b      	ldr	r3, [r7, #4]
 80e1b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e1b62:	00db      	lsls	r3, r3, #3
 80e1b64:	441a      	add	r2, r3
 80e1b66:	687b      	ldr	r3, [r7, #4]
 80e1b68:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80e1b6a:	687b      	ldr	r3, [r7, #4]
 80e1b6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80e1b6e:	687b      	ldr	r3, [r7, #4]
 80e1b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e1b72:	6879      	ldr	r1, [r7, #4]
 80e1b74:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80e1b76:	fb01 f303 	mul.w	r3, r1, r3
 80e1b7a:	009b      	lsls	r3, r3, #2
 80e1b7c:	441a      	add	r2, r3
 80e1b7e:	687b      	ldr	r3, [r7, #4]
 80e1b80:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80e1b82:	687b      	ldr	r3, [r7, #4]
 80e1b84:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80e1b86:	687b      	ldr	r3, [r7, #4]
 80e1b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e1b8a:	6879      	ldr	r1, [r7, #4]
 80e1b8c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80e1b8e:	fb01 f303 	mul.w	r3, r1, r3
 80e1b92:	009b      	lsls	r3, r3, #2
 80e1b94:	441a      	add	r2, r3
 80e1b96:	687b      	ldr	r3, [r7, #4]
 80e1b98:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80e1b9a:	687b      	ldr	r3, [r7, #4]
 80e1b9c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80e1b9e:	687b      	ldr	r3, [r7, #4]
 80e1ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e1ba2:	6879      	ldr	r1, [r7, #4]
 80e1ba4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80e1ba6:	fb01 f303 	mul.w	r3, r1, r3
 80e1baa:	009b      	lsls	r3, r3, #2
 80e1bac:	441a      	add	r2, r3
 80e1bae:	687b      	ldr	r3, [r7, #4]
 80e1bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80e1bb4:	687b      	ldr	r3, [r7, #4]
 80e1bb6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80e1bba:	687b      	ldr	r3, [r7, #4]
 80e1bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e1bbe:	00db      	lsls	r3, r3, #3
 80e1bc0:	441a      	add	r2, r3
 80e1bc2:	687b      	ldr	r3, [r7, #4]
 80e1bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80e1bc8:	687b      	ldr	r3, [r7, #4]
 80e1bca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e1bce:	687b      	ldr	r3, [r7, #4]
 80e1bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e1bd2:	6879      	ldr	r1, [r7, #4]
 80e1bd4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80e1bd6:	fb01 f303 	mul.w	r3, r1, r3
 80e1bda:	009b      	lsls	r3, r3, #2
 80e1bdc:	441a      	add	r2, r3
 80e1bde:	687b      	ldr	r3, [r7, #4]
 80e1be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80e1be4:	687b      	ldr	r3, [r7, #4]
 80e1be6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80e1bea:	687b      	ldr	r3, [r7, #4]
 80e1bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e1bee:	6879      	ldr	r1, [r7, #4]
 80e1bf0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80e1bf2:	fb01 f303 	mul.w	r3, r1, r3
 80e1bf6:	009b      	lsls	r3, r3, #2
 80e1bf8:	441a      	add	r2, r3
 80e1bfa:	687b      	ldr	r3, [r7, #4]
 80e1bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80e1c00:	687b      	ldr	r3, [r7, #4]
 80e1c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e1c06:	4a04      	ldr	r2, [pc, #16]	; (80e1c18 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80e1c08:	4293      	cmp	r3, r2
 80e1c0a:	d915      	bls.n	80e1c38 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80e1c0c:	e006      	b.n	80e1c1c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80e1c0e:	bf00      	nop
 80e1c10:	ffff0003 	.word	0xffff0003
 80e1c14:	10002b00 	.word	0x10002b00
 80e1c18:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e1c1c:	687b      	ldr	r3, [r7, #4]
 80e1c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1c22:	f043 0220 	orr.w	r2, r3, #32
 80e1c26:	687b      	ldr	r3, [r7, #4]
 80e1c28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e1c2c:	687b      	ldr	r3, [r7, #4]
 80e1c2e:	2203      	movs	r2, #3
 80e1c30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80e1c34:	2301      	movs	r3, #1
 80e1c36:	e010      	b.n	80e1c5a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80e1c38:	687b      	ldr	r3, [r7, #4]
 80e1c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80e1c3c:	60fb      	str	r3, [r7, #12]
 80e1c3e:	e005      	b.n	80e1c4c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80e1c40:	68fb      	ldr	r3, [r7, #12]
 80e1c42:	2200      	movs	r2, #0
 80e1c44:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80e1c46:	68fb      	ldr	r3, [r7, #12]
 80e1c48:	3304      	adds	r3, #4
 80e1c4a:	60fb      	str	r3, [r7, #12]
 80e1c4c:	687b      	ldr	r3, [r7, #4]
 80e1c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e1c52:	68fa      	ldr	r2, [r7, #12]
 80e1c54:	429a      	cmp	r2, r3
 80e1c56:	d3f3      	bcc.n	80e1c40 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80e1c58:	2300      	movs	r3, #0
}
 80e1c5a:	4618      	mov	r0, r3
 80e1c5c:	3714      	adds	r7, #20
 80e1c5e:	46bd      	mov	sp, r7
 80e1c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1c64:	4770      	bx	lr
 80e1c66:	bf00      	nop

080e1c68 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80e1c68:	b480      	push	{r7}
 80e1c6a:	b089      	sub	sp, #36	; 0x24
 80e1c6c:	af00      	add	r7, sp, #0
 80e1c6e:	60f8      	str	r0, [r7, #12]
 80e1c70:	60b9      	str	r1, [r7, #8]
 80e1c72:	607a      	str	r2, [r7, #4]
 80e1c74:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80e1c76:	68bb      	ldr	r3, [r7, #8]
 80e1c78:	685b      	ldr	r3, [r3, #4]
 80e1c7a:	2b00      	cmp	r3, #0
 80e1c7c:	d10a      	bne.n	80e1c94 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e1c7e:	68bb      	ldr	r3, [r7, #8]
 80e1c80:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80e1c82:	68bb      	ldr	r3, [r7, #8]
 80e1c84:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80e1c86:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80e1c88:	68bb      	ldr	r3, [r7, #8]
 80e1c8a:	681b      	ldr	r3, [r3, #0]
 80e1c8c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e1c8e:	4313      	orrs	r3, r2
 80e1c90:	61fb      	str	r3, [r7, #28]
 80e1c92:	e00a      	b.n	80e1caa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e1c94:	68bb      	ldr	r3, [r7, #8]
 80e1c96:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80e1c98:	68bb      	ldr	r3, [r7, #8]
 80e1c9a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80e1c9c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80e1c9e:	68bb      	ldr	r3, [r7, #8]
 80e1ca0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80e1ca2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e1ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80e1ca8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e1caa:	68bb      	ldr	r3, [r7, #8]
 80e1cac:	6a1b      	ldr	r3, [r3, #32]
 80e1cae:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80e1cb0:	68bb      	ldr	r3, [r7, #8]
 80e1cb2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e1cb4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80e1cb6:	68bb      	ldr	r3, [r7, #8]
 80e1cb8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80e1cba:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80e1cbc:	68bb      	ldr	r3, [r7, #8]
 80e1cbe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80e1cc0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80e1cc2:	68bb      	ldr	r3, [r7, #8]
 80e1cc4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e1cc6:	4313      	orrs	r3, r2
 80e1cc8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80e1cca:	68fb      	ldr	r3, [r7, #12]
 80e1ccc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e1cd0:	68fb      	ldr	r3, [r7, #12]
 80e1cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e1cd4:	6839      	ldr	r1, [r7, #0]
 80e1cd6:	fb01 f303 	mul.w	r3, r1, r3
 80e1cda:	009b      	lsls	r3, r3, #2
 80e1cdc:	4413      	add	r3, r2
 80e1cde:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80e1ce0:	69bb      	ldr	r3, [r7, #24]
 80e1ce2:	69fa      	ldr	r2, [r7, #28]
 80e1ce4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80e1ce6:	69bb      	ldr	r3, [r7, #24]
 80e1ce8:	3304      	adds	r3, #4
 80e1cea:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80e1cec:	69bb      	ldr	r3, [r7, #24]
 80e1cee:	693a      	ldr	r2, [r7, #16]
 80e1cf0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80e1cf2:	69bb      	ldr	r3, [r7, #24]
 80e1cf4:	3304      	adds	r3, #4
 80e1cf6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80e1cf8:	2300      	movs	r3, #0
 80e1cfa:	617b      	str	r3, [r7, #20]
 80e1cfc:	e020      	b.n	80e1d40 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e1cfe:	697b      	ldr	r3, [r7, #20]
 80e1d00:	3303      	adds	r3, #3
 80e1d02:	687a      	ldr	r2, [r7, #4]
 80e1d04:	4413      	add	r3, r2
 80e1d06:	781b      	ldrb	r3, [r3, #0]
 80e1d08:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80e1d0a:	697b      	ldr	r3, [r7, #20]
 80e1d0c:	3302      	adds	r3, #2
 80e1d0e:	6879      	ldr	r1, [r7, #4]
 80e1d10:	440b      	add	r3, r1
 80e1d12:	781b      	ldrb	r3, [r3, #0]
 80e1d14:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e1d16:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80e1d18:	697b      	ldr	r3, [r7, #20]
 80e1d1a:	3301      	adds	r3, #1
 80e1d1c:	6879      	ldr	r1, [r7, #4]
 80e1d1e:	440b      	add	r3, r1
 80e1d20:	781b      	ldrb	r3, [r3, #0]
 80e1d22:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80e1d24:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80e1d26:	6879      	ldr	r1, [r7, #4]
 80e1d28:	697a      	ldr	r2, [r7, #20]
 80e1d2a:	440a      	add	r2, r1
 80e1d2c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80e1d2e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e1d30:	69bb      	ldr	r3, [r7, #24]
 80e1d32:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80e1d34:	69bb      	ldr	r3, [r7, #24]
 80e1d36:	3304      	adds	r3, #4
 80e1d38:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80e1d3a:	697b      	ldr	r3, [r7, #20]
 80e1d3c:	3304      	adds	r3, #4
 80e1d3e:	617b      	str	r3, [r7, #20]
 80e1d40:	68bb      	ldr	r3, [r7, #8]
 80e1d42:	68db      	ldr	r3, [r3, #12]
 80e1d44:	0c1b      	lsrs	r3, r3, #16
 80e1d46:	4a06      	ldr	r2, [pc, #24]	; (80e1d60 <FDCAN_CopyMessageToRAM+0xf8>)
 80e1d48:	5cd3      	ldrb	r3, [r2, r3]
 80e1d4a:	461a      	mov	r2, r3
 80e1d4c:	697b      	ldr	r3, [r7, #20]
 80e1d4e:	4293      	cmp	r3, r2
 80e1d50:	d3d5      	bcc.n	80e1cfe <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80e1d52:	bf00      	nop
 80e1d54:	bf00      	nop
 80e1d56:	3724      	adds	r7, #36	; 0x24
 80e1d58:	46bd      	mov	sp, r7
 80e1d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1d5e:	4770      	bx	lr
 80e1d60:	080e40bc 	.word	0x080e40bc

080e1d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80e1d64:	b480      	push	{r7}
 80e1d66:	b089      	sub	sp, #36	; 0x24
 80e1d68:	af00      	add	r7, sp, #0
 80e1d6a:	6078      	str	r0, [r7, #4]
 80e1d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80e1d6e:	2300      	movs	r3, #0
 80e1d70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80e1d72:	4b86      	ldr	r3, [pc, #536]	; (80e1f8c <HAL_GPIO_Init+0x228>)
 80e1d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80e1d76:	e18c      	b.n	80e2092 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80e1d78:	683b      	ldr	r3, [r7, #0]
 80e1d7a:	681a      	ldr	r2, [r3, #0]
 80e1d7c:	2101      	movs	r1, #1
 80e1d7e:	69fb      	ldr	r3, [r7, #28]
 80e1d80:	fa01 f303 	lsl.w	r3, r1, r3
 80e1d84:	4013      	ands	r3, r2
 80e1d86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80e1d88:	693b      	ldr	r3, [r7, #16]
 80e1d8a:	2b00      	cmp	r3, #0
 80e1d8c:	f000 817e 	beq.w	80e208c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80e1d90:	683b      	ldr	r3, [r7, #0]
 80e1d92:	685b      	ldr	r3, [r3, #4]
 80e1d94:	f003 0303 	and.w	r3, r3, #3
 80e1d98:	2b01      	cmp	r3, #1
 80e1d9a:	d005      	beq.n	80e1da8 <HAL_GPIO_Init+0x44>
 80e1d9c:	683b      	ldr	r3, [r7, #0]
 80e1d9e:	685b      	ldr	r3, [r3, #4]
 80e1da0:	f003 0303 	and.w	r3, r3, #3
 80e1da4:	2b02      	cmp	r3, #2
 80e1da6:	d130      	bne.n	80e1e0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80e1da8:	687b      	ldr	r3, [r7, #4]
 80e1daa:	689b      	ldr	r3, [r3, #8]
 80e1dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80e1dae:	69fb      	ldr	r3, [r7, #28]
 80e1db0:	005b      	lsls	r3, r3, #1
 80e1db2:	2203      	movs	r2, #3
 80e1db4:	fa02 f303 	lsl.w	r3, r2, r3
 80e1db8:	43db      	mvns	r3, r3
 80e1dba:	69ba      	ldr	r2, [r7, #24]
 80e1dbc:	4013      	ands	r3, r2
 80e1dbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80e1dc0:	683b      	ldr	r3, [r7, #0]
 80e1dc2:	68da      	ldr	r2, [r3, #12]
 80e1dc4:	69fb      	ldr	r3, [r7, #28]
 80e1dc6:	005b      	lsls	r3, r3, #1
 80e1dc8:	fa02 f303 	lsl.w	r3, r2, r3
 80e1dcc:	69ba      	ldr	r2, [r7, #24]
 80e1dce:	4313      	orrs	r3, r2
 80e1dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80e1dd2:	687b      	ldr	r3, [r7, #4]
 80e1dd4:	69ba      	ldr	r2, [r7, #24]
 80e1dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80e1dd8:	687b      	ldr	r3, [r7, #4]
 80e1dda:	685b      	ldr	r3, [r3, #4]
 80e1ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80e1dde:	2201      	movs	r2, #1
 80e1de0:	69fb      	ldr	r3, [r7, #28]
 80e1de2:	fa02 f303 	lsl.w	r3, r2, r3
 80e1de6:	43db      	mvns	r3, r3
 80e1de8:	69ba      	ldr	r2, [r7, #24]
 80e1dea:	4013      	ands	r3, r2
 80e1dec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80e1dee:	683b      	ldr	r3, [r7, #0]
 80e1df0:	685b      	ldr	r3, [r3, #4]
 80e1df2:	091b      	lsrs	r3, r3, #4
 80e1df4:	f003 0201 	and.w	r2, r3, #1
 80e1df8:	69fb      	ldr	r3, [r7, #28]
 80e1dfa:	fa02 f303 	lsl.w	r3, r2, r3
 80e1dfe:	69ba      	ldr	r2, [r7, #24]
 80e1e00:	4313      	orrs	r3, r2
 80e1e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80e1e04:	687b      	ldr	r3, [r7, #4]
 80e1e06:	69ba      	ldr	r2, [r7, #24]
 80e1e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80e1e0a:	683b      	ldr	r3, [r7, #0]
 80e1e0c:	685b      	ldr	r3, [r3, #4]
 80e1e0e:	f003 0303 	and.w	r3, r3, #3
 80e1e12:	2b03      	cmp	r3, #3
 80e1e14:	d017      	beq.n	80e1e46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80e1e16:	687b      	ldr	r3, [r7, #4]
 80e1e18:	68db      	ldr	r3, [r3, #12]
 80e1e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80e1e1c:	69fb      	ldr	r3, [r7, #28]
 80e1e1e:	005b      	lsls	r3, r3, #1
 80e1e20:	2203      	movs	r2, #3
 80e1e22:	fa02 f303 	lsl.w	r3, r2, r3
 80e1e26:	43db      	mvns	r3, r3
 80e1e28:	69ba      	ldr	r2, [r7, #24]
 80e1e2a:	4013      	ands	r3, r2
 80e1e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80e1e2e:	683b      	ldr	r3, [r7, #0]
 80e1e30:	689a      	ldr	r2, [r3, #8]
 80e1e32:	69fb      	ldr	r3, [r7, #28]
 80e1e34:	005b      	lsls	r3, r3, #1
 80e1e36:	fa02 f303 	lsl.w	r3, r2, r3
 80e1e3a:	69ba      	ldr	r2, [r7, #24]
 80e1e3c:	4313      	orrs	r3, r2
 80e1e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80e1e40:	687b      	ldr	r3, [r7, #4]
 80e1e42:	69ba      	ldr	r2, [r7, #24]
 80e1e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80e1e46:	683b      	ldr	r3, [r7, #0]
 80e1e48:	685b      	ldr	r3, [r3, #4]
 80e1e4a:	f003 0303 	and.w	r3, r3, #3
 80e1e4e:	2b02      	cmp	r3, #2
 80e1e50:	d123      	bne.n	80e1e9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80e1e52:	69fb      	ldr	r3, [r7, #28]
 80e1e54:	08da      	lsrs	r2, r3, #3
 80e1e56:	687b      	ldr	r3, [r7, #4]
 80e1e58:	3208      	adds	r2, #8
 80e1e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80e1e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80e1e60:	69fb      	ldr	r3, [r7, #28]
 80e1e62:	f003 0307 	and.w	r3, r3, #7
 80e1e66:	009b      	lsls	r3, r3, #2
 80e1e68:	220f      	movs	r2, #15
 80e1e6a:	fa02 f303 	lsl.w	r3, r2, r3
 80e1e6e:	43db      	mvns	r3, r3
 80e1e70:	69ba      	ldr	r2, [r7, #24]
 80e1e72:	4013      	ands	r3, r2
 80e1e74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80e1e76:	683b      	ldr	r3, [r7, #0]
 80e1e78:	691a      	ldr	r2, [r3, #16]
 80e1e7a:	69fb      	ldr	r3, [r7, #28]
 80e1e7c:	f003 0307 	and.w	r3, r3, #7
 80e1e80:	009b      	lsls	r3, r3, #2
 80e1e82:	fa02 f303 	lsl.w	r3, r2, r3
 80e1e86:	69ba      	ldr	r2, [r7, #24]
 80e1e88:	4313      	orrs	r3, r2
 80e1e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80e1e8c:	69fb      	ldr	r3, [r7, #28]
 80e1e8e:	08da      	lsrs	r2, r3, #3
 80e1e90:	687b      	ldr	r3, [r7, #4]
 80e1e92:	3208      	adds	r2, #8
 80e1e94:	69b9      	ldr	r1, [r7, #24]
 80e1e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80e1e9a:	687b      	ldr	r3, [r7, #4]
 80e1e9c:	681b      	ldr	r3, [r3, #0]
 80e1e9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80e1ea0:	69fb      	ldr	r3, [r7, #28]
 80e1ea2:	005b      	lsls	r3, r3, #1
 80e1ea4:	2203      	movs	r2, #3
 80e1ea6:	fa02 f303 	lsl.w	r3, r2, r3
 80e1eaa:	43db      	mvns	r3, r3
 80e1eac:	69ba      	ldr	r2, [r7, #24]
 80e1eae:	4013      	ands	r3, r2
 80e1eb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80e1eb2:	683b      	ldr	r3, [r7, #0]
 80e1eb4:	685b      	ldr	r3, [r3, #4]
 80e1eb6:	f003 0203 	and.w	r2, r3, #3
 80e1eba:	69fb      	ldr	r3, [r7, #28]
 80e1ebc:	005b      	lsls	r3, r3, #1
 80e1ebe:	fa02 f303 	lsl.w	r3, r2, r3
 80e1ec2:	69ba      	ldr	r2, [r7, #24]
 80e1ec4:	4313      	orrs	r3, r2
 80e1ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80e1ec8:	687b      	ldr	r3, [r7, #4]
 80e1eca:	69ba      	ldr	r2, [r7, #24]
 80e1ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80e1ece:	683b      	ldr	r3, [r7, #0]
 80e1ed0:	685b      	ldr	r3, [r3, #4]
 80e1ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80e1ed6:	2b00      	cmp	r3, #0
 80e1ed8:	f000 80d8 	beq.w	80e208c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80e1edc:	4b2c      	ldr	r3, [pc, #176]	; (80e1f90 <HAL_GPIO_Init+0x22c>)
 80e1ede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e1ee2:	4a2b      	ldr	r2, [pc, #172]	; (80e1f90 <HAL_GPIO_Init+0x22c>)
 80e1ee4:	f043 0302 	orr.w	r3, r3, #2
 80e1ee8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80e1eec:	4b28      	ldr	r3, [pc, #160]	; (80e1f90 <HAL_GPIO_Init+0x22c>)
 80e1eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e1ef2:	f003 0302 	and.w	r3, r3, #2
 80e1ef6:	60fb      	str	r3, [r7, #12]
 80e1ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80e1efa:	4a26      	ldr	r2, [pc, #152]	; (80e1f94 <HAL_GPIO_Init+0x230>)
 80e1efc:	69fb      	ldr	r3, [r7, #28]
 80e1efe:	089b      	lsrs	r3, r3, #2
 80e1f00:	3302      	adds	r3, #2
 80e1f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80e1f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80e1f08:	69fb      	ldr	r3, [r7, #28]
 80e1f0a:	f003 0303 	and.w	r3, r3, #3
 80e1f0e:	009b      	lsls	r3, r3, #2
 80e1f10:	220f      	movs	r2, #15
 80e1f12:	fa02 f303 	lsl.w	r3, r2, r3
 80e1f16:	43db      	mvns	r3, r3
 80e1f18:	69ba      	ldr	r2, [r7, #24]
 80e1f1a:	4013      	ands	r3, r2
 80e1f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80e1f1e:	687b      	ldr	r3, [r7, #4]
 80e1f20:	4a1d      	ldr	r2, [pc, #116]	; (80e1f98 <HAL_GPIO_Init+0x234>)
 80e1f22:	4293      	cmp	r3, r2
 80e1f24:	d04a      	beq.n	80e1fbc <HAL_GPIO_Init+0x258>
 80e1f26:	687b      	ldr	r3, [r7, #4]
 80e1f28:	4a1c      	ldr	r2, [pc, #112]	; (80e1f9c <HAL_GPIO_Init+0x238>)
 80e1f2a:	4293      	cmp	r3, r2
 80e1f2c:	d02b      	beq.n	80e1f86 <HAL_GPIO_Init+0x222>
 80e1f2e:	687b      	ldr	r3, [r7, #4]
 80e1f30:	4a1b      	ldr	r2, [pc, #108]	; (80e1fa0 <HAL_GPIO_Init+0x23c>)
 80e1f32:	4293      	cmp	r3, r2
 80e1f34:	d025      	beq.n	80e1f82 <HAL_GPIO_Init+0x21e>
 80e1f36:	687b      	ldr	r3, [r7, #4]
 80e1f38:	4a1a      	ldr	r2, [pc, #104]	; (80e1fa4 <HAL_GPIO_Init+0x240>)
 80e1f3a:	4293      	cmp	r3, r2
 80e1f3c:	d01f      	beq.n	80e1f7e <HAL_GPIO_Init+0x21a>
 80e1f3e:	687b      	ldr	r3, [r7, #4]
 80e1f40:	4a19      	ldr	r2, [pc, #100]	; (80e1fa8 <HAL_GPIO_Init+0x244>)
 80e1f42:	4293      	cmp	r3, r2
 80e1f44:	d019      	beq.n	80e1f7a <HAL_GPIO_Init+0x216>
 80e1f46:	687b      	ldr	r3, [r7, #4]
 80e1f48:	4a18      	ldr	r2, [pc, #96]	; (80e1fac <HAL_GPIO_Init+0x248>)
 80e1f4a:	4293      	cmp	r3, r2
 80e1f4c:	d013      	beq.n	80e1f76 <HAL_GPIO_Init+0x212>
 80e1f4e:	687b      	ldr	r3, [r7, #4]
 80e1f50:	4a17      	ldr	r2, [pc, #92]	; (80e1fb0 <HAL_GPIO_Init+0x24c>)
 80e1f52:	4293      	cmp	r3, r2
 80e1f54:	d00d      	beq.n	80e1f72 <HAL_GPIO_Init+0x20e>
 80e1f56:	687b      	ldr	r3, [r7, #4]
 80e1f58:	4a16      	ldr	r2, [pc, #88]	; (80e1fb4 <HAL_GPIO_Init+0x250>)
 80e1f5a:	4293      	cmp	r3, r2
 80e1f5c:	d007      	beq.n	80e1f6e <HAL_GPIO_Init+0x20a>
 80e1f5e:	687b      	ldr	r3, [r7, #4]
 80e1f60:	4a15      	ldr	r2, [pc, #84]	; (80e1fb8 <HAL_GPIO_Init+0x254>)
 80e1f62:	4293      	cmp	r3, r2
 80e1f64:	d101      	bne.n	80e1f6a <HAL_GPIO_Init+0x206>
 80e1f66:	2309      	movs	r3, #9
 80e1f68:	e029      	b.n	80e1fbe <HAL_GPIO_Init+0x25a>
 80e1f6a:	230a      	movs	r3, #10
 80e1f6c:	e027      	b.n	80e1fbe <HAL_GPIO_Init+0x25a>
 80e1f6e:	2307      	movs	r3, #7
 80e1f70:	e025      	b.n	80e1fbe <HAL_GPIO_Init+0x25a>
 80e1f72:	2306      	movs	r3, #6
 80e1f74:	e023      	b.n	80e1fbe <HAL_GPIO_Init+0x25a>
 80e1f76:	2305      	movs	r3, #5
 80e1f78:	e021      	b.n	80e1fbe <HAL_GPIO_Init+0x25a>
 80e1f7a:	2304      	movs	r3, #4
 80e1f7c:	e01f      	b.n	80e1fbe <HAL_GPIO_Init+0x25a>
 80e1f7e:	2303      	movs	r3, #3
 80e1f80:	e01d      	b.n	80e1fbe <HAL_GPIO_Init+0x25a>
 80e1f82:	2302      	movs	r3, #2
 80e1f84:	e01b      	b.n	80e1fbe <HAL_GPIO_Init+0x25a>
 80e1f86:	2301      	movs	r3, #1
 80e1f88:	e019      	b.n	80e1fbe <HAL_GPIO_Init+0x25a>
 80e1f8a:	bf00      	nop
 80e1f8c:	58000080 	.word	0x58000080
 80e1f90:	58024400 	.word	0x58024400
 80e1f94:	58000400 	.word	0x58000400
 80e1f98:	58020000 	.word	0x58020000
 80e1f9c:	58020400 	.word	0x58020400
 80e1fa0:	58020800 	.word	0x58020800
 80e1fa4:	58020c00 	.word	0x58020c00
 80e1fa8:	58021000 	.word	0x58021000
 80e1fac:	58021400 	.word	0x58021400
 80e1fb0:	58021800 	.word	0x58021800
 80e1fb4:	58021c00 	.word	0x58021c00
 80e1fb8:	58022400 	.word	0x58022400
 80e1fbc:	2300      	movs	r3, #0
 80e1fbe:	69fa      	ldr	r2, [r7, #28]
 80e1fc0:	f002 0203 	and.w	r2, r2, #3
 80e1fc4:	0092      	lsls	r2, r2, #2
 80e1fc6:	4093      	lsls	r3, r2
 80e1fc8:	69ba      	ldr	r2, [r7, #24]
 80e1fca:	4313      	orrs	r3, r2
 80e1fcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80e1fce:	4938      	ldr	r1, [pc, #224]	; (80e20b0 <HAL_GPIO_Init+0x34c>)
 80e1fd0:	69fb      	ldr	r3, [r7, #28]
 80e1fd2:	089b      	lsrs	r3, r3, #2
 80e1fd4:	3302      	adds	r3, #2
 80e1fd6:	69ba      	ldr	r2, [r7, #24]
 80e1fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80e1fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80e1fe0:	681b      	ldr	r3, [r3, #0]
 80e1fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e1fe4:	693b      	ldr	r3, [r7, #16]
 80e1fe6:	43db      	mvns	r3, r3
 80e1fe8:	69ba      	ldr	r2, [r7, #24]
 80e1fea:	4013      	ands	r3, r2
 80e1fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80e1fee:	683b      	ldr	r3, [r7, #0]
 80e1ff0:	685b      	ldr	r3, [r3, #4]
 80e1ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80e1ff6:	2b00      	cmp	r3, #0
 80e1ff8:	d003      	beq.n	80e2002 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80e1ffa:	69ba      	ldr	r2, [r7, #24]
 80e1ffc:	693b      	ldr	r3, [r7, #16]
 80e1ffe:	4313      	orrs	r3, r2
 80e2000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80e2002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80e2006:	69bb      	ldr	r3, [r7, #24]
 80e2008:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80e200a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80e200e:	685b      	ldr	r3, [r3, #4]
 80e2010:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e2012:	693b      	ldr	r3, [r7, #16]
 80e2014:	43db      	mvns	r3, r3
 80e2016:	69ba      	ldr	r2, [r7, #24]
 80e2018:	4013      	ands	r3, r2
 80e201a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80e201c:	683b      	ldr	r3, [r7, #0]
 80e201e:	685b      	ldr	r3, [r3, #4]
 80e2020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e2024:	2b00      	cmp	r3, #0
 80e2026:	d003      	beq.n	80e2030 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80e2028:	69ba      	ldr	r2, [r7, #24]
 80e202a:	693b      	ldr	r3, [r7, #16]
 80e202c:	4313      	orrs	r3, r2
 80e202e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80e2030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80e2034:	69bb      	ldr	r3, [r7, #24]
 80e2036:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80e2038:	697b      	ldr	r3, [r7, #20]
 80e203a:	685b      	ldr	r3, [r3, #4]
 80e203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e203e:	693b      	ldr	r3, [r7, #16]
 80e2040:	43db      	mvns	r3, r3
 80e2042:	69ba      	ldr	r2, [r7, #24]
 80e2044:	4013      	ands	r3, r2
 80e2046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80e2048:	683b      	ldr	r3, [r7, #0]
 80e204a:	685b      	ldr	r3, [r3, #4]
 80e204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e2050:	2b00      	cmp	r3, #0
 80e2052:	d003      	beq.n	80e205c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80e2054:	69ba      	ldr	r2, [r7, #24]
 80e2056:	693b      	ldr	r3, [r7, #16]
 80e2058:	4313      	orrs	r3, r2
 80e205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80e205c:	697b      	ldr	r3, [r7, #20]
 80e205e:	69ba      	ldr	r2, [r7, #24]
 80e2060:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80e2062:	697b      	ldr	r3, [r7, #20]
 80e2064:	681b      	ldr	r3, [r3, #0]
 80e2066:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e2068:	693b      	ldr	r3, [r7, #16]
 80e206a:	43db      	mvns	r3, r3
 80e206c:	69ba      	ldr	r2, [r7, #24]
 80e206e:	4013      	ands	r3, r2
 80e2070:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80e2072:	683b      	ldr	r3, [r7, #0]
 80e2074:	685b      	ldr	r3, [r3, #4]
 80e2076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80e207a:	2b00      	cmp	r3, #0
 80e207c:	d003      	beq.n	80e2086 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80e207e:	69ba      	ldr	r2, [r7, #24]
 80e2080:	693b      	ldr	r3, [r7, #16]
 80e2082:	4313      	orrs	r3, r2
 80e2084:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80e2086:	697b      	ldr	r3, [r7, #20]
 80e2088:	69ba      	ldr	r2, [r7, #24]
 80e208a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80e208c:	69fb      	ldr	r3, [r7, #28]
 80e208e:	3301      	adds	r3, #1
 80e2090:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80e2092:	683b      	ldr	r3, [r7, #0]
 80e2094:	681a      	ldr	r2, [r3, #0]
 80e2096:	69fb      	ldr	r3, [r7, #28]
 80e2098:	fa22 f303 	lsr.w	r3, r2, r3
 80e209c:	2b00      	cmp	r3, #0
 80e209e:	f47f ae6b 	bne.w	80e1d78 <HAL_GPIO_Init+0x14>
  }
}
 80e20a2:	bf00      	nop
 80e20a4:	bf00      	nop
 80e20a6:	3724      	adds	r7, #36	; 0x24
 80e20a8:	46bd      	mov	sp, r7
 80e20aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e20ae:	4770      	bx	lr
 80e20b0:	58000400 	.word	0x58000400

080e20b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80e20b4:	b480      	push	{r7}
 80e20b6:	b083      	sub	sp, #12
 80e20b8:	af00      	add	r7, sp, #0
 80e20ba:	6078      	str	r0, [r7, #4]
 80e20bc:	460b      	mov	r3, r1
 80e20be:	807b      	strh	r3, [r7, #2]
 80e20c0:	4613      	mov	r3, r2
 80e20c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80e20c4:	787b      	ldrb	r3, [r7, #1]
 80e20c6:	2b00      	cmp	r3, #0
 80e20c8:	d003      	beq.n	80e20d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80e20ca:	887a      	ldrh	r2, [r7, #2]
 80e20cc:	687b      	ldr	r3, [r7, #4]
 80e20ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80e20d0:	e003      	b.n	80e20da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80e20d2:	887b      	ldrh	r3, [r7, #2]
 80e20d4:	041a      	lsls	r2, r3, #16
 80e20d6:	687b      	ldr	r3, [r7, #4]
 80e20d8:	619a      	str	r2, [r3, #24]
}
 80e20da:	bf00      	nop
 80e20dc:	370c      	adds	r7, #12
 80e20de:	46bd      	mov	sp, r7
 80e20e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e20e4:	4770      	bx	lr
	...

080e20e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80e20e8:	b580      	push	{r7, lr}
 80e20ea:	b084      	sub	sp, #16
 80e20ec:	af00      	add	r7, sp, #0
 80e20ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80e20f0:	4b19      	ldr	r3, [pc, #100]	; (80e2158 <HAL_PWREx_ConfigSupply+0x70>)
 80e20f2:	68db      	ldr	r3, [r3, #12]
 80e20f4:	f003 0304 	and.w	r3, r3, #4
 80e20f8:	2b04      	cmp	r3, #4
 80e20fa:	d00a      	beq.n	80e2112 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80e20fc:	4b16      	ldr	r3, [pc, #88]	; (80e2158 <HAL_PWREx_ConfigSupply+0x70>)
 80e20fe:	68db      	ldr	r3, [r3, #12]
 80e2100:	f003 0307 	and.w	r3, r3, #7
 80e2104:	687a      	ldr	r2, [r7, #4]
 80e2106:	429a      	cmp	r2, r3
 80e2108:	d001      	beq.n	80e210e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80e210a:	2301      	movs	r3, #1
 80e210c:	e01f      	b.n	80e214e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80e210e:	2300      	movs	r3, #0
 80e2110:	e01d      	b.n	80e214e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80e2112:	4b11      	ldr	r3, [pc, #68]	; (80e2158 <HAL_PWREx_ConfigSupply+0x70>)
 80e2114:	68db      	ldr	r3, [r3, #12]
 80e2116:	f023 0207 	bic.w	r2, r3, #7
 80e211a:	490f      	ldr	r1, [pc, #60]	; (80e2158 <HAL_PWREx_ConfigSupply+0x70>)
 80e211c:	687b      	ldr	r3, [r7, #4]
 80e211e:	4313      	orrs	r3, r2
 80e2120:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80e2122:	f7fe fd17 	bl	80e0b54 <HAL_GetTick>
 80e2126:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80e2128:	e009      	b.n	80e213e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80e212a:	f7fe fd13 	bl	80e0b54 <HAL_GetTick>
 80e212e:	4602      	mov	r2, r0
 80e2130:	68fb      	ldr	r3, [r7, #12]
 80e2132:	1ad3      	subs	r3, r2, r3
 80e2134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80e2138:	d901      	bls.n	80e213e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80e213a:	2301      	movs	r3, #1
 80e213c:	e007      	b.n	80e214e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80e213e:	4b06      	ldr	r3, [pc, #24]	; (80e2158 <HAL_PWREx_ConfigSupply+0x70>)
 80e2140:	685b      	ldr	r3, [r3, #4]
 80e2142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e2146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e214a:	d1ee      	bne.n	80e212a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80e214c:	2300      	movs	r3, #0
}
 80e214e:	4618      	mov	r0, r3
 80e2150:	3710      	adds	r7, #16
 80e2152:	46bd      	mov	sp, r7
 80e2154:	bd80      	pop	{r7, pc}
 80e2156:	bf00      	nop
 80e2158:	58024800 	.word	0x58024800

080e215c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80e215c:	b580      	push	{r7, lr}
 80e215e:	b08c      	sub	sp, #48	; 0x30
 80e2160:	af00      	add	r7, sp, #0
 80e2162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80e2164:	687b      	ldr	r3, [r7, #4]
 80e2166:	2b00      	cmp	r3, #0
 80e2168:	d101      	bne.n	80e216e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80e216a:	2301      	movs	r3, #1
 80e216c:	e39d      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80e216e:	687b      	ldr	r3, [r7, #4]
 80e2170:	681b      	ldr	r3, [r3, #0]
 80e2172:	f003 0301 	and.w	r3, r3, #1
 80e2176:	2b00      	cmp	r3, #0
 80e2178:	f000 8087 	beq.w	80e228a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e217c:	4b88      	ldr	r3, [pc, #544]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e217e:	691b      	ldr	r3, [r3, #16]
 80e2180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e2184:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e2186:	4b86      	ldr	r3, [pc, #536]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e218a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80e218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80e218e:	2b10      	cmp	r3, #16
 80e2190:	d007      	beq.n	80e21a2 <HAL_RCC_OscConfig+0x46>
 80e2192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80e2194:	2b18      	cmp	r3, #24
 80e2196:	d110      	bne.n	80e21ba <HAL_RCC_OscConfig+0x5e>
 80e2198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80e219a:	f003 0303 	and.w	r3, r3, #3
 80e219e:	2b02      	cmp	r3, #2
 80e21a0:	d10b      	bne.n	80e21ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80e21a2:	4b7f      	ldr	r3, [pc, #508]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e21a4:	681b      	ldr	r3, [r3, #0]
 80e21a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e21aa:	2b00      	cmp	r3, #0
 80e21ac:	d06c      	beq.n	80e2288 <HAL_RCC_OscConfig+0x12c>
 80e21ae:	687b      	ldr	r3, [r7, #4]
 80e21b0:	685b      	ldr	r3, [r3, #4]
 80e21b2:	2b00      	cmp	r3, #0
 80e21b4:	d168      	bne.n	80e2288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80e21b6:	2301      	movs	r3, #1
 80e21b8:	e377      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80e21ba:	687b      	ldr	r3, [r7, #4]
 80e21bc:	685b      	ldr	r3, [r3, #4]
 80e21be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e21c2:	d106      	bne.n	80e21d2 <HAL_RCC_OscConfig+0x76>
 80e21c4:	4b76      	ldr	r3, [pc, #472]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e21c6:	681b      	ldr	r3, [r3, #0]
 80e21c8:	4a75      	ldr	r2, [pc, #468]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e21ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e21ce:	6013      	str	r3, [r2, #0]
 80e21d0:	e02e      	b.n	80e2230 <HAL_RCC_OscConfig+0xd4>
 80e21d2:	687b      	ldr	r3, [r7, #4]
 80e21d4:	685b      	ldr	r3, [r3, #4]
 80e21d6:	2b00      	cmp	r3, #0
 80e21d8:	d10c      	bne.n	80e21f4 <HAL_RCC_OscConfig+0x98>
 80e21da:	4b71      	ldr	r3, [pc, #452]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e21dc:	681b      	ldr	r3, [r3, #0]
 80e21de:	4a70      	ldr	r2, [pc, #448]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e21e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e21e4:	6013      	str	r3, [r2, #0]
 80e21e6:	4b6e      	ldr	r3, [pc, #440]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e21e8:	681b      	ldr	r3, [r3, #0]
 80e21ea:	4a6d      	ldr	r2, [pc, #436]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e21ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e21f0:	6013      	str	r3, [r2, #0]
 80e21f2:	e01d      	b.n	80e2230 <HAL_RCC_OscConfig+0xd4>
 80e21f4:	687b      	ldr	r3, [r7, #4]
 80e21f6:	685b      	ldr	r3, [r3, #4]
 80e21f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e21fc:	d10c      	bne.n	80e2218 <HAL_RCC_OscConfig+0xbc>
 80e21fe:	4b68      	ldr	r3, [pc, #416]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2200:	681b      	ldr	r3, [r3, #0]
 80e2202:	4a67      	ldr	r2, [pc, #412]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80e2208:	6013      	str	r3, [r2, #0]
 80e220a:	4b65      	ldr	r3, [pc, #404]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e220c:	681b      	ldr	r3, [r3, #0]
 80e220e:	4a64      	ldr	r2, [pc, #400]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e2214:	6013      	str	r3, [r2, #0]
 80e2216:	e00b      	b.n	80e2230 <HAL_RCC_OscConfig+0xd4>
 80e2218:	4b61      	ldr	r3, [pc, #388]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e221a:	681b      	ldr	r3, [r3, #0]
 80e221c:	4a60      	ldr	r2, [pc, #384]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e2222:	6013      	str	r3, [r2, #0]
 80e2224:	4b5e      	ldr	r3, [pc, #376]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2226:	681b      	ldr	r3, [r3, #0]
 80e2228:	4a5d      	ldr	r2, [pc, #372]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e222a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e222e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80e2230:	687b      	ldr	r3, [r7, #4]
 80e2232:	685b      	ldr	r3, [r3, #4]
 80e2234:	2b00      	cmp	r3, #0
 80e2236:	d013      	beq.n	80e2260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2238:	f7fe fc8c 	bl	80e0b54 <HAL_GetTick>
 80e223c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e223e:	e008      	b.n	80e2252 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80e2240:	f7fe fc88 	bl	80e0b54 <HAL_GetTick>
 80e2244:	4602      	mov	r2, r0
 80e2246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2248:	1ad3      	subs	r3, r2, r3
 80e224a:	2b64      	cmp	r3, #100	; 0x64
 80e224c:	d901      	bls.n	80e2252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80e224e:	2303      	movs	r3, #3
 80e2250:	e32b      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e2252:	4b53      	ldr	r3, [pc, #332]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2254:	681b      	ldr	r3, [r3, #0]
 80e2256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e225a:	2b00      	cmp	r3, #0
 80e225c:	d0f0      	beq.n	80e2240 <HAL_RCC_OscConfig+0xe4>
 80e225e:	e014      	b.n	80e228a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2260:	f7fe fc78 	bl	80e0b54 <HAL_GetTick>
 80e2264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80e2266:	e008      	b.n	80e227a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80e2268:	f7fe fc74 	bl	80e0b54 <HAL_GetTick>
 80e226c:	4602      	mov	r2, r0
 80e226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2270:	1ad3      	subs	r3, r2, r3
 80e2272:	2b64      	cmp	r3, #100	; 0x64
 80e2274:	d901      	bls.n	80e227a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80e2276:	2303      	movs	r3, #3
 80e2278:	e317      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80e227a:	4b49      	ldr	r3, [pc, #292]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e227c:	681b      	ldr	r3, [r3, #0]
 80e227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e2282:	2b00      	cmp	r3, #0
 80e2284:	d1f0      	bne.n	80e2268 <HAL_RCC_OscConfig+0x10c>
 80e2286:	e000      	b.n	80e228a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80e2288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80e228a:	687b      	ldr	r3, [r7, #4]
 80e228c:	681b      	ldr	r3, [r3, #0]
 80e228e:	f003 0302 	and.w	r3, r3, #2
 80e2292:	2b00      	cmp	r3, #0
 80e2294:	f000 808c 	beq.w	80e23b0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e2298:	4b41      	ldr	r3, [pc, #260]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e229a:	691b      	ldr	r3, [r3, #16]
 80e229c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e22a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e22a2:	4b3f      	ldr	r3, [pc, #252]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e22a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e22a6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80e22a8:	6a3b      	ldr	r3, [r7, #32]
 80e22aa:	2b00      	cmp	r3, #0
 80e22ac:	d007      	beq.n	80e22be <HAL_RCC_OscConfig+0x162>
 80e22ae:	6a3b      	ldr	r3, [r7, #32]
 80e22b0:	2b18      	cmp	r3, #24
 80e22b2:	d137      	bne.n	80e2324 <HAL_RCC_OscConfig+0x1c8>
 80e22b4:	69fb      	ldr	r3, [r7, #28]
 80e22b6:	f003 0303 	and.w	r3, r3, #3
 80e22ba:	2b00      	cmp	r3, #0
 80e22bc:	d132      	bne.n	80e2324 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80e22be:	4b38      	ldr	r3, [pc, #224]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e22c0:	681b      	ldr	r3, [r3, #0]
 80e22c2:	f003 0304 	and.w	r3, r3, #4
 80e22c6:	2b00      	cmp	r3, #0
 80e22c8:	d005      	beq.n	80e22d6 <HAL_RCC_OscConfig+0x17a>
 80e22ca:	687b      	ldr	r3, [r7, #4]
 80e22cc:	68db      	ldr	r3, [r3, #12]
 80e22ce:	2b00      	cmp	r3, #0
 80e22d0:	d101      	bne.n	80e22d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80e22d2:	2301      	movs	r3, #1
 80e22d4:	e2e9      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80e22d6:	4b32      	ldr	r3, [pc, #200]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e22d8:	681b      	ldr	r3, [r3, #0]
 80e22da:	f023 0219 	bic.w	r2, r3, #25
 80e22de:	687b      	ldr	r3, [r7, #4]
 80e22e0:	68db      	ldr	r3, [r3, #12]
 80e22e2:	492f      	ldr	r1, [pc, #188]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e22e4:	4313      	orrs	r3, r2
 80e22e6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80e22e8:	f7fe fc34 	bl	80e0b54 <HAL_GetTick>
 80e22ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e22ee:	e008      	b.n	80e2302 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e22f0:	f7fe fc30 	bl	80e0b54 <HAL_GetTick>
 80e22f4:	4602      	mov	r2, r0
 80e22f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e22f8:	1ad3      	subs	r3, r2, r3
 80e22fa:	2b02      	cmp	r3, #2
 80e22fc:	d901      	bls.n	80e2302 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80e22fe:	2303      	movs	r3, #3
 80e2300:	e2d3      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2302:	4b27      	ldr	r3, [pc, #156]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2304:	681b      	ldr	r3, [r3, #0]
 80e2306:	f003 0304 	and.w	r3, r3, #4
 80e230a:	2b00      	cmp	r3, #0
 80e230c:	d0f0      	beq.n	80e22f0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80e230e:	4b24      	ldr	r3, [pc, #144]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2310:	685b      	ldr	r3, [r3, #4]
 80e2312:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80e2316:	687b      	ldr	r3, [r7, #4]
 80e2318:	691b      	ldr	r3, [r3, #16]
 80e231a:	061b      	lsls	r3, r3, #24
 80e231c:	4920      	ldr	r1, [pc, #128]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e231e:	4313      	orrs	r3, r2
 80e2320:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80e2322:	e045      	b.n	80e23b0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80e2324:	687b      	ldr	r3, [r7, #4]
 80e2326:	68db      	ldr	r3, [r3, #12]
 80e2328:	2b00      	cmp	r3, #0
 80e232a:	d026      	beq.n	80e237a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80e232c:	4b1c      	ldr	r3, [pc, #112]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e232e:	681b      	ldr	r3, [r3, #0]
 80e2330:	f023 0219 	bic.w	r2, r3, #25
 80e2334:	687b      	ldr	r3, [r7, #4]
 80e2336:	68db      	ldr	r3, [r3, #12]
 80e2338:	4919      	ldr	r1, [pc, #100]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e233a:	4313      	orrs	r3, r2
 80e233c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e233e:	f7fe fc09 	bl	80e0b54 <HAL_GetTick>
 80e2342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2344:	e008      	b.n	80e2358 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e2346:	f7fe fc05 	bl	80e0b54 <HAL_GetTick>
 80e234a:	4602      	mov	r2, r0
 80e234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e234e:	1ad3      	subs	r3, r2, r3
 80e2350:	2b02      	cmp	r3, #2
 80e2352:	d901      	bls.n	80e2358 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80e2354:	2303      	movs	r3, #3
 80e2356:	e2a8      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2358:	4b11      	ldr	r3, [pc, #68]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e235a:	681b      	ldr	r3, [r3, #0]
 80e235c:	f003 0304 	and.w	r3, r3, #4
 80e2360:	2b00      	cmp	r3, #0
 80e2362:	d0f0      	beq.n	80e2346 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80e2364:	4b0e      	ldr	r3, [pc, #56]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2366:	685b      	ldr	r3, [r3, #4]
 80e2368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80e236c:	687b      	ldr	r3, [r7, #4]
 80e236e:	691b      	ldr	r3, [r3, #16]
 80e2370:	061b      	lsls	r3, r3, #24
 80e2372:	490b      	ldr	r1, [pc, #44]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2374:	4313      	orrs	r3, r2
 80e2376:	604b      	str	r3, [r1, #4]
 80e2378:	e01a      	b.n	80e23b0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80e237a:	4b09      	ldr	r3, [pc, #36]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e237c:	681b      	ldr	r3, [r3, #0]
 80e237e:	4a08      	ldr	r2, [pc, #32]	; (80e23a0 <HAL_RCC_OscConfig+0x244>)
 80e2380:	f023 0301 	bic.w	r3, r3, #1
 80e2384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2386:	f7fe fbe5 	bl	80e0b54 <HAL_GetTick>
 80e238a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80e238c:	e00a      	b.n	80e23a4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e238e:	f7fe fbe1 	bl	80e0b54 <HAL_GetTick>
 80e2392:	4602      	mov	r2, r0
 80e2394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2396:	1ad3      	subs	r3, r2, r3
 80e2398:	2b02      	cmp	r3, #2
 80e239a:	d903      	bls.n	80e23a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80e239c:	2303      	movs	r3, #3
 80e239e:	e284      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
 80e23a0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80e23a4:	4b96      	ldr	r3, [pc, #600]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e23a6:	681b      	ldr	r3, [r3, #0]
 80e23a8:	f003 0304 	and.w	r3, r3, #4
 80e23ac:	2b00      	cmp	r3, #0
 80e23ae:	d1ee      	bne.n	80e238e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80e23b0:	687b      	ldr	r3, [r7, #4]
 80e23b2:	681b      	ldr	r3, [r3, #0]
 80e23b4:	f003 0310 	and.w	r3, r3, #16
 80e23b8:	2b00      	cmp	r3, #0
 80e23ba:	d06a      	beq.n	80e2492 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e23bc:	4b90      	ldr	r3, [pc, #576]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e23be:	691b      	ldr	r3, [r3, #16]
 80e23c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e23c4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e23c6:	4b8e      	ldr	r3, [pc, #568]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e23c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e23ca:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80e23cc:	69bb      	ldr	r3, [r7, #24]
 80e23ce:	2b08      	cmp	r3, #8
 80e23d0:	d007      	beq.n	80e23e2 <HAL_RCC_OscConfig+0x286>
 80e23d2:	69bb      	ldr	r3, [r7, #24]
 80e23d4:	2b18      	cmp	r3, #24
 80e23d6:	d11b      	bne.n	80e2410 <HAL_RCC_OscConfig+0x2b4>
 80e23d8:	697b      	ldr	r3, [r7, #20]
 80e23da:	f003 0303 	and.w	r3, r3, #3
 80e23de:	2b01      	cmp	r3, #1
 80e23e0:	d116      	bne.n	80e2410 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80e23e2:	4b87      	ldr	r3, [pc, #540]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e23e4:	681b      	ldr	r3, [r3, #0]
 80e23e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e23ea:	2b00      	cmp	r3, #0
 80e23ec:	d005      	beq.n	80e23fa <HAL_RCC_OscConfig+0x29e>
 80e23ee:	687b      	ldr	r3, [r7, #4]
 80e23f0:	69db      	ldr	r3, [r3, #28]
 80e23f2:	2b80      	cmp	r3, #128	; 0x80
 80e23f4:	d001      	beq.n	80e23fa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80e23f6:	2301      	movs	r3, #1
 80e23f8:	e257      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80e23fa:	4b81      	ldr	r3, [pc, #516]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e23fc:	68db      	ldr	r3, [r3, #12]
 80e23fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80e2402:	687b      	ldr	r3, [r7, #4]
 80e2404:	6a1b      	ldr	r3, [r3, #32]
 80e2406:	061b      	lsls	r3, r3, #24
 80e2408:	497d      	ldr	r1, [pc, #500]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e240a:	4313      	orrs	r3, r2
 80e240c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80e240e:	e040      	b.n	80e2492 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80e2410:	687b      	ldr	r3, [r7, #4]
 80e2412:	69db      	ldr	r3, [r3, #28]
 80e2414:	2b00      	cmp	r3, #0
 80e2416:	d023      	beq.n	80e2460 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80e2418:	4b79      	ldr	r3, [pc, #484]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e241a:	681b      	ldr	r3, [r3, #0]
 80e241c:	4a78      	ldr	r2, [pc, #480]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e241e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80e2422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2424:	f7fe fb96 	bl	80e0b54 <HAL_GetTick>
 80e2428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e242a:	e008      	b.n	80e243e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80e242c:	f7fe fb92 	bl	80e0b54 <HAL_GetTick>
 80e2430:	4602      	mov	r2, r0
 80e2432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2434:	1ad3      	subs	r3, r2, r3
 80e2436:	2b02      	cmp	r3, #2
 80e2438:	d901      	bls.n	80e243e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80e243a:	2303      	movs	r3, #3
 80e243c:	e235      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e243e:	4b70      	ldr	r3, [pc, #448]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e2440:	681b      	ldr	r3, [r3, #0]
 80e2442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2446:	2b00      	cmp	r3, #0
 80e2448:	d0f0      	beq.n	80e242c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80e244a:	4b6d      	ldr	r3, [pc, #436]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e244c:	68db      	ldr	r3, [r3, #12]
 80e244e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80e2452:	687b      	ldr	r3, [r7, #4]
 80e2454:	6a1b      	ldr	r3, [r3, #32]
 80e2456:	061b      	lsls	r3, r3, #24
 80e2458:	4969      	ldr	r1, [pc, #420]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e245a:	4313      	orrs	r3, r2
 80e245c:	60cb      	str	r3, [r1, #12]
 80e245e:	e018      	b.n	80e2492 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80e2460:	4b67      	ldr	r3, [pc, #412]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e2462:	681b      	ldr	r3, [r3, #0]
 80e2464:	4a66      	ldr	r2, [pc, #408]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e2466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80e246a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e246c:	f7fe fb72 	bl	80e0b54 <HAL_GetTick>
 80e2470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80e2472:	e008      	b.n	80e2486 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80e2474:	f7fe fb6e 	bl	80e0b54 <HAL_GetTick>
 80e2478:	4602      	mov	r2, r0
 80e247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e247c:	1ad3      	subs	r3, r2, r3
 80e247e:	2b02      	cmp	r3, #2
 80e2480:	d901      	bls.n	80e2486 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80e2482:	2303      	movs	r3, #3
 80e2484:	e211      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80e2486:	4b5e      	ldr	r3, [pc, #376]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e2488:	681b      	ldr	r3, [r3, #0]
 80e248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e248e:	2b00      	cmp	r3, #0
 80e2490:	d1f0      	bne.n	80e2474 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80e2492:	687b      	ldr	r3, [r7, #4]
 80e2494:	681b      	ldr	r3, [r3, #0]
 80e2496:	f003 0308 	and.w	r3, r3, #8
 80e249a:	2b00      	cmp	r3, #0
 80e249c:	d036      	beq.n	80e250c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80e249e:	687b      	ldr	r3, [r7, #4]
 80e24a0:	695b      	ldr	r3, [r3, #20]
 80e24a2:	2b00      	cmp	r3, #0
 80e24a4:	d019      	beq.n	80e24da <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80e24a6:	4b56      	ldr	r3, [pc, #344]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e24a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e24aa:	4a55      	ldr	r2, [pc, #340]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e24ac:	f043 0301 	orr.w	r3, r3, #1
 80e24b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e24b2:	f7fe fb4f 	bl	80e0b54 <HAL_GetTick>
 80e24b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80e24b8:	e008      	b.n	80e24cc <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80e24ba:	f7fe fb4b 	bl	80e0b54 <HAL_GetTick>
 80e24be:	4602      	mov	r2, r0
 80e24c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e24c2:	1ad3      	subs	r3, r2, r3
 80e24c4:	2b02      	cmp	r3, #2
 80e24c6:	d901      	bls.n	80e24cc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80e24c8:	2303      	movs	r3, #3
 80e24ca:	e1ee      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80e24cc:	4b4c      	ldr	r3, [pc, #304]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e24ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e24d0:	f003 0302 	and.w	r3, r3, #2
 80e24d4:	2b00      	cmp	r3, #0
 80e24d6:	d0f0      	beq.n	80e24ba <HAL_RCC_OscConfig+0x35e>
 80e24d8:	e018      	b.n	80e250c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80e24da:	4b49      	ldr	r3, [pc, #292]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e24dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e24de:	4a48      	ldr	r2, [pc, #288]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e24e0:	f023 0301 	bic.w	r3, r3, #1
 80e24e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e24e6:	f7fe fb35 	bl	80e0b54 <HAL_GetTick>
 80e24ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80e24ec:	e008      	b.n	80e2500 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80e24ee:	f7fe fb31 	bl	80e0b54 <HAL_GetTick>
 80e24f2:	4602      	mov	r2, r0
 80e24f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e24f6:	1ad3      	subs	r3, r2, r3
 80e24f8:	2b02      	cmp	r3, #2
 80e24fa:	d901      	bls.n	80e2500 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80e24fc:	2303      	movs	r3, #3
 80e24fe:	e1d4      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80e2500:	4b3f      	ldr	r3, [pc, #252]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e2502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e2504:	f003 0302 	and.w	r3, r3, #2
 80e2508:	2b00      	cmp	r3, #0
 80e250a:	d1f0      	bne.n	80e24ee <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80e250c:	687b      	ldr	r3, [r7, #4]
 80e250e:	681b      	ldr	r3, [r3, #0]
 80e2510:	f003 0320 	and.w	r3, r3, #32
 80e2514:	2b00      	cmp	r3, #0
 80e2516:	d036      	beq.n	80e2586 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80e2518:	687b      	ldr	r3, [r7, #4]
 80e251a:	699b      	ldr	r3, [r3, #24]
 80e251c:	2b00      	cmp	r3, #0
 80e251e:	d019      	beq.n	80e2554 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80e2520:	4b37      	ldr	r3, [pc, #220]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e2522:	681b      	ldr	r3, [r3, #0]
 80e2524:	4a36      	ldr	r2, [pc, #216]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e2526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80e252a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80e252c:	f7fe fb12 	bl	80e0b54 <HAL_GetTick>
 80e2530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80e2532:	e008      	b.n	80e2546 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80e2534:	f7fe fb0e 	bl	80e0b54 <HAL_GetTick>
 80e2538:	4602      	mov	r2, r0
 80e253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e253c:	1ad3      	subs	r3, r2, r3
 80e253e:	2b02      	cmp	r3, #2
 80e2540:	d901      	bls.n	80e2546 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80e2542:	2303      	movs	r3, #3
 80e2544:	e1b1      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80e2546:	4b2e      	ldr	r3, [pc, #184]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e2548:	681b      	ldr	r3, [r3, #0]
 80e254a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e254e:	2b00      	cmp	r3, #0
 80e2550:	d0f0      	beq.n	80e2534 <HAL_RCC_OscConfig+0x3d8>
 80e2552:	e018      	b.n	80e2586 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80e2554:	4b2a      	ldr	r3, [pc, #168]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e2556:	681b      	ldr	r3, [r3, #0]
 80e2558:	4a29      	ldr	r2, [pc, #164]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e255a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80e255e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80e2560:	f7fe faf8 	bl	80e0b54 <HAL_GetTick>
 80e2564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80e2566:	e008      	b.n	80e257a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80e2568:	f7fe faf4 	bl	80e0b54 <HAL_GetTick>
 80e256c:	4602      	mov	r2, r0
 80e256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2570:	1ad3      	subs	r3, r2, r3
 80e2572:	2b02      	cmp	r3, #2
 80e2574:	d901      	bls.n	80e257a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80e2576:	2303      	movs	r3, #3
 80e2578:	e197      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80e257a:	4b21      	ldr	r3, [pc, #132]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e257c:	681b      	ldr	r3, [r3, #0]
 80e257e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e2582:	2b00      	cmp	r3, #0
 80e2584:	d1f0      	bne.n	80e2568 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80e2586:	687b      	ldr	r3, [r7, #4]
 80e2588:	681b      	ldr	r3, [r3, #0]
 80e258a:	f003 0304 	and.w	r3, r3, #4
 80e258e:	2b00      	cmp	r3, #0
 80e2590:	f000 8086 	beq.w	80e26a0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80e2594:	4b1b      	ldr	r3, [pc, #108]	; (80e2604 <HAL_RCC_OscConfig+0x4a8>)
 80e2596:	681b      	ldr	r3, [r3, #0]
 80e2598:	4a1a      	ldr	r2, [pc, #104]	; (80e2604 <HAL_RCC_OscConfig+0x4a8>)
 80e259a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e259e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80e25a0:	f7fe fad8 	bl	80e0b54 <HAL_GetTick>
 80e25a4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e25a6:	e008      	b.n	80e25ba <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80e25a8:	f7fe fad4 	bl	80e0b54 <HAL_GetTick>
 80e25ac:	4602      	mov	r2, r0
 80e25ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e25b0:	1ad3      	subs	r3, r2, r3
 80e25b2:	2b64      	cmp	r3, #100	; 0x64
 80e25b4:	d901      	bls.n	80e25ba <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80e25b6:	2303      	movs	r3, #3
 80e25b8:	e177      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e25ba:	4b12      	ldr	r3, [pc, #72]	; (80e2604 <HAL_RCC_OscConfig+0x4a8>)
 80e25bc:	681b      	ldr	r3, [r3, #0]
 80e25be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e25c2:	2b00      	cmp	r3, #0
 80e25c4:	d0f0      	beq.n	80e25a8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80e25c6:	687b      	ldr	r3, [r7, #4]
 80e25c8:	689b      	ldr	r3, [r3, #8]
 80e25ca:	2b01      	cmp	r3, #1
 80e25cc:	d106      	bne.n	80e25dc <HAL_RCC_OscConfig+0x480>
 80e25ce:	4b0c      	ldr	r3, [pc, #48]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e25d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e25d2:	4a0b      	ldr	r2, [pc, #44]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e25d4:	f043 0301 	orr.w	r3, r3, #1
 80e25d8:	6713      	str	r3, [r2, #112]	; 0x70
 80e25da:	e032      	b.n	80e2642 <HAL_RCC_OscConfig+0x4e6>
 80e25dc:	687b      	ldr	r3, [r7, #4]
 80e25de:	689b      	ldr	r3, [r3, #8]
 80e25e0:	2b00      	cmp	r3, #0
 80e25e2:	d111      	bne.n	80e2608 <HAL_RCC_OscConfig+0x4ac>
 80e25e4:	4b06      	ldr	r3, [pc, #24]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e25e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e25e8:	4a05      	ldr	r2, [pc, #20]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e25ea:	f023 0301 	bic.w	r3, r3, #1
 80e25ee:	6713      	str	r3, [r2, #112]	; 0x70
 80e25f0:	4b03      	ldr	r3, [pc, #12]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e25f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e25f4:	4a02      	ldr	r2, [pc, #8]	; (80e2600 <HAL_RCC_OscConfig+0x4a4>)
 80e25f6:	f023 0304 	bic.w	r3, r3, #4
 80e25fa:	6713      	str	r3, [r2, #112]	; 0x70
 80e25fc:	e021      	b.n	80e2642 <HAL_RCC_OscConfig+0x4e6>
 80e25fe:	bf00      	nop
 80e2600:	58024400 	.word	0x58024400
 80e2604:	58024800 	.word	0x58024800
 80e2608:	687b      	ldr	r3, [r7, #4]
 80e260a:	689b      	ldr	r3, [r3, #8]
 80e260c:	2b05      	cmp	r3, #5
 80e260e:	d10c      	bne.n	80e262a <HAL_RCC_OscConfig+0x4ce>
 80e2610:	4b83      	ldr	r3, [pc, #524]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2614:	4a82      	ldr	r2, [pc, #520]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2616:	f043 0304 	orr.w	r3, r3, #4
 80e261a:	6713      	str	r3, [r2, #112]	; 0x70
 80e261c:	4b80      	ldr	r3, [pc, #512]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2620:	4a7f      	ldr	r2, [pc, #508]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2622:	f043 0301 	orr.w	r3, r3, #1
 80e2626:	6713      	str	r3, [r2, #112]	; 0x70
 80e2628:	e00b      	b.n	80e2642 <HAL_RCC_OscConfig+0x4e6>
 80e262a:	4b7d      	ldr	r3, [pc, #500]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e262e:	4a7c      	ldr	r2, [pc, #496]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2630:	f023 0301 	bic.w	r3, r3, #1
 80e2634:	6713      	str	r3, [r2, #112]	; 0x70
 80e2636:	4b7a      	ldr	r3, [pc, #488]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e263a:	4a79      	ldr	r2, [pc, #484]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e263c:	f023 0304 	bic.w	r3, r3, #4
 80e2640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80e2642:	687b      	ldr	r3, [r7, #4]
 80e2644:	689b      	ldr	r3, [r3, #8]
 80e2646:	2b00      	cmp	r3, #0
 80e2648:	d015      	beq.n	80e2676 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e264a:	f7fe fa83 	bl	80e0b54 <HAL_GetTick>
 80e264e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e2650:	e00a      	b.n	80e2668 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80e2652:	f7fe fa7f 	bl	80e0b54 <HAL_GetTick>
 80e2656:	4602      	mov	r2, r0
 80e2658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e265a:	1ad3      	subs	r3, r2, r3
 80e265c:	f241 3288 	movw	r2, #5000	; 0x1388
 80e2660:	4293      	cmp	r3, r2
 80e2662:	d901      	bls.n	80e2668 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80e2664:	2303      	movs	r3, #3
 80e2666:	e120      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e2668:	4b6d      	ldr	r3, [pc, #436]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e266c:	f003 0302 	and.w	r3, r3, #2
 80e2670:	2b00      	cmp	r3, #0
 80e2672:	d0ee      	beq.n	80e2652 <HAL_RCC_OscConfig+0x4f6>
 80e2674:	e014      	b.n	80e26a0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e2676:	f7fe fa6d 	bl	80e0b54 <HAL_GetTick>
 80e267a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80e267c:	e00a      	b.n	80e2694 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80e267e:	f7fe fa69 	bl	80e0b54 <HAL_GetTick>
 80e2682:	4602      	mov	r2, r0
 80e2684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2686:	1ad3      	subs	r3, r2, r3
 80e2688:	f241 3288 	movw	r2, #5000	; 0x1388
 80e268c:	4293      	cmp	r3, r2
 80e268e:	d901      	bls.n	80e2694 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80e2690:	2303      	movs	r3, #3
 80e2692:	e10a      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80e2694:	4b62      	ldr	r3, [pc, #392]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2698:	f003 0302 	and.w	r3, r3, #2
 80e269c:	2b00      	cmp	r3, #0
 80e269e:	d1ee      	bne.n	80e267e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80e26a0:	687b      	ldr	r3, [r7, #4]
 80e26a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e26a4:	2b00      	cmp	r3, #0
 80e26a6:	f000 80ff 	beq.w	80e28a8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80e26aa:	4b5d      	ldr	r3, [pc, #372]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e26ac:	691b      	ldr	r3, [r3, #16]
 80e26ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e26b2:	2b18      	cmp	r3, #24
 80e26b4:	f000 80ba 	beq.w	80e282c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80e26b8:	687b      	ldr	r3, [r7, #4]
 80e26ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e26bc:	2b02      	cmp	r3, #2
 80e26be:	f040 8095 	bne.w	80e27ec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80e26c2:	4b57      	ldr	r3, [pc, #348]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e26c4:	681b      	ldr	r3, [r3, #0]
 80e26c6:	4a56      	ldr	r2, [pc, #344]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e26c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80e26cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e26ce:	f7fe fa41 	bl	80e0b54 <HAL_GetTick>
 80e26d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e26d4:	e008      	b.n	80e26e8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e26d6:	f7fe fa3d 	bl	80e0b54 <HAL_GetTick>
 80e26da:	4602      	mov	r2, r0
 80e26dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e26de:	1ad3      	subs	r3, r2, r3
 80e26e0:	2b02      	cmp	r3, #2
 80e26e2:	d901      	bls.n	80e26e8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80e26e4:	2303      	movs	r3, #3
 80e26e6:	e0e0      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e26e8:	4b4d      	ldr	r3, [pc, #308]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e26ea:	681b      	ldr	r3, [r3, #0]
 80e26ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e26f0:	2b00      	cmp	r3, #0
 80e26f2:	d1f0      	bne.n	80e26d6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80e26f4:	4b4a      	ldr	r3, [pc, #296]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e26f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80e26f8:	4b4a      	ldr	r3, [pc, #296]	; (80e2824 <HAL_RCC_OscConfig+0x6c8>)
 80e26fa:	4013      	ands	r3, r2
 80e26fc:	687a      	ldr	r2, [r7, #4]
 80e26fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80e2700:	687a      	ldr	r2, [r7, #4]
 80e2702:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80e2704:	0112      	lsls	r2, r2, #4
 80e2706:	430a      	orrs	r2, r1
 80e2708:	4945      	ldr	r1, [pc, #276]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e270a:	4313      	orrs	r3, r2
 80e270c:	628b      	str	r3, [r1, #40]	; 0x28
 80e270e:	687b      	ldr	r3, [r7, #4]
 80e2710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2712:	3b01      	subs	r3, #1
 80e2714:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e2718:	687b      	ldr	r3, [r7, #4]
 80e271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e271c:	3b01      	subs	r3, #1
 80e271e:	025b      	lsls	r3, r3, #9
 80e2720:	b29b      	uxth	r3, r3
 80e2722:	431a      	orrs	r2, r3
 80e2724:	687b      	ldr	r3, [r7, #4]
 80e2726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e2728:	3b01      	subs	r3, #1
 80e272a:	041b      	lsls	r3, r3, #16
 80e272c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e2730:	431a      	orrs	r2, r3
 80e2732:	687b      	ldr	r3, [r7, #4]
 80e2734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e2736:	3b01      	subs	r3, #1
 80e2738:	061b      	lsls	r3, r3, #24
 80e273a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e273e:	4938      	ldr	r1, [pc, #224]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2740:	4313      	orrs	r3, r2
 80e2742:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80e2744:	4b36      	ldr	r3, [pc, #216]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2748:	4a35      	ldr	r2, [pc, #212]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e274a:	f023 0301 	bic.w	r3, r3, #1
 80e274e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80e2750:	4b33      	ldr	r3, [pc, #204]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80e2754:	4b34      	ldr	r3, [pc, #208]	; (80e2828 <HAL_RCC_OscConfig+0x6cc>)
 80e2756:	4013      	ands	r3, r2
 80e2758:	687a      	ldr	r2, [r7, #4]
 80e275a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80e275c:	00d2      	lsls	r2, r2, #3
 80e275e:	4930      	ldr	r1, [pc, #192]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2760:	4313      	orrs	r3, r2
 80e2762:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80e2764:	4b2e      	ldr	r3, [pc, #184]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2768:	f023 020c 	bic.w	r2, r3, #12
 80e276c:	687b      	ldr	r3, [r7, #4]
 80e276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e2770:	492b      	ldr	r1, [pc, #172]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2772:	4313      	orrs	r3, r2
 80e2774:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80e2776:	4b2a      	ldr	r3, [pc, #168]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e277a:	f023 0202 	bic.w	r2, r3, #2
 80e277e:	687b      	ldr	r3, [r7, #4]
 80e2780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e2782:	4927      	ldr	r1, [pc, #156]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2784:	4313      	orrs	r3, r2
 80e2786:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80e2788:	4b25      	ldr	r3, [pc, #148]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e278c:	4a24      	ldr	r2, [pc, #144]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e278e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e2792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2794:	4b22      	ldr	r3, [pc, #136]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2798:	4a21      	ldr	r2, [pc, #132]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e279a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e279e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80e27a0:	4b1f      	ldr	r3, [pc, #124]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e27a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e27a4:	4a1e      	ldr	r2, [pc, #120]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e27a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80e27aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80e27ac:	4b1c      	ldr	r3, [pc, #112]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e27ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e27b0:	4a1b      	ldr	r2, [pc, #108]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e27b2:	f043 0301 	orr.w	r3, r3, #1
 80e27b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80e27b8:	4b19      	ldr	r3, [pc, #100]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e27ba:	681b      	ldr	r3, [r3, #0]
 80e27bc:	4a18      	ldr	r2, [pc, #96]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e27be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80e27c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e27c4:	f7fe f9c6 	bl	80e0b54 <HAL_GetTick>
 80e27c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e27ca:	e008      	b.n	80e27de <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e27cc:	f7fe f9c2 	bl	80e0b54 <HAL_GetTick>
 80e27d0:	4602      	mov	r2, r0
 80e27d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e27d4:	1ad3      	subs	r3, r2, r3
 80e27d6:	2b02      	cmp	r3, #2
 80e27d8:	d901      	bls.n	80e27de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80e27da:	2303      	movs	r3, #3
 80e27dc:	e065      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e27de:	4b10      	ldr	r3, [pc, #64]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e27e0:	681b      	ldr	r3, [r3, #0]
 80e27e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e27e6:	2b00      	cmp	r3, #0
 80e27e8:	d0f0      	beq.n	80e27cc <HAL_RCC_OscConfig+0x670>
 80e27ea:	e05d      	b.n	80e28a8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80e27ec:	4b0c      	ldr	r3, [pc, #48]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e27ee:	681b      	ldr	r3, [r3, #0]
 80e27f0:	4a0b      	ldr	r2, [pc, #44]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e27f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80e27f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e27f8:	f7fe f9ac 	bl	80e0b54 <HAL_GetTick>
 80e27fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e27fe:	e008      	b.n	80e2812 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e2800:	f7fe f9a8 	bl	80e0b54 <HAL_GetTick>
 80e2804:	4602      	mov	r2, r0
 80e2806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2808:	1ad3      	subs	r3, r2, r3
 80e280a:	2b02      	cmp	r3, #2
 80e280c:	d901      	bls.n	80e2812 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80e280e:	2303      	movs	r3, #3
 80e2810:	e04b      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e2812:	4b03      	ldr	r3, [pc, #12]	; (80e2820 <HAL_RCC_OscConfig+0x6c4>)
 80e2814:	681b      	ldr	r3, [r3, #0]
 80e2816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e281a:	2b00      	cmp	r3, #0
 80e281c:	d1f0      	bne.n	80e2800 <HAL_RCC_OscConfig+0x6a4>
 80e281e:	e043      	b.n	80e28a8 <HAL_RCC_OscConfig+0x74c>
 80e2820:	58024400 	.word	0x58024400
 80e2824:	fffffc0c 	.word	0xfffffc0c
 80e2828:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80e282c:	4b21      	ldr	r3, [pc, #132]	; (80e28b4 <HAL_RCC_OscConfig+0x758>)
 80e282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2830:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80e2832:	4b20      	ldr	r3, [pc, #128]	; (80e28b4 <HAL_RCC_OscConfig+0x758>)
 80e2834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2836:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80e2838:	687b      	ldr	r3, [r7, #4]
 80e283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e283c:	2b01      	cmp	r3, #1
 80e283e:	d031      	beq.n	80e28a4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80e2840:	693b      	ldr	r3, [r7, #16]
 80e2842:	f003 0203 	and.w	r2, r3, #3
 80e2846:	687b      	ldr	r3, [r7, #4]
 80e2848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80e284a:	429a      	cmp	r2, r3
 80e284c:	d12a      	bne.n	80e28a4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80e284e:	693b      	ldr	r3, [r7, #16]
 80e2850:	091b      	lsrs	r3, r3, #4
 80e2852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80e2856:	687b      	ldr	r3, [r7, #4]
 80e2858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80e285a:	429a      	cmp	r2, r3
 80e285c:	d122      	bne.n	80e28a4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80e285e:	68fb      	ldr	r3, [r7, #12]
 80e2860:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e2864:	687b      	ldr	r3, [r7, #4]
 80e2866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2868:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80e286a:	429a      	cmp	r2, r3
 80e286c:	d11a      	bne.n	80e28a4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80e286e:	68fb      	ldr	r3, [r7, #12]
 80e2870:	0a5b      	lsrs	r3, r3, #9
 80e2872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e2876:	687b      	ldr	r3, [r7, #4]
 80e2878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e287a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80e287c:	429a      	cmp	r2, r3
 80e287e:	d111      	bne.n	80e28a4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80e2880:	68fb      	ldr	r3, [r7, #12]
 80e2882:	0c1b      	lsrs	r3, r3, #16
 80e2884:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e2888:	687b      	ldr	r3, [r7, #4]
 80e288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e288c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80e288e:	429a      	cmp	r2, r3
 80e2890:	d108      	bne.n	80e28a4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80e2892:	68fb      	ldr	r3, [r7, #12]
 80e2894:	0e1b      	lsrs	r3, r3, #24
 80e2896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e289a:	687b      	ldr	r3, [r7, #4]
 80e289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e289e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80e28a0:	429a      	cmp	r2, r3
 80e28a2:	d001      	beq.n	80e28a8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80e28a4:	2301      	movs	r3, #1
 80e28a6:	e000      	b.n	80e28aa <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80e28a8:	2300      	movs	r3, #0
}
 80e28aa:	4618      	mov	r0, r3
 80e28ac:	3730      	adds	r7, #48	; 0x30
 80e28ae:	46bd      	mov	sp, r7
 80e28b0:	bd80      	pop	{r7, pc}
 80e28b2:	bf00      	nop
 80e28b4:	58024400 	.word	0x58024400

080e28b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80e28b8:	b580      	push	{r7, lr}
 80e28ba:	b086      	sub	sp, #24
 80e28bc:	af00      	add	r7, sp, #0
 80e28be:	6078      	str	r0, [r7, #4]
 80e28c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80e28c2:	687b      	ldr	r3, [r7, #4]
 80e28c4:	2b00      	cmp	r3, #0
 80e28c6:	d101      	bne.n	80e28cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80e28c8:	2301      	movs	r3, #1
 80e28ca:	e19c      	b.n	80e2c06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80e28cc:	4b8a      	ldr	r3, [pc, #552]	; (80e2af8 <HAL_RCC_ClockConfig+0x240>)
 80e28ce:	681b      	ldr	r3, [r3, #0]
 80e28d0:	f003 030f 	and.w	r3, r3, #15
 80e28d4:	683a      	ldr	r2, [r7, #0]
 80e28d6:	429a      	cmp	r2, r3
 80e28d8:	d910      	bls.n	80e28fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80e28da:	4b87      	ldr	r3, [pc, #540]	; (80e2af8 <HAL_RCC_ClockConfig+0x240>)
 80e28dc:	681b      	ldr	r3, [r3, #0]
 80e28de:	f023 020f 	bic.w	r2, r3, #15
 80e28e2:	4985      	ldr	r1, [pc, #532]	; (80e2af8 <HAL_RCC_ClockConfig+0x240>)
 80e28e4:	683b      	ldr	r3, [r7, #0]
 80e28e6:	4313      	orrs	r3, r2
 80e28e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80e28ea:	4b83      	ldr	r3, [pc, #524]	; (80e2af8 <HAL_RCC_ClockConfig+0x240>)
 80e28ec:	681b      	ldr	r3, [r3, #0]
 80e28ee:	f003 030f 	and.w	r3, r3, #15
 80e28f2:	683a      	ldr	r2, [r7, #0]
 80e28f4:	429a      	cmp	r2, r3
 80e28f6:	d001      	beq.n	80e28fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80e28f8:	2301      	movs	r3, #1
 80e28fa:	e184      	b.n	80e2c06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80e28fc:	687b      	ldr	r3, [r7, #4]
 80e28fe:	681b      	ldr	r3, [r3, #0]
 80e2900:	f003 0304 	and.w	r3, r3, #4
 80e2904:	2b00      	cmp	r3, #0
 80e2906:	d010      	beq.n	80e292a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80e2908:	687b      	ldr	r3, [r7, #4]
 80e290a:	691a      	ldr	r2, [r3, #16]
 80e290c:	4b7b      	ldr	r3, [pc, #492]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e290e:	699b      	ldr	r3, [r3, #24]
 80e2910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e2914:	429a      	cmp	r2, r3
 80e2916:	d908      	bls.n	80e292a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80e2918:	4b78      	ldr	r3, [pc, #480]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e291a:	699b      	ldr	r3, [r3, #24]
 80e291c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e2920:	687b      	ldr	r3, [r7, #4]
 80e2922:	691b      	ldr	r3, [r3, #16]
 80e2924:	4975      	ldr	r1, [pc, #468]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2926:	4313      	orrs	r3, r2
 80e2928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80e292a:	687b      	ldr	r3, [r7, #4]
 80e292c:	681b      	ldr	r3, [r3, #0]
 80e292e:	f003 0308 	and.w	r3, r3, #8
 80e2932:	2b00      	cmp	r3, #0
 80e2934:	d010      	beq.n	80e2958 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80e2936:	687b      	ldr	r3, [r7, #4]
 80e2938:	695a      	ldr	r2, [r3, #20]
 80e293a:	4b70      	ldr	r3, [pc, #448]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e293c:	69db      	ldr	r3, [r3, #28]
 80e293e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e2942:	429a      	cmp	r2, r3
 80e2944:	d908      	bls.n	80e2958 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80e2946:	4b6d      	ldr	r3, [pc, #436]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2948:	69db      	ldr	r3, [r3, #28]
 80e294a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e294e:	687b      	ldr	r3, [r7, #4]
 80e2950:	695b      	ldr	r3, [r3, #20]
 80e2952:	496a      	ldr	r1, [pc, #424]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2954:	4313      	orrs	r3, r2
 80e2956:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80e2958:	687b      	ldr	r3, [r7, #4]
 80e295a:	681b      	ldr	r3, [r3, #0]
 80e295c:	f003 0310 	and.w	r3, r3, #16
 80e2960:	2b00      	cmp	r3, #0
 80e2962:	d010      	beq.n	80e2986 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80e2964:	687b      	ldr	r3, [r7, #4]
 80e2966:	699a      	ldr	r2, [r3, #24]
 80e2968:	4b64      	ldr	r3, [pc, #400]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e296a:	69db      	ldr	r3, [r3, #28]
 80e296c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80e2970:	429a      	cmp	r2, r3
 80e2972:	d908      	bls.n	80e2986 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80e2974:	4b61      	ldr	r3, [pc, #388]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2976:	69db      	ldr	r3, [r3, #28]
 80e2978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80e297c:	687b      	ldr	r3, [r7, #4]
 80e297e:	699b      	ldr	r3, [r3, #24]
 80e2980:	495e      	ldr	r1, [pc, #376]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2982:	4313      	orrs	r3, r2
 80e2984:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80e2986:	687b      	ldr	r3, [r7, #4]
 80e2988:	681b      	ldr	r3, [r3, #0]
 80e298a:	f003 0320 	and.w	r3, r3, #32
 80e298e:	2b00      	cmp	r3, #0
 80e2990:	d010      	beq.n	80e29b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80e2992:	687b      	ldr	r3, [r7, #4]
 80e2994:	69da      	ldr	r2, [r3, #28]
 80e2996:	4b59      	ldr	r3, [pc, #356]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2998:	6a1b      	ldr	r3, [r3, #32]
 80e299a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e299e:	429a      	cmp	r2, r3
 80e29a0:	d908      	bls.n	80e29b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80e29a2:	4b56      	ldr	r3, [pc, #344]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e29a4:	6a1b      	ldr	r3, [r3, #32]
 80e29a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e29aa:	687b      	ldr	r3, [r7, #4]
 80e29ac:	69db      	ldr	r3, [r3, #28]
 80e29ae:	4953      	ldr	r1, [pc, #332]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e29b0:	4313      	orrs	r3, r2
 80e29b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80e29b4:	687b      	ldr	r3, [r7, #4]
 80e29b6:	681b      	ldr	r3, [r3, #0]
 80e29b8:	f003 0302 	and.w	r3, r3, #2
 80e29bc:	2b00      	cmp	r3, #0
 80e29be:	d010      	beq.n	80e29e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80e29c0:	687b      	ldr	r3, [r7, #4]
 80e29c2:	68da      	ldr	r2, [r3, #12]
 80e29c4:	4b4d      	ldr	r3, [pc, #308]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e29c6:	699b      	ldr	r3, [r3, #24]
 80e29c8:	f003 030f 	and.w	r3, r3, #15
 80e29cc:	429a      	cmp	r2, r3
 80e29ce:	d908      	bls.n	80e29e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80e29d0:	4b4a      	ldr	r3, [pc, #296]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e29d2:	699b      	ldr	r3, [r3, #24]
 80e29d4:	f023 020f 	bic.w	r2, r3, #15
 80e29d8:	687b      	ldr	r3, [r7, #4]
 80e29da:	68db      	ldr	r3, [r3, #12]
 80e29dc:	4947      	ldr	r1, [pc, #284]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e29de:	4313      	orrs	r3, r2
 80e29e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80e29e2:	687b      	ldr	r3, [r7, #4]
 80e29e4:	681b      	ldr	r3, [r3, #0]
 80e29e6:	f003 0301 	and.w	r3, r3, #1
 80e29ea:	2b00      	cmp	r3, #0
 80e29ec:	d055      	beq.n	80e2a9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80e29ee:	4b43      	ldr	r3, [pc, #268]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e29f0:	699b      	ldr	r3, [r3, #24]
 80e29f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80e29f6:	687b      	ldr	r3, [r7, #4]
 80e29f8:	689b      	ldr	r3, [r3, #8]
 80e29fa:	4940      	ldr	r1, [pc, #256]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e29fc:	4313      	orrs	r3, r2
 80e29fe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80e2a00:	687b      	ldr	r3, [r7, #4]
 80e2a02:	685b      	ldr	r3, [r3, #4]
 80e2a04:	2b02      	cmp	r3, #2
 80e2a06:	d107      	bne.n	80e2a18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e2a08:	4b3c      	ldr	r3, [pc, #240]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2a0a:	681b      	ldr	r3, [r3, #0]
 80e2a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e2a10:	2b00      	cmp	r3, #0
 80e2a12:	d121      	bne.n	80e2a58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e2a14:	2301      	movs	r3, #1
 80e2a16:	e0f6      	b.n	80e2c06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80e2a18:	687b      	ldr	r3, [r7, #4]
 80e2a1a:	685b      	ldr	r3, [r3, #4]
 80e2a1c:	2b03      	cmp	r3, #3
 80e2a1e:	d107      	bne.n	80e2a30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e2a20:	4b36      	ldr	r3, [pc, #216]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2a22:	681b      	ldr	r3, [r3, #0]
 80e2a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e2a28:	2b00      	cmp	r3, #0
 80e2a2a:	d115      	bne.n	80e2a58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e2a2c:	2301      	movs	r3, #1
 80e2a2e:	e0ea      	b.n	80e2c06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80e2a30:	687b      	ldr	r3, [r7, #4]
 80e2a32:	685b      	ldr	r3, [r3, #4]
 80e2a34:	2b01      	cmp	r3, #1
 80e2a36:	d107      	bne.n	80e2a48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e2a38:	4b30      	ldr	r3, [pc, #192]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2a3a:	681b      	ldr	r3, [r3, #0]
 80e2a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2a40:	2b00      	cmp	r3, #0
 80e2a42:	d109      	bne.n	80e2a58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e2a44:	2301      	movs	r3, #1
 80e2a46:	e0de      	b.n	80e2c06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e2a48:	4b2c      	ldr	r3, [pc, #176]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2a4a:	681b      	ldr	r3, [r3, #0]
 80e2a4c:	f003 0304 	and.w	r3, r3, #4
 80e2a50:	2b00      	cmp	r3, #0
 80e2a52:	d101      	bne.n	80e2a58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e2a54:	2301      	movs	r3, #1
 80e2a56:	e0d6      	b.n	80e2c06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80e2a58:	4b28      	ldr	r3, [pc, #160]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2a5a:	691b      	ldr	r3, [r3, #16]
 80e2a5c:	f023 0207 	bic.w	r2, r3, #7
 80e2a60:	687b      	ldr	r3, [r7, #4]
 80e2a62:	685b      	ldr	r3, [r3, #4]
 80e2a64:	4925      	ldr	r1, [pc, #148]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2a66:	4313      	orrs	r3, r2
 80e2a68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e2a6a:	f7fe f873 	bl	80e0b54 <HAL_GetTick>
 80e2a6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80e2a70:	e00a      	b.n	80e2a88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80e2a72:	f7fe f86f 	bl	80e0b54 <HAL_GetTick>
 80e2a76:	4602      	mov	r2, r0
 80e2a78:	697b      	ldr	r3, [r7, #20]
 80e2a7a:	1ad3      	subs	r3, r2, r3
 80e2a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 80e2a80:	4293      	cmp	r3, r2
 80e2a82:	d901      	bls.n	80e2a88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80e2a84:	2303      	movs	r3, #3
 80e2a86:	e0be      	b.n	80e2c06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80e2a88:	4b1c      	ldr	r3, [pc, #112]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2a8a:	691b      	ldr	r3, [r3, #16]
 80e2a8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80e2a90:	687b      	ldr	r3, [r7, #4]
 80e2a92:	685b      	ldr	r3, [r3, #4]
 80e2a94:	00db      	lsls	r3, r3, #3
 80e2a96:	429a      	cmp	r2, r3
 80e2a98:	d1eb      	bne.n	80e2a72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80e2a9a:	687b      	ldr	r3, [r7, #4]
 80e2a9c:	681b      	ldr	r3, [r3, #0]
 80e2a9e:	f003 0302 	and.w	r3, r3, #2
 80e2aa2:	2b00      	cmp	r3, #0
 80e2aa4:	d010      	beq.n	80e2ac8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80e2aa6:	687b      	ldr	r3, [r7, #4]
 80e2aa8:	68da      	ldr	r2, [r3, #12]
 80e2aaa:	4b14      	ldr	r3, [pc, #80]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2aac:	699b      	ldr	r3, [r3, #24]
 80e2aae:	f003 030f 	and.w	r3, r3, #15
 80e2ab2:	429a      	cmp	r2, r3
 80e2ab4:	d208      	bcs.n	80e2ac8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80e2ab6:	4b11      	ldr	r3, [pc, #68]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2ab8:	699b      	ldr	r3, [r3, #24]
 80e2aba:	f023 020f 	bic.w	r2, r3, #15
 80e2abe:	687b      	ldr	r3, [r7, #4]
 80e2ac0:	68db      	ldr	r3, [r3, #12]
 80e2ac2:	490e      	ldr	r1, [pc, #56]	; (80e2afc <HAL_RCC_ClockConfig+0x244>)
 80e2ac4:	4313      	orrs	r3, r2
 80e2ac6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80e2ac8:	4b0b      	ldr	r3, [pc, #44]	; (80e2af8 <HAL_RCC_ClockConfig+0x240>)
 80e2aca:	681b      	ldr	r3, [r3, #0]
 80e2acc:	f003 030f 	and.w	r3, r3, #15
 80e2ad0:	683a      	ldr	r2, [r7, #0]
 80e2ad2:	429a      	cmp	r2, r3
 80e2ad4:	d214      	bcs.n	80e2b00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80e2ad6:	4b08      	ldr	r3, [pc, #32]	; (80e2af8 <HAL_RCC_ClockConfig+0x240>)
 80e2ad8:	681b      	ldr	r3, [r3, #0]
 80e2ada:	f023 020f 	bic.w	r2, r3, #15
 80e2ade:	4906      	ldr	r1, [pc, #24]	; (80e2af8 <HAL_RCC_ClockConfig+0x240>)
 80e2ae0:	683b      	ldr	r3, [r7, #0]
 80e2ae2:	4313      	orrs	r3, r2
 80e2ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80e2ae6:	4b04      	ldr	r3, [pc, #16]	; (80e2af8 <HAL_RCC_ClockConfig+0x240>)
 80e2ae8:	681b      	ldr	r3, [r3, #0]
 80e2aea:	f003 030f 	and.w	r3, r3, #15
 80e2aee:	683a      	ldr	r2, [r7, #0]
 80e2af0:	429a      	cmp	r2, r3
 80e2af2:	d005      	beq.n	80e2b00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80e2af4:	2301      	movs	r3, #1
 80e2af6:	e086      	b.n	80e2c06 <HAL_RCC_ClockConfig+0x34e>
 80e2af8:	52002000 	.word	0x52002000
 80e2afc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80e2b00:	687b      	ldr	r3, [r7, #4]
 80e2b02:	681b      	ldr	r3, [r3, #0]
 80e2b04:	f003 0304 	and.w	r3, r3, #4
 80e2b08:	2b00      	cmp	r3, #0
 80e2b0a:	d010      	beq.n	80e2b2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80e2b0c:	687b      	ldr	r3, [r7, #4]
 80e2b0e:	691a      	ldr	r2, [r3, #16]
 80e2b10:	4b3f      	ldr	r3, [pc, #252]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2b12:	699b      	ldr	r3, [r3, #24]
 80e2b14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e2b18:	429a      	cmp	r2, r3
 80e2b1a:	d208      	bcs.n	80e2b2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80e2b1c:	4b3c      	ldr	r3, [pc, #240]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2b1e:	699b      	ldr	r3, [r3, #24]
 80e2b20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e2b24:	687b      	ldr	r3, [r7, #4]
 80e2b26:	691b      	ldr	r3, [r3, #16]
 80e2b28:	4939      	ldr	r1, [pc, #228]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2b2a:	4313      	orrs	r3, r2
 80e2b2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80e2b2e:	687b      	ldr	r3, [r7, #4]
 80e2b30:	681b      	ldr	r3, [r3, #0]
 80e2b32:	f003 0308 	and.w	r3, r3, #8
 80e2b36:	2b00      	cmp	r3, #0
 80e2b38:	d010      	beq.n	80e2b5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80e2b3a:	687b      	ldr	r3, [r7, #4]
 80e2b3c:	695a      	ldr	r2, [r3, #20]
 80e2b3e:	4b34      	ldr	r3, [pc, #208]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2b40:	69db      	ldr	r3, [r3, #28]
 80e2b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e2b46:	429a      	cmp	r2, r3
 80e2b48:	d208      	bcs.n	80e2b5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80e2b4a:	4b31      	ldr	r3, [pc, #196]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2b4c:	69db      	ldr	r3, [r3, #28]
 80e2b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e2b52:	687b      	ldr	r3, [r7, #4]
 80e2b54:	695b      	ldr	r3, [r3, #20]
 80e2b56:	492e      	ldr	r1, [pc, #184]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2b58:	4313      	orrs	r3, r2
 80e2b5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80e2b5c:	687b      	ldr	r3, [r7, #4]
 80e2b5e:	681b      	ldr	r3, [r3, #0]
 80e2b60:	f003 0310 	and.w	r3, r3, #16
 80e2b64:	2b00      	cmp	r3, #0
 80e2b66:	d010      	beq.n	80e2b8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80e2b68:	687b      	ldr	r3, [r7, #4]
 80e2b6a:	699a      	ldr	r2, [r3, #24]
 80e2b6c:	4b28      	ldr	r3, [pc, #160]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2b6e:	69db      	ldr	r3, [r3, #28]
 80e2b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80e2b74:	429a      	cmp	r2, r3
 80e2b76:	d208      	bcs.n	80e2b8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80e2b78:	4b25      	ldr	r3, [pc, #148]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2b7a:	69db      	ldr	r3, [r3, #28]
 80e2b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80e2b80:	687b      	ldr	r3, [r7, #4]
 80e2b82:	699b      	ldr	r3, [r3, #24]
 80e2b84:	4922      	ldr	r1, [pc, #136]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2b86:	4313      	orrs	r3, r2
 80e2b88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80e2b8a:	687b      	ldr	r3, [r7, #4]
 80e2b8c:	681b      	ldr	r3, [r3, #0]
 80e2b8e:	f003 0320 	and.w	r3, r3, #32
 80e2b92:	2b00      	cmp	r3, #0
 80e2b94:	d010      	beq.n	80e2bb8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80e2b96:	687b      	ldr	r3, [r7, #4]
 80e2b98:	69da      	ldr	r2, [r3, #28]
 80e2b9a:	4b1d      	ldr	r3, [pc, #116]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2b9c:	6a1b      	ldr	r3, [r3, #32]
 80e2b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e2ba2:	429a      	cmp	r2, r3
 80e2ba4:	d208      	bcs.n	80e2bb8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80e2ba6:	4b1a      	ldr	r3, [pc, #104]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2ba8:	6a1b      	ldr	r3, [r3, #32]
 80e2baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e2bae:	687b      	ldr	r3, [r7, #4]
 80e2bb0:	69db      	ldr	r3, [r3, #28]
 80e2bb2:	4917      	ldr	r1, [pc, #92]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2bb4:	4313      	orrs	r3, r2
 80e2bb6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80e2bb8:	f000 f834 	bl	80e2c24 <HAL_RCC_GetSysClockFreq>
 80e2bbc:	4602      	mov	r2, r0
 80e2bbe:	4b14      	ldr	r3, [pc, #80]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2bc0:	699b      	ldr	r3, [r3, #24]
 80e2bc2:	0a1b      	lsrs	r3, r3, #8
 80e2bc4:	f003 030f 	and.w	r3, r3, #15
 80e2bc8:	4912      	ldr	r1, [pc, #72]	; (80e2c14 <HAL_RCC_ClockConfig+0x35c>)
 80e2bca:	5ccb      	ldrb	r3, [r1, r3]
 80e2bcc:	f003 031f 	and.w	r3, r3, #31
 80e2bd0:	fa22 f303 	lsr.w	r3, r2, r3
 80e2bd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80e2bd6:	4b0e      	ldr	r3, [pc, #56]	; (80e2c10 <HAL_RCC_ClockConfig+0x358>)
 80e2bd8:	699b      	ldr	r3, [r3, #24]
 80e2bda:	f003 030f 	and.w	r3, r3, #15
 80e2bde:	4a0d      	ldr	r2, [pc, #52]	; (80e2c14 <HAL_RCC_ClockConfig+0x35c>)
 80e2be0:	5cd3      	ldrb	r3, [r2, r3]
 80e2be2:	f003 031f 	and.w	r3, r3, #31
 80e2be6:	693a      	ldr	r2, [r7, #16]
 80e2be8:	fa22 f303 	lsr.w	r3, r2, r3
 80e2bec:	4a0a      	ldr	r2, [pc, #40]	; (80e2c18 <HAL_RCC_ClockConfig+0x360>)
 80e2bee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80e2bf0:	4a0a      	ldr	r2, [pc, #40]	; (80e2c1c <HAL_RCC_ClockConfig+0x364>)
 80e2bf2:	693b      	ldr	r3, [r7, #16]
 80e2bf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80e2bf6:	4b0a      	ldr	r3, [pc, #40]	; (80e2c20 <HAL_RCC_ClockConfig+0x368>)
 80e2bf8:	681b      	ldr	r3, [r3, #0]
 80e2bfa:	4618      	mov	r0, r3
 80e2bfc:	f7fd ff60 	bl	80e0ac0 <HAL_InitTick>
 80e2c00:	4603      	mov	r3, r0
 80e2c02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80e2c04:	7bfb      	ldrb	r3, [r7, #15]
}
 80e2c06:	4618      	mov	r0, r3
 80e2c08:	3718      	adds	r7, #24
 80e2c0a:	46bd      	mov	sp, r7
 80e2c0c:	bd80      	pop	{r7, pc}
 80e2c0e:	bf00      	nop
 80e2c10:	58024400 	.word	0x58024400
 80e2c14:	080e40ac 	.word	0x080e40ac
 80e2c18:	24000004 	.word	0x24000004
 80e2c1c:	24000000 	.word	0x24000000
 80e2c20:	24000008 	.word	0x24000008

080e2c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80e2c24:	b480      	push	{r7}
 80e2c26:	b089      	sub	sp, #36	; 0x24
 80e2c28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80e2c2a:	4bb3      	ldr	r3, [pc, #716]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2c2c:	691b      	ldr	r3, [r3, #16]
 80e2c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e2c32:	2b18      	cmp	r3, #24
 80e2c34:	f200 8155 	bhi.w	80e2ee2 <HAL_RCC_GetSysClockFreq+0x2be>
 80e2c38:	a201      	add	r2, pc, #4	; (adr r2, 80e2c40 <HAL_RCC_GetSysClockFreq+0x1c>)
 80e2c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e2c3e:	bf00      	nop
 80e2c40:	080e2ca5 	.word	0x080e2ca5
 80e2c44:	080e2ee3 	.word	0x080e2ee3
 80e2c48:	080e2ee3 	.word	0x080e2ee3
 80e2c4c:	080e2ee3 	.word	0x080e2ee3
 80e2c50:	080e2ee3 	.word	0x080e2ee3
 80e2c54:	080e2ee3 	.word	0x080e2ee3
 80e2c58:	080e2ee3 	.word	0x080e2ee3
 80e2c5c:	080e2ee3 	.word	0x080e2ee3
 80e2c60:	080e2ccb 	.word	0x080e2ccb
 80e2c64:	080e2ee3 	.word	0x080e2ee3
 80e2c68:	080e2ee3 	.word	0x080e2ee3
 80e2c6c:	080e2ee3 	.word	0x080e2ee3
 80e2c70:	080e2ee3 	.word	0x080e2ee3
 80e2c74:	080e2ee3 	.word	0x080e2ee3
 80e2c78:	080e2ee3 	.word	0x080e2ee3
 80e2c7c:	080e2ee3 	.word	0x080e2ee3
 80e2c80:	080e2cd1 	.word	0x080e2cd1
 80e2c84:	080e2ee3 	.word	0x080e2ee3
 80e2c88:	080e2ee3 	.word	0x080e2ee3
 80e2c8c:	080e2ee3 	.word	0x080e2ee3
 80e2c90:	080e2ee3 	.word	0x080e2ee3
 80e2c94:	080e2ee3 	.word	0x080e2ee3
 80e2c98:	080e2ee3 	.word	0x080e2ee3
 80e2c9c:	080e2ee3 	.word	0x080e2ee3
 80e2ca0:	080e2cd7 	.word	0x080e2cd7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80e2ca4:	4b94      	ldr	r3, [pc, #592]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2ca6:	681b      	ldr	r3, [r3, #0]
 80e2ca8:	f003 0320 	and.w	r3, r3, #32
 80e2cac:	2b00      	cmp	r3, #0
 80e2cae:	d009      	beq.n	80e2cc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80e2cb0:	4b91      	ldr	r3, [pc, #580]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2cb2:	681b      	ldr	r3, [r3, #0]
 80e2cb4:	08db      	lsrs	r3, r3, #3
 80e2cb6:	f003 0303 	and.w	r3, r3, #3
 80e2cba:	4a90      	ldr	r2, [pc, #576]	; (80e2efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e2cbc:	fa22 f303 	lsr.w	r3, r2, r3
 80e2cc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80e2cc2:	e111      	b.n	80e2ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80e2cc4:	4b8d      	ldr	r3, [pc, #564]	; (80e2efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e2cc6:	61bb      	str	r3, [r7, #24]
    break;
 80e2cc8:	e10e      	b.n	80e2ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80e2cca:	4b8d      	ldr	r3, [pc, #564]	; (80e2f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80e2ccc:	61bb      	str	r3, [r7, #24]
    break;
 80e2cce:	e10b      	b.n	80e2ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80e2cd0:	4b8c      	ldr	r3, [pc, #560]	; (80e2f04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80e2cd2:	61bb      	str	r3, [r7, #24]
    break;
 80e2cd4:	e108      	b.n	80e2ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80e2cd6:	4b88      	ldr	r3, [pc, #544]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2cda:	f003 0303 	and.w	r3, r3, #3
 80e2cde:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80e2ce0:	4b85      	ldr	r3, [pc, #532]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2ce4:	091b      	lsrs	r3, r3, #4
 80e2ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e2cea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80e2cec:	4b82      	ldr	r3, [pc, #520]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2cf0:	f003 0301 	and.w	r3, r3, #1
 80e2cf4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80e2cf6:	4b80      	ldr	r3, [pc, #512]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e2cfa:	08db      	lsrs	r3, r3, #3
 80e2cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80e2d00:	68fa      	ldr	r2, [r7, #12]
 80e2d02:	fb02 f303 	mul.w	r3, r2, r3
 80e2d06:	ee07 3a90 	vmov	s15, r3
 80e2d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e2d0e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80e2d12:	693b      	ldr	r3, [r7, #16]
 80e2d14:	2b00      	cmp	r3, #0
 80e2d16:	f000 80e1 	beq.w	80e2edc <HAL_RCC_GetSysClockFreq+0x2b8>
 80e2d1a:	697b      	ldr	r3, [r7, #20]
 80e2d1c:	2b02      	cmp	r3, #2
 80e2d1e:	f000 8083 	beq.w	80e2e28 <HAL_RCC_GetSysClockFreq+0x204>
 80e2d22:	697b      	ldr	r3, [r7, #20]
 80e2d24:	2b02      	cmp	r3, #2
 80e2d26:	f200 80a1 	bhi.w	80e2e6c <HAL_RCC_GetSysClockFreq+0x248>
 80e2d2a:	697b      	ldr	r3, [r7, #20]
 80e2d2c:	2b00      	cmp	r3, #0
 80e2d2e:	d003      	beq.n	80e2d38 <HAL_RCC_GetSysClockFreq+0x114>
 80e2d30:	697b      	ldr	r3, [r7, #20]
 80e2d32:	2b01      	cmp	r3, #1
 80e2d34:	d056      	beq.n	80e2de4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80e2d36:	e099      	b.n	80e2e6c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80e2d38:	4b6f      	ldr	r3, [pc, #444]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2d3a:	681b      	ldr	r3, [r3, #0]
 80e2d3c:	f003 0320 	and.w	r3, r3, #32
 80e2d40:	2b00      	cmp	r3, #0
 80e2d42:	d02d      	beq.n	80e2da0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80e2d44:	4b6c      	ldr	r3, [pc, #432]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2d46:	681b      	ldr	r3, [r3, #0]
 80e2d48:	08db      	lsrs	r3, r3, #3
 80e2d4a:	f003 0303 	and.w	r3, r3, #3
 80e2d4e:	4a6b      	ldr	r2, [pc, #428]	; (80e2efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e2d50:	fa22 f303 	lsr.w	r3, r2, r3
 80e2d54:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e2d56:	687b      	ldr	r3, [r7, #4]
 80e2d58:	ee07 3a90 	vmov	s15, r3
 80e2d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2d60:	693b      	ldr	r3, [r7, #16]
 80e2d62:	ee07 3a90 	vmov	s15, r3
 80e2d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e2d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e2d6e:	4b62      	ldr	r3, [pc, #392]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e2d76:	ee07 3a90 	vmov	s15, r3
 80e2d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 80e2d82:	eddf 5a61 	vldr	s11, [pc, #388]	; 80e2f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e2d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e2d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e2d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e2d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e2d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e2d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80e2d9e:	e087      	b.n	80e2eb0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e2da0:	693b      	ldr	r3, [r7, #16]
 80e2da2:	ee07 3a90 	vmov	s15, r3
 80e2da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e2daa:	eddf 6a58 	vldr	s13, [pc, #352]	; 80e2f0c <HAL_RCC_GetSysClockFreq+0x2e8>
 80e2dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e2db2:	4b51      	ldr	r3, [pc, #324]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e2dba:	ee07 3a90 	vmov	s15, r3
 80e2dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 80e2dc6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80e2f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e2dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e2dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e2dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e2dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e2dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e2dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e2de2:	e065      	b.n	80e2eb0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e2de4:	693b      	ldr	r3, [r7, #16]
 80e2de6:	ee07 3a90 	vmov	s15, r3
 80e2dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e2dee:	eddf 6a48 	vldr	s13, [pc, #288]	; 80e2f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 80e2df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e2df6:	4b40      	ldr	r3, [pc, #256]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e2dfe:	ee07 3a90 	vmov	s15, r3
 80e2e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2e06:	ed97 6a02 	vldr	s12, [r7, #8]
 80e2e0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80e2f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e2e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e2e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e2e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e2e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e2e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e2e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e2e26:	e043      	b.n	80e2eb0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e2e28:	693b      	ldr	r3, [r7, #16]
 80e2e2a:	ee07 3a90 	vmov	s15, r3
 80e2e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e2e32:	eddf 6a38 	vldr	s13, [pc, #224]	; 80e2f14 <HAL_RCC_GetSysClockFreq+0x2f0>
 80e2e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e2e3a:	4b2f      	ldr	r3, [pc, #188]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e2e42:	ee07 3a90 	vmov	s15, r3
 80e2e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 80e2e4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80e2f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e2e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e2e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e2e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e2e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e2e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e2e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e2e6a:	e021      	b.n	80e2eb0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e2e6c:	693b      	ldr	r3, [r7, #16]
 80e2e6e:	ee07 3a90 	vmov	s15, r3
 80e2e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e2e76:	eddf 6a26 	vldr	s13, [pc, #152]	; 80e2f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 80e2e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e2e7e:	4b1e      	ldr	r3, [pc, #120]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e2e86:	ee07 3a90 	vmov	s15, r3
 80e2e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 80e2e92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80e2f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80e2e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e2e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e2e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e2ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e2ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e2eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e2eae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80e2eb0:	4b11      	ldr	r3, [pc, #68]	; (80e2ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2eb4:	0a5b      	lsrs	r3, r3, #9
 80e2eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e2eba:	3301      	adds	r3, #1
 80e2ebc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80e2ebe:	683b      	ldr	r3, [r7, #0]
 80e2ec0:	ee07 3a90 	vmov	s15, r3
 80e2ec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80e2ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 80e2ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80e2ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80e2ed4:	ee17 3a90 	vmov	r3, s15
 80e2ed8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80e2eda:	e005      	b.n	80e2ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80e2edc:	2300      	movs	r3, #0
 80e2ede:	61bb      	str	r3, [r7, #24]
    break;
 80e2ee0:	e002      	b.n	80e2ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80e2ee2:	4b07      	ldr	r3, [pc, #28]	; (80e2f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80e2ee4:	61bb      	str	r3, [r7, #24]
    break;
 80e2ee6:	bf00      	nop
  }

  return sysclockfreq;
 80e2ee8:	69bb      	ldr	r3, [r7, #24]
}
 80e2eea:	4618      	mov	r0, r3
 80e2eec:	3724      	adds	r7, #36	; 0x24
 80e2eee:	46bd      	mov	sp, r7
 80e2ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2ef4:	4770      	bx	lr
 80e2ef6:	bf00      	nop
 80e2ef8:	58024400 	.word	0x58024400
 80e2efc:	03d09000 	.word	0x03d09000
 80e2f00:	003d0900 	.word	0x003d0900
 80e2f04:	017d7840 	.word	0x017d7840
 80e2f08:	46000000 	.word	0x46000000
 80e2f0c:	4c742400 	.word	0x4c742400
 80e2f10:	4a742400 	.word	0x4a742400
 80e2f14:	4bbebc20 	.word	0x4bbebc20

080e2f18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80e2f18:	b580      	push	{r7, lr}
 80e2f1a:	b086      	sub	sp, #24
 80e2f1c:	af00      	add	r7, sp, #0
 80e2f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80e2f20:	2300      	movs	r3, #0
 80e2f22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80e2f24:	2300      	movs	r3, #0
 80e2f26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80e2f28:	687b      	ldr	r3, [r7, #4]
 80e2f2a:	681b      	ldr	r3, [r3, #0]
 80e2f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e2f30:	2b00      	cmp	r3, #0
 80e2f32:	d03f      	beq.n	80e2fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80e2f34:	687b      	ldr	r3, [r7, #4]
 80e2f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e2f38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e2f3c:	d02a      	beq.n	80e2f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80e2f3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e2f42:	d824      	bhi.n	80e2f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80e2f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e2f48:	d018      	beq.n	80e2f7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80e2f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e2f4e:	d81e      	bhi.n	80e2f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80e2f50:	2b00      	cmp	r3, #0
 80e2f52:	d003      	beq.n	80e2f5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80e2f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80e2f58:	d007      	beq.n	80e2f6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80e2f5a:	e018      	b.n	80e2f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2f5c:	4ba4      	ldr	r3, [pc, #656]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2f60:	4aa3      	ldr	r2, [pc, #652]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e2f68:	e015      	b.n	80e2f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e2f6a:	687b      	ldr	r3, [r7, #4]
 80e2f6c:	3304      	adds	r3, #4
 80e2f6e:	2102      	movs	r1, #2
 80e2f70:	4618      	mov	r0, r3
 80e2f72:	f000 fecb 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e2f76:	4603      	mov	r3, r0
 80e2f78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e2f7a:	e00c      	b.n	80e2f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e2f7c:	687b      	ldr	r3, [r7, #4]
 80e2f7e:	3324      	adds	r3, #36	; 0x24
 80e2f80:	2102      	movs	r1, #2
 80e2f82:	4618      	mov	r0, r3
 80e2f84:	f000 ff74 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e2f88:	4603      	mov	r3, r0
 80e2f8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e2f8c:	e003      	b.n	80e2f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e2f8e:	2301      	movs	r3, #1
 80e2f90:	75fb      	strb	r3, [r7, #23]
      break;
 80e2f92:	e000      	b.n	80e2f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80e2f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e2f96:	7dfb      	ldrb	r3, [r7, #23]
 80e2f98:	2b00      	cmp	r3, #0
 80e2f9a:	d109      	bne.n	80e2fb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80e2f9c:	4b94      	ldr	r3, [pc, #592]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e2fa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80e2fa4:	687b      	ldr	r3, [r7, #4]
 80e2fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e2fa8:	4991      	ldr	r1, [pc, #580]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2faa:	4313      	orrs	r3, r2
 80e2fac:	650b      	str	r3, [r1, #80]	; 0x50
 80e2fae:	e001      	b.n	80e2fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e2fb0:	7dfb      	ldrb	r3, [r7, #23]
 80e2fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80e2fb4:	687b      	ldr	r3, [r7, #4]
 80e2fb6:	681b      	ldr	r3, [r3, #0]
 80e2fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2fbc:	2b00      	cmp	r3, #0
 80e2fbe:	d03d      	beq.n	80e303c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80e2fc0:	687b      	ldr	r3, [r7, #4]
 80e2fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e2fc4:	2b04      	cmp	r3, #4
 80e2fc6:	d826      	bhi.n	80e3016 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80e2fc8:	a201      	add	r2, pc, #4	; (adr r2, 80e2fd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80e2fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e2fce:	bf00      	nop
 80e2fd0:	080e2fe5 	.word	0x080e2fe5
 80e2fd4:	080e2ff3 	.word	0x080e2ff3
 80e2fd8:	080e3005 	.word	0x080e3005
 80e2fdc:	080e301d 	.word	0x080e301d
 80e2fe0:	080e301d 	.word	0x080e301d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2fe4:	4b82      	ldr	r3, [pc, #520]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2fe8:	4a81      	ldr	r2, [pc, #516]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2fee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e2ff0:	e015      	b.n	80e301e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e2ff2:	687b      	ldr	r3, [r7, #4]
 80e2ff4:	3304      	adds	r3, #4
 80e2ff6:	2100      	movs	r1, #0
 80e2ff8:	4618      	mov	r0, r3
 80e2ffa:	f000 fe87 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e2ffe:	4603      	mov	r3, r0
 80e3000:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3002:	e00c      	b.n	80e301e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e3004:	687b      	ldr	r3, [r7, #4]
 80e3006:	3324      	adds	r3, #36	; 0x24
 80e3008:	2100      	movs	r1, #0
 80e300a:	4618      	mov	r0, r3
 80e300c:	f000 ff30 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e3010:	4603      	mov	r3, r0
 80e3012:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3014:	e003      	b.n	80e301e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3016:	2301      	movs	r3, #1
 80e3018:	75fb      	strb	r3, [r7, #23]
      break;
 80e301a:	e000      	b.n	80e301e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80e301c:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e301e:	7dfb      	ldrb	r3, [r7, #23]
 80e3020:	2b00      	cmp	r3, #0
 80e3022:	d109      	bne.n	80e3038 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80e3024:	4b72      	ldr	r3, [pc, #456]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3028:	f023 0207 	bic.w	r2, r3, #7
 80e302c:	687b      	ldr	r3, [r7, #4]
 80e302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3030:	496f      	ldr	r1, [pc, #444]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3032:	4313      	orrs	r3, r2
 80e3034:	650b      	str	r3, [r1, #80]	; 0x50
 80e3036:	e001      	b.n	80e303c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3038:	7dfb      	ldrb	r3, [r7, #23]
 80e303a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80e303c:	687b      	ldr	r3, [r7, #4]
 80e303e:	681b      	ldr	r3, [r3, #0]
 80e3040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80e3044:	2b00      	cmp	r3, #0
 80e3046:	d051      	beq.n	80e30ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80e3048:	687b      	ldr	r3, [r7, #4]
 80e304a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e304e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80e3052:	d036      	beq.n	80e30c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80e3054:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80e3058:	d830      	bhi.n	80e30bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e305a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80e305e:	d032      	beq.n	80e30c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80e3060:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80e3064:	d82a      	bhi.n	80e30bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e3066:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80e306a:	d02e      	beq.n	80e30ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80e306c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80e3070:	d824      	bhi.n	80e30bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e3072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80e3076:	d018      	beq.n	80e30aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 80e3078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80e307c:	d81e      	bhi.n	80e30bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e307e:	2b00      	cmp	r3, #0
 80e3080:	d003      	beq.n	80e308a <HAL_RCCEx_PeriphCLKConfig+0x172>
 80e3082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e3086:	d007      	beq.n	80e3098 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80e3088:	e018      	b.n	80e30bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e308a:	4b59      	ldr	r3, [pc, #356]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e308e:	4a58      	ldr	r2, [pc, #352]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3094:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3096:	e019      	b.n	80e30cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3098:	687b      	ldr	r3, [r7, #4]
 80e309a:	3304      	adds	r3, #4
 80e309c:	2100      	movs	r1, #0
 80e309e:	4618      	mov	r0, r3
 80e30a0:	f000 fe34 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e30a4:	4603      	mov	r3, r0
 80e30a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80e30a8:	e010      	b.n	80e30cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e30aa:	687b      	ldr	r3, [r7, #4]
 80e30ac:	3324      	adds	r3, #36	; 0x24
 80e30ae:	2100      	movs	r1, #0
 80e30b0:	4618      	mov	r0, r3
 80e30b2:	f000 fedd 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e30b6:	4603      	mov	r3, r0
 80e30b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e30ba:	e007      	b.n	80e30cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80e30bc:	2301      	movs	r3, #1
 80e30be:	75fb      	strb	r3, [r7, #23]
      break;
 80e30c0:	e004      	b.n	80e30cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e30c2:	bf00      	nop
 80e30c4:	e002      	b.n	80e30cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e30c6:	bf00      	nop
 80e30c8:	e000      	b.n	80e30cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e30ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e30cc:	7dfb      	ldrb	r3, [r7, #23]
 80e30ce:	2b00      	cmp	r3, #0
 80e30d0:	d10a      	bne.n	80e30e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80e30d2:	4b47      	ldr	r3, [pc, #284]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e30d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e30d6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80e30da:	687b      	ldr	r3, [r7, #4]
 80e30dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e30e0:	4943      	ldr	r1, [pc, #268]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e30e2:	4313      	orrs	r3, r2
 80e30e4:	658b      	str	r3, [r1, #88]	; 0x58
 80e30e6:	e001      	b.n	80e30ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e30e8:	7dfb      	ldrb	r3, [r7, #23]
 80e30ea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80e30ec:	687b      	ldr	r3, [r7, #4]
 80e30ee:	681b      	ldr	r3, [r3, #0]
 80e30f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80e30f4:	2b00      	cmp	r3, #0
 80e30f6:	d051      	beq.n	80e319c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80e30f8:	687b      	ldr	r3, [r7, #4]
 80e30fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e30fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80e3102:	d036      	beq.n	80e3172 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80e3104:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80e3108:	d830      	bhi.n	80e316c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e310a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80e310e:	d032      	beq.n	80e3176 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80e3110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80e3114:	d82a      	bhi.n	80e316c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e3116:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80e311a:	d02e      	beq.n	80e317a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80e311c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80e3120:	d824      	bhi.n	80e316c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e3122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80e3126:	d018      	beq.n	80e315a <HAL_RCCEx_PeriphCLKConfig+0x242>
 80e3128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80e312c:	d81e      	bhi.n	80e316c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e312e:	2b00      	cmp	r3, #0
 80e3130:	d003      	beq.n	80e313a <HAL_RCCEx_PeriphCLKConfig+0x222>
 80e3132:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80e3136:	d007      	beq.n	80e3148 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80e3138:	e018      	b.n	80e316c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e313a:	4b2d      	ldr	r3, [pc, #180]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e313e:	4a2c      	ldr	r2, [pc, #176]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3144:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e3146:	e019      	b.n	80e317c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3148:	687b      	ldr	r3, [r7, #4]
 80e314a:	3304      	adds	r3, #4
 80e314c:	2100      	movs	r1, #0
 80e314e:	4618      	mov	r0, r3
 80e3150:	f000 fddc 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e3154:	4603      	mov	r3, r0
 80e3156:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80e3158:	e010      	b.n	80e317c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80e315a:	687b      	ldr	r3, [r7, #4]
 80e315c:	3324      	adds	r3, #36	; 0x24
 80e315e:	2100      	movs	r1, #0
 80e3160:	4618      	mov	r0, r3
 80e3162:	f000 fe85 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e3166:	4603      	mov	r3, r0
 80e3168:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e316a:	e007      	b.n	80e317c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80e316c:	2301      	movs	r3, #1
 80e316e:	75fb      	strb	r3, [r7, #23]
      break;
 80e3170:	e004      	b.n	80e317c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e3172:	bf00      	nop
 80e3174:	e002      	b.n	80e317c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e3176:	bf00      	nop
 80e3178:	e000      	b.n	80e317c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e317a:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e317c:	7dfb      	ldrb	r3, [r7, #23]
 80e317e:	2b00      	cmp	r3, #0
 80e3180:	d10a      	bne.n	80e3198 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80e3182:	4b1b      	ldr	r3, [pc, #108]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3186:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80e318a:	687b      	ldr	r3, [r7, #4]
 80e318c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e3190:	4917      	ldr	r1, [pc, #92]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e3192:	4313      	orrs	r3, r2
 80e3194:	658b      	str	r3, [r1, #88]	; 0x58
 80e3196:	e001      	b.n	80e319c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3198:	7dfb      	ldrb	r3, [r7, #23]
 80e319a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80e319c:	687b      	ldr	r3, [r7, #4]
 80e319e:	681b      	ldr	r3, [r3, #0]
 80e31a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e31a4:	2b00      	cmp	r3, #0
 80e31a6:	d035      	beq.n	80e3214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80e31a8:	687b      	ldr	r3, [r7, #4]
 80e31aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e31ac:	2b30      	cmp	r3, #48	; 0x30
 80e31ae:	d01c      	beq.n	80e31ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80e31b0:	2b30      	cmp	r3, #48	; 0x30
 80e31b2:	d817      	bhi.n	80e31e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80e31b4:	2b20      	cmp	r3, #32
 80e31b6:	d00c      	beq.n	80e31d2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80e31b8:	2b20      	cmp	r3, #32
 80e31ba:	d813      	bhi.n	80e31e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80e31bc:	2b00      	cmp	r3, #0
 80e31be:	d019      	beq.n	80e31f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80e31c0:	2b10      	cmp	r3, #16
 80e31c2:	d10f      	bne.n	80e31e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e31c4:	4b0a      	ldr	r3, [pc, #40]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e31c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e31c8:	4a09      	ldr	r2, [pc, #36]	; (80e31f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e31ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e31ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80e31d0:	e011      	b.n	80e31f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e31d2:	687b      	ldr	r3, [r7, #4]
 80e31d4:	3304      	adds	r3, #4
 80e31d6:	2102      	movs	r1, #2
 80e31d8:	4618      	mov	r0, r3
 80e31da:	f000 fd97 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e31de:	4603      	mov	r3, r0
 80e31e0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80e31e2:	e008      	b.n	80e31f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80e31e4:	2301      	movs	r3, #1
 80e31e6:	75fb      	strb	r3, [r7, #23]
      break;
 80e31e8:	e005      	b.n	80e31f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80e31ea:	bf00      	nop
 80e31ec:	e003      	b.n	80e31f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80e31ee:	bf00      	nop
 80e31f0:	58024400 	.word	0x58024400
      break;
 80e31f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e31f6:	7dfb      	ldrb	r3, [r7, #23]
 80e31f8:	2b00      	cmp	r3, #0
 80e31fa:	d109      	bne.n	80e3210 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80e31fc:	4ba3      	ldr	r3, [pc, #652]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e31fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80e3204:	687b      	ldr	r3, [r7, #4]
 80e3206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e3208:	49a0      	ldr	r1, [pc, #640]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e320a:	4313      	orrs	r3, r2
 80e320c:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e320e:	e001      	b.n	80e3214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3210:	7dfb      	ldrb	r3, [r7, #23]
 80e3212:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80e3214:	687b      	ldr	r3, [r7, #4]
 80e3216:	681b      	ldr	r3, [r3, #0]
 80e3218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80e321c:	2b00      	cmp	r3, #0
 80e321e:	d047      	beq.n	80e32b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80e3220:	687b      	ldr	r3, [r7, #4]
 80e3222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e3228:	d030      	beq.n	80e328c <HAL_RCCEx_PeriphCLKConfig+0x374>
 80e322a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e322e:	d82a      	bhi.n	80e3286 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e3230:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80e3234:	d02c      	beq.n	80e3290 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80e3236:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80e323a:	d824      	bhi.n	80e3286 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e323c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e3240:	d018      	beq.n	80e3274 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80e3242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e3246:	d81e      	bhi.n	80e3286 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e3248:	2b00      	cmp	r3, #0
 80e324a:	d003      	beq.n	80e3254 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80e324c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e3250:	d007      	beq.n	80e3262 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80e3252:	e018      	b.n	80e3286 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3254:	4b8d      	ldr	r3, [pc, #564]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3258:	4a8c      	ldr	r2, [pc, #560]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e325a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e325e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e3260:	e017      	b.n	80e3292 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3262:	687b      	ldr	r3, [r7, #4]
 80e3264:	3304      	adds	r3, #4
 80e3266:	2100      	movs	r1, #0
 80e3268:	4618      	mov	r0, r3
 80e326a:	f000 fd4f 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e326e:	4603      	mov	r3, r0
 80e3270:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e3272:	e00e      	b.n	80e3292 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e3274:	687b      	ldr	r3, [r7, #4]
 80e3276:	3324      	adds	r3, #36	; 0x24
 80e3278:	2100      	movs	r1, #0
 80e327a:	4618      	mov	r0, r3
 80e327c:	f000 fdf8 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e3280:	4603      	mov	r3, r0
 80e3282:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e3284:	e005      	b.n	80e3292 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3286:	2301      	movs	r3, #1
 80e3288:	75fb      	strb	r3, [r7, #23]
      break;
 80e328a:	e002      	b.n	80e3292 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80e328c:	bf00      	nop
 80e328e:	e000      	b.n	80e3292 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80e3290:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3292:	7dfb      	ldrb	r3, [r7, #23]
 80e3294:	2b00      	cmp	r3, #0
 80e3296:	d109      	bne.n	80e32ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80e3298:	4b7c      	ldr	r3, [pc, #496]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e329c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80e32a0:	687b      	ldr	r3, [r7, #4]
 80e32a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e32a4:	4979      	ldr	r1, [pc, #484]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e32a6:	4313      	orrs	r3, r2
 80e32a8:	650b      	str	r3, [r1, #80]	; 0x50
 80e32aa:	e001      	b.n	80e32b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e32ac:	7dfb      	ldrb	r3, [r7, #23]
 80e32ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80e32b0:	687b      	ldr	r3, [r7, #4]
 80e32b2:	681b      	ldr	r3, [r3, #0]
 80e32b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e32b8:	2b00      	cmp	r3, #0
 80e32ba:	d049      	beq.n	80e3350 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80e32bc:	687b      	ldr	r3, [r7, #4]
 80e32be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e32c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e32c4:	d02e      	beq.n	80e3324 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80e32c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e32ca:	d828      	bhi.n	80e331e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e32cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80e32d0:	d02a      	beq.n	80e3328 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80e32d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80e32d6:	d822      	bhi.n	80e331e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e32d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80e32dc:	d026      	beq.n	80e332c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80e32de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80e32e2:	d81c      	bhi.n	80e331e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e32e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e32e8:	d010      	beq.n	80e330c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80e32ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e32ee:	d816      	bhi.n	80e331e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e32f0:	2b00      	cmp	r3, #0
 80e32f2:	d01d      	beq.n	80e3330 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80e32f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e32f8:	d111      	bne.n	80e331e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e32fa:	687b      	ldr	r3, [r7, #4]
 80e32fc:	3304      	adds	r3, #4
 80e32fe:	2101      	movs	r1, #1
 80e3300:	4618      	mov	r0, r3
 80e3302:	f000 fd03 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e3306:	4603      	mov	r3, r0
 80e3308:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80e330a:	e012      	b.n	80e3332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e330c:	687b      	ldr	r3, [r7, #4]
 80e330e:	3324      	adds	r3, #36	; 0x24
 80e3310:	2101      	movs	r1, #1
 80e3312:	4618      	mov	r0, r3
 80e3314:	f000 fdac 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e3318:	4603      	mov	r3, r0
 80e331a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80e331c:	e009      	b.n	80e3332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e331e:	2301      	movs	r3, #1
 80e3320:	75fb      	strb	r3, [r7, #23]
      break;
 80e3322:	e006      	b.n	80e3332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3324:	bf00      	nop
 80e3326:	e004      	b.n	80e3332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3328:	bf00      	nop
 80e332a:	e002      	b.n	80e3332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e332c:	bf00      	nop
 80e332e:	e000      	b.n	80e3332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e3330:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3332:	7dfb      	ldrb	r3, [r7, #23]
 80e3334:	2b00      	cmp	r3, #0
 80e3336:	d109      	bne.n	80e334c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80e3338:	4b54      	ldr	r3, [pc, #336]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e333a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e333c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80e3340:	687b      	ldr	r3, [r7, #4]
 80e3342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e3344:	4951      	ldr	r1, [pc, #324]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3346:	4313      	orrs	r3, r2
 80e3348:	650b      	str	r3, [r1, #80]	; 0x50
 80e334a:	e001      	b.n	80e3350 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e334c:	7dfb      	ldrb	r3, [r7, #23]
 80e334e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80e3350:	687b      	ldr	r3, [r7, #4]
 80e3352:	681b      	ldr	r3, [r3, #0]
 80e3354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80e3358:	2b00      	cmp	r3, #0
 80e335a:	d04b      	beq.n	80e33f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80e335c:	687b      	ldr	r3, [r7, #4]
 80e335e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80e3362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e3366:	d02e      	beq.n	80e33c6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80e3368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e336c:	d828      	bhi.n	80e33c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e336e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e3372:	d02a      	beq.n	80e33ca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80e3374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e3378:	d822      	bhi.n	80e33c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e337a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e337e:	d026      	beq.n	80e33ce <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80e3380:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e3384:	d81c      	bhi.n	80e33c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e3386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e338a:	d010      	beq.n	80e33ae <HAL_RCCEx_PeriphCLKConfig+0x496>
 80e338c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3390:	d816      	bhi.n	80e33c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e3392:	2b00      	cmp	r3, #0
 80e3394:	d01d      	beq.n	80e33d2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80e3396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e339a:	d111      	bne.n	80e33c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e339c:	687b      	ldr	r3, [r7, #4]
 80e339e:	3304      	adds	r3, #4
 80e33a0:	2101      	movs	r1, #1
 80e33a2:	4618      	mov	r0, r3
 80e33a4:	f000 fcb2 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e33a8:	4603      	mov	r3, r0
 80e33aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80e33ac:	e012      	b.n	80e33d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e33ae:	687b      	ldr	r3, [r7, #4]
 80e33b0:	3324      	adds	r3, #36	; 0x24
 80e33b2:	2101      	movs	r1, #1
 80e33b4:	4618      	mov	r0, r3
 80e33b6:	f000 fd5b 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e33ba:	4603      	mov	r3, r0
 80e33bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80e33be:	e009      	b.n	80e33d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80e33c0:	2301      	movs	r3, #1
 80e33c2:	75fb      	strb	r3, [r7, #23]
      break;
 80e33c4:	e006      	b.n	80e33d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e33c6:	bf00      	nop
 80e33c8:	e004      	b.n	80e33d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e33ca:	bf00      	nop
 80e33cc:	e002      	b.n	80e33d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e33ce:	bf00      	nop
 80e33d0:	e000      	b.n	80e33d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e33d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e33d4:	7dfb      	ldrb	r3, [r7, #23]
 80e33d6:	2b00      	cmp	r3, #0
 80e33d8:	d10a      	bne.n	80e33f0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80e33da:	4b2c      	ldr	r3, [pc, #176]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e33dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e33de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80e33e2:	687b      	ldr	r3, [r7, #4]
 80e33e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80e33e8:	4928      	ldr	r1, [pc, #160]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e33ea:	4313      	orrs	r3, r2
 80e33ec:	658b      	str	r3, [r1, #88]	; 0x58
 80e33ee:	e001      	b.n	80e33f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e33f0:	7dfb      	ldrb	r3, [r7, #23]
 80e33f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80e33f4:	687b      	ldr	r3, [r7, #4]
 80e33f6:	681b      	ldr	r3, [r3, #0]
 80e33f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80e33fc:	2b00      	cmp	r3, #0
 80e33fe:	d02f      	beq.n	80e3460 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80e3400:	687b      	ldr	r3, [r7, #4]
 80e3402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e3404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3408:	d00e      	beq.n	80e3428 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80e340a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e340e:	d814      	bhi.n	80e343a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80e3410:	2b00      	cmp	r3, #0
 80e3412:	d015      	beq.n	80e3440 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80e3414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e3418:	d10f      	bne.n	80e343a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e341a:	4b1c      	ldr	r3, [pc, #112]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e341e:	4a1b      	ldr	r2, [pc, #108]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3424:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80e3426:	e00c      	b.n	80e3442 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3428:	687b      	ldr	r3, [r7, #4]
 80e342a:	3304      	adds	r3, #4
 80e342c:	2101      	movs	r1, #1
 80e342e:	4618      	mov	r0, r3
 80e3430:	f000 fc6c 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e3434:	4603      	mov	r3, r0
 80e3436:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80e3438:	e003      	b.n	80e3442 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e343a:	2301      	movs	r3, #1
 80e343c:	75fb      	strb	r3, [r7, #23]
      break;
 80e343e:	e000      	b.n	80e3442 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80e3440:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3442:	7dfb      	ldrb	r3, [r7, #23]
 80e3444:	2b00      	cmp	r3, #0
 80e3446:	d109      	bne.n	80e345c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80e3448:	4b10      	ldr	r3, [pc, #64]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e344c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80e3450:	687b      	ldr	r3, [r7, #4]
 80e3452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e3454:	490d      	ldr	r1, [pc, #52]	; (80e348c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e3456:	4313      	orrs	r3, r2
 80e3458:	650b      	str	r3, [r1, #80]	; 0x50
 80e345a:	e001      	b.n	80e3460 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e345c:	7dfb      	ldrb	r3, [r7, #23]
 80e345e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80e3460:	687b      	ldr	r3, [r7, #4]
 80e3462:	681b      	ldr	r3, [r3, #0]
 80e3464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80e3468:	2b00      	cmp	r3, #0
 80e346a:	d034      	beq.n	80e34d6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80e346c:	687b      	ldr	r3, [r7, #4]
 80e346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e3470:	2b03      	cmp	r3, #3
 80e3472:	d81d      	bhi.n	80e34b0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80e3474:	a201      	add	r2, pc, #4	; (adr r2, 80e347c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80e3476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e347a:	bf00      	nop
 80e347c:	080e34b7 	.word	0x080e34b7
 80e3480:	080e3491 	.word	0x080e3491
 80e3484:	080e349f 	.word	0x080e349f
 80e3488:	080e34b7 	.word	0x080e34b7
 80e348c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3490:	4bb1      	ldr	r3, [pc, #708]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3494:	4ab0      	ldr	r2, [pc, #704]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e349a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80e349c:	e00c      	b.n	80e34b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e349e:	687b      	ldr	r3, [r7, #4]
 80e34a0:	3304      	adds	r3, #4
 80e34a2:	2102      	movs	r1, #2
 80e34a4:	4618      	mov	r0, r3
 80e34a6:	f000 fc31 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e34aa:	4603      	mov	r3, r0
 80e34ac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80e34ae:	e003      	b.n	80e34b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80e34b0:	2301      	movs	r3, #1
 80e34b2:	75fb      	strb	r3, [r7, #23]
      break;
 80e34b4:	e000      	b.n	80e34b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80e34b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e34b8:	7dfb      	ldrb	r3, [r7, #23]
 80e34ba:	2b00      	cmp	r3, #0
 80e34bc:	d109      	bne.n	80e34d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80e34be:	4ba6      	ldr	r3, [pc, #664]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e34c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e34c2:	f023 0203 	bic.w	r2, r3, #3
 80e34c6:	687b      	ldr	r3, [r7, #4]
 80e34c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e34ca:	49a3      	ldr	r1, [pc, #652]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e34cc:	4313      	orrs	r3, r2
 80e34ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e34d0:	e001      	b.n	80e34d6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e34d2:	7dfb      	ldrb	r3, [r7, #23]
 80e34d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80e34d6:	687b      	ldr	r3, [r7, #4]
 80e34d8:	681b      	ldr	r3, [r3, #0]
 80e34da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80e34de:	2b00      	cmp	r3, #0
 80e34e0:	f000 8086 	beq.w	80e35f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80e34e4:	4b9d      	ldr	r3, [pc, #628]	; (80e375c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e34e6:	681b      	ldr	r3, [r3, #0]
 80e34e8:	4a9c      	ldr	r2, [pc, #624]	; (80e375c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e34ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e34ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80e34f0:	f7fd fb30 	bl	80e0b54 <HAL_GetTick>
 80e34f4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e34f6:	e009      	b.n	80e350c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80e34f8:	f7fd fb2c 	bl	80e0b54 <HAL_GetTick>
 80e34fc:	4602      	mov	r2, r0
 80e34fe:	693b      	ldr	r3, [r7, #16]
 80e3500:	1ad3      	subs	r3, r2, r3
 80e3502:	2b64      	cmp	r3, #100	; 0x64
 80e3504:	d902      	bls.n	80e350c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80e3506:	2303      	movs	r3, #3
 80e3508:	75fb      	strb	r3, [r7, #23]
        break;
 80e350a:	e005      	b.n	80e3518 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e350c:	4b93      	ldr	r3, [pc, #588]	; (80e375c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e350e:	681b      	ldr	r3, [r3, #0]
 80e3510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e3514:	2b00      	cmp	r3, #0
 80e3516:	d0ef      	beq.n	80e34f8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80e3518:	7dfb      	ldrb	r3, [r7, #23]
 80e351a:	2b00      	cmp	r3, #0
 80e351c:	d166      	bne.n	80e35ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80e351e:	4b8e      	ldr	r3, [pc, #568]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3520:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e3522:	687b      	ldr	r3, [r7, #4]
 80e3524:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3528:	4053      	eors	r3, r2
 80e352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80e352e:	2b00      	cmp	r3, #0
 80e3530:	d013      	beq.n	80e355a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80e3532:	4b89      	ldr	r3, [pc, #548]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80e353a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80e353c:	4b86      	ldr	r3, [pc, #536]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3540:	4a85      	ldr	r2, [pc, #532]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e3546:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80e3548:	4b83      	ldr	r3, [pc, #524]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e354c:	4a82      	ldr	r2, [pc, #520]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e354e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e3552:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80e3554:	4a80      	ldr	r2, [pc, #512]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3556:	68fb      	ldr	r3, [r7, #12]
 80e3558:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80e355a:	687b      	ldr	r3, [r7, #4]
 80e355c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e3564:	d115      	bne.n	80e3592 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e3566:	f7fd faf5 	bl	80e0b54 <HAL_GetTick>
 80e356a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e356c:	e00b      	b.n	80e3586 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80e356e:	f7fd faf1 	bl	80e0b54 <HAL_GetTick>
 80e3572:	4602      	mov	r2, r0
 80e3574:	693b      	ldr	r3, [r7, #16]
 80e3576:	1ad3      	subs	r3, r2, r3
 80e3578:	f241 3288 	movw	r2, #5000	; 0x1388
 80e357c:	4293      	cmp	r3, r2
 80e357e:	d902      	bls.n	80e3586 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80e3580:	2303      	movs	r3, #3
 80e3582:	75fb      	strb	r3, [r7, #23]
            break;
 80e3584:	e005      	b.n	80e3592 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e3586:	4b74      	ldr	r3, [pc, #464]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e358a:	f003 0302 	and.w	r3, r3, #2
 80e358e:	2b00      	cmp	r3, #0
 80e3590:	d0ed      	beq.n	80e356e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80e3592:	7dfb      	ldrb	r3, [r7, #23]
 80e3594:	2b00      	cmp	r3, #0
 80e3596:	d126      	bne.n	80e35e6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80e3598:	687b      	ldr	r3, [r7, #4]
 80e359a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e359e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80e35a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e35a6:	d10d      	bne.n	80e35c4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80e35a8:	4b6b      	ldr	r3, [pc, #428]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e35aa:	691b      	ldr	r3, [r3, #16]
 80e35ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80e35b0:	687b      	ldr	r3, [r7, #4]
 80e35b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e35b6:	0919      	lsrs	r1, r3, #4
 80e35b8:	4b69      	ldr	r3, [pc, #420]	; (80e3760 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80e35ba:	400b      	ands	r3, r1
 80e35bc:	4966      	ldr	r1, [pc, #408]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e35be:	4313      	orrs	r3, r2
 80e35c0:	610b      	str	r3, [r1, #16]
 80e35c2:	e005      	b.n	80e35d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80e35c4:	4b64      	ldr	r3, [pc, #400]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e35c6:	691b      	ldr	r3, [r3, #16]
 80e35c8:	4a63      	ldr	r2, [pc, #396]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e35ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80e35ce:	6113      	str	r3, [r2, #16]
 80e35d0:	4b61      	ldr	r3, [pc, #388]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e35d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e35d4:	687b      	ldr	r3, [r7, #4]
 80e35d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e35da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80e35de:	495e      	ldr	r1, [pc, #376]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e35e0:	4313      	orrs	r3, r2
 80e35e2:	670b      	str	r3, [r1, #112]	; 0x70
 80e35e4:	e004      	b.n	80e35f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80e35e6:	7dfb      	ldrb	r3, [r7, #23]
 80e35e8:	75bb      	strb	r3, [r7, #22]
 80e35ea:	e001      	b.n	80e35f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e35ec:	7dfb      	ldrb	r3, [r7, #23]
 80e35ee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80e35f0:	687b      	ldr	r3, [r7, #4]
 80e35f2:	681b      	ldr	r3, [r3, #0]
 80e35f4:	f003 0301 	and.w	r3, r3, #1
 80e35f8:	2b00      	cmp	r3, #0
 80e35fa:	d07e      	beq.n	80e36fa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80e35fc:	687b      	ldr	r3, [r7, #4]
 80e35fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e3600:	2b28      	cmp	r3, #40	; 0x28
 80e3602:	d867      	bhi.n	80e36d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80e3604:	a201      	add	r2, pc, #4	; (adr r2, 80e360c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80e3606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e360a:	bf00      	nop
 80e360c:	080e36db 	.word	0x080e36db
 80e3610:	080e36d5 	.word	0x080e36d5
 80e3614:	080e36d5 	.word	0x080e36d5
 80e3618:	080e36d5 	.word	0x080e36d5
 80e361c:	080e36d5 	.word	0x080e36d5
 80e3620:	080e36d5 	.word	0x080e36d5
 80e3624:	080e36d5 	.word	0x080e36d5
 80e3628:	080e36d5 	.word	0x080e36d5
 80e362c:	080e36b1 	.word	0x080e36b1
 80e3630:	080e36d5 	.word	0x080e36d5
 80e3634:	080e36d5 	.word	0x080e36d5
 80e3638:	080e36d5 	.word	0x080e36d5
 80e363c:	080e36d5 	.word	0x080e36d5
 80e3640:	080e36d5 	.word	0x080e36d5
 80e3644:	080e36d5 	.word	0x080e36d5
 80e3648:	080e36d5 	.word	0x080e36d5
 80e364c:	080e36c3 	.word	0x080e36c3
 80e3650:	080e36d5 	.word	0x080e36d5
 80e3654:	080e36d5 	.word	0x080e36d5
 80e3658:	080e36d5 	.word	0x080e36d5
 80e365c:	080e36d5 	.word	0x080e36d5
 80e3660:	080e36d5 	.word	0x080e36d5
 80e3664:	080e36d5 	.word	0x080e36d5
 80e3668:	080e36d5 	.word	0x080e36d5
 80e366c:	080e36db 	.word	0x080e36db
 80e3670:	080e36d5 	.word	0x080e36d5
 80e3674:	080e36d5 	.word	0x080e36d5
 80e3678:	080e36d5 	.word	0x080e36d5
 80e367c:	080e36d5 	.word	0x080e36d5
 80e3680:	080e36d5 	.word	0x080e36d5
 80e3684:	080e36d5 	.word	0x080e36d5
 80e3688:	080e36d5 	.word	0x080e36d5
 80e368c:	080e36db 	.word	0x080e36db
 80e3690:	080e36d5 	.word	0x080e36d5
 80e3694:	080e36d5 	.word	0x080e36d5
 80e3698:	080e36d5 	.word	0x080e36d5
 80e369c:	080e36d5 	.word	0x080e36d5
 80e36a0:	080e36d5 	.word	0x080e36d5
 80e36a4:	080e36d5 	.word	0x080e36d5
 80e36a8:	080e36d5 	.word	0x080e36d5
 80e36ac:	080e36db 	.word	0x080e36db
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e36b0:	687b      	ldr	r3, [r7, #4]
 80e36b2:	3304      	adds	r3, #4
 80e36b4:	2101      	movs	r1, #1
 80e36b6:	4618      	mov	r0, r3
 80e36b8:	f000 fb28 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e36bc:	4603      	mov	r3, r0
 80e36be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80e36c0:	e00c      	b.n	80e36dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e36c2:	687b      	ldr	r3, [r7, #4]
 80e36c4:	3324      	adds	r3, #36	; 0x24
 80e36c6:	2101      	movs	r1, #1
 80e36c8:	4618      	mov	r0, r3
 80e36ca:	f000 fbd1 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e36ce:	4603      	mov	r3, r0
 80e36d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80e36d2:	e003      	b.n	80e36dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e36d4:	2301      	movs	r3, #1
 80e36d6:	75fb      	strb	r3, [r7, #23]
      break;
 80e36d8:	e000      	b.n	80e36dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80e36da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e36dc:	7dfb      	ldrb	r3, [r7, #23]
 80e36de:	2b00      	cmp	r3, #0
 80e36e0:	d109      	bne.n	80e36f6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80e36e2:	4b1d      	ldr	r3, [pc, #116]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e36e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e36e6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80e36ea:	687b      	ldr	r3, [r7, #4]
 80e36ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e36ee:	491a      	ldr	r1, [pc, #104]	; (80e3758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e36f0:	4313      	orrs	r3, r2
 80e36f2:	654b      	str	r3, [r1, #84]	; 0x54
 80e36f4:	e001      	b.n	80e36fa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e36f6:	7dfb      	ldrb	r3, [r7, #23]
 80e36f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80e36fa:	687b      	ldr	r3, [r7, #4]
 80e36fc:	681b      	ldr	r3, [r3, #0]
 80e36fe:	f003 0302 	and.w	r3, r3, #2
 80e3702:	2b00      	cmp	r3, #0
 80e3704:	d03e      	beq.n	80e3784 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80e3706:	687b      	ldr	r3, [r7, #4]
 80e3708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e370a:	2b05      	cmp	r3, #5
 80e370c:	d820      	bhi.n	80e3750 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80e370e:	a201      	add	r2, pc, #4	; (adr r2, 80e3714 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80e3710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e3714:	080e3765 	.word	0x080e3765
 80e3718:	080e372d 	.word	0x080e372d
 80e371c:	080e373f 	.word	0x080e373f
 80e3720:	080e3765 	.word	0x080e3765
 80e3724:	080e3765 	.word	0x080e3765
 80e3728:	080e3765 	.word	0x080e3765
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e372c:	687b      	ldr	r3, [r7, #4]
 80e372e:	3304      	adds	r3, #4
 80e3730:	2101      	movs	r1, #1
 80e3732:	4618      	mov	r0, r3
 80e3734:	f000 faea 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e3738:	4603      	mov	r3, r0
 80e373a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80e373c:	e013      	b.n	80e3766 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e373e:	687b      	ldr	r3, [r7, #4]
 80e3740:	3324      	adds	r3, #36	; 0x24
 80e3742:	2101      	movs	r1, #1
 80e3744:	4618      	mov	r0, r3
 80e3746:	f000 fb93 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e374a:	4603      	mov	r3, r0
 80e374c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80e374e:	e00a      	b.n	80e3766 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3750:	2301      	movs	r3, #1
 80e3752:	75fb      	strb	r3, [r7, #23]
      break;
 80e3754:	e007      	b.n	80e3766 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80e3756:	bf00      	nop
 80e3758:	58024400 	.word	0x58024400
 80e375c:	58024800 	.word	0x58024800
 80e3760:	00ffffcf 	.word	0x00ffffcf
      break;
 80e3764:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3766:	7dfb      	ldrb	r3, [r7, #23]
 80e3768:	2b00      	cmp	r3, #0
 80e376a:	d109      	bne.n	80e3780 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80e376c:	4b9f      	ldr	r3, [pc, #636]	; (80e39ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3770:	f023 0207 	bic.w	r2, r3, #7
 80e3774:	687b      	ldr	r3, [r7, #4]
 80e3776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3778:	499c      	ldr	r1, [pc, #624]	; (80e39ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e377a:	4313      	orrs	r3, r2
 80e377c:	654b      	str	r3, [r1, #84]	; 0x54
 80e377e:	e001      	b.n	80e3784 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3780:	7dfb      	ldrb	r3, [r7, #23]
 80e3782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80e3784:	687b      	ldr	r3, [r7, #4]
 80e3786:	681b      	ldr	r3, [r3, #0]
 80e3788:	f003 0304 	and.w	r3, r3, #4
 80e378c:	2b00      	cmp	r3, #0
 80e378e:	d039      	beq.n	80e3804 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80e3790:	687b      	ldr	r3, [r7, #4]
 80e3792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80e3796:	2b05      	cmp	r3, #5
 80e3798:	d820      	bhi.n	80e37dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80e379a:	a201      	add	r2, pc, #4	; (adr r2, 80e37a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80e379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e37a0:	080e37e3 	.word	0x080e37e3
 80e37a4:	080e37b9 	.word	0x080e37b9
 80e37a8:	080e37cb 	.word	0x080e37cb
 80e37ac:	080e37e3 	.word	0x080e37e3
 80e37b0:	080e37e3 	.word	0x080e37e3
 80e37b4:	080e37e3 	.word	0x080e37e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e37b8:	687b      	ldr	r3, [r7, #4]
 80e37ba:	3304      	adds	r3, #4
 80e37bc:	2101      	movs	r1, #1
 80e37be:	4618      	mov	r0, r3
 80e37c0:	f000 faa4 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e37c4:	4603      	mov	r3, r0
 80e37c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80e37c8:	e00c      	b.n	80e37e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e37ca:	687b      	ldr	r3, [r7, #4]
 80e37cc:	3324      	adds	r3, #36	; 0x24
 80e37ce:	2101      	movs	r1, #1
 80e37d0:	4618      	mov	r0, r3
 80e37d2:	f000 fb4d 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e37d6:	4603      	mov	r3, r0
 80e37d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80e37da:	e003      	b.n	80e37e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e37dc:	2301      	movs	r3, #1
 80e37de:	75fb      	strb	r3, [r7, #23]
      break;
 80e37e0:	e000      	b.n	80e37e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80e37e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e37e4:	7dfb      	ldrb	r3, [r7, #23]
 80e37e6:	2b00      	cmp	r3, #0
 80e37e8:	d10a      	bne.n	80e3800 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80e37ea:	4b80      	ldr	r3, [pc, #512]	; (80e39ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e37ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e37ee:	f023 0207 	bic.w	r2, r3, #7
 80e37f2:	687b      	ldr	r3, [r7, #4]
 80e37f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80e37f8:	497c      	ldr	r1, [pc, #496]	; (80e39ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e37fa:	4313      	orrs	r3, r2
 80e37fc:	658b      	str	r3, [r1, #88]	; 0x58
 80e37fe:	e001      	b.n	80e3804 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3800:	7dfb      	ldrb	r3, [r7, #23]
 80e3802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80e3804:	687b      	ldr	r3, [r7, #4]
 80e3806:	681b      	ldr	r3, [r3, #0]
 80e3808:	f003 0320 	and.w	r3, r3, #32
 80e380c:	2b00      	cmp	r3, #0
 80e380e:	d04b      	beq.n	80e38a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80e3810:	687b      	ldr	r3, [r7, #4]
 80e3812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e3816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e381a:	d02e      	beq.n	80e387a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80e381c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e3820:	d828      	bhi.n	80e3874 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e3822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e3826:	d02a      	beq.n	80e387e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80e3828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e382c:	d822      	bhi.n	80e3874 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e382e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e3832:	d026      	beq.n	80e3882 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80e3834:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e3838:	d81c      	bhi.n	80e3874 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e383a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e383e:	d010      	beq.n	80e3862 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80e3840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3844:	d816      	bhi.n	80e3874 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e3846:	2b00      	cmp	r3, #0
 80e3848:	d01d      	beq.n	80e3886 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80e384a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e384e:	d111      	bne.n	80e3874 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3850:	687b      	ldr	r3, [r7, #4]
 80e3852:	3304      	adds	r3, #4
 80e3854:	2100      	movs	r1, #0
 80e3856:	4618      	mov	r0, r3
 80e3858:	f000 fa58 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e385c:	4603      	mov	r3, r0
 80e385e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80e3860:	e012      	b.n	80e3888 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e3862:	687b      	ldr	r3, [r7, #4]
 80e3864:	3324      	adds	r3, #36	; 0x24
 80e3866:	2102      	movs	r1, #2
 80e3868:	4618      	mov	r0, r3
 80e386a:	f000 fb01 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e386e:	4603      	mov	r3, r0
 80e3870:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80e3872:	e009      	b.n	80e3888 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3874:	2301      	movs	r3, #1
 80e3876:	75fb      	strb	r3, [r7, #23]
      break;
 80e3878:	e006      	b.n	80e3888 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e387a:	bf00      	nop
 80e387c:	e004      	b.n	80e3888 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e387e:	bf00      	nop
 80e3880:	e002      	b.n	80e3888 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e3882:	bf00      	nop
 80e3884:	e000      	b.n	80e3888 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e3886:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3888:	7dfb      	ldrb	r3, [r7, #23]
 80e388a:	2b00      	cmp	r3, #0
 80e388c:	d10a      	bne.n	80e38a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80e388e:	4b57      	ldr	r3, [pc, #348]	; (80e39ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3892:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80e3896:	687b      	ldr	r3, [r7, #4]
 80e3898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e389c:	4953      	ldr	r1, [pc, #332]	; (80e39ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e389e:	4313      	orrs	r3, r2
 80e38a0:	654b      	str	r3, [r1, #84]	; 0x54
 80e38a2:	e001      	b.n	80e38a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e38a4:	7dfb      	ldrb	r3, [r7, #23]
 80e38a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80e38a8:	687b      	ldr	r3, [r7, #4]
 80e38aa:	681b      	ldr	r3, [r3, #0]
 80e38ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80e38b0:	2b00      	cmp	r3, #0
 80e38b2:	d04b      	beq.n	80e394c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80e38b4:	687b      	ldr	r3, [r7, #4]
 80e38b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80e38ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80e38be:	d02e      	beq.n	80e391e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80e38c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80e38c4:	d828      	bhi.n	80e3918 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e38c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e38ca:	d02a      	beq.n	80e3922 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80e38cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e38d0:	d822      	bhi.n	80e3918 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e38d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80e38d6:	d026      	beq.n	80e3926 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80e38d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80e38dc:	d81c      	bhi.n	80e3918 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e38de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80e38e2:	d010      	beq.n	80e3906 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80e38e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80e38e8:	d816      	bhi.n	80e3918 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e38ea:	2b00      	cmp	r3, #0
 80e38ec:	d01d      	beq.n	80e392a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80e38ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80e38f2:	d111      	bne.n	80e3918 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e38f4:	687b      	ldr	r3, [r7, #4]
 80e38f6:	3304      	adds	r3, #4
 80e38f8:	2100      	movs	r1, #0
 80e38fa:	4618      	mov	r0, r3
 80e38fc:	f000 fa06 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e3900:	4603      	mov	r3, r0
 80e3902:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80e3904:	e012      	b.n	80e392c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e3906:	687b      	ldr	r3, [r7, #4]
 80e3908:	3324      	adds	r3, #36	; 0x24
 80e390a:	2102      	movs	r1, #2
 80e390c:	4618      	mov	r0, r3
 80e390e:	f000 faaf 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e3912:	4603      	mov	r3, r0
 80e3914:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80e3916:	e009      	b.n	80e392c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3918:	2301      	movs	r3, #1
 80e391a:	75fb      	strb	r3, [r7, #23]
      break;
 80e391c:	e006      	b.n	80e392c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e391e:	bf00      	nop
 80e3920:	e004      	b.n	80e392c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e3922:	bf00      	nop
 80e3924:	e002      	b.n	80e392c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e3926:	bf00      	nop
 80e3928:	e000      	b.n	80e392c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e392a:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e392c:	7dfb      	ldrb	r3, [r7, #23]
 80e392e:	2b00      	cmp	r3, #0
 80e3930:	d10a      	bne.n	80e3948 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80e3932:	4b2e      	ldr	r3, [pc, #184]	; (80e39ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3936:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80e393a:	687b      	ldr	r3, [r7, #4]
 80e393c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80e3940:	492a      	ldr	r1, [pc, #168]	; (80e39ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3942:	4313      	orrs	r3, r2
 80e3944:	658b      	str	r3, [r1, #88]	; 0x58
 80e3946:	e001      	b.n	80e394c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3948:	7dfb      	ldrb	r3, [r7, #23]
 80e394a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80e394c:	687b      	ldr	r3, [r7, #4]
 80e394e:	681b      	ldr	r3, [r3, #0]
 80e3950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80e3954:	2b00      	cmp	r3, #0
 80e3956:	d04d      	beq.n	80e39f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80e3958:	687b      	ldr	r3, [r7, #4]
 80e395a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80e395e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80e3962:	d02e      	beq.n	80e39c2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80e3964:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80e3968:	d828      	bhi.n	80e39bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e396a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80e396e:	d02a      	beq.n	80e39c6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80e3970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80e3974:	d822      	bhi.n	80e39bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e3976:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80e397a:	d026      	beq.n	80e39ca <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80e397c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80e3980:	d81c      	bhi.n	80e39bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e3982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e3986:	d010      	beq.n	80e39aa <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80e3988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e398c:	d816      	bhi.n	80e39bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e398e:	2b00      	cmp	r3, #0
 80e3990:	d01d      	beq.n	80e39ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80e3992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e3996:	d111      	bne.n	80e39bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3998:	687b      	ldr	r3, [r7, #4]
 80e399a:	3304      	adds	r3, #4
 80e399c:	2100      	movs	r1, #0
 80e399e:	4618      	mov	r0, r3
 80e39a0:	f000 f9b4 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e39a4:	4603      	mov	r3, r0
 80e39a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80e39a8:	e012      	b.n	80e39d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e39aa:	687b      	ldr	r3, [r7, #4]
 80e39ac:	3324      	adds	r3, #36	; 0x24
 80e39ae:	2102      	movs	r1, #2
 80e39b0:	4618      	mov	r0, r3
 80e39b2:	f000 fa5d 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e39b6:	4603      	mov	r3, r0
 80e39b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80e39ba:	e009      	b.n	80e39d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e39bc:	2301      	movs	r3, #1
 80e39be:	75fb      	strb	r3, [r7, #23]
      break;
 80e39c0:	e006      	b.n	80e39d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e39c2:	bf00      	nop
 80e39c4:	e004      	b.n	80e39d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e39c6:	bf00      	nop
 80e39c8:	e002      	b.n	80e39d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e39ca:	bf00      	nop
 80e39cc:	e000      	b.n	80e39d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e39ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e39d0:	7dfb      	ldrb	r3, [r7, #23]
 80e39d2:	2b00      	cmp	r3, #0
 80e39d4:	d10c      	bne.n	80e39f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80e39d6:	4b05      	ldr	r3, [pc, #20]	; (80e39ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e39d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e39da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80e39de:	687b      	ldr	r3, [r7, #4]
 80e39e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80e39e4:	4901      	ldr	r1, [pc, #4]	; (80e39ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e39e6:	4313      	orrs	r3, r2
 80e39e8:	658b      	str	r3, [r1, #88]	; 0x58
 80e39ea:	e003      	b.n	80e39f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80e39ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e39f0:	7dfb      	ldrb	r3, [r7, #23]
 80e39f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80e39f4:	687b      	ldr	r3, [r7, #4]
 80e39f6:	681b      	ldr	r3, [r3, #0]
 80e39f8:	f003 0308 	and.w	r3, r3, #8
 80e39fc:	2b00      	cmp	r3, #0
 80e39fe:	d018      	beq.n	80e3a32 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80e3a00:	687b      	ldr	r3, [r7, #4]
 80e3a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80e3a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e3a08:	d10a      	bne.n	80e3a20 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80e3a0a:	687b      	ldr	r3, [r7, #4]
 80e3a0c:	3324      	adds	r3, #36	; 0x24
 80e3a0e:	2102      	movs	r1, #2
 80e3a10:	4618      	mov	r0, r3
 80e3a12:	f000 fa2d 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e3a16:	4603      	mov	r3, r0
 80e3a18:	2b00      	cmp	r3, #0
 80e3a1a:	d001      	beq.n	80e3a20 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80e3a1c:	2301      	movs	r3, #1
 80e3a1e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80e3a20:	4b8a      	ldr	r3, [pc, #552]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3a24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80e3a28:	687b      	ldr	r3, [r7, #4]
 80e3a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80e3a2c:	4987      	ldr	r1, [pc, #540]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3a2e:	4313      	orrs	r3, r2
 80e3a30:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80e3a32:	687b      	ldr	r3, [r7, #4]
 80e3a34:	681b      	ldr	r3, [r3, #0]
 80e3a36:	f003 0310 	and.w	r3, r3, #16
 80e3a3a:	2b00      	cmp	r3, #0
 80e3a3c:	d01a      	beq.n	80e3a74 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80e3a3e:	687b      	ldr	r3, [r7, #4]
 80e3a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e3a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e3a48:	d10a      	bne.n	80e3a60 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80e3a4a:	687b      	ldr	r3, [r7, #4]
 80e3a4c:	3324      	adds	r3, #36	; 0x24
 80e3a4e:	2102      	movs	r1, #2
 80e3a50:	4618      	mov	r0, r3
 80e3a52:	f000 fa0d 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e3a56:	4603      	mov	r3, r0
 80e3a58:	2b00      	cmp	r3, #0
 80e3a5a:	d001      	beq.n	80e3a60 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80e3a5c:	2301      	movs	r3, #1
 80e3a5e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80e3a60:	4b7a      	ldr	r3, [pc, #488]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80e3a68:	687b      	ldr	r3, [r7, #4]
 80e3a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e3a6e:	4977      	ldr	r1, [pc, #476]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3a70:	4313      	orrs	r3, r2
 80e3a72:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80e3a74:	687b      	ldr	r3, [r7, #4]
 80e3a76:	681b      	ldr	r3, [r3, #0]
 80e3a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80e3a7c:	2b00      	cmp	r3, #0
 80e3a7e:	d034      	beq.n	80e3aea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80e3a80:	687b      	ldr	r3, [r7, #4]
 80e3a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e3a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e3a8a:	d01d      	beq.n	80e3ac8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80e3a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e3a90:	d817      	bhi.n	80e3ac2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80e3a92:	2b00      	cmp	r3, #0
 80e3a94:	d003      	beq.n	80e3a9e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80e3a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e3a9a:	d009      	beq.n	80e3ab0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80e3a9c:	e011      	b.n	80e3ac2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3a9e:	687b      	ldr	r3, [r7, #4]
 80e3aa0:	3304      	adds	r3, #4
 80e3aa2:	2100      	movs	r1, #0
 80e3aa4:	4618      	mov	r0, r3
 80e3aa6:	f000 f931 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e3aaa:	4603      	mov	r3, r0
 80e3aac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80e3aae:	e00c      	b.n	80e3aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e3ab0:	687b      	ldr	r3, [r7, #4]
 80e3ab2:	3324      	adds	r3, #36	; 0x24
 80e3ab4:	2102      	movs	r1, #2
 80e3ab6:	4618      	mov	r0, r3
 80e3ab8:	f000 f9da 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e3abc:	4603      	mov	r3, r0
 80e3abe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80e3ac0:	e003      	b.n	80e3aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3ac2:	2301      	movs	r3, #1
 80e3ac4:	75fb      	strb	r3, [r7, #23]
      break;
 80e3ac6:	e000      	b.n	80e3aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80e3ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3aca:	7dfb      	ldrb	r3, [r7, #23]
 80e3acc:	2b00      	cmp	r3, #0
 80e3ace:	d10a      	bne.n	80e3ae6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80e3ad0:	4b5e      	ldr	r3, [pc, #376]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80e3ad8:	687b      	ldr	r3, [r7, #4]
 80e3ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e3ade:	495b      	ldr	r1, [pc, #364]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3ae0:	4313      	orrs	r3, r2
 80e3ae2:	658b      	str	r3, [r1, #88]	; 0x58
 80e3ae4:	e001      	b.n	80e3aea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3ae6:	7dfb      	ldrb	r3, [r7, #23]
 80e3ae8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80e3aea:	687b      	ldr	r3, [r7, #4]
 80e3aec:	681b      	ldr	r3, [r3, #0]
 80e3aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80e3af2:	2b00      	cmp	r3, #0
 80e3af4:	d033      	beq.n	80e3b5e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80e3af6:	687b      	ldr	r3, [r7, #4]
 80e3af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80e3afc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e3b00:	d01c      	beq.n	80e3b3c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80e3b02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e3b06:	d816      	bhi.n	80e3b36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80e3b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80e3b0c:	d003      	beq.n	80e3b16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80e3b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e3b12:	d007      	beq.n	80e3b24 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80e3b14:	e00f      	b.n	80e3b36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3b16:	4b4d      	ldr	r3, [pc, #308]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3b1a:	4a4c      	ldr	r2, [pc, #304]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3b20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80e3b22:	e00c      	b.n	80e3b3e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e3b24:	687b      	ldr	r3, [r7, #4]
 80e3b26:	3324      	adds	r3, #36	; 0x24
 80e3b28:	2101      	movs	r1, #1
 80e3b2a:	4618      	mov	r0, r3
 80e3b2c:	f000 f9a0 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e3b30:	4603      	mov	r3, r0
 80e3b32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80e3b34:	e003      	b.n	80e3b3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3b36:	2301      	movs	r3, #1
 80e3b38:	75fb      	strb	r3, [r7, #23]
      break;
 80e3b3a:	e000      	b.n	80e3b3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80e3b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3b3e:	7dfb      	ldrb	r3, [r7, #23]
 80e3b40:	2b00      	cmp	r3, #0
 80e3b42:	d10a      	bne.n	80e3b5a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80e3b44:	4b41      	ldr	r3, [pc, #260]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80e3b4c:	687b      	ldr	r3, [r7, #4]
 80e3b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80e3b52:	493e      	ldr	r1, [pc, #248]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3b54:	4313      	orrs	r3, r2
 80e3b56:	654b      	str	r3, [r1, #84]	; 0x54
 80e3b58:	e001      	b.n	80e3b5e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3b5a:	7dfb      	ldrb	r3, [r7, #23]
 80e3b5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80e3b5e:	687b      	ldr	r3, [r7, #4]
 80e3b60:	681b      	ldr	r3, [r3, #0]
 80e3b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80e3b66:	2b00      	cmp	r3, #0
 80e3b68:	d029      	beq.n	80e3bbe <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80e3b6a:	687b      	ldr	r3, [r7, #4]
 80e3b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3b6e:	2b00      	cmp	r3, #0
 80e3b70:	d003      	beq.n	80e3b7a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80e3b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e3b76:	d007      	beq.n	80e3b88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80e3b78:	e00f      	b.n	80e3b9a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3b7a:	4b34      	ldr	r3, [pc, #208]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3b7e:	4a33      	ldr	r2, [pc, #204]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3b84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80e3b86:	e00b      	b.n	80e3ba0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e3b88:	687b      	ldr	r3, [r7, #4]
 80e3b8a:	3304      	adds	r3, #4
 80e3b8c:	2102      	movs	r1, #2
 80e3b8e:	4618      	mov	r0, r3
 80e3b90:	f000 f8bc 	bl	80e3d0c <RCCEx_PLL2_Config>
 80e3b94:	4603      	mov	r3, r0
 80e3b96:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80e3b98:	e002      	b.n	80e3ba0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80e3b9a:	2301      	movs	r3, #1
 80e3b9c:	75fb      	strb	r3, [r7, #23]
      break;
 80e3b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3ba0:	7dfb      	ldrb	r3, [r7, #23]
 80e3ba2:	2b00      	cmp	r3, #0
 80e3ba4:	d109      	bne.n	80e3bba <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80e3ba6:	4b29      	ldr	r3, [pc, #164]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3baa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80e3bae:	687b      	ldr	r3, [r7, #4]
 80e3bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3bb2:	4926      	ldr	r1, [pc, #152]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3bb4:	4313      	orrs	r3, r2
 80e3bb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e3bb8:	e001      	b.n	80e3bbe <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3bba:	7dfb      	ldrb	r3, [r7, #23]
 80e3bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80e3bbe:	687b      	ldr	r3, [r7, #4]
 80e3bc0:	681b      	ldr	r3, [r3, #0]
 80e3bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e3bc6:	2b00      	cmp	r3, #0
 80e3bc8:	d00a      	beq.n	80e3be0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80e3bca:	687b      	ldr	r3, [r7, #4]
 80e3bcc:	3324      	adds	r3, #36	; 0x24
 80e3bce:	2102      	movs	r1, #2
 80e3bd0:	4618      	mov	r0, r3
 80e3bd2:	f000 f94d 	bl	80e3e70 <RCCEx_PLL3_Config>
 80e3bd6:	4603      	mov	r3, r0
 80e3bd8:	2b00      	cmp	r3, #0
 80e3bda:	d001      	beq.n	80e3be0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80e3bdc:	2301      	movs	r3, #1
 80e3bde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80e3be0:	687b      	ldr	r3, [r7, #4]
 80e3be2:	681b      	ldr	r3, [r3, #0]
 80e3be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e3be8:	2b00      	cmp	r3, #0
 80e3bea:	d033      	beq.n	80e3c54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80e3bec:	687b      	ldr	r3, [r7, #4]
 80e3bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80e3bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e3bf4:	d017      	beq.n	80e3c26 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80e3bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e3bfa:	d811      	bhi.n	80e3c20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80e3bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80e3c00:	d013      	beq.n	80e3c2a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80e3c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80e3c06:	d80b      	bhi.n	80e3c20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80e3c08:	2b00      	cmp	r3, #0
 80e3c0a:	d010      	beq.n	80e3c2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80e3c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e3c10:	d106      	bne.n	80e3c20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3c12:	4b0e      	ldr	r3, [pc, #56]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3c16:	4a0d      	ldr	r2, [pc, #52]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80e3c1e:	e007      	b.n	80e3c30 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3c20:	2301      	movs	r3, #1
 80e3c22:	75fb      	strb	r3, [r7, #23]
      break;
 80e3c24:	e004      	b.n	80e3c30 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e3c26:	bf00      	nop
 80e3c28:	e002      	b.n	80e3c30 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e3c2a:	bf00      	nop
 80e3c2c:	e000      	b.n	80e3c30 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e3c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3c30:	7dfb      	ldrb	r3, [r7, #23]
 80e3c32:	2b00      	cmp	r3, #0
 80e3c34:	d10c      	bne.n	80e3c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80e3c36:	4b05      	ldr	r3, [pc, #20]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80e3c3e:	687b      	ldr	r3, [r7, #4]
 80e3c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80e3c42:	4902      	ldr	r1, [pc, #8]	; (80e3c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3c44:	4313      	orrs	r3, r2
 80e3c46:	654b      	str	r3, [r1, #84]	; 0x54
 80e3c48:	e004      	b.n	80e3c54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80e3c4a:	bf00      	nop
 80e3c4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3c50:	7dfb      	ldrb	r3, [r7, #23]
 80e3c52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80e3c54:	687b      	ldr	r3, [r7, #4]
 80e3c56:	681b      	ldr	r3, [r3, #0]
 80e3c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80e3c5c:	2b00      	cmp	r3, #0
 80e3c5e:	d008      	beq.n	80e3c72 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80e3c60:	4b29      	ldr	r3, [pc, #164]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3c64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80e3c68:	687b      	ldr	r3, [r7, #4]
 80e3c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80e3c6c:	4926      	ldr	r1, [pc, #152]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3c6e:	4313      	orrs	r3, r2
 80e3c70:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80e3c72:	687b      	ldr	r3, [r7, #4]
 80e3c74:	681b      	ldr	r3, [r3, #0]
 80e3c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e3c7a:	2b00      	cmp	r3, #0
 80e3c7c:	d008      	beq.n	80e3c90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80e3c7e:	4b22      	ldr	r3, [pc, #136]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3c82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80e3c86:	687b      	ldr	r3, [r7, #4]
 80e3c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80e3c8a:	491f      	ldr	r1, [pc, #124]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3c8c:	4313      	orrs	r3, r2
 80e3c8e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80e3c90:	687b      	ldr	r3, [r7, #4]
 80e3c92:	681b      	ldr	r3, [r3, #0]
 80e3c94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80e3c98:	2b00      	cmp	r3, #0
 80e3c9a:	d00d      	beq.n	80e3cb8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80e3c9c:	4b1a      	ldr	r3, [pc, #104]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3c9e:	691b      	ldr	r3, [r3, #16]
 80e3ca0:	4a19      	ldr	r2, [pc, #100]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3ca2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80e3ca6:	6113      	str	r3, [r2, #16]
 80e3ca8:	4b17      	ldr	r3, [pc, #92]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3caa:	691a      	ldr	r2, [r3, #16]
 80e3cac:	687b      	ldr	r3, [r7, #4]
 80e3cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e3cb2:	4915      	ldr	r1, [pc, #84]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3cb4:	4313      	orrs	r3, r2
 80e3cb6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80e3cb8:	687b      	ldr	r3, [r7, #4]
 80e3cba:	681b      	ldr	r3, [r3, #0]
 80e3cbc:	2b00      	cmp	r3, #0
 80e3cbe:	da08      	bge.n	80e3cd2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80e3cc0:	4b11      	ldr	r3, [pc, #68]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3cc4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80e3cc8:	687b      	ldr	r3, [r7, #4]
 80e3cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3ccc:	490e      	ldr	r1, [pc, #56]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3cce:	4313      	orrs	r3, r2
 80e3cd0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80e3cd2:	687b      	ldr	r3, [r7, #4]
 80e3cd4:	681b      	ldr	r3, [r3, #0]
 80e3cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80e3cda:	2b00      	cmp	r3, #0
 80e3cdc:	d009      	beq.n	80e3cf2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80e3cde:	4b0a      	ldr	r3, [pc, #40]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3ce2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80e3ce6:	687b      	ldr	r3, [r7, #4]
 80e3ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80e3cec:	4906      	ldr	r1, [pc, #24]	; (80e3d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3cee:	4313      	orrs	r3, r2
 80e3cf0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80e3cf2:	7dbb      	ldrb	r3, [r7, #22]
 80e3cf4:	2b00      	cmp	r3, #0
 80e3cf6:	d101      	bne.n	80e3cfc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80e3cf8:	2300      	movs	r3, #0
 80e3cfa:	e000      	b.n	80e3cfe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80e3cfc:	2301      	movs	r3, #1
}
 80e3cfe:	4618      	mov	r0, r3
 80e3d00:	3718      	adds	r7, #24
 80e3d02:	46bd      	mov	sp, r7
 80e3d04:	bd80      	pop	{r7, pc}
 80e3d06:	bf00      	nop
 80e3d08:	58024400 	.word	0x58024400

080e3d0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80e3d0c:	b580      	push	{r7, lr}
 80e3d0e:	b084      	sub	sp, #16
 80e3d10:	af00      	add	r7, sp, #0
 80e3d12:	6078      	str	r0, [r7, #4]
 80e3d14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80e3d16:	2300      	movs	r3, #0
 80e3d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80e3d1a:	4b53      	ldr	r3, [pc, #332]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e3d1e:	f003 0303 	and.w	r3, r3, #3
 80e3d22:	2b03      	cmp	r3, #3
 80e3d24:	d101      	bne.n	80e3d2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80e3d26:	2301      	movs	r3, #1
 80e3d28:	e099      	b.n	80e3e5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80e3d2a:	4b4f      	ldr	r3, [pc, #316]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3d2c:	681b      	ldr	r3, [r3, #0]
 80e3d2e:	4a4e      	ldr	r2, [pc, #312]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3d30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80e3d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e3d36:	f7fc ff0d 	bl	80e0b54 <HAL_GetTick>
 80e3d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80e3d3c:	e008      	b.n	80e3d50 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80e3d3e:	f7fc ff09 	bl	80e0b54 <HAL_GetTick>
 80e3d42:	4602      	mov	r2, r0
 80e3d44:	68bb      	ldr	r3, [r7, #8]
 80e3d46:	1ad3      	subs	r3, r2, r3
 80e3d48:	2b02      	cmp	r3, #2
 80e3d4a:	d901      	bls.n	80e3d50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80e3d4c:	2303      	movs	r3, #3
 80e3d4e:	e086      	b.n	80e3e5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80e3d50:	4b45      	ldr	r3, [pc, #276]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3d52:	681b      	ldr	r3, [r3, #0]
 80e3d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e3d58:	2b00      	cmp	r3, #0
 80e3d5a:	d1f0      	bne.n	80e3d3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80e3d5c:	4b42      	ldr	r3, [pc, #264]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e3d60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80e3d64:	687b      	ldr	r3, [r7, #4]
 80e3d66:	681b      	ldr	r3, [r3, #0]
 80e3d68:	031b      	lsls	r3, r3, #12
 80e3d6a:	493f      	ldr	r1, [pc, #252]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3d6c:	4313      	orrs	r3, r2
 80e3d6e:	628b      	str	r3, [r1, #40]	; 0x28
 80e3d70:	687b      	ldr	r3, [r7, #4]
 80e3d72:	685b      	ldr	r3, [r3, #4]
 80e3d74:	3b01      	subs	r3, #1
 80e3d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e3d7a:	687b      	ldr	r3, [r7, #4]
 80e3d7c:	689b      	ldr	r3, [r3, #8]
 80e3d7e:	3b01      	subs	r3, #1
 80e3d80:	025b      	lsls	r3, r3, #9
 80e3d82:	b29b      	uxth	r3, r3
 80e3d84:	431a      	orrs	r2, r3
 80e3d86:	687b      	ldr	r3, [r7, #4]
 80e3d88:	68db      	ldr	r3, [r3, #12]
 80e3d8a:	3b01      	subs	r3, #1
 80e3d8c:	041b      	lsls	r3, r3, #16
 80e3d8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e3d92:	431a      	orrs	r2, r3
 80e3d94:	687b      	ldr	r3, [r7, #4]
 80e3d96:	691b      	ldr	r3, [r3, #16]
 80e3d98:	3b01      	subs	r3, #1
 80e3d9a:	061b      	lsls	r3, r3, #24
 80e3d9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e3da0:	4931      	ldr	r1, [pc, #196]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3da2:	4313      	orrs	r3, r2
 80e3da4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80e3da6:	4b30      	ldr	r3, [pc, #192]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3daa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80e3dae:	687b      	ldr	r3, [r7, #4]
 80e3db0:	695b      	ldr	r3, [r3, #20]
 80e3db2:	492d      	ldr	r1, [pc, #180]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3db4:	4313      	orrs	r3, r2
 80e3db6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80e3db8:	4b2b      	ldr	r3, [pc, #172]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3dbc:	f023 0220 	bic.w	r2, r3, #32
 80e3dc0:	687b      	ldr	r3, [r7, #4]
 80e3dc2:	699b      	ldr	r3, [r3, #24]
 80e3dc4:	4928      	ldr	r1, [pc, #160]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3dc6:	4313      	orrs	r3, r2
 80e3dc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80e3dca:	4b27      	ldr	r3, [pc, #156]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3dce:	4a26      	ldr	r2, [pc, #152]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3dd0:	f023 0310 	bic.w	r3, r3, #16
 80e3dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80e3dd6:	4b24      	ldr	r3, [pc, #144]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80e3dda:	4b24      	ldr	r3, [pc, #144]	; (80e3e6c <RCCEx_PLL2_Config+0x160>)
 80e3ddc:	4013      	ands	r3, r2
 80e3dde:	687a      	ldr	r2, [r7, #4]
 80e3de0:	69d2      	ldr	r2, [r2, #28]
 80e3de2:	00d2      	lsls	r2, r2, #3
 80e3de4:	4920      	ldr	r1, [pc, #128]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3de6:	4313      	orrs	r3, r2
 80e3de8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80e3dea:	4b1f      	ldr	r3, [pc, #124]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3dee:	4a1e      	ldr	r2, [pc, #120]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3df0:	f043 0310 	orr.w	r3, r3, #16
 80e3df4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80e3df6:	683b      	ldr	r3, [r7, #0]
 80e3df8:	2b00      	cmp	r3, #0
 80e3dfa:	d106      	bne.n	80e3e0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80e3dfc:	4b1a      	ldr	r3, [pc, #104]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3e00:	4a19      	ldr	r2, [pc, #100]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3e02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80e3e06:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e3e08:	e00f      	b.n	80e3e2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80e3e0a:	683b      	ldr	r3, [r7, #0]
 80e3e0c:	2b01      	cmp	r3, #1
 80e3e0e:	d106      	bne.n	80e3e1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80e3e10:	4b15      	ldr	r3, [pc, #84]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3e14:	4a14      	ldr	r2, [pc, #80]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80e3e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e3e1c:	e005      	b.n	80e3e2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80e3e1e:	4b12      	ldr	r3, [pc, #72]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3e22:	4a11      	ldr	r2, [pc, #68]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80e3e28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80e3e2a:	4b0f      	ldr	r3, [pc, #60]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3e2c:	681b      	ldr	r3, [r3, #0]
 80e3e2e:	4a0e      	ldr	r2, [pc, #56]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3e30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80e3e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e3e36:	f7fc fe8d 	bl	80e0b54 <HAL_GetTick>
 80e3e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80e3e3c:	e008      	b.n	80e3e50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80e3e3e:	f7fc fe89 	bl	80e0b54 <HAL_GetTick>
 80e3e42:	4602      	mov	r2, r0
 80e3e44:	68bb      	ldr	r3, [r7, #8]
 80e3e46:	1ad3      	subs	r3, r2, r3
 80e3e48:	2b02      	cmp	r3, #2
 80e3e4a:	d901      	bls.n	80e3e50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80e3e4c:	2303      	movs	r3, #3
 80e3e4e:	e006      	b.n	80e3e5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80e3e50:	4b05      	ldr	r3, [pc, #20]	; (80e3e68 <RCCEx_PLL2_Config+0x15c>)
 80e3e52:	681b      	ldr	r3, [r3, #0]
 80e3e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e3e58:	2b00      	cmp	r3, #0
 80e3e5a:	d0f0      	beq.n	80e3e3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80e3e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 80e3e5e:	4618      	mov	r0, r3
 80e3e60:	3710      	adds	r7, #16
 80e3e62:	46bd      	mov	sp, r7
 80e3e64:	bd80      	pop	{r7, pc}
 80e3e66:	bf00      	nop
 80e3e68:	58024400 	.word	0x58024400
 80e3e6c:	ffff0007 	.word	0xffff0007

080e3e70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80e3e70:	b580      	push	{r7, lr}
 80e3e72:	b084      	sub	sp, #16
 80e3e74:	af00      	add	r7, sp, #0
 80e3e76:	6078      	str	r0, [r7, #4]
 80e3e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80e3e7a:	2300      	movs	r3, #0
 80e3e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80e3e7e:	4b53      	ldr	r3, [pc, #332]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e3e82:	f003 0303 	and.w	r3, r3, #3
 80e3e86:	2b03      	cmp	r3, #3
 80e3e88:	d101      	bne.n	80e3e8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80e3e8a:	2301      	movs	r3, #1
 80e3e8c:	e099      	b.n	80e3fc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80e3e8e:	4b4f      	ldr	r3, [pc, #316]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3e90:	681b      	ldr	r3, [r3, #0]
 80e3e92:	4a4e      	ldr	r2, [pc, #312]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80e3e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e3e9a:	f7fc fe5b 	bl	80e0b54 <HAL_GetTick>
 80e3e9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80e3ea0:	e008      	b.n	80e3eb4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80e3ea2:	f7fc fe57 	bl	80e0b54 <HAL_GetTick>
 80e3ea6:	4602      	mov	r2, r0
 80e3ea8:	68bb      	ldr	r3, [r7, #8]
 80e3eaa:	1ad3      	subs	r3, r2, r3
 80e3eac:	2b02      	cmp	r3, #2
 80e3eae:	d901      	bls.n	80e3eb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80e3eb0:	2303      	movs	r3, #3
 80e3eb2:	e086      	b.n	80e3fc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80e3eb4:	4b45      	ldr	r3, [pc, #276]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3eb6:	681b      	ldr	r3, [r3, #0]
 80e3eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e3ebc:	2b00      	cmp	r3, #0
 80e3ebe:	d1f0      	bne.n	80e3ea2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80e3ec0:	4b42      	ldr	r3, [pc, #264]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e3ec4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80e3ec8:	687b      	ldr	r3, [r7, #4]
 80e3eca:	681b      	ldr	r3, [r3, #0]
 80e3ecc:	051b      	lsls	r3, r3, #20
 80e3ece:	493f      	ldr	r1, [pc, #252]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3ed0:	4313      	orrs	r3, r2
 80e3ed2:	628b      	str	r3, [r1, #40]	; 0x28
 80e3ed4:	687b      	ldr	r3, [r7, #4]
 80e3ed6:	685b      	ldr	r3, [r3, #4]
 80e3ed8:	3b01      	subs	r3, #1
 80e3eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e3ede:	687b      	ldr	r3, [r7, #4]
 80e3ee0:	689b      	ldr	r3, [r3, #8]
 80e3ee2:	3b01      	subs	r3, #1
 80e3ee4:	025b      	lsls	r3, r3, #9
 80e3ee6:	b29b      	uxth	r3, r3
 80e3ee8:	431a      	orrs	r2, r3
 80e3eea:	687b      	ldr	r3, [r7, #4]
 80e3eec:	68db      	ldr	r3, [r3, #12]
 80e3eee:	3b01      	subs	r3, #1
 80e3ef0:	041b      	lsls	r3, r3, #16
 80e3ef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e3ef6:	431a      	orrs	r2, r3
 80e3ef8:	687b      	ldr	r3, [r7, #4]
 80e3efa:	691b      	ldr	r3, [r3, #16]
 80e3efc:	3b01      	subs	r3, #1
 80e3efe:	061b      	lsls	r3, r3, #24
 80e3f00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e3f04:	4931      	ldr	r1, [pc, #196]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f06:	4313      	orrs	r3, r2
 80e3f08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80e3f0a:	4b30      	ldr	r3, [pc, #192]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3f0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80e3f12:	687b      	ldr	r3, [r7, #4]
 80e3f14:	695b      	ldr	r3, [r3, #20]
 80e3f16:	492d      	ldr	r1, [pc, #180]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f18:	4313      	orrs	r3, r2
 80e3f1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80e3f1c:	4b2b      	ldr	r3, [pc, #172]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3f20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80e3f24:	687b      	ldr	r3, [r7, #4]
 80e3f26:	699b      	ldr	r3, [r3, #24]
 80e3f28:	4928      	ldr	r1, [pc, #160]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f2a:	4313      	orrs	r3, r2
 80e3f2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80e3f2e:	4b27      	ldr	r3, [pc, #156]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3f32:	4a26      	ldr	r2, [pc, #152]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80e3f38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80e3f3a:	4b24      	ldr	r3, [pc, #144]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80e3f3e:	4b24      	ldr	r3, [pc, #144]	; (80e3fd0 <RCCEx_PLL3_Config+0x160>)
 80e3f40:	4013      	ands	r3, r2
 80e3f42:	687a      	ldr	r2, [r7, #4]
 80e3f44:	69d2      	ldr	r2, [r2, #28]
 80e3f46:	00d2      	lsls	r2, r2, #3
 80e3f48:	4920      	ldr	r1, [pc, #128]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f4a:	4313      	orrs	r3, r2
 80e3f4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80e3f4e:	4b1f      	ldr	r3, [pc, #124]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3f52:	4a1e      	ldr	r2, [pc, #120]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e3f58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80e3f5a:	683b      	ldr	r3, [r7, #0]
 80e3f5c:	2b00      	cmp	r3, #0
 80e3f5e:	d106      	bne.n	80e3f6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80e3f60:	4b1a      	ldr	r3, [pc, #104]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3f64:	4a19      	ldr	r2, [pc, #100]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80e3f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e3f6c:	e00f      	b.n	80e3f8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80e3f6e:	683b      	ldr	r3, [r7, #0]
 80e3f70:	2b01      	cmp	r3, #1
 80e3f72:	d106      	bne.n	80e3f82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80e3f74:	4b15      	ldr	r3, [pc, #84]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3f78:	4a14      	ldr	r2, [pc, #80]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80e3f7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e3f80:	e005      	b.n	80e3f8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80e3f82:	4b12      	ldr	r3, [pc, #72]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3f86:	4a11      	ldr	r2, [pc, #68]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80e3f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80e3f8e:	4b0f      	ldr	r3, [pc, #60]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f90:	681b      	ldr	r3, [r3, #0]
 80e3f92:	4a0e      	ldr	r2, [pc, #56]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80e3f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e3f9a:	f7fc fddb 	bl	80e0b54 <HAL_GetTick>
 80e3f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80e3fa0:	e008      	b.n	80e3fb4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80e3fa2:	f7fc fdd7 	bl	80e0b54 <HAL_GetTick>
 80e3fa6:	4602      	mov	r2, r0
 80e3fa8:	68bb      	ldr	r3, [r7, #8]
 80e3faa:	1ad3      	subs	r3, r2, r3
 80e3fac:	2b02      	cmp	r3, #2
 80e3fae:	d901      	bls.n	80e3fb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80e3fb0:	2303      	movs	r3, #3
 80e3fb2:	e006      	b.n	80e3fc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80e3fb4:	4b05      	ldr	r3, [pc, #20]	; (80e3fcc <RCCEx_PLL3_Config+0x15c>)
 80e3fb6:	681b      	ldr	r3, [r3, #0]
 80e3fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e3fbc:	2b00      	cmp	r3, #0
 80e3fbe:	d0f0      	beq.n	80e3fa2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80e3fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 80e3fc2:	4618      	mov	r0, r3
 80e3fc4:	3710      	adds	r7, #16
 80e3fc6:	46bd      	mov	sp, r7
 80e3fc8:	bd80      	pop	{r7, pc}
 80e3fca:	bf00      	nop
 80e3fcc:	58024400 	.word	0x58024400
 80e3fd0:	ffff0007 	.word	0xffff0007

080e3fd4 <__libc_init_array>:
 80e3fd4:	b570      	push	{r4, r5, r6, lr}
 80e3fd6:	4d0d      	ldr	r5, [pc, #52]	; (80e400c <__libc_init_array+0x38>)
 80e3fd8:	4c0d      	ldr	r4, [pc, #52]	; (80e4010 <__libc_init_array+0x3c>)
 80e3fda:	1b64      	subs	r4, r4, r5
 80e3fdc:	10a4      	asrs	r4, r4, #2
 80e3fde:	2600      	movs	r6, #0
 80e3fe0:	42a6      	cmp	r6, r4
 80e3fe2:	d109      	bne.n	80e3ff8 <__libc_init_array+0x24>
 80e3fe4:	4d0b      	ldr	r5, [pc, #44]	; (80e4014 <__libc_init_array+0x40>)
 80e3fe6:	4c0c      	ldr	r4, [pc, #48]	; (80e4018 <__libc_init_array+0x44>)
 80e3fe8:	f000 f82e 	bl	80e4048 <_init>
 80e3fec:	1b64      	subs	r4, r4, r5
 80e3fee:	10a4      	asrs	r4, r4, #2
 80e3ff0:	2600      	movs	r6, #0
 80e3ff2:	42a6      	cmp	r6, r4
 80e3ff4:	d105      	bne.n	80e4002 <__libc_init_array+0x2e>
 80e3ff6:	bd70      	pop	{r4, r5, r6, pc}
 80e3ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 80e3ffc:	4798      	blx	r3
 80e3ffe:	3601      	adds	r6, #1
 80e4000:	e7ee      	b.n	80e3fe0 <__libc_init_array+0xc>
 80e4002:	f855 3b04 	ldr.w	r3, [r5], #4
 80e4006:	4798      	blx	r3
 80e4008:	3601      	adds	r6, #1
 80e400a:	e7f2      	b.n	80e3ff2 <__libc_init_array+0x1e>
 80e400c:	080e40cc 	.word	0x080e40cc
 80e4010:	080e40cc 	.word	0x080e40cc
 80e4014:	080e40cc 	.word	0x080e40cc
 80e4018:	080e40d0 	.word	0x080e40d0

080e401c <memcpy>:
 80e401c:	440a      	add	r2, r1
 80e401e:	4291      	cmp	r1, r2
 80e4020:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80e4024:	d100      	bne.n	80e4028 <memcpy+0xc>
 80e4026:	4770      	bx	lr
 80e4028:	b510      	push	{r4, lr}
 80e402a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80e402e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80e4032:	4291      	cmp	r1, r2
 80e4034:	d1f9      	bne.n	80e402a <memcpy+0xe>
 80e4036:	bd10      	pop	{r4, pc}

080e4038 <memset>:
 80e4038:	4402      	add	r2, r0
 80e403a:	4603      	mov	r3, r0
 80e403c:	4293      	cmp	r3, r2
 80e403e:	d100      	bne.n	80e4042 <memset+0xa>
 80e4040:	4770      	bx	lr
 80e4042:	f803 1b01 	strb.w	r1, [r3], #1
 80e4046:	e7f9      	b.n	80e403c <memset+0x4>

080e4048 <_init>:
 80e4048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80e404a:	bf00      	nop
 80e404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80e404e:	bc08      	pop	{r3}
 80e4050:	469e      	mov	lr, r3
 80e4052:	4770      	bx	lr

080e4054 <_fini>:
 80e4054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80e4056:	bf00      	nop
 80e4058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80e405a:	bc08      	pop	{r3}
 80e405c:	469e      	mov	lr, r3
 80e405e:	4770      	bx	lr
