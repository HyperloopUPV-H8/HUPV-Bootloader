
HUPV-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004180  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080044c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  24000010  080044d0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400014c  080044d0  0002014c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ee28  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002192  00000000  00000000  0002ee66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ce8  00000000  00000000  00030ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000be0  00000000  00000000  00031ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003216e  00000000  00000000  000328c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e7b0  00000000  00000000  00064a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014252b  00000000  00000000  000731de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001b5709  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003520  00000000  00000000  001b575c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08004434 	.word	0x08004434

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08004434 	.word	0x08004434

0800030c <bootloader_start>:
void const __b_write_memory(fdcan_packet_t* packet);
void const __b_erase_memory(fdcan_packet_t* packet);
void const __b_go(fdcan_packet_t* packet);


void bootloader_start(){
 800030c:	b580      	push	{r7, lr}
 800030e:	b092      	sub	sp, #72	; 0x48
 8000310:	af00      	add	r7, sp, #0
	fdcan_packet_t packet;
	__b_clean_fdcan_packet_all(&packet);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f97b 	bl	8000610 <__b_clean_fdcan_packet_all>

	while(1){
		__b_wait_until_fdcan_message_received();
 800031a:	f000 f994 	bl	8000646 <__b_wait_until_fdcan_message_received>
		fdcan_read(&packet);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f000 f9d5 	bl	80006d0 <fdcan_read>

		switch (packet.identifier) {
 8000326:	88bb      	ldrh	r3, [r7, #4]
 8000328:	2b50      	cmp	r3, #80	; 0x50
 800032a:	d00e      	beq.n	800034a <bootloader_start+0x3e>
 800032c:	2b50      	cmp	r3, #80	; 0x50
 800032e:	dc25      	bgt.n	800037c <bootloader_start+0x70>
 8000330:	2b40      	cmp	r3, #64	; 0x40
 8000332:	d00f      	beq.n	8000354 <bootloader_start+0x48>
 8000334:	2b40      	cmp	r3, #64	; 0x40
 8000336:	dc21      	bgt.n	800037c <bootloader_start+0x70>
 8000338:	2b30      	cmp	r3, #48	; 0x30
 800033a:	d010      	beq.n	800035e <bootloader_start+0x52>
 800033c:	2b30      	cmp	r3, #48	; 0x30
 800033e:	dc1d      	bgt.n	800037c <bootloader_start+0x70>
 8000340:	2b10      	cmp	r3, #16
 8000342:	d016      	beq.n	8000372 <bootloader_start+0x66>
 8000344:	2b20      	cmp	r3, #32
 8000346:	d00f      	beq.n	8000368 <bootloader_start+0x5c>
 8000348:	e018      	b.n	800037c <bootloader_start+0x70>
			case GET_VERSION_ORDER:
				__b_get_version(&packet);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f000 f81f 	bl	8000390 <__b_get_version>
				break;
 8000352:	e018      	b.n	8000386 <bootloader_start+0x7a>
			case READ_MEMORY_ORDER:
				__b_read_memory(&packet);
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f838 	bl	80003cc <__b_read_memory>
				break;
 800035c:	e013      	b.n	8000386 <bootloader_start+0x7a>
			case WRITE_MEMORY_ORDER:
				__b_write_memory(&packet);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f8c1 	bl	80004e8 <__b_write_memory>
				break;
 8000366:	e00e      	b.n	8000386 <bootloader_start+0x7a>
			case ERASE_MEMORY_ORDER:
				__b_erase_memory(&packet);
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f8c6 	bl	80004fc <__b_erase_memory>
				break;
 8000370:	e009      	b.n	8000386 <bootloader_start+0x7a>
			case GO_ORDER:
				__b_go(&packet);
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f8e8 	bl	800054a <__b_go>
				break;
 800037a:	e004      	b.n	8000386 <bootloader_start+0x7a>
			default:
				__b_send_nack(&packet);
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4618      	mov	r0, r3
 8000380:	f000 f91c 	bl	80005bc <__b_send_nack>
				break;
 8000384:	bf00      	nop
		}

		__b_clean_fdcan_packet_all(&packet);
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f941 	bl	8000610 <__b_clean_fdcan_packet_all>
		__b_wait_until_fdcan_message_received();
 800038e:	e7c4      	b.n	800031a <bootloader_start+0xe>

08000390 <__b_get_version>:
	}
}

void const __b_get_version(fdcan_packet_t* packet){
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	__b_clean_fdcan_packet_all(packet);
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f000 f939 	bl	8000610 <__b_clean_fdcan_packet_all>

	__b_send_ack(packet);
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f000 f8fb 	bl	800059a <__b_send_ack>

	packet->data[0] = BOOTLOADER_VERSION;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2201      	movs	r2, #1
 80003a8:	709a      	strb	r2, [r3, #2]
	if (fdcan_transmit(packet) != FDCAN_OK) {
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f000 f956 	bl	800065c <fdcan_transmit>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d003      	beq.n	80003be <__b_get_version+0x2e>
		__b_send_nack(packet);
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f000 f900 	bl	80005bc <__b_send_nack>
		return;
 80003bc:	e002      	b.n	80003c4 <__b_get_version+0x34>
	}

	__b_send_ack(packet);
 80003be:	6878      	ldr	r0, [r7, #4]
 80003c0:	f000 f8eb 	bl	800059a <__b_send_ack>
}
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <__b_read_memory>:

void const __b_read_memory(fdcan_packet_t* packet){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	f5ad 3d00 	sub.w	sp, sp, #131072	; 0x20000
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	f107 0318 	add.w	r3, r7, #24
 80003da:	f843 0c14 	str.w	r0, [r3, #-20]
	uint32_t buffer[SECTOR_SIZE_IN_32BITS_WORDS];
	sector_t sector;
	uint32_t address;
	uint16_t i;

	sector = packet->data[0];
 80003de:	f107 0318 	add.w	r3, r7, #24
 80003e2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80003e6:	789b      	ldrb	r3, [r3, #2]
 80003e8:	4a3b      	ldr	r2, [pc, #236]	; (80004d8 <__b_read_memory+0x10c>)
 80003ea:	443a      	add	r2, r7
 80003ec:	6013      	str	r3, [r2, #0]
	address = flash_get_sector_starting_address(sector);
 80003ee:	4b3a      	ldr	r3, [pc, #232]	; (80004d8 <__b_read_memory+0x10c>)
 80003f0:	443b      	add	r3, r7
 80003f2:	6818      	ldr	r0, [r3, #0]
 80003f4:	f000 fa02 	bl	80007fc <flash_get_sector_starting_address>
 80003f8:	4b38      	ldr	r3, [pc, #224]	; (80004dc <__b_read_memory+0x110>)
 80003fa:	443b      	add	r3, r7
 80003fc:	6018      	str	r0, [r3, #0]

	if (address == FLASH_SECTOR_ERROR) {
 80003fe:	4b37      	ldr	r3, [pc, #220]	; (80004dc <__b_read_memory+0x110>)
 8000400:	443b      	add	r3, r7
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000408:	d106      	bne.n	8000418 <__b_read_memory+0x4c>
		__b_send_nack(packet);
 800040a:	f107 0318 	add.w	r3, r7, #24
 800040e:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8000412:	f000 f8d3 	bl	80005bc <__b_send_nack>
		return;
 8000416:	e05a      	b.n	80004ce <__b_read_memory+0x102>
	}

	if (flash_read(address, buffer, SECTOR_SIZE_IN_32BITS_WORDS) != FLASH_OK) {
 8000418:	4b31      	ldr	r3, [pc, #196]	; (80004e0 <__b_read_memory+0x114>)
 800041a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800041e:	f103 0318 	add.w	r3, r3, #24
 8000422:	443b      	add	r3, r7
 8000424:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000428:	4619      	mov	r1, r3
 800042a:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <__b_read_memory+0x110>)
 800042c:	443b      	add	r3, r7
 800042e:	6818      	ldr	r0, [r3, #0]
 8000430:	f000 f97c 	bl	800072c <flash_read>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d006      	beq.n	8000448 <__b_read_memory+0x7c>
		__b_send_nack(packet);
 800043a:	f107 0318 	add.w	r3, r7, #24
 800043e:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8000442:	f000 f8bb 	bl	80005bc <__b_send_nack>
		return;
 8000446:	e042      	b.n	80004ce <__b_read_memory+0x102>
	}

	__b_send_ack(packet);
 8000448:	f107 0318 	add.w	r3, r7, #24
 800044c:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8000450:	f000 f8a3 	bl	800059a <__b_send_ack>

	for (i = 0; i < SECTOR_SIZE_IN_32BITS_WORDS; i +=16) {
 8000454:	2300      	movs	r3, #0
 8000456:	4a23      	ldr	r2, [pc, #140]	; (80004e4 <__b_read_memory+0x118>)
 8000458:	443a      	add	r2, r7
 800045a:	8013      	strh	r3, [r2, #0]
 800045c:	e02b      	b.n	80004b6 <__b_read_memory+0xea>
		__b_data_copy_to_packet(packet, ((uint8_t*)&(buffer[i])));
 800045e:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <__b_read_memory+0x118>)
 8000460:	443b      	add	r3, r7
 8000462:	881a      	ldrh	r2, [r3, #0]
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <__b_read_memory+0x114>)
 8000466:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800046a:	f103 0318 	add.w	r3, r3, #24
 800046e:	443b      	add	r3, r7
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4413      	add	r3, r2
 8000474:	f107 0218 	add.w	r2, r7, #24
 8000478:	4619      	mov	r1, r3
 800047a:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800047e:	f000 f86e 	bl	800055e <__b_data_copy_to_packet>
		if (fdcan_transmit(packet) != FDCAN_OK) {
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800048a:	f000 f8e7 	bl	800065c <fdcan_transmit>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d006      	beq.n	80004a2 <__b_read_memory+0xd6>
			__b_send_nack(packet);
 8000494:	f107 0318 	add.w	r3, r7, #24
 8000498:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800049c:	f000 f88e 	bl	80005bc <__b_send_nack>
			return;
 80004a0:	e015      	b.n	80004ce <__b_read_memory+0x102>
		}
		HAL_Delay(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fd7e 	bl	8000fa4 <HAL_Delay>
	for (i = 0; i < SECTOR_SIZE_IN_32BITS_WORDS; i +=16) {
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <__b_read_memory+0x118>)
 80004aa:	443b      	add	r3, r7
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	3310      	adds	r3, #16
 80004b0:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <__b_read_memory+0x118>)
 80004b2:	443a      	add	r2, r7
 80004b4:	8013      	strh	r3, [r2, #0]
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <__b_read_memory+0x118>)
 80004b8:	443b      	add	r3, r7
 80004ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	dacd      	bge.n	800045e <__b_read_memory+0x92>
	}

	__b_send_ack(packet);
 80004c2:	f107 0318 	add.w	r3, r7, #24
 80004c6:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80004ca:	f000 f866 	bl	800059a <__b_send_ack>
}
 80004ce:	f507 3700 	add.w	r7, r7, #131072	; 0x20000
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	00020010 	.word	0x00020010
 80004dc:	0002000c 	.word	0x0002000c
 80004e0:	fffdfff4 	.word	0xfffdfff4
 80004e4:	00020016 	.word	0x00020016

080004e8 <__b_write_memory>:

void const __b_write_memory(fdcan_packet_t* packet){}
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <__b_erase_memory>:

void const __b_erase_memory(fdcan_packet_t* packet){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	sector_t sector1, sector2;

	sector1 = packet->data[0];
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	789b      	ldrb	r3, [r3, #2]
 8000508:	60fb      	str	r3, [r7, #12]
	sector2 = packet->data[1];
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	78db      	ldrb	r3, [r3, #3]
 800050e:	60bb      	str	r3, [r7, #8]

	if (sector1 > FLASH_MAX_SECTOR || sector2 > FLASH_MAX_SECTOR) {
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	2b07      	cmp	r3, #7
 8000514:	d802      	bhi.n	800051c <__b_erase_memory+0x20>
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	2b07      	cmp	r3, #7
 800051a:	d902      	bls.n	8000522 <__b_erase_memory+0x26>
		__b_send_nack(packet);
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 f84d 	bl	80005bc <__b_send_nack>
	}

	__b_send_ack(packet);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 f839 	bl	800059a <__b_send_ack>


	if(flash_erase(sector1, sector2) != FLASH_OK){
 8000528:	68b9      	ldr	r1, [r7, #8]
 800052a:	68f8      	ldr	r0, [r7, #12]
 800052c:	f000 f92e 	bl	800078c <flash_erase>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <__b_erase_memory+0x40>
		__b_send_nack(packet);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 f840 	bl	80005bc <__b_send_nack>
	}

	__b_send_ack(packet);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f82c 	bl	800059a <__b_send_ack>
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <__b_go>:

void const __b_go(fdcan_packet_t* packet){}
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <__b_data_copy_to_packet>:

void const __b_data_copy_to_packet(fdcan_packet_t* packet, uint8_t* data){
 800055e:	b480      	push	{r7}
 8000560:	b085      	sub	sp, #20
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
	uint8_t i;

	for (i = 0; i < 64; ++i) {
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
 800056c:	e00b      	b.n	8000586 <__b_data_copy_to_packet+0x28>
		packet->data[i] = data[i];
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	441a      	add	r2, r3
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	7811      	ldrb	r1, [r2, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	4413      	add	r3, r2
 800057c:	460a      	mov	r2, r1
 800057e:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 64; ++i) {
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	3301      	adds	r3, #1
 8000584:	73fb      	strb	r3, [r7, #15]
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	2b3f      	cmp	r3, #63	; 0x3f
 800058a:	d9f0      	bls.n	800056e <__b_data_copy_to_packet+0x10>
	}
}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <__b_send_ack>:

void const __b_send_ack(fdcan_packet_t* packet){
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
	__b_clean_fdcan_packet_data(packet);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 f81b 	bl	80005de <__b_clean_fdcan_packet_data>
	packet->data[0] = BOOTLOADER_ACK;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2279      	movs	r2, #121	; 0x79
 80005ac:	709a      	strb	r2, [r3, #2]
	fdcan_transmit(packet);
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 f854 	bl	800065c <fdcan_transmit>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <__b_send_nack>:

void const __b_send_nack(fdcan_packet_t* packet){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	__b_clean_fdcan_packet_data(packet);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 f80a 	bl	80005de <__b_clean_fdcan_packet_data>
	packet->data[0] = BOOTLOADER_NACK;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	221f      	movs	r2, #31
 80005ce:	709a      	strb	r2, [r3, #2]
	fdcan_transmit(packet);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f843 	bl	800065c <fdcan_transmit>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <__b_clean_fdcan_packet_data>:
	uint32_t address = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];

	return address;
}

void const __b_clean_fdcan_packet_data(fdcan_packet_t* packet){
 80005de:	b480      	push	{r7}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
	uint16_t i;

	for (i = 0; i < 64; ++i) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	81fb      	strh	r3, [r7, #14]
 80005ea:	e007      	b.n	80005fc <__b_clean_fdcan_packet_data+0x1e>
		packet->data[i] = 0;
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	2200      	movs	r2, #0
 80005f4:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 64; ++i) {
 80005f6:	89fb      	ldrh	r3, [r7, #14]
 80005f8:	3301      	adds	r3, #1
 80005fa:	81fb      	strh	r3, [r7, #14]
 80005fc:	89fb      	ldrh	r3, [r7, #14]
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	d9f4      	bls.n	80005ec <__b_clean_fdcan_packet_data+0xe>
	}
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <__b_clean_fdcan_packet_all>:

void const __b_clean_fdcan_packet_all(fdcan_packet_t* packet){
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	uint16_t i;

	for (i = 0; i < 64; ++i) {
 8000618:	2300      	movs	r3, #0
 800061a:	81fb      	strh	r3, [r7, #14]
 800061c:	e007      	b.n	800062e <__b_clean_fdcan_packet_all+0x1e>
		packet->data[i] = 0;
 800061e:	89fb      	ldrh	r3, [r7, #14]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	2200      	movs	r2, #0
 8000626:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 64; ++i) {
 8000628:	89fb      	ldrh	r3, [r7, #14]
 800062a:	3301      	adds	r3, #1
 800062c:	81fb      	strh	r3, [r7, #14]
 800062e:	89fb      	ldrh	r3, [r7, #14]
 8000630:	2b3f      	cmp	r3, #63	; 0x3f
 8000632:	d9f4      	bls.n	800061e <__b_clean_fdcan_packet_all+0xe>
	}

	packet->identifier = 0;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	801a      	strh	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <__b_wait_until_fdcan_message_received>:


void const __b_wait_until_fdcan_message_received(void){
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
	while(!fdcan_test()){}
 800064a:	bf00      	nop
 800064c:	f000 f85a 	bl	8000704 <fdcan_test>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0fa      	beq.n	800064c <__b_wait_until_fdcan_message_received+0x6>
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <fdcan_transmit>:

extern FDCAN_HandleTypeDef hfdcan1;
FDCAN_TxHeaderTypeDef tx_header;
FDCAN_RxHeaderTypeDef rx_header_buffer;

fdcan_error_t const fdcan_transmit(fdcan_packet_t* packet){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	tx_header.Identifier = (uint32_t)packet->identifier;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <fdcan_transmit+0x6c>)
 800066c:	601a      	str	r2, [r3, #0]
	tx_header.IdType = FDCAN_STANDARD_ID;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <fdcan_transmit+0x6c>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
	tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <fdcan_transmit+0x6c>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
	tx_header.DataLength = FDCAN_DLC_BYTES_64;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <fdcan_transmit+0x6c>)
 800067c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000680:	60da      	str	r2, [r3, #12]
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <fdcan_transmit+0x6c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	tx_header.BitRateSwitch = FDCAN_BRS_ON;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <fdcan_transmit+0x6c>)
 800068a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800068e:	615a      	str	r2, [r3, #20]
	tx_header.FDFormat = FDCAN_FD_CAN;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <fdcan_transmit+0x6c>)
 8000692:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000696:	619a      	str	r2, [r3, #24]
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <fdcan_transmit+0x6c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
	tx_header.MessageMarker = 0;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <fdcan_transmit+0x6c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, packet->data) != HAL_OK) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3302      	adds	r3, #2
 80006a8:	461a      	mov	r2, r3
 80006aa:	4907      	ldr	r1, [pc, #28]	; (80006c8 <fdcan_transmit+0x6c>)
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <fdcan_transmit+0x70>)
 80006ae:	f000 ff8a 	bl	80015c6 <HAL_FDCAN_AddMessageToTxFifoQ>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <fdcan_transmit+0x60>
		return FDCAN_ERROR;
 80006b8:	23ff      	movs	r3, #255	; 0xff
 80006ba:	e000      	b.n	80006be <fdcan_transmit+0x62>
	}

	return FDCAN_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2400002c 	.word	0x2400002c
 80006cc:	2400008c 	.word	0x2400008c

080006d0 <fdcan_read>:

fdcan_error_t const fdcan_read(fdcan_packet_t* packet){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if(!fdcan_test) {
		return FDCAN_EMPTY;
	}

	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header_buffer, packet->data);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3302      	adds	r3, #2
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <fdcan_read+0x2c>)
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <fdcan_read+0x30>)
 80006e2:	f000 ffcb 	bl	800167c <HAL_FDCAN_GetRxMessage>

	packet->identifier = rx_header_buffer.Identifier;
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <fdcan_read+0x2c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	801a      	strh	r2, [r3, #0]
	return FDCAN_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	24000050 	.word	0x24000050
 8000700:	2400008c 	.word	0x2400008c

08000704 <fdcan_test>:

int const fdcan_test(void){
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	return !((hfdcan1.Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U);
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <fdcan_test+0x24>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000714:	2b00      	cmp	r3, #0
 8000716:	bf14      	ite	ne
 8000718:	2301      	movne	r3, #1
 800071a:	2300      	moveq	r3, #0
 800071c:	b2db      	uxtb	r3, r3
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	2400008c 	.word	0x2400008c

0800072c <flash_read>:
* Function prototypes
****************************************************************************************/
sector_t const __flash_get_sector(const uint32_t address);
uint32_t const flash_get_sector_starting_address(const sector_t sector);

flash_error const flash_read(uint32_t source_addr, uint32_t* result, uint32_t number_of_words){
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	if (source_addr < FLASH_START_ADDRESS || source_addr > FLASH_CODE_END_ADDRESS) {
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800073e:	d303      	bcc.n	8000748 <flash_read+0x1c>
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <flash_read+0x5c>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d901      	bls.n	800074c <flash_read+0x20>
		return FLASH_PROTECTED_MEM;
 8000748:	2301      	movs	r3, #1
 800074a:	e018      	b.n	800077e <flash_read+0x52>
	}

	HAL_FLASH_Unlock();
 800074c:	f001 fb82 	bl	8001e54 <HAL_FLASH_Unlock>
	uint32_t i;
	for (i = 0; i < number_of_words; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e00c      	b.n	8000770 <flash_read+0x44>
		*result = *(__IO uint32_t *)(source_addr);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	601a      	str	r2, [r3, #0]
		source_addr += 4;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3304      	adds	r3, #4
 8000762:	60fb      	str	r3, [r7, #12]
		result++;
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	3304      	adds	r3, #4
 8000768:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < number_of_words; i++) {
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	429a      	cmp	r2, r3
 8000776:	d3ee      	bcc.n	8000756 <flash_read+0x2a>
	}
	HAL_FLASH_Lock();
 8000778:	f001 fb8e 	bl	8001e98 <HAL_FLASH_Lock>

	return FLASH_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	080dffff 	.word	0x080dffff

0800078c <flash_erase>:
	HAL_FLASH_Lock();

	return FLASH_OK;
}

flash_error const flash_erase(const sector_t start_sector, const sector_t end_sector){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	if (start_sector == FLASH_PROTECTED_SECTOR || end_sector == FLASH_PROTECTED_SECTOR) {
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b07      	cmp	r3, #7
 800079a:	d002      	beq.n	80007a2 <flash_erase+0x16>
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	2b07      	cmp	r3, #7
 80007a0:	d101      	bne.n	80007a6 <flash_erase+0x1a>
		return FLASH_PROTECTED_MEM;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e023      	b.n	80007ee <flash_erase+0x62>
	}

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t sectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <flash_erase+0x6c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <flash_erase+0x6c>)
 80007ae:	2220      	movs	r2, #32
 80007b0:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = start_sector;
 80007b2:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <flash_erase+0x6c>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6093      	str	r3, [r2, #8]
	EraseInitStruct.Banks    	  = FLASH_BANK_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <flash_erase+0x6c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbSectors     = (end_sector - start_sector) + 1;
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <flash_erase+0x6c>)
 80007c8:	60d3      	str	r3, [r2, #12]

	HAL_FLASH_Unlock();
 80007ca:	f001 fb43 	bl	8001e54 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError) != HAL_OK)
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <flash_erase+0x6c>)
 80007d6:	f001 fbcd 	bl	8001f74 <HAL_FLASHEx_Erase>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <flash_erase+0x5c>
	{
		HAL_FLASH_Lock();
 80007e0:	f001 fb5a 	bl	8001e98 <HAL_FLASH_Lock>
		return FLASH_ERROR;
 80007e4:	23ff      	movs	r3, #255	; 0xff
 80007e6:	e002      	b.n	80007ee <flash_erase+0x62>
	}

	HAL_FLASH_Lock();
 80007e8:	f001 fb56 	bl	8001e98 <HAL_FLASH_Lock>

	return FLASH_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	24000078 	.word	0x24000078

080007fc <flash_get_sector_starting_address>:
	}

	return sector;
}

uint32_t const flash_get_sector_starting_address(const sector_t sector){
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint32_t address;
	switch ((uint32_t)sector) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d82b      	bhi.n	8000862 <flash_get_sector_starting_address+0x66>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <flash_get_sector_starting_address+0x14>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	08000831 	.word	0x08000831
 8000814:	08000839 	.word	0x08000839
 8000818:	0800083f 	.word	0x0800083f
 800081c:	08000845 	.word	0x08000845
 8000820:	0800084b 	.word	0x0800084b
 8000824:	08000851 	.word	0x08000851
 8000828:	08000857 	.word	0x08000857
 800082c:	0800085d 	.word	0x0800085d
		case FLASH_SECTOR_0:
			address = FLASH_SECTOR0_START_ADDRESS;
 8000830:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000834:	60fb      	str	r3, [r7, #12]
			break;
 8000836:	e018      	b.n	800086a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_1:
			address = FLASH_SECTOR1_START_ADDRESS;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <flash_get_sector_starting_address+0x7c>)
 800083a:	60fb      	str	r3, [r7, #12]
			break;
 800083c:	e015      	b.n	800086a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_2:
			address = FLASH_SECTOR2_START_ADDRESS;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <flash_get_sector_starting_address+0x80>)
 8000840:	60fb      	str	r3, [r7, #12]
			break;
 8000842:	e012      	b.n	800086a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_3:
			address = FLASH_SECTOR3_START_ADDRESS;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <flash_get_sector_starting_address+0x84>)
 8000846:	60fb      	str	r3, [r7, #12]
			break;
 8000848:	e00f      	b.n	800086a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_4:
			address = FLASH_SECTOR4_START_ADDRESS;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <flash_get_sector_starting_address+0x88>)
 800084c:	60fb      	str	r3, [r7, #12]
			break;
 800084e:	e00c      	b.n	800086a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_5:
			address = FLASH_SECTOR5_START_ADDRESS;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <flash_get_sector_starting_address+0x8c>)
 8000852:	60fb      	str	r3, [r7, #12]
			break;
 8000854:	e009      	b.n	800086a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_6:
			address = FLASH_SECTOR6_START_ADDRESS;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <flash_get_sector_starting_address+0x90>)
 8000858:	60fb      	str	r3, [r7, #12]
			break;
 800085a:	e006      	b.n	800086a <flash_get_sector_starting_address+0x6e>
		case FLASH_SECTOR_7:
			address = FLASH_SECTOR7_START_ADDRESS;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <flash_get_sector_starting_address+0x94>)
 800085e:	60fb      	str	r3, [r7, #12]
			break;
 8000860:	e003      	b.n	800086a <flash_get_sector_starting_address+0x6e>
		default:
			address = FLASH_SECTOR_ERROR;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	60fb      	str	r3, [r7, #12]
			break;
 8000868:	bf00      	nop
	}

	return address;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	08020000 	.word	0x08020000
 800087c:	08040000 	.word	0x08040000
 8000880:	08060000 	.word	0x08060000
 8000884:	08080000 	.word	0x08080000
 8000888:	080a0000 	.word	0x080a0000
 800088c:	080c0000 	.word	0x080c0000
 8000890:	080e0000 	.word	0x080e0000

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 faf2 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089c:	f000 f812 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a0:	f000 f8ee 	bl	8000a80 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80008a4:	f000 f886 	bl	80009b4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_FDCAN_Start(&hfdcan1);
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <main+0x2c>)
 80008aa:	f000 fe61 	bl	8001570 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2101      	movs	r1, #1
 80008b2:	4803      	ldr	r0, [pc, #12]	; (80008c0 <main+0x2c>)
 80008b4:	f001 f850 	bl	8001958 <HAL_FDCAN_ActivateNotification>

  bootloader_start();
 80008b8:	f7ff fd28 	bl	800030c <bootloader_start>
  //flash_test();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <main+0x28>
 80008be:	bf00      	nop
 80008c0:	2400008c 	.word	0x2400008c

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09c      	sub	sp, #112	; 0x70
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	224c      	movs	r2, #76	; 0x4c
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fda6 	bl	8004424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2220      	movs	r2, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fda0 	bl	8004424 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f001 fdf5 	bl	80024d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <SystemClock_Config+0xe8>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4a2e      	ldr	r2, [pc, #184]	; (80009ac <SystemClock_Config+0xe8>)
 80008f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f8:	6193      	str	r3, [r2, #24]
 80008fa:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <SystemClock_Config+0xe8>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000906:	bf00      	nop
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <SystemClock_Config+0xe8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000914:	d1f8      	bne.n	8000908 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <SystemClock_Config+0xec>)
 8000918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091a:	f023 0303 	bic.w	r3, r3, #3
 800091e:	4a24      	ldr	r2, [pc, #144]	; (80009b0 <SystemClock_Config+0xec>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000926:	2301      	movs	r3, #1
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2302      	movs	r3, #2
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000934:	2302      	movs	r3, #2
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800093c:	232c      	movs	r3, #44	; 0x2c
 800093e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000944:	2304      	movs	r3, #4
 8000946:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800094c:	230c      	movs	r3, #12
 800094e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000950:	2300      	movs	r3, #0
 8000952:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fdf3 	bl	8002548 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000968:	f000 f90c 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	233f      	movs	r3, #63	; 0x3f
 800096e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000978:	2308      	movs	r3, #8
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800097c:	2340      	movs	r3, #64	; 0x40
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000980:	2340      	movs	r3, #64	; 0x40
 8000982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000988:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2103      	movs	r1, #3
 8000992:	4618      	mov	r0, r3
 8000994:	f002 f986 	bl	8002ca4 <HAL_RCC_ClockConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800099e:	f000 f8f1 	bl	8000b84 <Error_Handler>
  }
}
 80009a2:	bf00      	nop
 80009a4:	3770      	adds	r7, #112	; 0x70
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	58024800 	.word	0x58024800
 80009b0:	58024400 	.word	0x58024400

080009b4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009b8:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009ba:	4a30      	ldr	r2, [pc, #192]	; (8000a7c <MX_FDCAN1_Init+0xc8>)
 80009bc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80009be:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009c0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009c4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009c6:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80009cc:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009d8:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009e6:	2210      	movs	r2, #16
 80009e8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 59;
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009ec:	223b      	movs	r2, #59	; 0x3b
 80009ee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009f2:	2214      	movs	r2, #20
 80009f4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a04:	220e      	movs	r2, #14
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a0a:	2205      	movs	r2, #5
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 16;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a22:	2210      	movs	r2, #16
 8000a24:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a28:	2212      	movs	r2, #18
 8000a2a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a34:	2212      	movs	r2, #18
 8000a36:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a40:	2212      	movs	r2, #18
 8000a42:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a52:	2210      	movs	r2, #16
 8000a54:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a5e:	2212      	movs	r2, #18
 8000a60:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_FDCAN1_Init+0xc4>)
 8000a64:	f000 fba6 	bl	80011b4 <HAL_FDCAN_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000a6e:	f000 f889 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2400008c 	.word	0x2400008c
 8000a7c:	4000a000 	.word	0x4000a000

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	; 0x30
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	4a37      	ldr	r2, [pc, #220]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa6:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_GPIO_Init+0xfc>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_SLEEP_Pin|LED_FLASH_Pin|LED_CAN_Pin|LED_FAULT_Pin
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <MX_GPIO_Init+0x100>)
 8000b52:	f001 fc8b 	bl	800246c <HAL_GPIO_WritePin>
                          |LED_OPERATIONAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_SLEEP_Pin LED_FLASH_Pin LED_CAN_Pin LED_FAULT_Pin
                           LED_OPERATIONAL_Pin */
  GPIO_InitStruct.Pin = LED_SLEEP_Pin|LED_FLASH_Pin|LED_CAN_Pin|LED_FAULT_Pin
 8000b56:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8000b5a:	61fb      	str	r3, [r7, #28]
                          |LED_OPERATIONAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_GPIO_Init+0x100>)
 8000b70:	f001 fad4 	bl	800211c <HAL_GPIO_Init>

}
 8000b74:	bf00      	nop
 8000b76:	3730      	adds	r7, #48	; 0x30
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	58021800 	.word	0x58021800

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8a:	b672      	cpsid	i
}
 8000b8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin);
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <Error_Handler+0x2c>)
 8000b92:	f001 fc84 	bl	800249e <HAL_GPIO_TogglePin>
	  uint32_t i;
	  for (i = 0; i < 10000000; ++i) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	e003      	b.n	8000ba4 <Error_Handler+0x20>
		  __NOP();
 8000b9c:	bf00      	nop
	  for (i = 0; i < 10000000; ++i) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a03      	ldr	r2, [pc, #12]	; (8000bb4 <Error_Handler+0x30>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d3f7      	bcc.n	8000b9c <Error_Handler+0x18>
  {
 8000bac:	e7ef      	b.n	8000b8e <Error_Handler+0xa>
 8000bae:	bf00      	nop
 8000bb0:	58021800 	.word	0x58021800
 8000bb4:	00989680 	.word	0x00989680

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_MspInit+0x30>)
 8000bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x30>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x30>)
 8000bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	58024400 	.word	0x58024400

08000bec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0b6      	sub	sp, #216	; 0xd8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	22b4      	movs	r2, #180	; 0xb4
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fc09 	bl	8004424 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a2d      	ldr	r2, [pc, #180]	; (8000ccc <HAL_FDCAN_MspInit+0xe0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d152      	bne.n	8000cc2 <HAL_FDCAN_MspInit+0xd6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 8000c22:	2319      	movs	r3, #25
 8000c24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000c26:	23c8      	movs	r3, #200	; 0xc8
 8000c28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8000c2e:	230a      	movs	r3, #10
 8000c30:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000c42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c46:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fb59 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000c58:	f7ff ff94 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <HAL_FDCAN_MspInit+0xe4>)
 8000c5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000c62:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <HAL_FDCAN_MspInit+0xe4>)
 8000c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c68:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_FDCAN_MspInit+0xe4>)
 8000c6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_FDCAN_MspInit+0xe4>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <HAL_FDCAN_MspInit+0xe4>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_FDCAN_MspInit+0xe4>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cb0:	2309      	movs	r3, #9
 8000cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_FDCAN_MspInit+0xe8>)
 8000cbe:	f001 fa2d 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	37d8      	adds	r7, #216	; 0xd8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	4000a000 	.word	0x4000a000
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	58020c00 	.word	0x58020c00

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>
	...

08000ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	4801      	ldr	r0, [pc, #4]	; (8000cf0 <HardFault_Handler+0x10>)
 8000cea:	f001 fbbf 	bl	800246c <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0xe>
 8000cf0:	58021800 	.word	0x58021800

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f916 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <SystemInit+0xd0>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <SystemInit+0xd0>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d50:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <SystemInit+0xd4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	2b06      	cmp	r3, #6
 8000d5a:	d807      	bhi.n	8000d6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <SystemInit+0xd4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f023 030f 	bic.w	r3, r3, #15
 8000d64:	4a2a      	ldr	r2, [pc, #168]	; (8000e10 <SystemInit+0xd4>)
 8000d66:	f043 0307 	orr.w	r3, r3, #7
 8000d6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <SystemInit+0xd8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <SystemInit+0xd8>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <SystemInit+0xd8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <SystemInit+0xd8>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4924      	ldr	r1, [pc, #144]	; (8000e14 <SystemInit+0xd8>)
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <SystemInit+0xdc>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <SystemInit+0xd4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d007      	beq.n	8000da6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <SystemInit+0xd4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f023 030f 	bic.w	r3, r3, #15
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <SystemInit+0xd4>)
 8000da0:	f043 0307 	orr.w	r3, r3, #7
 8000da4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <SystemInit+0xd8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <SystemInit+0xd8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <SystemInit+0xd8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <SystemInit+0xd8>)
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <SystemInit+0xe0>)
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <SystemInit+0xd8>)
 8000dc0:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <SystemInit+0xe4>)
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <SystemInit+0xd8>)
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <SystemInit+0xe8>)
 8000dc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <SystemInit+0xd8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <SystemInit+0xd8>)
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <SystemInit+0xe8>)
 8000dd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <SystemInit+0xd8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <SystemInit+0xd8>)
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <SystemInit+0xe8>)
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <SystemInit+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <SystemInit+0xd8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <SystemInit+0xd8>)
 8000dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <SystemInit+0xd8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <SystemInit+0xec>)
 8000dfc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00
 8000e10:	52002000 	.word	0x52002000
 8000e14:	58024400 	.word	0x58024400
 8000e18:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e1c:	02020200 	.word	0x02020200
 8000e20:	01ff0000 	.word	0x01ff0000
 8000e24:	01010280 	.word	0x01010280
 8000e28:	52004000 	.word	0x52004000

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e30:	f7ff ff84 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	; (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f003 fab1 	bl	80043c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fd19 	bl	8000894 <main>
  bx  lr
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e6c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e70:	080044c0 	.word	0x080044c0
  ldr r2, =_sbss
 8000e74:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e78:	2400014c 	.word	0x2400014c

08000e7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC3_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e86:	2003      	movs	r0, #3
 8000e88:	f000 f962 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e8c:	f002 f8c0 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8000e90:	4602      	mov	r2, r0
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_Init+0x68>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	0a1b      	lsrs	r3, r3, #8
 8000e98:	f003 030f 	and.w	r3, r3, #15
 8000e9c:	4913      	ldr	r1, [pc, #76]	; (8000eec <HAL_Init+0x6c>)
 8000e9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ea0:	f003 031f 	and.w	r3, r3, #31
 8000ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_Init+0x68>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <HAL_Init+0x6c>)
 8000eb4:	5cd3      	ldrb	r3, [r2, r3]
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_Init+0x70>)
 8000ec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_Init+0x74>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f814 	bl	8000ef8 <HAL_InitTick>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e002      	b.n	8000ee0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000eda:	f7ff fe6d 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	08004498 	.word	0x08004498
 8000ef0:	24000004 	.word	0x24000004
 8000ef4:	24000000 	.word	0x24000000

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_InitTick+0x60>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e021      	b.n	8000f50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_InitTick+0x64>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_InitTick+0x60>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f939 	bl	800119a <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 f911 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x68>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2400000c 	.word	0x2400000c
 8000f5c:	24000000 	.word	0x24000000
 8000f60:	24000008 	.word	0x24000008

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	2400000c 	.word	0x2400000c
 8000f88:	2400012c 	.word	0x2400012c

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2400012c 	.word	0x2400012c

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2400000c 	.word	0x2400000c

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <__NVIC_SetPriorityGrouping+0x40>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	4313      	orrs	r3, r2
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x40>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00
 8001030:	05fa0000 	.word	0x05fa0000

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff47 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff5e 	bl	8001034 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff90 	bl	80010a4 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5f 	bl	8001050 <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffb2 	bl	800110c <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b098      	sub	sp, #96	; 0x60
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80011bc:	4a84      	ldr	r2, [pc, #528]	; (80013d0 <HAL_FDCAN_Init+0x21c>)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4611      	mov	r1, r2
 80011c4:	224c      	movs	r2, #76	; 0x4c
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 f91e 	bl	8004408 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e1c6      	b.n	8001564 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a7e      	ldr	r2, [pc, #504]	; (80013d4 <HAL_FDCAN_Init+0x220>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d106      	bne.n	80011ee <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011e8:	461a      	mov	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fcf2 	bl	8000bec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0210 	bic.w	r2, r2, #16
 8001216:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001218:	f7ff feb8 	bl	8000f8c <HAL_GetTick>
 800121c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800121e:	e014      	b.n	800124a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001220:	f7ff feb4 	bl	8000f8c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b0a      	cmp	r3, #10
 800122c:	d90d      	bls.n	800124a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001234:	f043 0201 	orr.w	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2203      	movs	r2, #3
 8001242:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e18c      	b.n	8001564 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b08      	cmp	r3, #8
 8001256:	d0e3      	beq.n	8001220 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001268:	f7ff fe90 	bl	8000f8c <HAL_GetTick>
 800126c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800126e:	e014      	b.n	800129a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001270:	f7ff fe8c 	bl	8000f8c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b0a      	cmp	r3, #10
 800127c:	d90d      	bls.n	800129a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e164      	b.n	8001564 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0e3      	beq.n	8001270 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699a      	ldr	r2, [r3, #24]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0202 	orr.w	r2, r2, #2
 80012b6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7c1b      	ldrb	r3, [r3, #16]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ce:	619a      	str	r2, [r3, #24]
 80012d0:	e007      	b.n	80012e2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	699a      	ldr	r2, [r3, #24]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7c5b      	ldrb	r3, [r3, #17]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d108      	bne.n	80012fc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012f8:	619a      	str	r2, [r3, #24]
 80012fa:	e007      	b.n	800130c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800130a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7c9b      	ldrb	r3, [r3, #18]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d108      	bne.n	8001326 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001322:	619a      	str	r2, [r3, #24]
 8001324:	e007      	b.n	8001336 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	699a      	ldr	r2, [r3, #24]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001334:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699a      	ldr	r2, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800135a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0210 	bic.w	r2, r2, #16
 800136a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0204 	orr.w	r2, r2, #4
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	e030      	b.n	80013e8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d02c      	beq.n	80013e8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d020      	beq.n	80013d8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013a4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0210 	orr.w	r2, r2, #16
 80013b4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d114      	bne.n	80013e8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699a      	ldr	r2, [r3, #24]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f042 0220 	orr.w	r2, r2, #32
 80013cc:	619a      	str	r2, [r3, #24]
 80013ce:	e00b      	b.n	80013e8 <HAL_FDCAN_Init+0x234>
 80013d0:	0800444c 	.word	0x0800444c
 80013d4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0220 	orr.w	r2, r2, #32
 80013e6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013f8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001400:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	3b01      	subs	r3, #1
 800140a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001410:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001412:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800141c:	d115      	bne.n	800144a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	3b01      	subs	r3, #1
 800142a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800142c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	3b01      	subs	r3, #1
 8001434:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001436:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	3b01      	subs	r3, #1
 8001440:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001446:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001448:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00a      	beq.n	8001468 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001470:	4413      	add	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d011      	beq.n	800149a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800147e:	f023 0107 	bic.w	r1, r3, #7
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	3360      	adds	r3, #96	; 0x60
 800148a:	443b      	add	r3, r7
 800148c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d011      	beq.n	80014c6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80014aa:	f023 0107 	bic.w	r1, r3, #7
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	3360      	adds	r3, #96	; 0x60
 80014b6:	443b      	add	r3, r7
 80014b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d012      	beq.n	80014f4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80014d6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	3360      	adds	r3, #96	; 0x60
 80014e2:	443b      	add	r3, r7
 80014e4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80014e8:	011a      	lsls	r2, r3, #4
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d012      	beq.n	8001522 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001504:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	3360      	adds	r3, #96	; 0x60
 8001510:	443b      	add	r3, r7
 8001512:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001516:	021a      	lsls	r2, r3, #8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_FDCAN_Init+0x3b8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d107      	bne.n	800153c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f022 0203 	bic.w	r2, r2, #3
 800153a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fa79 	bl	8001a4c <FDCAN_CalcultateRamBlockAddresses>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001560:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001564:	4618      	mov	r0, r3
 8001566:	3760      	adds	r7, #96	; 0x60
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	4000a000 	.word	0x4000a000

08001570 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b01      	cmp	r3, #1
 8001582:	d111      	bne.n	80015a8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2202      	movs	r2, #2
 8001588:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e008      	b.n	80015ba <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ae:	f043 0204 	orr.w	r2, r3, #4
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
  }
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d141      	bne.n	8001662 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015e6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015f4:	f043 0220 	orr.w	r2, r3, #32
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e038      	b.n	8001674 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800160a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001618:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e026      	b.n	8001674 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800162e:	0c1b      	lsrs	r3, r3, #16
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 fb8b 	bl	8001d58 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2101      	movs	r1, #1
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	fa01 f202 	lsl.w	r2, r1, r2
 800164e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e008      	b.n	8001674 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001668:	f043 0208 	orr.w	r2, r3, #8
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
  }
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800167c:	b480      	push	{r7}
 800167e:	b08b      	sub	sp, #44	; 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001694:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001696:	7efb      	ldrb	r3, [r7, #27]
 8001698:	2b02      	cmp	r3, #2
 800169a:	f040 814b 	bne.w	8001934 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b40      	cmp	r3, #64	; 0x40
 80016a2:	d14d      	bne.n	8001740 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80016ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d109      	bne.n	80016c8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016ba:	f043 0220 	orr.w	r2, r3, #32
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e13e      	b.n	8001946 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e12c      	b.n	8001946 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016f4:	0e1b      	lsrs	r3, r3, #24
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10b      	bne.n	8001716 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001706:	0fdb      	lsrs	r3, r3, #31
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001710:	d101      	bne.n	8001716 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001712:	2301      	movs	r3, #1
 8001714:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	69f9      	ldr	r1, [r7, #28]
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
 800173e:	e069      	b.n	8001814 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b41      	cmp	r3, #65	; 0x41
 8001744:	d14d      	bne.n	80017e2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800174e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800175c:	f043 0220 	orr.w	r2, r3, #32
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e0ed      	b.n	8001946 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001780:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0db      	b.n	8001946 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001796:	0e1b      	lsrs	r3, r3, #24
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b01      	cmp	r3, #1
 800179e:	d10b      	bne.n	80017b8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80017a8:	0fdb      	lsrs	r3, r3, #31
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017b2:	d101      	bne.n	80017b8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80017b4:	2301      	movs	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d4:	69f9      	ldr	r1, [r7, #28]
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
 80017e0:	e018      	b.n	8001814 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d309      	bcc.n	8001800 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017f2:	f043 0220 	orr.w	r2, r3, #32
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0a2      	b.n	8001946 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0c9b      	lsrs	r3, r3, #18
 800182e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e005      	b.n	8001844 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	3304      	adds	r3, #4
 8001860:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0e1b      	lsrs	r3, r3, #24
 8001896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0fda      	lsrs	r2, r3, #31
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3304      	adds	r3, #4
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
 80018b6:	e00a      	b.n	80018ce <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	441a      	add	r2, r3
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	440b      	add	r3, r1
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	3301      	adds	r3, #1
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	0c1b      	lsrs	r3, r3, #16
 80018d4:	4a1f      	ldr	r2, [pc, #124]	; (8001954 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	461a      	mov	r2, r3
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	4293      	cmp	r3, r2
 80018de:	d3eb      	bcc.n	80018b8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b40      	cmp	r3, #64	; 0x40
 80018e4:	d105      	bne.n	80018f2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80018f0:	e01e      	b.n	8001930 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b41      	cmp	r3, #65	; 0x41
 80018f6:	d105      	bne.n	8001904 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001902:	e015      	b.n	8001930 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b1f      	cmp	r3, #31
 8001908:	d808      	bhi.n	800191c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2101      	movs	r1, #1
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800191a:	e009      	b.n	8001930 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f003 021f 	and.w	r2, r3, #31
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e008      	b.n	8001946 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800193a:	f043 0208 	orr.w	r2, r3, #8
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
  }
}
 8001946:	4618      	mov	r0, r3
 8001948:	372c      	adds	r7, #44	; 0x2c
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	080044a8 	.word	0x080044a8

08001958 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800196a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d002      	beq.n	8001978 <HAL_FDCAN_ActivateNotification+0x20>
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d155      	bne.n	8001a24 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d108      	bne.n	8001998 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	65da      	str	r2, [r3, #92]	; 0x5c
 8001996:	e014      	b.n	80019c2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4013      	ands	r3, r2
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d108      	bne.n	80019ba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0202 	orr.w	r2, r2, #2
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80019b8:	e003      	b.n	80019c2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2203      	movs	r2, #3
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d009      	beq.n	80019e0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	430a      	orrs	r2, r1
 80019dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_FDCAN_ActivateNotification+0xec>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	6553      	str	r3, [r2, #84]	; 0x54
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	0f9b      	lsrs	r3, r3, #30
 8001a1a:	490b      	ldr	r1, [pc, #44]	; (8001a48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e008      	b.n	8001a36 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a2a:	f043 0202 	orr.w	r2, r3, #2
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
  }
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	3fcfffff 	.word	0x3fcfffff
 8001a48:	4000a800 	.word	0x4000a800

08001a4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001a62:	4ba7      	ldr	r3, [pc, #668]	; (8001d00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	0091      	lsls	r1, r2, #2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	430b      	orrs	r3, r1
 8001a70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a7c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	4413      	add	r3, r2
 8001a98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001aa2:	4b97      	ldr	r3, [pc, #604]	; (8001d00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	0091      	lsls	r1, r2, #2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	4413      	add	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001ae4:	4b86      	ldr	r3, [pc, #536]	; (8001d00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	0091      	lsls	r1, r2, #2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001afe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	4413      	add	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b2c:	4b74      	ldr	r3, [pc, #464]	; (8001d00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	0091      	lsls	r1, r2, #2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b46:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	041a      	lsls	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	4413      	add	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001b74:	4b62      	ldr	r3, [pc, #392]	; (8001d00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	0091      	lsls	r1, r2, #2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	4413      	add	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ba0:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	0091      	lsls	r1, r2, #2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bba:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	041a      	lsls	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	0091      	lsls	r1, r2, #2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bfc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c18:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c20:	061a      	lsls	r2, r3, #24
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c30:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001c32:	4413      	add	r3, r2
 8001c34:	009a      	lsls	r2, r3, #2
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	441a      	add	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	441a      	add	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	441a      	add	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	441a      	add	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	441a      	add	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	441a      	add	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	441a      	add	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d915      	bls.n	8001d28 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001cfc:	e006      	b.n	8001d0c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001cfe:	bf00      	nop
 8001d00:	ffff0003 	.word	0xffff0003
 8001d04:	10002b00 	.word	0x10002b00
 8001d08:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d12:	f043 0220 	orr.w	r2, r3, #32
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2203      	movs	r2, #3
 8001d20:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e010      	b.n	8001d4a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e005      	b.n	8001d3c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3f3      	bcc.n	8001d30 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop

08001d58 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001d76:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e00a      	b.n	8001d9a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001d8c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001d92:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d98:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001da4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001daa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001db0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dc4:	6839      	ldr	r1, [r7, #0]
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	3304      	adds	r3, #4
 8001de6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e020      	b.n	8001e30 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3303      	adds	r3, #3
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	440b      	add	r3, r1
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001e06:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	440b      	add	r3, r1
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001e14:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	440a      	add	r2, r1
 8001e1c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001e1e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	3304      	adds	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0c1b      	lsrs	r3, r3, #16
 8001e36:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <FDCAN_CopyMessageToRAM+0xf8>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d3d5      	bcc.n	8001dee <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	3724      	adds	r7, #36	; 0x24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	080044a8 	.word	0x080044a8

08001e54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_FLASH_Unlock+0x38>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00d      	beq.n	8001e80 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_FLASH_Unlock+0x38>)
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_FLASH_Unlock+0x3c>)
 8001e68:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_FLASH_Unlock+0x38>)
 8001e6c:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_FLASH_Unlock+0x40>)
 8001e6e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_FLASH_Unlock+0x38>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	52002000 	.word	0x52002000
 8001e90:	45670123 	.word	0x45670123
 8001e94:	cdef89ab 	.word	0xcdef89ab

08001e98 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_FLASH_Lock+0x2c>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_FLASH_Lock+0x2c>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_FLASH_Lock+0x2c>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	52002000 	.word	0x52002000

08001ec8 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001eda:	f7ff f857 	bl	8000f8c <HAL_GetTick>
 8001ede:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001ee0:	e010      	b.n	8001f04 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d00c      	beq.n	8001f04 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001eea:	f7ff f84f 	bl	8000f8c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d302      	bcc.n	8001f00 <FLASH_WaitForLastOperation+0x38>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e02d      	b.n	8001f60 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <FLASH_WaitForLastOperation+0xa0>)
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d0e7      	beq.n	8001ee2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d104      	bne.n	8001f22 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <FLASH_WaitForLastOperation+0xa0>)
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <FLASH_WaitForLastOperation+0xa4>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <FLASH_WaitForLastOperation+0xa8>)
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <FLASH_WaitForLastOperation+0xa8>)
 8001f36:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8001f38:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <FLASH_WaitForLastOperation+0xa0>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00e      	b.n	8001f60 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10a      	bne.n	8001f5e <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <FLASH_WaitForLastOperation+0xa0>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f54:	d103      	bne.n	8001f5e <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <FLASH_WaitForLastOperation+0xa0>)
 8001f58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f5c:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	52002000 	.word	0x52002000
 8001f6c:	17ee0000 	.word	0x17ee0000
 8001f70:	24000130 	.word	0x24000130

08001f74 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f82:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <HAL_FLASHEx_Erase+0x10c>)
 8001f84:	7d1b      	ldrb	r3, [r3, #20]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_FLASHEx_Erase+0x1a>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e074      	b.n	8002078 <HAL_FLASHEx_Erase+0x104>
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <HAL_FLASHEx_Erase+0x10c>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_FLASHEx_Erase+0x10c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fac:	f7ff ff8c 	bl	8001ec8 <FLASH_WaitForLastOperation>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d157      	bne.n	8002070 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d11e      	bne.n	8002006 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f000 f85a 	bl	800208c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d045      	beq.n	8002070 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fea:	f7ff ff6d 	bl	8001ec8 <FLASH_WaitForLastOperation>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_FLASHEx_Erase+0x110>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a21      	ldr	r2, [pc, #132]	; (8002084 <HAL_FLASHEx_Erase+0x110>)
 8001ffe:	f023 0308 	bic.w	r3, r3, #8
 8002002:	60d3      	str	r3, [r2, #12]
 8002004:	e034      	b.n	8002070 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	e024      	b.n	8002060 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	461a      	mov	r2, r3
 8002020:	68b8      	ldr	r0, [r7, #8]
 8002022:	f000 f857 	bl	80020d4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00c      	beq.n	800204c <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8002032:	2101      	movs	r1, #1
 8002034:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002038:	f7ff ff46 	bl	8001ec8 <FLASH_WaitForLastOperation>
 800203c:	4603      	mov	r3, r0
 800203e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_FLASHEx_Erase+0x110>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	490f      	ldr	r1, [pc, #60]	; (8002084 <HAL_FLASHEx_Erase+0x110>)
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_FLASHEx_Erase+0x114>)
 8002048:	4013      	ands	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	601a      	str	r2, [r3, #0]
          break;
 8002058:	e00a      	b.n	8002070 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3301      	adds	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4413      	add	r3, r2
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	429a      	cmp	r2, r3
 800206e:	d3d2      	bcc.n	8002016 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_FLASHEx_Erase+0x10c>)
 8002072:	2200      	movs	r2, #0
 8002074:	751a      	strb	r2, [r3, #20]

  return status;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	24000130 	.word	0x24000130
 8002084:	52002000 	.word	0x52002000
 8002088:	fffff8fb 	.word	0xfffff8fb

0800208c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d011      	beq.n	80020c4 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <FLASH_MassErase+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <FLASH_MassErase+0x44>)
 80020a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020aa:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <FLASH_MassErase+0x44>)
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <FLASH_MassErase+0x44>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <FLASH_MassErase+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <FLASH_MassErase+0x44>)
 80020be:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80020c2:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	52002000 	.word	0x52002000

080020d4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d010      	beq.n	800210c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <FLASH_Erase_Sector+0x44>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <FLASH_Erase_Sector+0x44>)
 80020f0:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80020f4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <FLASH_Erase_Sector+0x44>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	0219      	lsls	r1, r3, #8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	430b      	orrs	r3, r1
 8002102:	4313      	orrs	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <FLASH_Erase_Sector+0x44>)
 8002106:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800210a:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	52002000 	.word	0x52002000

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800212a:	4b86      	ldr	r3, [pc, #536]	; (8002344 <HAL_GPIO_Init+0x228>)
 800212c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800212e:	e18c      	b.n	800244a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 817e 	beq.w	8002444 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d005      	beq.n	8002160 <HAL_GPIO_Init+0x44>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d130      	bne.n	80021c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002196:	2201      	movs	r2, #1
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f003 0201 	and.w	r2, r3, #1
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d017      	beq.n	80021fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d123      	bne.n	8002252 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	220f      	movs	r2, #15
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	69b9      	ldr	r1, [r7, #24]
 800224e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	2203      	movs	r2, #3
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0203 	and.w	r2, r3, #3
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80d8 	beq.w	8002444 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <HAL_GPIO_Init+0x22c>)
 8002296:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800229a:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <HAL_GPIO_Init+0x22c>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_GPIO_Init+0x22c>)
 80022a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b2:	4a26      	ldr	r2, [pc, #152]	; (800234c <HAL_GPIO_Init+0x230>)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <HAL_GPIO_Init+0x234>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d04a      	beq.n	8002374 <HAL_GPIO_Init+0x258>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <HAL_GPIO_Init+0x238>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d02b      	beq.n	800233e <HAL_GPIO_Init+0x222>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <HAL_GPIO_Init+0x23c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d025      	beq.n	800233a <HAL_GPIO_Init+0x21e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a1a      	ldr	r2, [pc, #104]	; (800235c <HAL_GPIO_Init+0x240>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01f      	beq.n	8002336 <HAL_GPIO_Init+0x21a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_GPIO_Init+0x244>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d019      	beq.n	8002332 <HAL_GPIO_Init+0x216>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a18      	ldr	r2, [pc, #96]	; (8002364 <HAL_GPIO_Init+0x248>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x212>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a17      	ldr	r2, [pc, #92]	; (8002368 <HAL_GPIO_Init+0x24c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x20e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a16      	ldr	r2, [pc, #88]	; (800236c <HAL_GPIO_Init+0x250>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x20a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a15      	ldr	r2, [pc, #84]	; (8002370 <HAL_GPIO_Init+0x254>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x206>
 800231e:	2309      	movs	r3, #9
 8002320:	e029      	b.n	8002376 <HAL_GPIO_Init+0x25a>
 8002322:	230a      	movs	r3, #10
 8002324:	e027      	b.n	8002376 <HAL_GPIO_Init+0x25a>
 8002326:	2307      	movs	r3, #7
 8002328:	e025      	b.n	8002376 <HAL_GPIO_Init+0x25a>
 800232a:	2306      	movs	r3, #6
 800232c:	e023      	b.n	8002376 <HAL_GPIO_Init+0x25a>
 800232e:	2305      	movs	r3, #5
 8002330:	e021      	b.n	8002376 <HAL_GPIO_Init+0x25a>
 8002332:	2304      	movs	r3, #4
 8002334:	e01f      	b.n	8002376 <HAL_GPIO_Init+0x25a>
 8002336:	2303      	movs	r3, #3
 8002338:	e01d      	b.n	8002376 <HAL_GPIO_Init+0x25a>
 800233a:	2302      	movs	r3, #2
 800233c:	e01b      	b.n	8002376 <HAL_GPIO_Init+0x25a>
 800233e:	2301      	movs	r3, #1
 8002340:	e019      	b.n	8002376 <HAL_GPIO_Init+0x25a>
 8002342:	bf00      	nop
 8002344:	58000080 	.word	0x58000080
 8002348:	58024400 	.word	0x58024400
 800234c:	58000400 	.word	0x58000400
 8002350:	58020000 	.word	0x58020000
 8002354:	58020400 	.word	0x58020400
 8002358:	58020800 	.word	0x58020800
 800235c:	58020c00 	.word	0x58020c00
 8002360:	58021000 	.word	0x58021000
 8002364:	58021400 	.word	0x58021400
 8002368:	58021800 	.word	0x58021800
 800236c:	58021c00 	.word	0x58021c00
 8002370:	58022400 	.word	0x58022400
 8002374:	2300      	movs	r3, #0
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	f002 0203 	and.w	r2, r2, #3
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	4093      	lsls	r3, r2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002386:	4938      	ldr	r1, [pc, #224]	; (8002468 <HAL_GPIO_Init+0x34c>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	3301      	adds	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	f47f ae6b 	bne.w	8002130 <HAL_GPIO_Init+0x14>
  }
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	3724      	adds	r7, #36	; 0x24
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	58000400 	.word	0x58000400

0800246c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002488:	e003      	b.n	8002492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	041a      	lsls	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024b0:	887a      	ldrh	r2, [r7, #2]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	041a      	lsls	r2, r3, #16
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	43d9      	mvns	r1, r3
 80024bc:	887b      	ldrh	r3, [r7, #2]
 80024be:	400b      	ands	r3, r1
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	619a      	str	r2, [r3, #24]
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d00a      	beq.n	80024fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e01f      	b.n	800253a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e01d      	b.n	800253a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	490f      	ldr	r1, [pc, #60]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4313      	orrs	r3, r2
 800250c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800250e:	f7fe fd3d 	bl	8000f8c <HAL_GetTick>
 8002512:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002514:	e009      	b.n	800252a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002516:	f7fe fd39 	bl	8000f8c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002524:	d901      	bls.n	800252a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e007      	b.n	800253a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002536:	d1ee      	bne.n	8002516 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	58024800 	.word	0x58024800

08002548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	; 0x30
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e39d      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8087 	beq.w	8002676 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002568:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0x244>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002572:	4b86      	ldr	r3, [pc, #536]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	2b10      	cmp	r3, #16
 800257c:	d007      	beq.n	800258e <HAL_RCC_OscConfig+0x46>
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	2b18      	cmp	r3, #24
 8002582:	d110      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d10b      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258e:	4b7f      	ldr	r3, [pc, #508]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d06c      	beq.n	8002674 <HAL_RCC_OscConfig+0x12c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d168      	bne.n	8002674 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e377      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x76>
 80025b0:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a75      	ldr	r2, [pc, #468]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e02e      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x98>
 80025c6:	4b71      	ldr	r3, [pc, #452]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a70      	ldr	r2, [pc, #448]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b6e      	ldr	r3, [pc, #440]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6d      	ldr	r2, [pc, #436]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e01d      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0xbc>
 80025ea:	4b68      	ldr	r3, [pc, #416]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a67      	ldr	r2, [pc, #412]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a64      	ldr	r2, [pc, #400]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 8002604:	4b61      	ldr	r3, [pc, #388]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a60      	ldr	r2, [pc, #384]	; (800278c <HAL_RCC_OscConfig+0x244>)
 800260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b5e      	ldr	r3, [pc, #376]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5d      	ldr	r2, [pc, #372]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fcb2 	bl	8000f8c <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe fcae 	bl	8000f8c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e32b      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800263e:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0xe4>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fc9e 	bl	8000f8c <HAL_GetTick>
 8002650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002654:	f7fe fc9a 	bl	8000f8c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e317      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002666:	4b49      	ldr	r3, [pc, #292]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x10c>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 808c 	beq.w	800279c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002684:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800268c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_RCC_OscConfig+0x162>
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	2b18      	cmp	r3, #24
 800269e:	d137      	bne.n	8002710 <HAL_RCC_OscConfig+0x1c8>
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d132      	bne.n	8002710 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026aa:	4b38      	ldr	r3, [pc, #224]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x17a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e2e9      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026c2:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0219 	bic.w	r2, r3, #25
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	492f      	ldr	r1, [pc, #188]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026d4:	f7fe fc5a 	bl	8000f8c <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026dc:	f7fe fc56 	bl	8000f8c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e2d3      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ee:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	4920      	ldr	r1, [pc, #128]	; (800278c <HAL_RCC_OscConfig+0x244>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800270e:	e045      	b.n	800279c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d026      	beq.n	8002766 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_RCC_OscConfig+0x244>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 0219 	bic.w	r2, r3, #25
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4919      	ldr	r1, [pc, #100]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fc2f 	bl	8000f8c <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002732:	f7fe fc2b 	bl	8000f8c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e2a8      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	490b      	ldr	r1, [pc, #44]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
 8002764:	e01a      	b.n	800279c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_RCC_OscConfig+0x244>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe fc0b 	bl	8000f8c <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277a:	f7fe fc07 	bl	8000f8c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d903      	bls.n	8002790 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e284      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
 800278c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002790:	4b96      	ldr	r3, [pc, #600]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d06a      	beq.n	800287e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a8:	4b90      	ldr	r3, [pc, #576]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027b0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027b2:	4b8e      	ldr	r3, [pc, #568]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d007      	beq.n	80027ce <HAL_RCC_OscConfig+0x286>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b18      	cmp	r3, #24
 80027c2:	d11b      	bne.n	80027fc <HAL_RCC_OscConfig+0x2b4>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d116      	bne.n	80027fc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ce:	4b87      	ldr	r3, [pc, #540]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_RCC_OscConfig+0x29e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b80      	cmp	r3, #128	; 0x80
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e257      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027e6:	4b81      	ldr	r3, [pc, #516]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	061b      	lsls	r3, r3, #24
 80027f4:	497d      	ldr	r1, [pc, #500]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027fa:	e040      	b.n	800287e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d023      	beq.n	800284c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002804:	4b79      	ldr	r3, [pc, #484]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a78      	ldr	r2, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 800280a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800280e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe fbbc 	bl	8000f8c <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002818:	f7fe fbb8 	bl	8000f8c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e235      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800282a:	4b70      	ldr	r3, [pc, #448]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002836:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	061b      	lsls	r3, r3, #24
 8002844:	4969      	ldr	r1, [pc, #420]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60cb      	str	r3, [r1, #12]
 800284a:	e018      	b.n	800287e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800284c:	4b67      	ldr	r3, [pc, #412]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a66      	ldr	r2, [pc, #408]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fb98 	bl	8000f8c <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002860:	f7fe fb94 	bl	8000f8c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e211      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002872:	4b5e      	ldr	r3, [pc, #376]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d036      	beq.n	80028f8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d019      	beq.n	80028c6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b56      	ldr	r3, [pc, #344]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002896:	4a55      	ldr	r2, [pc, #340]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7fe fb75 	bl	8000f8c <HAL_GetTick>
 80028a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a6:	f7fe fb71 	bl	8000f8c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1ee      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028b8:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80028ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x35e>
 80028c4:	e018      	b.n	80028f8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c6:	4b49      	ldr	r3, [pc, #292]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80028c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ca:	4a48      	ldr	r2, [pc, #288]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7fe fb5b 	bl	8000f8c <HAL_GetTick>
 80028d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028da:	f7fe fb57 	bl	8000f8c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1d4      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028ec:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80028ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d036      	beq.n	8002972 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d019      	beq.n	8002940 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800290c:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a36      	ldr	r2, [pc, #216]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002916:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002918:	f7fe fb38 	bl	8000f8c <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002920:	f7fe fb34 	bl	8000f8c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1b1      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002932:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x3d8>
 800293e:	e018      	b.n	8002972 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a29      	ldr	r2, [pc, #164]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800294a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800294c:	f7fe fb1e 	bl	8000f8c <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002954:	f7fe fb1a 	bl	8000f8c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e197      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8086 	beq.w	8002a8c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_RCC_OscConfig+0x4a8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <HAL_RCC_OscConfig+0x4a8>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800298c:	f7fe fafe 	bl	8000f8c <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fafa 	bl	8000f8c <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e177      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_RCC_OscConfig+0x4a8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x480>
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
 80029c6:	e032      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d111      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4ac>
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a05      	ldr	r2, [pc, #20]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a02      	ldr	r2, [pc, #8]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	e021      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e6>
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
 80029f0:	58024800 	.word	0x58024800
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCC_OscConfig+0x4ce>
 80029fc:	4b83      	ldr	r3, [pc, #524]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a82      	ldr	r2, [pc, #520]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
 8002a08:	4b80      	ldr	r3, [pc, #512]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a7f      	ldr	r2, [pc, #508]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	e00b      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e6>
 8002a16:	4b7d      	ldr	r3, [pc, #500]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a7c      	ldr	r2, [pc, #496]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
 8002a22:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a79      	ldr	r2, [pc, #484]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d015      	beq.n	8002a62 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe faa9 	bl	8000f8c <HAL_GetTick>
 8002a3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe faa5 	bl	8000f8c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e120      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a54:	4b6d      	ldr	r3, [pc, #436]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ee      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
 8002a60:	e014      	b.n	8002a8c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fe fa93 	bl	8000f8c <HAL_GetTick>
 8002a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fe fa8f 	bl	8000f8c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e10a      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ee      	bne.n	8002a6a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80ff 	beq.w	8002c94 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a9e:	2b18      	cmp	r3, #24
 8002aa0:	f000 80ba 	beq.w	8002c18 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	f040 8095 	bne.w	8002bd8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b57      	ldr	r3, [pc, #348]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a56      	ldr	r2, [pc, #344]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe fa67 	bl	8000f8c <HAL_GetTick>
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fa63 	bl	8000f8c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e0e0      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad4:	4b4d      	ldr	r3, [pc, #308]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae0:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_OscConfig+0x6c8>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	430a      	orrs	r2, r1
 8002af4:	4945      	ldr	r1, [pc, #276]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	628b      	str	r3, [r1, #40]	; 0x28
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	3b01      	subs	r3, #1
 8002b00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	025b      	lsls	r3, r3, #9
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	3b01      	subs	r3, #1
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b2a:	4938      	ldr	r1, [pc, #224]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b30:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	4a35      	ldr	r2, [pc, #212]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b3c:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b40:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_RCC_OscConfig+0x6cc>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b48:	00d2      	lsls	r2, r2, #3
 8002b4a:	4930      	ldr	r1, [pc, #192]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f023 020c 	bic.w	r2, r3, #12
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	492b      	ldr	r1, [pc, #172]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b62:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	f023 0202 	bic.w	r2, r3, #2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	4927      	ldr	r1, [pc, #156]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe f9ec 	bl	8000f8c <HAL_GetTick>
 8002bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe f9e8 	bl	8000f8c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e065      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x670>
 8002bd6:	e05d      	b.n	8002c94 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe f9d2 	bl	8000f8c <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe f9ce 	bl	8000f8c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e04b      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bfe:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x6a4>
 8002c0a:	e043      	b.n	8002c94 <HAL_RCC_OscConfig+0x74c>
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	fffffc0c 	.word	0xfffffc0c
 8002c14:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCC_OscConfig+0x758>)
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_OscConfig+0x758>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d031      	beq.n	8002c90 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f003 0203 	and.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d12a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d122      	bne.n	8002c90 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d11a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	0a5b      	lsrs	r3, r3, #9
 8002c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d108      	bne.n	8002c90 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	0e1b      	lsrs	r3, r3, #24
 8002c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3730      	adds	r7, #48	; 0x30
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	58024400 	.word	0x58024400

08002ca4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e19c      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b8a      	ldr	r3, [pc, #552]	; (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d910      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b87      	ldr	r3, [pc, #540]	; (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 020f 	bic.w	r2, r3, #15
 8002cce:	4985      	ldr	r1, [pc, #532]	; (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b83      	ldr	r3, [pc, #524]	; (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e184      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d908      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d04:	4b78      	ldr	r3, [pc, #480]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	4975      	ldr	r1, [pc, #468]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	4b70      	ldr	r3, [pc, #448]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d908      	bls.n	8002d44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d32:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	496a      	ldr	r1, [pc, #424]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	4b64      	ldr	r3, [pc, #400]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d908      	bls.n	8002d72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	495e      	ldr	r1, [pc, #376]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d908      	bls.n	8002da0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d8e:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4953      	ldr	r1, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	4b4d      	ldr	r3, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d908      	bls.n	8002dce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f023 020f 	bic.w	r2, r3, #15
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4947      	ldr	r1, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d055      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dda:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	4940      	ldr	r1, [pc, #256]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002df4:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d121      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0f6      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d115      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0ea      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0de      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e34:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0d6      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f023 0207 	bic.w	r2, r3, #7
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4925      	ldr	r1, [pc, #148]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fe f899 	bl	8000f8c <HAL_GetTick>
 8002e5a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5e:	f7fe f895 	bl	8000f8c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0be      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e74:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d1eb      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d208      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f023 020f 	bic.w	r2, r3, #15
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d214      	bcs.n	8002eec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 020f 	bic.w	r2, r3, #15
 8002eca:	4906      	ldr	r1, [pc, #24]	; (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e086      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
 8002ee4:	52002000 	.word	0x52002000
 8002ee8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d208      	bcs.n	8002f1a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f08:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	4939      	ldr	r1, [pc, #228]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d208      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	492e      	ldr	r1, [pc, #184]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d208      	bcs.n	8002f76 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	4922      	ldr	r1, [pc, #136]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d208      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4917      	ldr	r1, [pc, #92]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fa4:	f000 f834 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	4912      	ldr	r1, [pc, #72]	; (8003000 <HAL_RCC_ClockConfig+0x35c>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <HAL_RCC_ClockConfig+0x35c>)
 8002fcc:	5cd3      	ldrb	r3, [r2, r3]
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <HAL_RCC_ClockConfig+0x360>)
 8002fda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <HAL_RCC_ClockConfig+0x364>)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_RCC_ClockConfig+0x368>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd ff86 	bl	8000ef8 <HAL_InitTick>
 8002fec:	4603      	mov	r3, r0
 8002fee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	58024400 	.word	0x58024400
 8003000:	08004498 	.word	0x08004498
 8003004:	24000004 	.word	0x24000004
 8003008:	24000000 	.word	0x24000000
 800300c:	24000008 	.word	0x24000008

08003010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	; 0x24
 8003014:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003016:	4bb3      	ldr	r3, [pc, #716]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800301e:	2b18      	cmp	r3, #24
 8003020:	f200 8155 	bhi.w	80032ce <HAL_RCC_GetSysClockFreq+0x2be>
 8003024:	a201      	add	r2, pc, #4	; (adr r2, 800302c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	08003091 	.word	0x08003091
 8003030:	080032cf 	.word	0x080032cf
 8003034:	080032cf 	.word	0x080032cf
 8003038:	080032cf 	.word	0x080032cf
 800303c:	080032cf 	.word	0x080032cf
 8003040:	080032cf 	.word	0x080032cf
 8003044:	080032cf 	.word	0x080032cf
 8003048:	080032cf 	.word	0x080032cf
 800304c:	080030b7 	.word	0x080030b7
 8003050:	080032cf 	.word	0x080032cf
 8003054:	080032cf 	.word	0x080032cf
 8003058:	080032cf 	.word	0x080032cf
 800305c:	080032cf 	.word	0x080032cf
 8003060:	080032cf 	.word	0x080032cf
 8003064:	080032cf 	.word	0x080032cf
 8003068:	080032cf 	.word	0x080032cf
 800306c:	080030bd 	.word	0x080030bd
 8003070:	080032cf 	.word	0x080032cf
 8003074:	080032cf 	.word	0x080032cf
 8003078:	080032cf 	.word	0x080032cf
 800307c:	080032cf 	.word	0x080032cf
 8003080:	080032cf 	.word	0x080032cf
 8003084:	080032cf 	.word	0x080032cf
 8003088:	080032cf 	.word	0x080032cf
 800308c:	080030c3 	.word	0x080030c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003090:	4b94      	ldr	r3, [pc, #592]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800309c:	4b91      	ldr	r3, [pc, #580]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	08db      	lsrs	r3, r3, #3
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	4a90      	ldr	r2, [pc, #576]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80030ae:	e111      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030b0:	4b8d      	ldr	r3, [pc, #564]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b2:	61bb      	str	r3, [r7, #24]
    break;
 80030b4:	e10e      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80030b6:	4b8d      	ldr	r3, [pc, #564]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030b8:	61bb      	str	r3, [r7, #24]
    break;
 80030ba:	e10b      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80030bc:	4b8c      	ldr	r3, [pc, #560]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030be:	61bb      	str	r3, [r7, #24]
    break;
 80030c0:	e108      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030c2:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030cc:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030d8:	4b82      	ldr	r3, [pc, #520]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80030e2:	4b80      	ldr	r3, [pc, #512]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	08db      	lsrs	r3, r3, #3
 80030e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80e1 	beq.w	80032c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b02      	cmp	r3, #2
 800310a:	f000 8083 	beq.w	8003214 <HAL_RCC_GetSysClockFreq+0x204>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b02      	cmp	r3, #2
 8003112:	f200 80a1 	bhi.w	8003258 <HAL_RCC_GetSysClockFreq+0x248>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x114>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d056      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003122:	e099      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003124:	4b6f      	ldr	r3, [pc, #444]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02d      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003130:	4b6c      	ldr	r3, [pc, #432]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	4a6b      	ldr	r2, [pc, #428]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
 8003140:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316a:	ed97 6a02 	vldr	s12, [r7, #8]
 800316e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800317e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003186:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800318a:	e087      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003196:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031ce:	e065      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80031de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e2:	4b40      	ldr	r3, [pc, #256]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003212:	e043      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003300 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003226:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003236:	ed97 6a02 	vldr	s12, [r7, #8]
 800323a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800323e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003256:	e021      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003262:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327a:	ed97 6a02 	vldr	s12, [r7, #8]
 800327e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800328e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800329a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	0a5b      	lsrs	r3, r3, #9
 80032a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032a6:	3301      	adds	r3, #1
 80032a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	ee07 3a90 	vmov	s15, r3
 80032b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80032b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c0:	ee17 3a90 	vmov	r3, s15
 80032c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80032c6:	e005      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
    break;
 80032cc:	e002      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032d0:	61bb      	str	r3, [r7, #24]
    break;
 80032d2:	bf00      	nop
  }

  return sysclockfreq;
 80032d4:	69bb      	ldr	r3, [r7, #24]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3724      	adds	r7, #36	; 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	58024400 	.word	0x58024400
 80032e8:	03d09000 	.word	0x03d09000
 80032ec:	003d0900 	.word	0x003d0900
 80032f0:	017d7840 	.word	0x017d7840
 80032f4:	46000000 	.word	0x46000000
 80032f8:	4c742400 	.word	0x4c742400
 80032fc:	4a742400 	.word	0x4a742400
 8003300:	4bbebc20 	.word	0x4bbebc20

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800330c:	2300      	movs	r3, #0
 800330e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003310:	2300      	movs	r3, #0
 8003312:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d03f      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003324:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003328:	d02a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800332a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800332e:	d824      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003334:	d018      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800333a:	d81e      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003344:	d007      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003346:	e018      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003348:	4ba4      	ldr	r3, [pc, #656]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	4aa3      	ldr	r2, [pc, #652]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800334e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003354:	e015      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fecb 	bl	80040f8 <RCCEx_PLL2_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003366:	e00c      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3324      	adds	r3, #36	; 0x24
 800336c:	2102      	movs	r1, #2
 800336e:	4618      	mov	r0, r3
 8003370:	f000 ff74 	bl	800425c <RCCEx_PLL3_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003378:	e003      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
      break;
 800337e:	e000      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003388:	4b94      	ldr	r3, [pc, #592]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800338a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003394:	4991      	ldr	r1, [pc, #580]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	650b      	str	r3, [r1, #80]	; 0x50
 800339a:	e001      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d03d      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d826      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033d1 	.word	0x080033d1
 80033c0:	080033df 	.word	0x080033df
 80033c4:	080033f1 	.word	0x080033f1
 80033c8:	08003409 	.word	0x08003409
 80033cc:	08003409 	.word	0x08003409
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d0:	4b82      	ldr	r3, [pc, #520]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	4a81      	ldr	r2, [pc, #516]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80033d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033dc:	e015      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3304      	adds	r3, #4
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fe87 	bl	80040f8 <RCCEx_PLL2_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033ee:	e00c      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3324      	adds	r3, #36	; 0x24
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 ff30 	bl	800425c <RCCEx_PLL3_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003400:	e003      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	75fb      	strb	r3, [r7, #23]
      break;
 8003406:	e000      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003410:	4b72      	ldr	r3, [pc, #456]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	f023 0207 	bic.w	r2, r3, #7
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	496f      	ldr	r1, [pc, #444]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	650b      	str	r3, [r1, #80]	; 0x50
 8003422:	e001      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d051      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800343a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800343e:	d036      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003440:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003444:	d830      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003446:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800344a:	d032      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800344c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003450:	d82a      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003452:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003456:	d02e      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003458:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800345c:	d824      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800345e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003462:	d018      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003468:	d81e      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800346e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003472:	d007      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003474:	e018      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003476:	4b59      	ldr	r3, [pc, #356]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	4a58      	ldr	r2, [pc, #352]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003482:	e019      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fe34 	bl	80040f8 <RCCEx_PLL2_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003494:	e010      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3324      	adds	r3, #36	; 0x24
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fedd 	bl	800425c <RCCEx_PLL3_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034a6:	e007      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
      break;
 80034ac:	e004      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80034ae:	bf00      	nop
 80034b0:	e002      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80034b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034be:	4b47      	ldr	r3, [pc, #284]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034cc:	4943      	ldr	r1, [pc, #268]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	658b      	str	r3, [r1, #88]	; 0x58
 80034d2:	e001      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d051      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034ea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80034ee:	d036      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80034f0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80034f4:	d830      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80034f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034fa:	d032      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80034fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003500:	d82a      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003502:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003506:	d02e      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003508:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800350c:	d824      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800350e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003512:	d018      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003518:	d81e      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800351e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003522:	d007      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003524:	e018      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003526:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4a2c      	ldr	r2, [pc, #176]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800352c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003532:	e019      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fddc 	bl	80040f8 <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003544:	e010      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3324      	adds	r3, #36	; 0x24
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fe85 	bl	800425c <RCCEx_PLL3_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003556:	e007      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	75fb      	strb	r3, [r7, #23]
      break;
 800355c:	e004      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800355e:	bf00      	nop
 8003560:	e002      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003562:	bf00      	nop
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800356e:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800357c:	4917      	ldr	r1, [pc, #92]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	658b      	str	r3, [r1, #88]	; 0x58
 8003582:	e001      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d035      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	2b30      	cmp	r3, #48	; 0x30
 800359a:	d01c      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800359c:	2b30      	cmp	r3, #48	; 0x30
 800359e:	d817      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d00c      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d813      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d019      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d10f      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80035b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80035bc:	e011      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2102      	movs	r1, #2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fd97 	bl	80040f8 <RCCEx_PLL2_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80035ce:	e008      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	75fb      	strb	r3, [r7, #23]
      break;
 80035d4:	e005      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80035d6:	bf00      	nop
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80035da:	bf00      	nop
 80035dc:	58024400 	.word	0x58024400
      break;
 80035e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80035e8:	4ba3      	ldr	r3, [pc, #652]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80035ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	49a0      	ldr	r1, [pc, #640]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035fa:	e001      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d047      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003614:	d030      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800361a:	d82a      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800361c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003620:	d02c      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003622:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003626:	d824      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362c:	d018      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d81e      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d007      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800363e:	e018      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4b8d      	ldr	r3, [pc, #564]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4a8c      	ldr	r2, [pc, #560]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800364c:	e017      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fd4f 	bl	80040f8 <RCCEx_PLL2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800365e:	e00e      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3324      	adds	r3, #36	; 0x24
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fdf8 	bl	800425c <RCCEx_PLL3_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003670:	e005      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
      break;
 8003676:	e002      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800367c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003684:	4b7c      	ldr	r3, [pc, #496]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003688:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	4979      	ldr	r1, [pc, #484]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003692:	4313      	orrs	r3, r2
 8003694:	650b      	str	r3, [r1, #80]	; 0x50
 8003696:	e001      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	7dfb      	ldrb	r3, [r7, #23]
 800369a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d049      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b0:	d02e      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80036b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b6:	d828      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80036b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036bc:	d02a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80036be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036c2:	d822      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80036c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036c8:	d026      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80036ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036ce:	d81c      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80036d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036d4:	d010      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80036d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036da:	d816      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01d      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e4:	d111      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fd03 	bl	80040f8 <RCCEx_PLL2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80036f6:	e012      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3324      	adds	r3, #36	; 0x24
 80036fc:	2101      	movs	r1, #1
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fdac 	bl	800425c <RCCEx_PLL3_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003708:	e009      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
      break;
 800370e:	e006      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003710:	bf00      	nop
 8003712:	e004      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003714:	bf00      	nop
 8003716:	e002      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800371c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371e:	7dfb      	ldrb	r3, [r7, #23]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003724:	4b54      	ldr	r3, [pc, #336]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	4951      	ldr	r1, [pc, #324]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003732:	4313      	orrs	r3, r2
 8003734:	650b      	str	r3, [r1, #80]	; 0x50
 8003736:	e001      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d04b      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800374e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003752:	d02e      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003758:	d828      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800375a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375e:	d02a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d822      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003766:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800376a:	d026      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800376c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003770:	d81c      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003776:	d010      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377c:	d816      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d01d      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003786:	d111      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	2101      	movs	r1, #1
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fcb2 	bl	80040f8 <RCCEx_PLL2_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003798:	e012      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3324      	adds	r3, #36	; 0x24
 800379e:	2101      	movs	r1, #1
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fd5b 	bl	800425c <RCCEx_PLL3_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037aa:	e009      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	75fb      	strb	r3, [r7, #23]
      break;
 80037b0:	e006      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80037b2:	bf00      	nop
 80037b4:	e004      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80037be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80037c6:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037d4:	4928      	ldr	r1, [pc, #160]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	658b      	str	r3, [r1, #88]	; 0x58
 80037da:	e001      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02f      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f4:	d00e      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80037f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037fa:	d814      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003804:	d10f      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003806:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800380c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003812:	e00c      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fc6c 	bl	80040f8 <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003824:	e003      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	75fb      	strb	r3, [r7, #23]
      break;
 800382a:	e000      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800382c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003838:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003840:	490d      	ldr	r1, [pc, #52]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003842:	4313      	orrs	r3, r2
 8003844:	650b      	str	r3, [r1, #80]	; 0x50
 8003846:	e001      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d034      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	2b03      	cmp	r3, #3
 800385e:	d81d      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	080038a3 	.word	0x080038a3
 800386c:	0800387d 	.word	0x0800387d
 8003870:	0800388b 	.word	0x0800388b
 8003874:	080038a3 	.word	0x080038a3
 8003878:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387c:	4bb1      	ldr	r3, [pc, #708]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4ab0      	ldr	r2, [pc, #704]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003888:	e00c      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2102      	movs	r1, #2
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fc31 	bl	80040f8 <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800389a:	e003      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	75fb      	strb	r3, [r7, #23]
      break;
 80038a0:	e000      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80038a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038aa:	4ba6      	ldr	r3, [pc, #664]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	f023 0203 	bic.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	49a3      	ldr	r1, [pc, #652]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038bc:	e001      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8086 	beq.w	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d0:	4b9d      	ldr	r3, [pc, #628]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a9c      	ldr	r2, [pc, #624]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80038d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038dc:	f7fd fb56 	bl	8000f8c <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038e2:	e009      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e4:	f7fd fb52 	bl	8000f8c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d902      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	75fb      	strb	r3, [r7, #23]
        break;
 80038f6:	e005      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038f8:	4b93      	ldr	r3, [pc, #588]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ef      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d166      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800390a:	4b8e      	ldr	r3, [pc, #568]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800390c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003914:	4053      	eors	r3, r2
 8003916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391a:	2b00      	cmp	r3, #0
 800391c:	d013      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800391e:	4b89      	ldr	r3, [pc, #548]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003926:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003928:	4b86      	ldr	r3, [pc, #536]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a85      	ldr	r2, [pc, #532]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800392e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003934:	4b83      	ldr	r3, [pc, #524]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a82      	ldr	r2, [pc, #520]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800393a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003940:	4a80      	ldr	r2, [pc, #512]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800394c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003950:	d115      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fd fb1b 	bl	8000f8c <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003958:	e00b      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fd fb17 	bl	8000f8c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d902      	bls.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	75fb      	strb	r3, [r7, #23]
            break;
 8003970:	e005      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003972:	4b74      	ldr	r3, [pc, #464]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0ed      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d126      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800398a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003992:	d10d      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003994:	4b6b      	ldr	r3, [pc, #428]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039a2:	0919      	lsrs	r1, r3, #4
 80039a4:	4b69      	ldr	r3, [pc, #420]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039a6:	400b      	ands	r3, r1
 80039a8:	4966      	ldr	r1, [pc, #408]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	610b      	str	r3, [r1, #16]
 80039ae:	e005      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80039b0:	4b64      	ldr	r3, [pc, #400]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	4a63      	ldr	r2, [pc, #396]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039ba:	6113      	str	r3, [r2, #16]
 80039bc:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ca:	495e      	ldr	r1, [pc, #376]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	670b      	str	r3, [r1, #112]	; 0x70
 80039d0:	e004      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	75bb      	strb	r3, [r7, #22]
 80039d6:	e001      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d07e      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	2b28      	cmp	r3, #40	; 0x28
 80039ee:	d867      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003ac7 	.word	0x08003ac7
 80039fc:	08003ac1 	.word	0x08003ac1
 8003a00:	08003ac1 	.word	0x08003ac1
 8003a04:	08003ac1 	.word	0x08003ac1
 8003a08:	08003ac1 	.word	0x08003ac1
 8003a0c:	08003ac1 	.word	0x08003ac1
 8003a10:	08003ac1 	.word	0x08003ac1
 8003a14:	08003ac1 	.word	0x08003ac1
 8003a18:	08003a9d 	.word	0x08003a9d
 8003a1c:	08003ac1 	.word	0x08003ac1
 8003a20:	08003ac1 	.word	0x08003ac1
 8003a24:	08003ac1 	.word	0x08003ac1
 8003a28:	08003ac1 	.word	0x08003ac1
 8003a2c:	08003ac1 	.word	0x08003ac1
 8003a30:	08003ac1 	.word	0x08003ac1
 8003a34:	08003ac1 	.word	0x08003ac1
 8003a38:	08003aaf 	.word	0x08003aaf
 8003a3c:	08003ac1 	.word	0x08003ac1
 8003a40:	08003ac1 	.word	0x08003ac1
 8003a44:	08003ac1 	.word	0x08003ac1
 8003a48:	08003ac1 	.word	0x08003ac1
 8003a4c:	08003ac1 	.word	0x08003ac1
 8003a50:	08003ac1 	.word	0x08003ac1
 8003a54:	08003ac1 	.word	0x08003ac1
 8003a58:	08003ac7 	.word	0x08003ac7
 8003a5c:	08003ac1 	.word	0x08003ac1
 8003a60:	08003ac1 	.word	0x08003ac1
 8003a64:	08003ac1 	.word	0x08003ac1
 8003a68:	08003ac1 	.word	0x08003ac1
 8003a6c:	08003ac1 	.word	0x08003ac1
 8003a70:	08003ac1 	.word	0x08003ac1
 8003a74:	08003ac1 	.word	0x08003ac1
 8003a78:	08003ac7 	.word	0x08003ac7
 8003a7c:	08003ac1 	.word	0x08003ac1
 8003a80:	08003ac1 	.word	0x08003ac1
 8003a84:	08003ac1 	.word	0x08003ac1
 8003a88:	08003ac1 	.word	0x08003ac1
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003ac1 	.word	0x08003ac1
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003ac7 	.word	0x08003ac7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fb28 	bl	80040f8 <RCCEx_PLL2_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003aac:	e00c      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3324      	adds	r3, #36	; 0x24
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fbd1 	bl	800425c <RCCEx_PLL3_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ace:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	491a      	ldr	r1, [pc, #104]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	654b      	str	r3, [r1, #84]	; 0x54
 8003ae0:	e001      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d03e      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d820      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b51 	.word	0x08003b51
 8003b04:	08003b19 	.word	0x08003b19
 8003b08:	08003b2b 	.word	0x08003b2b
 8003b0c:	08003b51 	.word	0x08003b51
 8003b10:	08003b51 	.word	0x08003b51
 8003b14:	08003b51 	.word	0x08003b51
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 faea 	bl	80040f8 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b28:	e013      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3324      	adds	r3, #36	; 0x24
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fb93 	bl	800425c <RCCEx_PLL3_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b40:	e007      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
 8003b48:	58024800 	.word	0x58024800
 8003b4c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003b50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b58:	4b9f      	ldr	r3, [pc, #636]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f023 0207 	bic.w	r2, r3, #7
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	499c      	ldr	r1, [pc, #624]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	654b      	str	r3, [r1, #84]	; 0x54
 8003b6a:	e001      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d039      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d820      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003b86:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003bcf 	.word	0x08003bcf
 8003b90:	08003ba5 	.word	0x08003ba5
 8003b94:	08003bb7 	.word	0x08003bb7
 8003b98:	08003bcf 	.word	0x08003bcf
 8003b9c:	08003bcf 	.word	0x08003bcf
 8003ba0:	08003bcf 	.word	0x08003bcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	2101      	movs	r1, #1
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 faa4 	bl	80040f8 <RCCEx_PLL2_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003bb4:	e00c      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3324      	adds	r3, #36	; 0x24
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fb4d 	bl	800425c <RCCEx_PLL3_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003bc6:	e003      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
      break;
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd6:	4b80      	ldr	r3, [pc, #512]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f023 0207 	bic.w	r2, r3, #7
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be4:	497c      	ldr	r1, [pc, #496]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	658b      	str	r3, [r1, #88]	; 0x58
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d04b      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c06:	d02e      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0c:	d828      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c12:	d02a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c18:	d822      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003c1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c1e:	d026      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003c20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c24:	d81c      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c2a:	d010      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c30:	d816      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01d      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c3a:	d111      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fa58 	bl	80040f8 <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c4c:	e012      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	2102      	movs	r1, #2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fb01 	bl	800425c <RCCEx_PLL3_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c5e:	e009      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
      break;
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003c66:	bf00      	nop
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c7a:	4b57      	ldr	r3, [pc, #348]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	4953      	ldr	r1, [pc, #332]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	654b      	str	r3, [r1, #84]	; 0x54
 8003c8e:	e001      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d04b      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003caa:	d02e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003cac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cb0:	d828      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	d02a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d822      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc2:	d026      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc8:	d81c      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cce:	d010      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd4:	d816      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01d      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cde:	d111      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fa06 	bl	80040f8 <RCCEx_PLL2_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003cf0:	e012      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3324      	adds	r3, #36	; 0x24
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 faaf 	bl	800425c <RCCEx_PLL3_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d02:	e009      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	75fb      	strb	r3, [r7, #23]
      break;
 8003d08:	e006      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e004      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2c:	492a      	ldr	r1, [pc, #168]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	658b      	str	r3, [r1, #88]	; 0x58
 8003d32:	e001      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d04d      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d4e:	d02e      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003d50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d54:	d828      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d5a:	d02a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d60:	d822      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003d62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d66:	d026      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003d68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d6c:	d81c      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d72:	d010      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d78:	d816      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01d      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	d111      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f9b4 	bl	80040f8 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d94:	e012      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3324      	adds	r3, #36	; 0x24
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fa5d 	bl	800425c <RCCEx_PLL3_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003da6:	e009      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003dae:	bf00      	nop
 8003db0:	e004      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003db2:	bf00      	nop
 8003db4:	e002      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dd0:	4901      	ldr	r1, [pc, #4]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	658b      	str	r3, [r1, #88]	; 0x58
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d018      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df4:	d10a      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fa2d 	bl	800425c <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003e0c:	4b8a      	ldr	r3, [pc, #552]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e18:	4987      	ldr	r1, [pc, #540]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e34:	d10a      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3324      	adds	r3, #36	; 0x24
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fa0d 	bl	800425c <RCCEx_PLL3_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e4c:	4b7a      	ldr	r3, [pc, #488]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	4977      	ldr	r1, [pc, #476]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d034      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e76:	d01d      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e7c:	d817      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e86:	d009      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e88:	e011      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f931 	bl	80040f8 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e9a:	e00c      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3324      	adds	r3, #36	; 0x24
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f9da 	bl	800425c <RCCEx_PLL3_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003eac:	e003      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ebc:	4b5e      	ldr	r3, [pc, #376]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eca:	495b      	ldr	r1, [pc, #364]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	658b      	str	r3, [r1, #88]	; 0x58
 8003ed0:	e001      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d033      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eec:	d01c      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003eee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef2:	d816      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003efe:	d007      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003f00:	e00f      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f02:	4b4d      	ldr	r3, [pc, #308]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a4c      	ldr	r2, [pc, #304]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f0e:	e00c      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3324      	adds	r3, #36	; 0x24
 8003f14:	2101      	movs	r1, #1
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f9a0 	bl	800425c <RCCEx_PLL3_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f20:	e003      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
      break;
 8003f26:	e000      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f30:	4b41      	ldr	r3, [pc, #260]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3e:	493e      	ldr	r1, [pc, #248]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	654b      	str	r3, [r1, #84]	; 0x54
 8003f44:	e001      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d029      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f62:	d007      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003f64:	e00f      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f66:	4b34      	ldr	r3, [pc, #208]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	4a33      	ldr	r2, [pc, #204]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f72:	e00b      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	2102      	movs	r1, #2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f8bc 	bl	80040f8 <RCCEx_PLL2_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f84:	e002      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
      break;
 8003f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f92:	4b29      	ldr	r3, [pc, #164]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	4926      	ldr	r1, [pc, #152]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003fa4:	e001      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
 8003fa8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3324      	adds	r3, #36	; 0x24
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f94d 	bl	800425c <RCCEx_PLL3_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d033      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe0:	d017      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe6:	d811      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fec:	d013      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8003fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff2:	d80b      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8003ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffc:	d106      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004008:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800400a:	e007      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75fb      	strb	r3, [r7, #23]
      break;
 8004010:	e004      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004012:	bf00      	nop
 8004014:	e002      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800401a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10c      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800402e:	4902      	ldr	r1, [pc, #8]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004030:	4313      	orrs	r3, r2
 8004032:	654b      	str	r3, [r1, #84]	; 0x54
 8004034:	e004      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8004036:	bf00      	nop
 8004038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800404e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004050:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004058:	4926      	ldr	r1, [pc, #152]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800406a:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004076:	491f      	ldr	r1, [pc, #124]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00d      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004088:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800408e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004092:	6113      	str	r3, [r2, #16]
 8004094:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800409e:	4915      	ldr	r1, [pc, #84]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	da08      	bge.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80040ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b8:	490e      	ldr	r1, [pc, #56]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d8:	4906      	ldr	r1, [pc, #24]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80040de:	7dbb      	ldrb	r3, [r7, #22]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e000      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	58024400 	.word	0x58024400

080040f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004106:	4b53      	ldr	r3, [pc, #332]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b03      	cmp	r3, #3
 8004110:	d101      	bne.n	8004116 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e099      	b.n	800424a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004116:	4b4f      	ldr	r3, [pc, #316]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a4e      	ldr	r2, [pc, #312]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 800411c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004122:	f7fc ff33 	bl	8000f8c <HAL_GetTick>
 8004126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004128:	e008      	b.n	800413c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800412a:	f7fc ff2f 	bl	8000f8c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e086      	b.n	800424a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800413c:	4b45      	ldr	r3, [pc, #276]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004148:	4b42      	ldr	r3, [pc, #264]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	031b      	lsls	r3, r3, #12
 8004156:	493f      	ldr	r1, [pc, #252]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 8004158:	4313      	orrs	r3, r2
 800415a:	628b      	str	r3, [r1, #40]	; 0x28
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	3b01      	subs	r3, #1
 8004162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	3b01      	subs	r3, #1
 800416c:	025b      	lsls	r3, r3, #9
 800416e:	b29b      	uxth	r3, r3
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	3b01      	subs	r3, #1
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	3b01      	subs	r3, #1
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800418c:	4931      	ldr	r1, [pc, #196]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004192:	4b30      	ldr	r3, [pc, #192]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	492d      	ldr	r1, [pc, #180]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	f023 0220 	bic.w	r2, r3, #32
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	4928      	ldr	r1, [pc, #160]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	4a26      	ldr	r2, [pc, #152]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041bc:	f023 0310 	bic.w	r3, r3, #16
 80041c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041c2:	4b24      	ldr	r3, [pc, #144]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <RCCEx_PLL2_Config+0x160>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	69d2      	ldr	r2, [r2, #28]
 80041ce:	00d2      	lsls	r2, r2, #3
 80041d0:	4920      	ldr	r1, [pc, #128]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041d6:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041dc:	f043 0310 	orr.w	r3, r3, #16
 80041e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	4a19      	ldr	r2, [pc, #100]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041f4:	e00f      	b.n	8004216 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d106      	bne.n	800420a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80041fc:	4b15      	ldr	r3, [pc, #84]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 8004202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004208:	e005      	b.n	8004216 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	4a11      	ldr	r2, [pc, #68]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 8004210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004214:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 800421c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004222:	f7fc feb3 	bl	8000f8c <HAL_GetTick>
 8004226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004228:	e008      	b.n	800423c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800422a:	f7fc feaf 	bl	8000f8c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e006      	b.n	800424a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <RCCEx_PLL2_Config+0x15c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	58024400 	.word	0x58024400
 8004258:	ffff0007 	.word	0xffff0007

0800425c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800426a:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b03      	cmp	r3, #3
 8004274:	d101      	bne.n	800427a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e099      	b.n	80043ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800427a:	4b4f      	ldr	r3, [pc, #316]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a4e      	ldr	r2, [pc, #312]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004286:	f7fc fe81 	bl	8000f8c <HAL_GetTick>
 800428a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800428c:	e008      	b.n	80042a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800428e:	f7fc fe7d 	bl	8000f8c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e086      	b.n	80043ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042a0:	4b45      	ldr	r3, [pc, #276]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042ac:	4b42      	ldr	r3, [pc, #264]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	051b      	lsls	r3, r3, #20
 80042ba:	493f      	ldr	r1, [pc, #252]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	628b      	str	r3, [r1, #40]	; 0x28
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	025b      	lsls	r3, r3, #9
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	3b01      	subs	r3, #1
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	061b      	lsls	r3, r3, #24
 80042ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042f0:	4931      	ldr	r1, [pc, #196]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	492d      	ldr	r1, [pc, #180]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004304:	4313      	orrs	r3, r2
 8004306:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004308:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	4928      	ldr	r1, [pc, #160]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800431a:	4b27      	ldr	r3, [pc, #156]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432a:	4b24      	ldr	r3, [pc, #144]	; (80043bc <RCCEx_PLL3_Config+0x160>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	69d2      	ldr	r2, [r2, #28]
 8004332:	00d2      	lsls	r2, r2, #3
 8004334:	4920      	ldr	r1, [pc, #128]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800433a:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004358:	e00f      	b.n	800437a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800436a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800436c:	e005      	b.n	800437a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004378:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004386:	f7fc fe01 	bl	8000f8c <HAL_GetTick>
 800438a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800438c:	e008      	b.n	80043a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800438e:	f7fc fdfd 	bl	8000f8c <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e006      	b.n	80043ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <RCCEx_PLL3_Config+0x15c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	58024400 	.word	0x58024400
 80043bc:	ffff0007 	.word	0xffff0007

080043c0 <__libc_init_array>:
 80043c0:	b570      	push	{r4, r5, r6, lr}
 80043c2:	4d0d      	ldr	r5, [pc, #52]	; (80043f8 <__libc_init_array+0x38>)
 80043c4:	4c0d      	ldr	r4, [pc, #52]	; (80043fc <__libc_init_array+0x3c>)
 80043c6:	1b64      	subs	r4, r4, r5
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	2600      	movs	r6, #0
 80043cc:	42a6      	cmp	r6, r4
 80043ce:	d109      	bne.n	80043e4 <__libc_init_array+0x24>
 80043d0:	4d0b      	ldr	r5, [pc, #44]	; (8004400 <__libc_init_array+0x40>)
 80043d2:	4c0c      	ldr	r4, [pc, #48]	; (8004404 <__libc_init_array+0x44>)
 80043d4:	f000 f82e 	bl	8004434 <_init>
 80043d8:	1b64      	subs	r4, r4, r5
 80043da:	10a4      	asrs	r4, r4, #2
 80043dc:	2600      	movs	r6, #0
 80043de:	42a6      	cmp	r6, r4
 80043e0:	d105      	bne.n	80043ee <__libc_init_array+0x2e>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e8:	4798      	blx	r3
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7ee      	b.n	80043cc <__libc_init_array+0xc>
 80043ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f2:	4798      	blx	r3
 80043f4:	3601      	adds	r6, #1
 80043f6:	e7f2      	b.n	80043de <__libc_init_array+0x1e>
 80043f8:	080044b8 	.word	0x080044b8
 80043fc:	080044b8 	.word	0x080044b8
 8004400:	080044b8 	.word	0x080044b8
 8004404:	080044bc 	.word	0x080044bc

08004408 <memcpy>:
 8004408:	440a      	add	r2, r1
 800440a:	4291      	cmp	r1, r2
 800440c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004410:	d100      	bne.n	8004414 <memcpy+0xc>
 8004412:	4770      	bx	lr
 8004414:	b510      	push	{r4, lr}
 8004416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800441a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800441e:	4291      	cmp	r1, r2
 8004420:	d1f9      	bne.n	8004416 <memcpy+0xe>
 8004422:	bd10      	pop	{r4, pc}

08004424 <memset>:
 8004424:	4402      	add	r2, r0
 8004426:	4603      	mov	r3, r0
 8004428:	4293      	cmp	r3, r2
 800442a:	d100      	bne.n	800442e <memset+0xa>
 800442c:	4770      	bx	lr
 800442e:	f803 1b01 	strb.w	r1, [r3], #1
 8004432:	e7f9      	b.n	8004428 <memset+0x4>

08004434 <_init>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	bf00      	nop
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr

08004440 <_fini>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr
