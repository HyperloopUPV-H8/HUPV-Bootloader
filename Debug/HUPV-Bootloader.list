
HUPV-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  080e0000  080e0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003968  080e02cc  080e02cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080e3c34  080e3c34  00013c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080e3ca8  080e3ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080e3cac  080e3cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080e3cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000014c  24000010  080e3cc0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400015c  080e3cc0  0002015c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cf91  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001956  00000000  00000000  0002cfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a90  00000000  00000000  0002e928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009c8  00000000  00000000  0002f3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000020e3  00000000  00000000  0002fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b87c  00000000  00000000  00031e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00141960  00000000  00000000  0003d6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0017f03f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ba4  00000000  00000000  0017f090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080e02cc <__do_global_dtors_aux>:
 80e02cc:	b510      	push	{r4, lr}
 80e02ce:	4c05      	ldr	r4, [pc, #20]	; (80e02e4 <__do_global_dtors_aux+0x18>)
 80e02d0:	7823      	ldrb	r3, [r4, #0]
 80e02d2:	b933      	cbnz	r3, 80e02e2 <__do_global_dtors_aux+0x16>
 80e02d4:	4b04      	ldr	r3, [pc, #16]	; (80e02e8 <__do_global_dtors_aux+0x1c>)
 80e02d6:	b113      	cbz	r3, 80e02de <__do_global_dtors_aux+0x12>
 80e02d8:	4804      	ldr	r0, [pc, #16]	; (80e02ec <__do_global_dtors_aux+0x20>)
 80e02da:	f3af 8000 	nop.w
 80e02de:	2301      	movs	r3, #1
 80e02e0:	7023      	strb	r3, [r4, #0]
 80e02e2:	bd10      	pop	{r4, pc}
 80e02e4:	24000010 	.word	0x24000010
 80e02e8:	00000000 	.word	0x00000000
 80e02ec:	080e3c1c 	.word	0x080e3c1c

080e02f0 <frame_dummy>:
 80e02f0:	b508      	push	{r3, lr}
 80e02f2:	4b03      	ldr	r3, [pc, #12]	; (80e0300 <frame_dummy+0x10>)
 80e02f4:	b11b      	cbz	r3, 80e02fe <frame_dummy+0xe>
 80e02f6:	4903      	ldr	r1, [pc, #12]	; (80e0304 <frame_dummy+0x14>)
 80e02f8:	4803      	ldr	r0, [pc, #12]	; (80e0308 <frame_dummy+0x18>)
 80e02fa:	f3af 8000 	nop.w
 80e02fe:	bd08      	pop	{r3, pc}
 80e0300:	00000000 	.word	0x00000000
 80e0304:	24000014 	.word	0x24000014
 80e0308:	080e3c1c 	.word	0x080e3c1c

080e030c <fdcan_transmit>:

extern FDCAN_HandleTypeDef hfdcan1;
FDCAN_TxHeaderTypeDef tx_header;
FDCAN_RxHeaderTypeDef rx_header_buffer;

fdcan_error_t const fdcan_transmit(fdcan_packet_t* packet){
 80e030c:	b580      	push	{r7, lr}
 80e030e:	b082      	sub	sp, #8
 80e0310:	af00      	add	r7, sp, #0
 80e0312:	6078      	str	r0, [r7, #4]

	tx_header.Identifier = (uint32_t)packet->identifier;
 80e0314:	687b      	ldr	r3, [r7, #4]
 80e0316:	881b      	ldrh	r3, [r3, #0]
 80e0318:	461a      	mov	r2, r3
 80e031a:	4b17      	ldr	r3, [pc, #92]	; (80e0378 <fdcan_transmit+0x6c>)
 80e031c:	601a      	str	r2, [r3, #0]
	tx_header.IdType = FDCAN_STANDARD_ID;
 80e031e:	4b16      	ldr	r3, [pc, #88]	; (80e0378 <fdcan_transmit+0x6c>)
 80e0320:	2200      	movs	r2, #0
 80e0322:	605a      	str	r2, [r3, #4]
	tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80e0324:	4b14      	ldr	r3, [pc, #80]	; (80e0378 <fdcan_transmit+0x6c>)
 80e0326:	2200      	movs	r2, #0
 80e0328:	609a      	str	r2, [r3, #8]
	tx_header.DataLength = FDCAN_DLC_BYTES_64;
 80e032a:	4b13      	ldr	r3, [pc, #76]	; (80e0378 <fdcan_transmit+0x6c>)
 80e032c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80e0330:	60da      	str	r2, [r3, #12]
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80e0332:	4b11      	ldr	r3, [pc, #68]	; (80e0378 <fdcan_transmit+0x6c>)
 80e0334:	2200      	movs	r2, #0
 80e0336:	611a      	str	r2, [r3, #16]
	tx_header.BitRateSwitch = FDCAN_BRS_ON;
 80e0338:	4b0f      	ldr	r3, [pc, #60]	; (80e0378 <fdcan_transmit+0x6c>)
 80e033a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80e033e:	615a      	str	r2, [r3, #20]
	tx_header.FDFormat = FDCAN_FD_CAN;
 80e0340:	4b0d      	ldr	r3, [pc, #52]	; (80e0378 <fdcan_transmit+0x6c>)
 80e0342:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80e0346:	619a      	str	r2, [r3, #24]
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80e0348:	4b0b      	ldr	r3, [pc, #44]	; (80e0378 <fdcan_transmit+0x6c>)
 80e034a:	2200      	movs	r2, #0
 80e034c:	61da      	str	r2, [r3, #28]
	tx_header.MessageMarker = 0;
 80e034e:	4b0a      	ldr	r3, [pc, #40]	; (80e0378 <fdcan_transmit+0x6c>)
 80e0350:	2200      	movs	r2, #0
 80e0352:	621a      	str	r2, [r3, #32]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, packet->data) != HAL_OK) {
 80e0354:	687b      	ldr	r3, [r7, #4]
 80e0356:	685b      	ldr	r3, [r3, #4]
 80e0358:	461a      	mov	r2, r3
 80e035a:	4907      	ldr	r1, [pc, #28]	; (80e0378 <fdcan_transmit+0x6c>)
 80e035c:	4807      	ldr	r0, [pc, #28]	; (80e037c <fdcan_transmit+0x70>)
 80e035e:	f000 fea4 	bl	80e10aa <HAL_FDCAN_AddMessageToTxFifoQ>
 80e0362:	4603      	mov	r3, r0
 80e0364:	2b00      	cmp	r3, #0
 80e0366:	d001      	beq.n	80e036c <fdcan_transmit+0x60>
		return FDCAN_ERROR;
 80e0368:	23ff      	movs	r3, #255	; 0xff
 80e036a:	e000      	b.n	80e036e <fdcan_transmit+0x62>
	}

	return FDCAN_OK;
 80e036c:	2300      	movs	r3, #0
}
 80e036e:	4618      	mov	r0, r3
 80e0370:	3708      	adds	r7, #8
 80e0372:	46bd      	mov	sp, r7
 80e0374:	bd80      	pop	{r7, pc}
 80e0376:	bf00      	nop
 80e0378:	2400002c 	.word	0x2400002c
 80e037c:	24000078 	.word	0x24000078

080e0380 <fdcan_read>:
//void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
//	__NOP();
//
//}

fdcan_error_t const fdcan_read(fdcan_packet_t* packet){
 80e0380:	b580      	push	{r7, lr}
 80e0382:	b082      	sub	sp, #8
 80e0384:	af00      	add	r7, sp, #0
 80e0386:	6078      	str	r0, [r7, #4]
//	if(!fdcan_test) {
//		return FDCAN_EMPTY;
//	}


	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header_buffer, packet->data);
 80e0388:	687b      	ldr	r3, [r7, #4]
 80e038a:	685b      	ldr	r3, [r3, #4]
 80e038c:	4a07      	ldr	r2, [pc, #28]	; (80e03ac <fdcan_read+0x2c>)
 80e038e:	2140      	movs	r1, #64	; 0x40
 80e0390:	4807      	ldr	r0, [pc, #28]	; (80e03b0 <fdcan_read+0x30>)
 80e0392:	f000 fee5 	bl	80e1160 <HAL_FDCAN_GetRxMessage>

	packet->identifier = rx_header_buffer.Identifier;
 80e0396:	4b05      	ldr	r3, [pc, #20]	; (80e03ac <fdcan_read+0x2c>)
 80e0398:	681b      	ldr	r3, [r3, #0]
 80e039a:	b29a      	uxth	r2, r3
 80e039c:	687b      	ldr	r3, [r7, #4]
 80e039e:	801a      	strh	r2, [r3, #0]
	return FDCAN_OK;
 80e03a0:	2300      	movs	r3, #0
}
 80e03a2:	4618      	mov	r0, r3
 80e03a4:	3708      	adds	r7, #8
 80e03a6:	46bd      	mov	sp, r7
 80e03a8:	bd80      	pop	{r7, pc}
 80e03aa:	bf00      	nop
 80e03ac:	24000050 	.word	0x24000050
 80e03b0:	24000078 	.word	0x24000078

080e03b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80e03b4:	b580      	push	{r7, lr}
 80e03b6:	b084      	sub	sp, #16
 80e03b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80e03ba:	f000 faf7 	bl	80e09ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80e03be:	f000 f833 	bl	80e0428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80e03c2:	f000 f90f 	bl	80e05e4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80e03c6:	f000 f8a7 	bl	80e0518 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  //bootloader_init();


  int i;
  uint8_t d = 0xA;
 80e03ca:	230a      	movs	r3, #10
 80e03cc:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < 64; ++i) {
 80e03ce:	2300      	movs	r3, #0
 80e03d0:	60fb      	str	r3, [r7, #12]
 80e03d2:	e009      	b.n	80e03e8 <main+0x34>
	data[i] = d++;
 80e03d4:	7afb      	ldrb	r3, [r7, #11]
 80e03d6:	1c5a      	adds	r2, r3, #1
 80e03d8:	72fa      	strb	r2, [r7, #11]
 80e03da:	4910      	ldr	r1, [pc, #64]	; (80e041c <main+0x68>)
 80e03dc:	68fa      	ldr	r2, [r7, #12]
 80e03de:	440a      	add	r2, r1
 80e03e0:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < 64; ++i) {
 80e03e2:	68fb      	ldr	r3, [r7, #12]
 80e03e4:	3301      	adds	r3, #1
 80e03e6:	60fb      	str	r3, [r7, #12]
 80e03e8:	68fb      	ldr	r3, [r7, #12]
 80e03ea:	2b3f      	cmp	r3, #63	; 0x3f
 80e03ec:	ddf2      	ble.n	80e03d4 <main+0x20>
  }

  fdcan_packet_t p = { 69, data};
 80e03ee:	4a0c      	ldr	r2, [pc, #48]	; (80e0420 <main+0x6c>)
 80e03f0:	463b      	mov	r3, r7
 80e03f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80e03f6:	e883 0003 	stmia.w	r3, {r0, r1}



  HAL_FDCAN_Start(&hfdcan1);
 80e03fa:	480a      	ldr	r0, [pc, #40]	; (80e0424 <main+0x70>)
 80e03fc:	f000 fe2a 	bl	80e1054 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80e0400:	2200      	movs	r2, #0
 80e0402:	2101      	movs	r1, #1
 80e0404:	4807      	ldr	r0, [pc, #28]	; (80e0424 <main+0x70>)
 80e0406:	f001 f819 	bl	80e143c <HAL_FDCAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fdcan_transmit(&p);
 80e040a:	463b      	mov	r3, r7
 80e040c:	4618      	mov	r0, r3
 80e040e:	f7ff ff7d 	bl	80e030c <fdcan_transmit>
//	    Error_Handler();
//	   }
	  //HAL_Delay(100);
	 // int a = fdcan_test();

	  fdcan_read(&p);
 80e0412:	463b      	mov	r3, r7
 80e0414:	4618      	mov	r0, r3
 80e0416:	f7ff ffb3 	bl	80e0380 <fdcan_read>
	  fdcan_transmit(&p);
 80e041a:	e7f6      	b.n	80e040a <main+0x56>
 80e041c:	24000118 	.word	0x24000118
 80e0420:	080e3c34 	.word	0x080e3c34
 80e0424:	24000078 	.word	0x24000078

080e0428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80e0428:	b580      	push	{r7, lr}
 80e042a:	b09c      	sub	sp, #112	; 0x70
 80e042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80e042e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80e0432:	224c      	movs	r2, #76	; 0x4c
 80e0434:	2100      	movs	r1, #0
 80e0436:	4618      	mov	r0, r3
 80e0438:	f003 fbe8 	bl	80e3c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80e043c:	1d3b      	adds	r3, r7, #4
 80e043e:	2220      	movs	r2, #32
 80e0440:	2100      	movs	r1, #0
 80e0442:	4618      	mov	r0, r3
 80e0444:	f003 fbe2 	bl	80e3c0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80e0448:	2002      	movs	r0, #2
 80e044a:	f001 fc37 	bl	80e1cbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80e044e:	2300      	movs	r3, #0
 80e0450:	603b      	str	r3, [r7, #0]
 80e0452:	4b2f      	ldr	r3, [pc, #188]	; (80e0510 <SystemClock_Config+0xe8>)
 80e0454:	699b      	ldr	r3, [r3, #24]
 80e0456:	4a2e      	ldr	r2, [pc, #184]	; (80e0510 <SystemClock_Config+0xe8>)
 80e0458:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80e045c:	6193      	str	r3, [r2, #24]
 80e045e:	4b2c      	ldr	r3, [pc, #176]	; (80e0510 <SystemClock_Config+0xe8>)
 80e0460:	699b      	ldr	r3, [r3, #24]
 80e0462:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80e0466:	603b      	str	r3, [r7, #0]
 80e0468:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80e046a:	bf00      	nop
 80e046c:	4b28      	ldr	r3, [pc, #160]	; (80e0510 <SystemClock_Config+0xe8>)
 80e046e:	699b      	ldr	r3, [r3, #24]
 80e0470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e0474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e0478:	d1f8      	bne.n	80e046c <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80e047a:	4b26      	ldr	r3, [pc, #152]	; (80e0514 <SystemClock_Config+0xec>)
 80e047c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e047e:	f023 0303 	bic.w	r3, r3, #3
 80e0482:	4a24      	ldr	r2, [pc, #144]	; (80e0514 <SystemClock_Config+0xec>)
 80e0484:	f043 0302 	orr.w	r3, r3, #2
 80e0488:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80e048a:	2301      	movs	r3, #1
 80e048c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80e048e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80e0492:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80e0494:	2302      	movs	r3, #2
 80e0496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80e0498:	2302      	movs	r3, #2
 80e049a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80e049c:	2302      	movs	r3, #2
 80e049e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80e04a0:	232c      	movs	r3, #44	; 0x2c
 80e04a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80e04a4:	2301      	movs	r3, #1
 80e04a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80e04a8:	2304      	movs	r3, #4
 80e04aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80e04ac:	2302      	movs	r3, #2
 80e04ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80e04b0:	230c      	movs	r3, #12
 80e04b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80e04b4:	2300      	movs	r3, #0
 80e04b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80e04b8:	2300      	movs	r3, #0
 80e04ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80e04bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80e04c0:	4618      	mov	r0, r3
 80e04c2:	f001 fc35 	bl	80e1d30 <HAL_RCC_OscConfig>
 80e04c6:	4603      	mov	r3, r0
 80e04c8:	2b00      	cmp	r3, #0
 80e04ca:	d001      	beq.n	80e04d0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80e04cc:	f000 f90c 	bl	80e06e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80e04d0:	233f      	movs	r3, #63	; 0x3f
 80e04d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80e04d4:	2303      	movs	r3, #3
 80e04d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80e04d8:	2300      	movs	r3, #0
 80e04da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80e04dc:	2308      	movs	r3, #8
 80e04de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80e04e0:	2340      	movs	r3, #64	; 0x40
 80e04e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80e04e4:	2340      	movs	r3, #64	; 0x40
 80e04e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80e04e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80e04ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80e04ee:	2340      	movs	r3, #64	; 0x40
 80e04f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80e04f2:	1d3b      	adds	r3, r7, #4
 80e04f4:	2103      	movs	r1, #3
 80e04f6:	4618      	mov	r0, r3
 80e04f8:	f001 ffc8 	bl	80e248c <HAL_RCC_ClockConfig>
 80e04fc:	4603      	mov	r3, r0
 80e04fe:	2b00      	cmp	r3, #0
 80e0500:	d001      	beq.n	80e0506 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80e0502:	f000 f8f1 	bl	80e06e8 <Error_Handler>
  }
}
 80e0506:	bf00      	nop
 80e0508:	3770      	adds	r7, #112	; 0x70
 80e050a:	46bd      	mov	sp, r7
 80e050c:	bd80      	pop	{r7, pc}
 80e050e:	bf00      	nop
 80e0510:	58024800 	.word	0x58024800
 80e0514:	58024400 	.word	0x58024400

080e0518 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80e0518:	b580      	push	{r7, lr}
 80e051a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80e051c:	4b2f      	ldr	r3, [pc, #188]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e051e:	4a30      	ldr	r2, [pc, #192]	; (80e05e0 <MX_FDCAN1_Init+0xc8>)
 80e0520:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80e0522:	4b2e      	ldr	r3, [pc, #184]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0524:	f44f 7240 	mov.w	r2, #768	; 0x300
 80e0528:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80e052a:	4b2c      	ldr	r3, [pc, #176]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e052c:	2200      	movs	r2, #0
 80e052e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80e0530:	4b2a      	ldr	r3, [pc, #168]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0532:	2201      	movs	r2, #1
 80e0534:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80e0536:	4b29      	ldr	r3, [pc, #164]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0538:	2200      	movs	r2, #0
 80e053a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80e053c:	4b27      	ldr	r3, [pc, #156]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e053e:	2200      	movs	r2, #0
 80e0540:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80e0542:	4b26      	ldr	r3, [pc, #152]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0544:	2201      	movs	r2, #1
 80e0546:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80e0548:	4b24      	ldr	r3, [pc, #144]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e054a:	2210      	movs	r2, #16
 80e054c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 59;
 80e054e:	4b23      	ldr	r3, [pc, #140]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0550:	223b      	movs	r2, #59	; 0x3b
 80e0552:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 80e0554:	4b21      	ldr	r3, [pc, #132]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0556:	2214      	movs	r2, #20
 80e0558:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80e055a:	4b20      	ldr	r3, [pc, #128]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e055c:	2201      	movs	r2, #1
 80e055e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80e0560:	4b1e      	ldr	r3, [pc, #120]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0562:	2204      	movs	r2, #4
 80e0564:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80e0566:	4b1d      	ldr	r3, [pc, #116]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0568:	220e      	movs	r2, #14
 80e056a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80e056c:	4b1b      	ldr	r3, [pc, #108]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e056e:	2205      	movs	r2, #5
 80e0570:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80e0572:	4b1a      	ldr	r3, [pc, #104]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0574:	2200      	movs	r2, #0
 80e0576:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80e0578:	4b18      	ldr	r3, [pc, #96]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e057a:	2201      	movs	r2, #1
 80e057c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80e057e:	4b17      	ldr	r3, [pc, #92]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0580:	2200      	movs	r2, #0
 80e0582:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 16;
 80e0584:	4b15      	ldr	r3, [pc, #84]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0586:	2210      	movs	r2, #16
 80e0588:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80e058a:	4b14      	ldr	r3, [pc, #80]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e058c:	2212      	movs	r2, #18
 80e058e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80e0590:	4b12      	ldr	r3, [pc, #72]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0592:	2200      	movs	r2, #0
 80e0594:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 80e0596:	4b11      	ldr	r3, [pc, #68]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e0598:	2212      	movs	r2, #18
 80e059a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80e059c:	4b0f      	ldr	r3, [pc, #60]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e059e:	2200      	movs	r2, #0
 80e05a0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 80e05a2:	4b0e      	ldr	r3, [pc, #56]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e05a4:	2212      	movs	r2, #18
 80e05a6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80e05a8:	4b0c      	ldr	r3, [pc, #48]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e05aa:	2200      	movs	r2, #0
 80e05ac:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80e05ae:	4b0b      	ldr	r3, [pc, #44]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e05b0:	2200      	movs	r2, #0
 80e05b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 80e05b4:	4b09      	ldr	r3, [pc, #36]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e05b6:	2210      	movs	r2, #16
 80e05b8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80e05ba:	4b08      	ldr	r3, [pc, #32]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e05bc:	2200      	movs	r2, #0
 80e05be:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80e05c0:	4b06      	ldr	r3, [pc, #24]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e05c2:	2212      	movs	r2, #18
 80e05c4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80e05c6:	4805      	ldr	r0, [pc, #20]	; (80e05dc <MX_FDCAN1_Init+0xc4>)
 80e05c8:	f000 fb66 	bl	80e0c98 <HAL_FDCAN_Init>
 80e05cc:	4603      	mov	r3, r0
 80e05ce:	2b00      	cmp	r3, #0
 80e05d0:	d001      	beq.n	80e05d6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80e05d2:	f000 f889 	bl	80e06e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80e05d6:	bf00      	nop
 80e05d8:	bd80      	pop	{r7, pc}
 80e05da:	bf00      	nop
 80e05dc:	24000078 	.word	0x24000078
 80e05e0:	4000a000 	.word	0x4000a000

080e05e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80e05e4:	b580      	push	{r7, lr}
 80e05e6:	b08c      	sub	sp, #48	; 0x30
 80e05e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e05ea:	f107 031c 	add.w	r3, r7, #28
 80e05ee:	2200      	movs	r2, #0
 80e05f0:	601a      	str	r2, [r3, #0]
 80e05f2:	605a      	str	r2, [r3, #4]
 80e05f4:	609a      	str	r2, [r3, #8]
 80e05f6:	60da      	str	r2, [r3, #12]
 80e05f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80e05fa:	4b39      	ldr	r3, [pc, #228]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e05fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0600:	4a37      	ldr	r2, [pc, #220]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e0602:	f043 0304 	orr.w	r3, r3, #4
 80e0606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e060a:	4b35      	ldr	r3, [pc, #212]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0610:	f003 0304 	and.w	r3, r3, #4
 80e0614:	61bb      	str	r3, [r7, #24]
 80e0616:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80e0618:	4b31      	ldr	r3, [pc, #196]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e061e:	4a30      	ldr	r2, [pc, #192]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e0620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80e0624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0628:	4b2d      	ldr	r3, [pc, #180]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80e0632:	617b      	str	r3, [r7, #20]
 80e0634:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80e0636:	4b2a      	ldr	r3, [pc, #168]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e0638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e063c:	4a28      	ldr	r2, [pc, #160]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e063e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80e0642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0646:	4b26      	ldr	r3, [pc, #152]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e0648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e064c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80e0650:	613b      	str	r3, [r7, #16]
 80e0652:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80e0654:	4b22      	ldr	r3, [pc, #136]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e0656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e065a:	4a21      	ldr	r2, [pc, #132]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e065c:	f043 0301 	orr.w	r3, r3, #1
 80e0660:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0664:	4b1e      	ldr	r3, [pc, #120]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e0666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e066a:	f003 0301 	and.w	r3, r3, #1
 80e066e:	60fb      	str	r3, [r7, #12]
 80e0670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80e0672:	4b1b      	ldr	r3, [pc, #108]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e0674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0678:	4a19      	ldr	r2, [pc, #100]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e067a:	f043 0308 	orr.w	r3, r3, #8
 80e067e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e0682:	4b17      	ldr	r3, [pc, #92]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e0684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0688:	f003 0308 	and.w	r3, r3, #8
 80e068c:	60bb      	str	r3, [r7, #8]
 80e068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80e0690:	4b13      	ldr	r3, [pc, #76]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e0692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e0696:	4a12      	ldr	r2, [pc, #72]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e0698:	f043 0302 	orr.w	r3, r3, #2
 80e069c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e06a0:	4b0f      	ldr	r3, [pc, #60]	; (80e06e0 <MX_GPIO_Init+0xfc>)
 80e06a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e06a6:	f003 0302 	and.w	r3, r3, #2
 80e06aa:	607b      	str	r3, [r7, #4]
 80e06ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_SLEEP_Pin|LED_FLASH_Pin|LED_CAN_Pin|LED_FAULT_Pin
 80e06ae:	2200      	movs	r2, #0
 80e06b0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80e06b4:	480b      	ldr	r0, [pc, #44]	; (80e06e4 <MX_GPIO_Init+0x100>)
 80e06b6:	f001 fae7 	bl	80e1c88 <HAL_GPIO_WritePin>
                          |LED_OPERATIONAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_SLEEP_Pin LED_FLASH_Pin LED_CAN_Pin LED_FAULT_Pin
                           LED_OPERATIONAL_Pin */
  GPIO_InitStruct.Pin = LED_SLEEP_Pin|LED_FLASH_Pin|LED_CAN_Pin|LED_FAULT_Pin
 80e06ba:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80e06be:	61fb      	str	r3, [r7, #28]
                          |LED_OPERATIONAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80e06c0:	2301      	movs	r3, #1
 80e06c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e06c4:	2300      	movs	r3, #0
 80e06c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e06c8:	2300      	movs	r3, #0
 80e06ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80e06cc:	f107 031c 	add.w	r3, r7, #28
 80e06d0:	4619      	mov	r1, r3
 80e06d2:	4804      	ldr	r0, [pc, #16]	; (80e06e4 <MX_GPIO_Init+0x100>)
 80e06d4:	f001 f930 	bl	80e1938 <HAL_GPIO_Init>

}
 80e06d8:	bf00      	nop
 80e06da:	3730      	adds	r7, #48	; 0x30
 80e06dc:	46bd      	mov	sp, r7
 80e06de:	bd80      	pop	{r7, pc}
 80e06e0:	58024400 	.word	0x58024400
 80e06e4:	58021800 	.word	0x58021800

080e06e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80e06e8:	b480      	push	{r7}
 80e06ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80e06ec:	b672      	cpsid	i
}
 80e06ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80e06f0:	e7fe      	b.n	80e06f0 <Error_Handler+0x8>
	...

080e06f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80e06f4:	b480      	push	{r7}
 80e06f6:	b083      	sub	sp, #12
 80e06f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80e06fa:	4b0a      	ldr	r3, [pc, #40]	; (80e0724 <HAL_MspInit+0x30>)
 80e06fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e0700:	4a08      	ldr	r2, [pc, #32]	; (80e0724 <HAL_MspInit+0x30>)
 80e0702:	f043 0302 	orr.w	r3, r3, #2
 80e0706:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80e070a:	4b06      	ldr	r3, [pc, #24]	; (80e0724 <HAL_MspInit+0x30>)
 80e070c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e0710:	f003 0302 	and.w	r3, r3, #2
 80e0714:	607b      	str	r3, [r7, #4]
 80e0716:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80e0718:	bf00      	nop
 80e071a:	370c      	adds	r7, #12
 80e071c:	46bd      	mov	sp, r7
 80e071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0722:	4770      	bx	lr
 80e0724:	58024400 	.word	0x58024400

080e0728 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80e0728:	b580      	push	{r7, lr}
 80e072a:	b0b6      	sub	sp, #216	; 0xd8
 80e072c:	af00      	add	r7, sp, #0
 80e072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e0730:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80e0734:	2200      	movs	r2, #0
 80e0736:	601a      	str	r2, [r3, #0]
 80e0738:	605a      	str	r2, [r3, #4]
 80e073a:	609a      	str	r2, [r3, #8]
 80e073c:	60da      	str	r2, [r3, #12]
 80e073e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80e0740:	f107 0310 	add.w	r3, r7, #16
 80e0744:	22b4      	movs	r2, #180	; 0xb4
 80e0746:	2100      	movs	r1, #0
 80e0748:	4618      	mov	r0, r3
 80e074a:	f003 fa5f 	bl	80e3c0c <memset>
  if(hfdcan->Instance==FDCAN1)
 80e074e:	687b      	ldr	r3, [r7, #4]
 80e0750:	681b      	ldr	r3, [r3, #0]
 80e0752:	4a2d      	ldr	r2, [pc, #180]	; (80e0808 <HAL_FDCAN_MspInit+0xe0>)
 80e0754:	4293      	cmp	r3, r2
 80e0756:	d152      	bne.n	80e07fe <HAL_FDCAN_MspInit+0xd6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80e0758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80e075c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80e075e:	2319      	movs	r3, #25
 80e0760:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 80e0762:	23c8      	movs	r3, #200	; 0xc8
 80e0764:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80e0766:	2302      	movs	r3, #2
 80e0768:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80e076a:	230a      	movs	r3, #10
 80e076c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80e076e:	2302      	movs	r3, #2
 80e0770:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80e0772:	2300      	movs	r3, #0
 80e0774:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80e0776:	2320      	movs	r3, #32
 80e0778:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80e077a:	2300      	movs	r3, #0
 80e077c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80e077e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80e0782:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80e0784:	f107 0310 	add.w	r3, r7, #16
 80e0788:	4618      	mov	r0, r3
 80e078a:	f002 f9af 	bl	80e2aec <HAL_RCCEx_PeriphCLKConfig>
 80e078e:	4603      	mov	r3, r0
 80e0790:	2b00      	cmp	r3, #0
 80e0792:	d001      	beq.n	80e0798 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 80e0794:	f7ff ffa8 	bl	80e06e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80e0798:	4b1c      	ldr	r3, [pc, #112]	; (80e080c <HAL_FDCAN_MspInit+0xe4>)
 80e079a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80e079e:	4a1b      	ldr	r2, [pc, #108]	; (80e080c <HAL_FDCAN_MspInit+0xe4>)
 80e07a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e07a4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80e07a8:	4b18      	ldr	r3, [pc, #96]	; (80e080c <HAL_FDCAN_MspInit+0xe4>)
 80e07aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80e07ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e07b2:	60fb      	str	r3, [r7, #12]
 80e07b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80e07b6:	4b15      	ldr	r3, [pc, #84]	; (80e080c <HAL_FDCAN_MspInit+0xe4>)
 80e07b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e07bc:	4a13      	ldr	r2, [pc, #76]	; (80e080c <HAL_FDCAN_MspInit+0xe4>)
 80e07be:	f043 0308 	orr.w	r3, r3, #8
 80e07c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80e07c6:	4b11      	ldr	r3, [pc, #68]	; (80e080c <HAL_FDCAN_MspInit+0xe4>)
 80e07c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80e07cc:	f003 0308 	and.w	r3, r3, #8
 80e07d0:	60bb      	str	r3, [r7, #8]
 80e07d2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80e07d4:	2303      	movs	r3, #3
 80e07d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80e07da:	2302      	movs	r3, #2
 80e07dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e07e0:	2300      	movs	r3, #0
 80e07e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e07e6:	2300      	movs	r3, #0
 80e07e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80e07ec:	2309      	movs	r3, #9
 80e07ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80e07f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80e07f6:	4619      	mov	r1, r3
 80e07f8:	4805      	ldr	r0, [pc, #20]	; (80e0810 <HAL_FDCAN_MspInit+0xe8>)
 80e07fa:	f001 f89d 	bl	80e1938 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80e07fe:	bf00      	nop
 80e0800:	37d8      	adds	r7, #216	; 0xd8
 80e0802:	46bd      	mov	sp, r7
 80e0804:	bd80      	pop	{r7, pc}
 80e0806:	bf00      	nop
 80e0808:	4000a000 	.word	0x4000a000
 80e080c:	58024400 	.word	0x58024400
 80e0810:	58020c00 	.word	0x58020c00

080e0814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80e0814:	b480      	push	{r7}
 80e0816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80e0818:	e7fe      	b.n	80e0818 <NMI_Handler+0x4>

080e081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80e081a:	b480      	push	{r7}
 80e081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80e081e:	e7fe      	b.n	80e081e <HardFault_Handler+0x4>

080e0820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80e0820:	b480      	push	{r7}
 80e0822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80e0824:	e7fe      	b.n	80e0824 <MemManage_Handler+0x4>

080e0826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80e0826:	b480      	push	{r7}
 80e0828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80e082a:	e7fe      	b.n	80e082a <BusFault_Handler+0x4>

080e082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80e082c:	b480      	push	{r7}
 80e082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80e0830:	e7fe      	b.n	80e0830 <UsageFault_Handler+0x4>

080e0832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80e0832:	b480      	push	{r7}
 80e0834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80e0836:	bf00      	nop
 80e0838:	46bd      	mov	sp, r7
 80e083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e083e:	4770      	bx	lr

080e0840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80e0840:	b480      	push	{r7}
 80e0842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80e0844:	bf00      	nop
 80e0846:	46bd      	mov	sp, r7
 80e0848:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e084c:	4770      	bx	lr

080e084e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80e084e:	b480      	push	{r7}
 80e0850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80e0852:	bf00      	nop
 80e0854:	46bd      	mov	sp, r7
 80e0856:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e085a:	4770      	bx	lr

080e085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80e085c:	b580      	push	{r7, lr}
 80e085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80e0860:	f000 f916 	bl	80e0a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80e0864:	bf00      	nop
 80e0866:	bd80      	pop	{r7, pc}

080e0868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80e0868:	b480      	push	{r7}
 80e086a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80e086c:	4b32      	ldr	r3, [pc, #200]	; (80e0938 <SystemInit+0xd0>)
 80e086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e0872:	4a31      	ldr	r2, [pc, #196]	; (80e0938 <SystemInit+0xd0>)
 80e0874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80e0878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80e087c:	4b2f      	ldr	r3, [pc, #188]	; (80e093c <SystemInit+0xd4>)
 80e087e:	681b      	ldr	r3, [r3, #0]
 80e0880:	f003 030f 	and.w	r3, r3, #15
 80e0884:	2b06      	cmp	r3, #6
 80e0886:	d807      	bhi.n	80e0898 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80e0888:	4b2c      	ldr	r3, [pc, #176]	; (80e093c <SystemInit+0xd4>)
 80e088a:	681b      	ldr	r3, [r3, #0]
 80e088c:	f023 030f 	bic.w	r3, r3, #15
 80e0890:	4a2a      	ldr	r2, [pc, #168]	; (80e093c <SystemInit+0xd4>)
 80e0892:	f043 0307 	orr.w	r3, r3, #7
 80e0896:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80e0898:	4b29      	ldr	r3, [pc, #164]	; (80e0940 <SystemInit+0xd8>)
 80e089a:	681b      	ldr	r3, [r3, #0]
 80e089c:	4a28      	ldr	r2, [pc, #160]	; (80e0940 <SystemInit+0xd8>)
 80e089e:	f043 0301 	orr.w	r3, r3, #1
 80e08a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80e08a4:	4b26      	ldr	r3, [pc, #152]	; (80e0940 <SystemInit+0xd8>)
 80e08a6:	2200      	movs	r2, #0
 80e08a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80e08aa:	4b25      	ldr	r3, [pc, #148]	; (80e0940 <SystemInit+0xd8>)
 80e08ac:	681a      	ldr	r2, [r3, #0]
 80e08ae:	4924      	ldr	r1, [pc, #144]	; (80e0940 <SystemInit+0xd8>)
 80e08b0:	4b24      	ldr	r3, [pc, #144]	; (80e0944 <SystemInit+0xdc>)
 80e08b2:	4013      	ands	r3, r2
 80e08b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80e08b6:	4b21      	ldr	r3, [pc, #132]	; (80e093c <SystemInit+0xd4>)
 80e08b8:	681b      	ldr	r3, [r3, #0]
 80e08ba:	f003 0308 	and.w	r3, r3, #8
 80e08be:	2b00      	cmp	r3, #0
 80e08c0:	d007      	beq.n	80e08d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80e08c2:	4b1e      	ldr	r3, [pc, #120]	; (80e093c <SystemInit+0xd4>)
 80e08c4:	681b      	ldr	r3, [r3, #0]
 80e08c6:	f023 030f 	bic.w	r3, r3, #15
 80e08ca:	4a1c      	ldr	r2, [pc, #112]	; (80e093c <SystemInit+0xd4>)
 80e08cc:	f043 0307 	orr.w	r3, r3, #7
 80e08d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80e08d2:	4b1b      	ldr	r3, [pc, #108]	; (80e0940 <SystemInit+0xd8>)
 80e08d4:	2200      	movs	r2, #0
 80e08d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80e08d8:	4b19      	ldr	r3, [pc, #100]	; (80e0940 <SystemInit+0xd8>)
 80e08da:	2200      	movs	r2, #0
 80e08dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80e08de:	4b18      	ldr	r3, [pc, #96]	; (80e0940 <SystemInit+0xd8>)
 80e08e0:	2200      	movs	r2, #0
 80e08e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80e08e4:	4b16      	ldr	r3, [pc, #88]	; (80e0940 <SystemInit+0xd8>)
 80e08e6:	4a18      	ldr	r2, [pc, #96]	; (80e0948 <SystemInit+0xe0>)
 80e08e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80e08ea:	4b15      	ldr	r3, [pc, #84]	; (80e0940 <SystemInit+0xd8>)
 80e08ec:	4a17      	ldr	r2, [pc, #92]	; (80e094c <SystemInit+0xe4>)
 80e08ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80e08f0:	4b13      	ldr	r3, [pc, #76]	; (80e0940 <SystemInit+0xd8>)
 80e08f2:	4a17      	ldr	r2, [pc, #92]	; (80e0950 <SystemInit+0xe8>)
 80e08f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80e08f6:	4b12      	ldr	r3, [pc, #72]	; (80e0940 <SystemInit+0xd8>)
 80e08f8:	2200      	movs	r2, #0
 80e08fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80e08fc:	4b10      	ldr	r3, [pc, #64]	; (80e0940 <SystemInit+0xd8>)
 80e08fe:	4a14      	ldr	r2, [pc, #80]	; (80e0950 <SystemInit+0xe8>)
 80e0900:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80e0902:	4b0f      	ldr	r3, [pc, #60]	; (80e0940 <SystemInit+0xd8>)
 80e0904:	2200      	movs	r2, #0
 80e0906:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80e0908:	4b0d      	ldr	r3, [pc, #52]	; (80e0940 <SystemInit+0xd8>)
 80e090a:	4a11      	ldr	r2, [pc, #68]	; (80e0950 <SystemInit+0xe8>)
 80e090c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80e090e:	4b0c      	ldr	r3, [pc, #48]	; (80e0940 <SystemInit+0xd8>)
 80e0910:	2200      	movs	r2, #0
 80e0912:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80e0914:	4b0a      	ldr	r3, [pc, #40]	; (80e0940 <SystemInit+0xd8>)
 80e0916:	681b      	ldr	r3, [r3, #0]
 80e0918:	4a09      	ldr	r2, [pc, #36]	; (80e0940 <SystemInit+0xd8>)
 80e091a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e091e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80e0920:	4b07      	ldr	r3, [pc, #28]	; (80e0940 <SystemInit+0xd8>)
 80e0922:	2200      	movs	r2, #0
 80e0924:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80e0926:	4b0b      	ldr	r3, [pc, #44]	; (80e0954 <SystemInit+0xec>)
 80e0928:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80e092c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80e092e:	bf00      	nop
 80e0930:	46bd      	mov	sp, r7
 80e0932:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0936:	4770      	bx	lr
 80e0938:	e000ed00 	.word	0xe000ed00
 80e093c:	52002000 	.word	0x52002000
 80e0940:	58024400 	.word	0x58024400
 80e0944:	eaf6ed7f 	.word	0xeaf6ed7f
 80e0948:	02020200 	.word	0x02020200
 80e094c:	01ff0000 	.word	0x01ff0000
 80e0950:	01010280 	.word	0x01010280
 80e0954:	52004000 	.word	0x52004000

080e0958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80e0958:	f8df d034 	ldr.w	sp, [pc, #52]	; 80e0990 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80e095c:	f7ff ff84 	bl	80e0868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80e0960:	480c      	ldr	r0, [pc, #48]	; (80e0994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80e0962:	490d      	ldr	r1, [pc, #52]	; (80e0998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80e0964:	4a0d      	ldr	r2, [pc, #52]	; (80e099c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80e0966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80e0968:	e002      	b.n	80e0970 <LoopCopyDataInit>

080e096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80e096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80e096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80e096e:	3304      	adds	r3, #4

080e0970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80e0970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80e0972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80e0974:	d3f9      	bcc.n	80e096a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80e0976:	4a0a      	ldr	r2, [pc, #40]	; (80e09a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80e0978:	4c0a      	ldr	r4, [pc, #40]	; (80e09a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80e097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 80e097c:	e001      	b.n	80e0982 <LoopFillZerobss>

080e097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80e097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80e0980:	3204      	adds	r2, #4

080e0982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80e0982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80e0984:	d3fb      	bcc.n	80e097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80e0986:	f003 f90f 	bl	80e3ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80e098a:	f7ff fd13 	bl	80e03b4 <main>
  bx  lr
 80e098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80e0990:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80e0994:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80e0998:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80e099c:	080e3cb0 	.word	0x080e3cb0
  ldr r2, =_sbss
 80e09a0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80e09a4:	2400015c 	.word	0x2400015c

080e09a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80e09a8:	e7fe      	b.n	80e09a8 <ADC3_IRQHandler>
	...

080e09ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80e09ac:	b580      	push	{r7, lr}
 80e09ae:	b082      	sub	sp, #8
 80e09b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80e09b2:	2003      	movs	r0, #3
 80e09b4:	f000 f93e 	bl	80e0c34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80e09b8:	f001 ff1e 	bl	80e27f8 <HAL_RCC_GetSysClockFreq>
 80e09bc:	4602      	mov	r2, r0
 80e09be:	4b15      	ldr	r3, [pc, #84]	; (80e0a14 <HAL_Init+0x68>)
 80e09c0:	699b      	ldr	r3, [r3, #24]
 80e09c2:	0a1b      	lsrs	r3, r3, #8
 80e09c4:	f003 030f 	and.w	r3, r3, #15
 80e09c8:	4913      	ldr	r1, [pc, #76]	; (80e0a18 <HAL_Init+0x6c>)
 80e09ca:	5ccb      	ldrb	r3, [r1, r3]
 80e09cc:	f003 031f 	and.w	r3, r3, #31
 80e09d0:	fa22 f303 	lsr.w	r3, r2, r3
 80e09d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80e09d6:	4b0f      	ldr	r3, [pc, #60]	; (80e0a14 <HAL_Init+0x68>)
 80e09d8:	699b      	ldr	r3, [r3, #24]
 80e09da:	f003 030f 	and.w	r3, r3, #15
 80e09de:	4a0e      	ldr	r2, [pc, #56]	; (80e0a18 <HAL_Init+0x6c>)
 80e09e0:	5cd3      	ldrb	r3, [r2, r3]
 80e09e2:	f003 031f 	and.w	r3, r3, #31
 80e09e6:	687a      	ldr	r2, [r7, #4]
 80e09e8:	fa22 f303 	lsr.w	r3, r2, r3
 80e09ec:	4a0b      	ldr	r2, [pc, #44]	; (80e0a1c <HAL_Init+0x70>)
 80e09ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80e09f0:	4a0b      	ldr	r2, [pc, #44]	; (80e0a20 <HAL_Init+0x74>)
 80e09f2:	687b      	ldr	r3, [r7, #4]
 80e09f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80e09f6:	2000      	movs	r0, #0
 80e09f8:	f000 f814 	bl	80e0a24 <HAL_InitTick>
 80e09fc:	4603      	mov	r3, r0
 80e09fe:	2b00      	cmp	r3, #0
 80e0a00:	d001      	beq.n	80e0a06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80e0a02:	2301      	movs	r3, #1
 80e0a04:	e002      	b.n	80e0a0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80e0a06:	f7ff fe75 	bl	80e06f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80e0a0a:	2300      	movs	r3, #0
}
 80e0a0c:	4618      	mov	r0, r3
 80e0a0e:	3708      	adds	r7, #8
 80e0a10:	46bd      	mov	sp, r7
 80e0a12:	bd80      	pop	{r7, pc}
 80e0a14:	58024400 	.word	0x58024400
 80e0a18:	080e3c88 	.word	0x080e3c88
 80e0a1c:	24000004 	.word	0x24000004
 80e0a20:	24000000 	.word	0x24000000

080e0a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80e0a24:	b580      	push	{r7, lr}
 80e0a26:	b082      	sub	sp, #8
 80e0a28:	af00      	add	r7, sp, #0
 80e0a2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80e0a2c:	4b15      	ldr	r3, [pc, #84]	; (80e0a84 <HAL_InitTick+0x60>)
 80e0a2e:	781b      	ldrb	r3, [r3, #0]
 80e0a30:	2b00      	cmp	r3, #0
 80e0a32:	d101      	bne.n	80e0a38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80e0a34:	2301      	movs	r3, #1
 80e0a36:	e021      	b.n	80e0a7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80e0a38:	4b13      	ldr	r3, [pc, #76]	; (80e0a88 <HAL_InitTick+0x64>)
 80e0a3a:	681a      	ldr	r2, [r3, #0]
 80e0a3c:	4b11      	ldr	r3, [pc, #68]	; (80e0a84 <HAL_InitTick+0x60>)
 80e0a3e:	781b      	ldrb	r3, [r3, #0]
 80e0a40:	4619      	mov	r1, r3
 80e0a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80e0a46:	fbb3 f3f1 	udiv	r3, r3, r1
 80e0a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 80e0a4e:	4618      	mov	r0, r3
 80e0a50:	f000 f915 	bl	80e0c7e <HAL_SYSTICK_Config>
 80e0a54:	4603      	mov	r3, r0
 80e0a56:	2b00      	cmp	r3, #0
 80e0a58:	d001      	beq.n	80e0a5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80e0a5a:	2301      	movs	r3, #1
 80e0a5c:	e00e      	b.n	80e0a7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80e0a5e:	687b      	ldr	r3, [r7, #4]
 80e0a60:	2b0f      	cmp	r3, #15
 80e0a62:	d80a      	bhi.n	80e0a7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80e0a64:	2200      	movs	r2, #0
 80e0a66:	6879      	ldr	r1, [r7, #4]
 80e0a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80e0a6c:	f000 f8ed 	bl	80e0c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80e0a70:	4a06      	ldr	r2, [pc, #24]	; (80e0a8c <HAL_InitTick+0x68>)
 80e0a72:	687b      	ldr	r3, [r7, #4]
 80e0a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80e0a76:	2300      	movs	r3, #0
 80e0a78:	e000      	b.n	80e0a7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 80e0a7a:	2301      	movs	r3, #1
}
 80e0a7c:	4618      	mov	r0, r3
 80e0a7e:	3708      	adds	r7, #8
 80e0a80:	46bd      	mov	sp, r7
 80e0a82:	bd80      	pop	{r7, pc}
 80e0a84:	2400000c 	.word	0x2400000c
 80e0a88:	24000000 	.word	0x24000000
 80e0a8c:	24000008 	.word	0x24000008

080e0a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80e0a90:	b480      	push	{r7}
 80e0a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80e0a94:	4b06      	ldr	r3, [pc, #24]	; (80e0ab0 <HAL_IncTick+0x20>)
 80e0a96:	781b      	ldrb	r3, [r3, #0]
 80e0a98:	461a      	mov	r2, r3
 80e0a9a:	4b06      	ldr	r3, [pc, #24]	; (80e0ab4 <HAL_IncTick+0x24>)
 80e0a9c:	681b      	ldr	r3, [r3, #0]
 80e0a9e:	4413      	add	r3, r2
 80e0aa0:	4a04      	ldr	r2, [pc, #16]	; (80e0ab4 <HAL_IncTick+0x24>)
 80e0aa2:	6013      	str	r3, [r2, #0]
}
 80e0aa4:	bf00      	nop
 80e0aa6:	46bd      	mov	sp, r7
 80e0aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0aac:	4770      	bx	lr
 80e0aae:	bf00      	nop
 80e0ab0:	2400000c 	.word	0x2400000c
 80e0ab4:	24000158 	.word	0x24000158

080e0ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80e0ab8:	b480      	push	{r7}
 80e0aba:	af00      	add	r7, sp, #0
  return uwTick;
 80e0abc:	4b03      	ldr	r3, [pc, #12]	; (80e0acc <HAL_GetTick+0x14>)
 80e0abe:	681b      	ldr	r3, [r3, #0]
}
 80e0ac0:	4618      	mov	r0, r3
 80e0ac2:	46bd      	mov	sp, r7
 80e0ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0ac8:	4770      	bx	lr
 80e0aca:	bf00      	nop
 80e0acc:	24000158 	.word	0x24000158

080e0ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80e0ad0:	b480      	push	{r7}
 80e0ad2:	b085      	sub	sp, #20
 80e0ad4:	af00      	add	r7, sp, #0
 80e0ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80e0ad8:	687b      	ldr	r3, [r7, #4]
 80e0ada:	f003 0307 	and.w	r3, r3, #7
 80e0ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80e0ae0:	4b0b      	ldr	r3, [pc, #44]	; (80e0b10 <__NVIC_SetPriorityGrouping+0x40>)
 80e0ae2:	68db      	ldr	r3, [r3, #12]
 80e0ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80e0ae6:	68ba      	ldr	r2, [r7, #8]
 80e0ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80e0aec:	4013      	ands	r3, r2
 80e0aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80e0af0:	68fb      	ldr	r3, [r7, #12]
 80e0af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80e0af4:	68bb      	ldr	r3, [r7, #8]
 80e0af6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80e0af8:	4b06      	ldr	r3, [pc, #24]	; (80e0b14 <__NVIC_SetPriorityGrouping+0x44>)
 80e0afa:	4313      	orrs	r3, r2
 80e0afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80e0afe:	4a04      	ldr	r2, [pc, #16]	; (80e0b10 <__NVIC_SetPriorityGrouping+0x40>)
 80e0b00:	68bb      	ldr	r3, [r7, #8]
 80e0b02:	60d3      	str	r3, [r2, #12]
}
 80e0b04:	bf00      	nop
 80e0b06:	3714      	adds	r7, #20
 80e0b08:	46bd      	mov	sp, r7
 80e0b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0b0e:	4770      	bx	lr
 80e0b10:	e000ed00 	.word	0xe000ed00
 80e0b14:	05fa0000 	.word	0x05fa0000

080e0b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80e0b18:	b480      	push	{r7}
 80e0b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80e0b1c:	4b04      	ldr	r3, [pc, #16]	; (80e0b30 <__NVIC_GetPriorityGrouping+0x18>)
 80e0b1e:	68db      	ldr	r3, [r3, #12]
 80e0b20:	0a1b      	lsrs	r3, r3, #8
 80e0b22:	f003 0307 	and.w	r3, r3, #7
}
 80e0b26:	4618      	mov	r0, r3
 80e0b28:	46bd      	mov	sp, r7
 80e0b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0b2e:	4770      	bx	lr
 80e0b30:	e000ed00 	.word	0xe000ed00

080e0b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80e0b34:	b480      	push	{r7}
 80e0b36:	b083      	sub	sp, #12
 80e0b38:	af00      	add	r7, sp, #0
 80e0b3a:	4603      	mov	r3, r0
 80e0b3c:	6039      	str	r1, [r7, #0]
 80e0b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80e0b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e0b44:	2b00      	cmp	r3, #0
 80e0b46:	db0a      	blt.n	80e0b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80e0b48:	683b      	ldr	r3, [r7, #0]
 80e0b4a:	b2da      	uxtb	r2, r3
 80e0b4c:	490c      	ldr	r1, [pc, #48]	; (80e0b80 <__NVIC_SetPriority+0x4c>)
 80e0b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80e0b52:	0112      	lsls	r2, r2, #4
 80e0b54:	b2d2      	uxtb	r2, r2
 80e0b56:	440b      	add	r3, r1
 80e0b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80e0b5c:	e00a      	b.n	80e0b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80e0b5e:	683b      	ldr	r3, [r7, #0]
 80e0b60:	b2da      	uxtb	r2, r3
 80e0b62:	4908      	ldr	r1, [pc, #32]	; (80e0b84 <__NVIC_SetPriority+0x50>)
 80e0b64:	88fb      	ldrh	r3, [r7, #6]
 80e0b66:	f003 030f 	and.w	r3, r3, #15
 80e0b6a:	3b04      	subs	r3, #4
 80e0b6c:	0112      	lsls	r2, r2, #4
 80e0b6e:	b2d2      	uxtb	r2, r2
 80e0b70:	440b      	add	r3, r1
 80e0b72:	761a      	strb	r2, [r3, #24]
}
 80e0b74:	bf00      	nop
 80e0b76:	370c      	adds	r7, #12
 80e0b78:	46bd      	mov	sp, r7
 80e0b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0b7e:	4770      	bx	lr
 80e0b80:	e000e100 	.word	0xe000e100
 80e0b84:	e000ed00 	.word	0xe000ed00

080e0b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80e0b88:	b480      	push	{r7}
 80e0b8a:	b089      	sub	sp, #36	; 0x24
 80e0b8c:	af00      	add	r7, sp, #0
 80e0b8e:	60f8      	str	r0, [r7, #12]
 80e0b90:	60b9      	str	r1, [r7, #8]
 80e0b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80e0b94:	68fb      	ldr	r3, [r7, #12]
 80e0b96:	f003 0307 	and.w	r3, r3, #7
 80e0b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80e0b9c:	69fb      	ldr	r3, [r7, #28]
 80e0b9e:	f1c3 0307 	rsb	r3, r3, #7
 80e0ba2:	2b04      	cmp	r3, #4
 80e0ba4:	bf28      	it	cs
 80e0ba6:	2304      	movcs	r3, #4
 80e0ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80e0baa:	69fb      	ldr	r3, [r7, #28]
 80e0bac:	3304      	adds	r3, #4
 80e0bae:	2b06      	cmp	r3, #6
 80e0bb0:	d902      	bls.n	80e0bb8 <NVIC_EncodePriority+0x30>
 80e0bb2:	69fb      	ldr	r3, [r7, #28]
 80e0bb4:	3b03      	subs	r3, #3
 80e0bb6:	e000      	b.n	80e0bba <NVIC_EncodePriority+0x32>
 80e0bb8:	2300      	movs	r3, #0
 80e0bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80e0bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80e0bc0:	69bb      	ldr	r3, [r7, #24]
 80e0bc2:	fa02 f303 	lsl.w	r3, r2, r3
 80e0bc6:	43da      	mvns	r2, r3
 80e0bc8:	68bb      	ldr	r3, [r7, #8]
 80e0bca:	401a      	ands	r2, r3
 80e0bcc:	697b      	ldr	r3, [r7, #20]
 80e0bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80e0bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80e0bd4:	697b      	ldr	r3, [r7, #20]
 80e0bd6:	fa01 f303 	lsl.w	r3, r1, r3
 80e0bda:	43d9      	mvns	r1, r3
 80e0bdc:	687b      	ldr	r3, [r7, #4]
 80e0bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80e0be0:	4313      	orrs	r3, r2
         );
}
 80e0be2:	4618      	mov	r0, r3
 80e0be4:	3724      	adds	r7, #36	; 0x24
 80e0be6:	46bd      	mov	sp, r7
 80e0be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e0bec:	4770      	bx	lr
	...

080e0bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80e0bf0:	b580      	push	{r7, lr}
 80e0bf2:	b082      	sub	sp, #8
 80e0bf4:	af00      	add	r7, sp, #0
 80e0bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80e0bf8:	687b      	ldr	r3, [r7, #4]
 80e0bfa:	3b01      	subs	r3, #1
 80e0bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80e0c00:	d301      	bcc.n	80e0c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80e0c02:	2301      	movs	r3, #1
 80e0c04:	e00f      	b.n	80e0c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80e0c06:	4a0a      	ldr	r2, [pc, #40]	; (80e0c30 <SysTick_Config+0x40>)
 80e0c08:	687b      	ldr	r3, [r7, #4]
 80e0c0a:	3b01      	subs	r3, #1
 80e0c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80e0c0e:	210f      	movs	r1, #15
 80e0c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80e0c14:	f7ff ff8e 	bl	80e0b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80e0c18:	4b05      	ldr	r3, [pc, #20]	; (80e0c30 <SysTick_Config+0x40>)
 80e0c1a:	2200      	movs	r2, #0
 80e0c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80e0c1e:	4b04      	ldr	r3, [pc, #16]	; (80e0c30 <SysTick_Config+0x40>)
 80e0c20:	2207      	movs	r2, #7
 80e0c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80e0c24:	2300      	movs	r3, #0
}
 80e0c26:	4618      	mov	r0, r3
 80e0c28:	3708      	adds	r7, #8
 80e0c2a:	46bd      	mov	sp, r7
 80e0c2c:	bd80      	pop	{r7, pc}
 80e0c2e:	bf00      	nop
 80e0c30:	e000e010 	.word	0xe000e010

080e0c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80e0c34:	b580      	push	{r7, lr}
 80e0c36:	b082      	sub	sp, #8
 80e0c38:	af00      	add	r7, sp, #0
 80e0c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80e0c3c:	6878      	ldr	r0, [r7, #4]
 80e0c3e:	f7ff ff47 	bl	80e0ad0 <__NVIC_SetPriorityGrouping>
}
 80e0c42:	bf00      	nop
 80e0c44:	3708      	adds	r7, #8
 80e0c46:	46bd      	mov	sp, r7
 80e0c48:	bd80      	pop	{r7, pc}

080e0c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80e0c4a:	b580      	push	{r7, lr}
 80e0c4c:	b086      	sub	sp, #24
 80e0c4e:	af00      	add	r7, sp, #0
 80e0c50:	4603      	mov	r3, r0
 80e0c52:	60b9      	str	r1, [r7, #8]
 80e0c54:	607a      	str	r2, [r7, #4]
 80e0c56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80e0c58:	f7ff ff5e 	bl	80e0b18 <__NVIC_GetPriorityGrouping>
 80e0c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80e0c5e:	687a      	ldr	r2, [r7, #4]
 80e0c60:	68b9      	ldr	r1, [r7, #8]
 80e0c62:	6978      	ldr	r0, [r7, #20]
 80e0c64:	f7ff ff90 	bl	80e0b88 <NVIC_EncodePriority>
 80e0c68:	4602      	mov	r2, r0
 80e0c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80e0c6e:	4611      	mov	r1, r2
 80e0c70:	4618      	mov	r0, r3
 80e0c72:	f7ff ff5f 	bl	80e0b34 <__NVIC_SetPriority>
}
 80e0c76:	bf00      	nop
 80e0c78:	3718      	adds	r7, #24
 80e0c7a:	46bd      	mov	sp, r7
 80e0c7c:	bd80      	pop	{r7, pc}

080e0c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80e0c7e:	b580      	push	{r7, lr}
 80e0c80:	b082      	sub	sp, #8
 80e0c82:	af00      	add	r7, sp, #0
 80e0c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80e0c86:	6878      	ldr	r0, [r7, #4]
 80e0c88:	f7ff ffb2 	bl	80e0bf0 <SysTick_Config>
 80e0c8c:	4603      	mov	r3, r0
}
 80e0c8e:	4618      	mov	r0, r3
 80e0c90:	3708      	adds	r7, #8
 80e0c92:	46bd      	mov	sp, r7
 80e0c94:	bd80      	pop	{r7, pc}
	...

080e0c98 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80e0c98:	b580      	push	{r7, lr}
 80e0c9a:	b098      	sub	sp, #96	; 0x60
 80e0c9c:	af00      	add	r7, sp, #0
 80e0c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80e0ca0:	4a84      	ldr	r2, [pc, #528]	; (80e0eb4 <HAL_FDCAN_Init+0x21c>)
 80e0ca2:	f107 030c 	add.w	r3, r7, #12
 80e0ca6:	4611      	mov	r1, r2
 80e0ca8:	224c      	movs	r2, #76	; 0x4c
 80e0caa:	4618      	mov	r0, r3
 80e0cac:	f002 ffa0 	bl	80e3bf0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80e0cb0:	687b      	ldr	r3, [r7, #4]
 80e0cb2:	2b00      	cmp	r3, #0
 80e0cb4:	d101      	bne.n	80e0cba <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80e0cb6:	2301      	movs	r3, #1
 80e0cb8:	e1c6      	b.n	80e1048 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80e0cba:	687b      	ldr	r3, [r7, #4]
 80e0cbc:	681b      	ldr	r3, [r3, #0]
 80e0cbe:	4a7e      	ldr	r2, [pc, #504]	; (80e0eb8 <HAL_FDCAN_Init+0x220>)
 80e0cc0:	4293      	cmp	r3, r2
 80e0cc2:	d106      	bne.n	80e0cd2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80e0cc4:	687b      	ldr	r3, [r7, #4]
 80e0cc6:	681b      	ldr	r3, [r3, #0]
 80e0cc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80e0ccc:	461a      	mov	r2, r3
 80e0cce:	687b      	ldr	r3, [r7, #4]
 80e0cd0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80e0cd2:	687b      	ldr	r3, [r7, #4]
 80e0cd4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e0cd8:	b2db      	uxtb	r3, r3
 80e0cda:	2b00      	cmp	r3, #0
 80e0cdc:	d106      	bne.n	80e0cec <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80e0cde:	687b      	ldr	r3, [r7, #4]
 80e0ce0:	2200      	movs	r2, #0
 80e0ce2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80e0ce6:	6878      	ldr	r0, [r7, #4]
 80e0ce8:	f7ff fd1e 	bl	80e0728 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80e0cec:	687b      	ldr	r3, [r7, #4]
 80e0cee:	681b      	ldr	r3, [r3, #0]
 80e0cf0:	699a      	ldr	r2, [r3, #24]
 80e0cf2:	687b      	ldr	r3, [r7, #4]
 80e0cf4:	681b      	ldr	r3, [r3, #0]
 80e0cf6:	f022 0210 	bic.w	r2, r2, #16
 80e0cfa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80e0cfc:	f7ff fedc 	bl	80e0ab8 <HAL_GetTick>
 80e0d00:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80e0d02:	e014      	b.n	80e0d2e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80e0d04:	f7ff fed8 	bl	80e0ab8 <HAL_GetTick>
 80e0d08:	4602      	mov	r2, r0
 80e0d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80e0d0c:	1ad3      	subs	r3, r2, r3
 80e0d0e:	2b0a      	cmp	r3, #10
 80e0d10:	d90d      	bls.n	80e0d2e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80e0d12:	687b      	ldr	r3, [r7, #4]
 80e0d14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e0d18:	f043 0201 	orr.w	r2, r3, #1
 80e0d1c:	687b      	ldr	r3, [r7, #4]
 80e0d1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e0d22:	687b      	ldr	r3, [r7, #4]
 80e0d24:	2203      	movs	r2, #3
 80e0d26:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80e0d2a:	2301      	movs	r3, #1
 80e0d2c:	e18c      	b.n	80e1048 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80e0d2e:	687b      	ldr	r3, [r7, #4]
 80e0d30:	681b      	ldr	r3, [r3, #0]
 80e0d32:	699b      	ldr	r3, [r3, #24]
 80e0d34:	f003 0308 	and.w	r3, r3, #8
 80e0d38:	2b08      	cmp	r3, #8
 80e0d3a:	d0e3      	beq.n	80e0d04 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80e0d3c:	687b      	ldr	r3, [r7, #4]
 80e0d3e:	681b      	ldr	r3, [r3, #0]
 80e0d40:	699a      	ldr	r2, [r3, #24]
 80e0d42:	687b      	ldr	r3, [r7, #4]
 80e0d44:	681b      	ldr	r3, [r3, #0]
 80e0d46:	f042 0201 	orr.w	r2, r2, #1
 80e0d4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80e0d4c:	f7ff feb4 	bl	80e0ab8 <HAL_GetTick>
 80e0d50:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80e0d52:	e014      	b.n	80e0d7e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80e0d54:	f7ff feb0 	bl	80e0ab8 <HAL_GetTick>
 80e0d58:	4602      	mov	r2, r0
 80e0d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80e0d5c:	1ad3      	subs	r3, r2, r3
 80e0d5e:	2b0a      	cmp	r3, #10
 80e0d60:	d90d      	bls.n	80e0d7e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80e0d62:	687b      	ldr	r3, [r7, #4]
 80e0d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e0d68:	f043 0201 	orr.w	r2, r3, #1
 80e0d6c:	687b      	ldr	r3, [r7, #4]
 80e0d6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e0d72:	687b      	ldr	r3, [r7, #4]
 80e0d74:	2203      	movs	r2, #3
 80e0d76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80e0d7a:	2301      	movs	r3, #1
 80e0d7c:	e164      	b.n	80e1048 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80e0d7e:	687b      	ldr	r3, [r7, #4]
 80e0d80:	681b      	ldr	r3, [r3, #0]
 80e0d82:	699b      	ldr	r3, [r3, #24]
 80e0d84:	f003 0301 	and.w	r3, r3, #1
 80e0d88:	2b00      	cmp	r3, #0
 80e0d8a:	d0e3      	beq.n	80e0d54 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80e0d8c:	687b      	ldr	r3, [r7, #4]
 80e0d8e:	681b      	ldr	r3, [r3, #0]
 80e0d90:	699a      	ldr	r2, [r3, #24]
 80e0d92:	687b      	ldr	r3, [r7, #4]
 80e0d94:	681b      	ldr	r3, [r3, #0]
 80e0d96:	f042 0202 	orr.w	r2, r2, #2
 80e0d9a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80e0d9c:	687b      	ldr	r3, [r7, #4]
 80e0d9e:	7c1b      	ldrb	r3, [r3, #16]
 80e0da0:	2b01      	cmp	r3, #1
 80e0da2:	d108      	bne.n	80e0db6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80e0da4:	687b      	ldr	r3, [r7, #4]
 80e0da6:	681b      	ldr	r3, [r3, #0]
 80e0da8:	699a      	ldr	r2, [r3, #24]
 80e0daa:	687b      	ldr	r3, [r7, #4]
 80e0dac:	681b      	ldr	r3, [r3, #0]
 80e0dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80e0db2:	619a      	str	r2, [r3, #24]
 80e0db4:	e007      	b.n	80e0dc6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80e0db6:	687b      	ldr	r3, [r7, #4]
 80e0db8:	681b      	ldr	r3, [r3, #0]
 80e0dba:	699a      	ldr	r2, [r3, #24]
 80e0dbc:	687b      	ldr	r3, [r7, #4]
 80e0dbe:	681b      	ldr	r3, [r3, #0]
 80e0dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80e0dc4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80e0dc6:	687b      	ldr	r3, [r7, #4]
 80e0dc8:	7c5b      	ldrb	r3, [r3, #17]
 80e0dca:	2b01      	cmp	r3, #1
 80e0dcc:	d108      	bne.n	80e0de0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80e0dce:	687b      	ldr	r3, [r7, #4]
 80e0dd0:	681b      	ldr	r3, [r3, #0]
 80e0dd2:	699a      	ldr	r2, [r3, #24]
 80e0dd4:	687b      	ldr	r3, [r7, #4]
 80e0dd6:	681b      	ldr	r3, [r3, #0]
 80e0dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80e0ddc:	619a      	str	r2, [r3, #24]
 80e0dde:	e007      	b.n	80e0df0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80e0de0:	687b      	ldr	r3, [r7, #4]
 80e0de2:	681b      	ldr	r3, [r3, #0]
 80e0de4:	699a      	ldr	r2, [r3, #24]
 80e0de6:	687b      	ldr	r3, [r7, #4]
 80e0de8:	681b      	ldr	r3, [r3, #0]
 80e0dea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80e0dee:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80e0df0:	687b      	ldr	r3, [r7, #4]
 80e0df2:	7c9b      	ldrb	r3, [r3, #18]
 80e0df4:	2b01      	cmp	r3, #1
 80e0df6:	d108      	bne.n	80e0e0a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80e0df8:	687b      	ldr	r3, [r7, #4]
 80e0dfa:	681b      	ldr	r3, [r3, #0]
 80e0dfc:	699a      	ldr	r2, [r3, #24]
 80e0dfe:	687b      	ldr	r3, [r7, #4]
 80e0e00:	681b      	ldr	r3, [r3, #0]
 80e0e02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80e0e06:	619a      	str	r2, [r3, #24]
 80e0e08:	e007      	b.n	80e0e1a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80e0e0a:	687b      	ldr	r3, [r7, #4]
 80e0e0c:	681b      	ldr	r3, [r3, #0]
 80e0e0e:	699a      	ldr	r2, [r3, #24]
 80e0e10:	687b      	ldr	r3, [r7, #4]
 80e0e12:	681b      	ldr	r3, [r3, #0]
 80e0e14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80e0e18:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80e0e1a:	687b      	ldr	r3, [r7, #4]
 80e0e1c:	681b      	ldr	r3, [r3, #0]
 80e0e1e:	699b      	ldr	r3, [r3, #24]
 80e0e20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80e0e24:	687b      	ldr	r3, [r7, #4]
 80e0e26:	689a      	ldr	r2, [r3, #8]
 80e0e28:	687b      	ldr	r3, [r7, #4]
 80e0e2a:	681b      	ldr	r3, [r3, #0]
 80e0e2c:	430a      	orrs	r2, r1
 80e0e2e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80e0e30:	687b      	ldr	r3, [r7, #4]
 80e0e32:	681b      	ldr	r3, [r3, #0]
 80e0e34:	699a      	ldr	r2, [r3, #24]
 80e0e36:	687b      	ldr	r3, [r7, #4]
 80e0e38:	681b      	ldr	r3, [r3, #0]
 80e0e3a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80e0e3e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80e0e40:	687b      	ldr	r3, [r7, #4]
 80e0e42:	681b      	ldr	r3, [r3, #0]
 80e0e44:	691a      	ldr	r2, [r3, #16]
 80e0e46:	687b      	ldr	r3, [r7, #4]
 80e0e48:	681b      	ldr	r3, [r3, #0]
 80e0e4a:	f022 0210 	bic.w	r2, r2, #16
 80e0e4e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80e0e50:	687b      	ldr	r3, [r7, #4]
 80e0e52:	68db      	ldr	r3, [r3, #12]
 80e0e54:	2b01      	cmp	r3, #1
 80e0e56:	d108      	bne.n	80e0e6a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80e0e58:	687b      	ldr	r3, [r7, #4]
 80e0e5a:	681b      	ldr	r3, [r3, #0]
 80e0e5c:	699a      	ldr	r2, [r3, #24]
 80e0e5e:	687b      	ldr	r3, [r7, #4]
 80e0e60:	681b      	ldr	r3, [r3, #0]
 80e0e62:	f042 0204 	orr.w	r2, r2, #4
 80e0e66:	619a      	str	r2, [r3, #24]
 80e0e68:	e030      	b.n	80e0ecc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80e0e6a:	687b      	ldr	r3, [r7, #4]
 80e0e6c:	68db      	ldr	r3, [r3, #12]
 80e0e6e:	2b00      	cmp	r3, #0
 80e0e70:	d02c      	beq.n	80e0ecc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80e0e72:	687b      	ldr	r3, [r7, #4]
 80e0e74:	68db      	ldr	r3, [r3, #12]
 80e0e76:	2b02      	cmp	r3, #2
 80e0e78:	d020      	beq.n	80e0ebc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80e0e7a:	687b      	ldr	r3, [r7, #4]
 80e0e7c:	681b      	ldr	r3, [r3, #0]
 80e0e7e:	699a      	ldr	r2, [r3, #24]
 80e0e80:	687b      	ldr	r3, [r7, #4]
 80e0e82:	681b      	ldr	r3, [r3, #0]
 80e0e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80e0e88:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80e0e8a:	687b      	ldr	r3, [r7, #4]
 80e0e8c:	681b      	ldr	r3, [r3, #0]
 80e0e8e:	691a      	ldr	r2, [r3, #16]
 80e0e90:	687b      	ldr	r3, [r7, #4]
 80e0e92:	681b      	ldr	r3, [r3, #0]
 80e0e94:	f042 0210 	orr.w	r2, r2, #16
 80e0e98:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80e0e9a:	687b      	ldr	r3, [r7, #4]
 80e0e9c:	68db      	ldr	r3, [r3, #12]
 80e0e9e:	2b03      	cmp	r3, #3
 80e0ea0:	d114      	bne.n	80e0ecc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80e0ea2:	687b      	ldr	r3, [r7, #4]
 80e0ea4:	681b      	ldr	r3, [r3, #0]
 80e0ea6:	699a      	ldr	r2, [r3, #24]
 80e0ea8:	687b      	ldr	r3, [r7, #4]
 80e0eaa:	681b      	ldr	r3, [r3, #0]
 80e0eac:	f042 0220 	orr.w	r2, r2, #32
 80e0eb0:	619a      	str	r2, [r3, #24]
 80e0eb2:	e00b      	b.n	80e0ecc <HAL_FDCAN_Init+0x234>
 80e0eb4:	080e3c3c 	.word	0x080e3c3c
 80e0eb8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80e0ebc:	687b      	ldr	r3, [r7, #4]
 80e0ebe:	681b      	ldr	r3, [r3, #0]
 80e0ec0:	699a      	ldr	r2, [r3, #24]
 80e0ec2:	687b      	ldr	r3, [r7, #4]
 80e0ec4:	681b      	ldr	r3, [r3, #0]
 80e0ec6:	f042 0220 	orr.w	r2, r2, #32
 80e0eca:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e0ecc:	687b      	ldr	r3, [r7, #4]
 80e0ece:	699b      	ldr	r3, [r3, #24]
 80e0ed0:	3b01      	subs	r3, #1
 80e0ed2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80e0ed4:	687b      	ldr	r3, [r7, #4]
 80e0ed6:	69db      	ldr	r3, [r3, #28]
 80e0ed8:	3b01      	subs	r3, #1
 80e0eda:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e0edc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80e0ede:	687b      	ldr	r3, [r7, #4]
 80e0ee0:	6a1b      	ldr	r3, [r3, #32]
 80e0ee2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80e0ee4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80e0ee8:	687b      	ldr	r3, [r7, #4]
 80e0eea:	695b      	ldr	r3, [r3, #20]
 80e0eec:	3b01      	subs	r3, #1
 80e0eee:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e0ef0:	687b      	ldr	r3, [r7, #4]
 80e0ef2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80e0ef4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80e0ef6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80e0ef8:	687b      	ldr	r3, [r7, #4]
 80e0efa:	689b      	ldr	r3, [r3, #8]
 80e0efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e0f00:	d115      	bne.n	80e0f2e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e0f02:	687b      	ldr	r3, [r7, #4]
 80e0f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e0f06:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80e0f08:	687b      	ldr	r3, [r7, #4]
 80e0f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e0f0c:	3b01      	subs	r3, #1
 80e0f0e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e0f10:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80e0f12:	687b      	ldr	r3, [r7, #4]
 80e0f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e0f16:	3b01      	subs	r3, #1
 80e0f18:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80e0f1a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80e0f1e:	687b      	ldr	r3, [r7, #4]
 80e0f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e0f22:	3b01      	subs	r3, #1
 80e0f24:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e0f26:	687b      	ldr	r3, [r7, #4]
 80e0f28:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80e0f2a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80e0f2c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80e0f2e:	687b      	ldr	r3, [r7, #4]
 80e0f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e0f32:	2b00      	cmp	r3, #0
 80e0f34:	d00a      	beq.n	80e0f4c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80e0f36:	687b      	ldr	r3, [r7, #4]
 80e0f38:	681b      	ldr	r3, [r3, #0]
 80e0f3a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80e0f3e:	687b      	ldr	r3, [r7, #4]
 80e0f40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80e0f42:	687b      	ldr	r3, [r7, #4]
 80e0f44:	681b      	ldr	r3, [r3, #0]
 80e0f46:	430a      	orrs	r2, r1
 80e0f48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80e0f4c:	687b      	ldr	r3, [r7, #4]
 80e0f4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e0f50:	687b      	ldr	r3, [r7, #4]
 80e0f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e0f54:	4413      	add	r3, r2
 80e0f56:	2b00      	cmp	r3, #0
 80e0f58:	d011      	beq.n	80e0f7e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80e0f5a:	687b      	ldr	r3, [r7, #4]
 80e0f5c:	681b      	ldr	r3, [r3, #0]
 80e0f5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80e0f62:	f023 0107 	bic.w	r1, r3, #7
 80e0f66:	687b      	ldr	r3, [r7, #4]
 80e0f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e0f6a:	009b      	lsls	r3, r3, #2
 80e0f6c:	3360      	adds	r3, #96	; 0x60
 80e0f6e:	443b      	add	r3, r7
 80e0f70:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80e0f74:	687b      	ldr	r3, [r7, #4]
 80e0f76:	681b      	ldr	r3, [r3, #0]
 80e0f78:	430a      	orrs	r2, r1
 80e0f7a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80e0f7e:	687b      	ldr	r3, [r7, #4]
 80e0f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e0f82:	2b00      	cmp	r3, #0
 80e0f84:	d011      	beq.n	80e0faa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80e0f86:	687b      	ldr	r3, [r7, #4]
 80e0f88:	681b      	ldr	r3, [r3, #0]
 80e0f8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e0f8e:	f023 0107 	bic.w	r1, r3, #7
 80e0f92:	687b      	ldr	r3, [r7, #4]
 80e0f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e0f96:	009b      	lsls	r3, r3, #2
 80e0f98:	3360      	adds	r3, #96	; 0x60
 80e0f9a:	443b      	add	r3, r7
 80e0f9c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80e0fa0:	687b      	ldr	r3, [r7, #4]
 80e0fa2:	681b      	ldr	r3, [r3, #0]
 80e0fa4:	430a      	orrs	r2, r1
 80e0fa6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80e0faa:	687b      	ldr	r3, [r7, #4]
 80e0fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e0fae:	2b00      	cmp	r3, #0
 80e0fb0:	d012      	beq.n	80e0fd8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80e0fb2:	687b      	ldr	r3, [r7, #4]
 80e0fb4:	681b      	ldr	r3, [r3, #0]
 80e0fb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e0fba:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80e0fbe:	687b      	ldr	r3, [r7, #4]
 80e0fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e0fc2:	009b      	lsls	r3, r3, #2
 80e0fc4:	3360      	adds	r3, #96	; 0x60
 80e0fc6:	443b      	add	r3, r7
 80e0fc8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80e0fcc:	011a      	lsls	r2, r3, #4
 80e0fce:	687b      	ldr	r3, [r7, #4]
 80e0fd0:	681b      	ldr	r3, [r3, #0]
 80e0fd2:	430a      	orrs	r2, r1
 80e0fd4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80e0fd8:	687b      	ldr	r3, [r7, #4]
 80e0fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e0fdc:	2b00      	cmp	r3, #0
 80e0fde:	d012      	beq.n	80e1006 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80e0fe0:	687b      	ldr	r3, [r7, #4]
 80e0fe2:	681b      	ldr	r3, [r3, #0]
 80e0fe4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80e0fe8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80e0fec:	687b      	ldr	r3, [r7, #4]
 80e0fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e0ff0:	009b      	lsls	r3, r3, #2
 80e0ff2:	3360      	adds	r3, #96	; 0x60
 80e0ff4:	443b      	add	r3, r7
 80e0ff6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80e0ffa:	021a      	lsls	r2, r3, #8
 80e0ffc:	687b      	ldr	r3, [r7, #4]
 80e0ffe:	681b      	ldr	r3, [r3, #0]
 80e1000:	430a      	orrs	r2, r1
 80e1002:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80e1006:	687b      	ldr	r3, [r7, #4]
 80e1008:	681b      	ldr	r3, [r3, #0]
 80e100a:	4a11      	ldr	r2, [pc, #68]	; (80e1050 <HAL_FDCAN_Init+0x3b8>)
 80e100c:	4293      	cmp	r3, r2
 80e100e:	d107      	bne.n	80e1020 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80e1010:	687b      	ldr	r3, [r7, #4]
 80e1012:	685b      	ldr	r3, [r3, #4]
 80e1014:	689a      	ldr	r2, [r3, #8]
 80e1016:	687b      	ldr	r3, [r7, #4]
 80e1018:	685b      	ldr	r3, [r3, #4]
 80e101a:	f022 0203 	bic.w	r2, r2, #3
 80e101e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80e1020:	687b      	ldr	r3, [r7, #4]
 80e1022:	2200      	movs	r2, #0
 80e1024:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80e1028:	687b      	ldr	r3, [r7, #4]
 80e102a:	2200      	movs	r2, #0
 80e102c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80e1030:	687b      	ldr	r3, [r7, #4]
 80e1032:	2201      	movs	r2, #1
 80e1034:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80e1038:	6878      	ldr	r0, [r7, #4]
 80e103a:	f000 fa79 	bl	80e1530 <FDCAN_CalcultateRamBlockAddresses>
 80e103e:	4603      	mov	r3, r0
 80e1040:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80e1044:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80e1048:	4618      	mov	r0, r3
 80e104a:	3760      	adds	r7, #96	; 0x60
 80e104c:	46bd      	mov	sp, r7
 80e104e:	bd80      	pop	{r7, pc}
 80e1050:	4000a000 	.word	0x4000a000

080e1054 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80e1054:	b480      	push	{r7}
 80e1056:	b083      	sub	sp, #12
 80e1058:	af00      	add	r7, sp, #0
 80e105a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80e105c:	687b      	ldr	r3, [r7, #4]
 80e105e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1062:	b2db      	uxtb	r3, r3
 80e1064:	2b01      	cmp	r3, #1
 80e1066:	d111      	bne.n	80e108c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80e1068:	687b      	ldr	r3, [r7, #4]
 80e106a:	2202      	movs	r2, #2
 80e106c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80e1070:	687b      	ldr	r3, [r7, #4]
 80e1072:	681b      	ldr	r3, [r3, #0]
 80e1074:	699a      	ldr	r2, [r3, #24]
 80e1076:	687b      	ldr	r3, [r7, #4]
 80e1078:	681b      	ldr	r3, [r3, #0]
 80e107a:	f022 0201 	bic.w	r2, r2, #1
 80e107e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80e1080:	687b      	ldr	r3, [r7, #4]
 80e1082:	2200      	movs	r2, #0
 80e1084:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80e1088:	2300      	movs	r3, #0
 80e108a:	e008      	b.n	80e109e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80e108c:	687b      	ldr	r3, [r7, #4]
 80e108e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1092:	f043 0204 	orr.w	r2, r3, #4
 80e1096:	687b      	ldr	r3, [r7, #4]
 80e1098:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e109c:	2301      	movs	r3, #1
  }
}
 80e109e:	4618      	mov	r0, r3
 80e10a0:	370c      	adds	r7, #12
 80e10a2:	46bd      	mov	sp, r7
 80e10a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e10a8:	4770      	bx	lr

080e10aa <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80e10aa:	b580      	push	{r7, lr}
 80e10ac:	b086      	sub	sp, #24
 80e10ae:	af00      	add	r7, sp, #0
 80e10b0:	60f8      	str	r0, [r7, #12]
 80e10b2:	60b9      	str	r1, [r7, #8]
 80e10b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80e10b6:	68fb      	ldr	r3, [r7, #12]
 80e10b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e10bc:	b2db      	uxtb	r3, r3
 80e10be:	2b02      	cmp	r3, #2
 80e10c0:	d141      	bne.n	80e1146 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80e10c2:	68fb      	ldr	r3, [r7, #12]
 80e10c4:	681b      	ldr	r3, [r3, #0]
 80e10c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e10ca:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80e10ce:	2b00      	cmp	r3, #0
 80e10d0:	d109      	bne.n	80e10e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e10d2:	68fb      	ldr	r3, [r7, #12]
 80e10d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e10d8:	f043 0220 	orr.w	r2, r3, #32
 80e10dc:	68fb      	ldr	r3, [r7, #12]
 80e10de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80e10e2:	2301      	movs	r3, #1
 80e10e4:	e038      	b.n	80e1158 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80e10e6:	68fb      	ldr	r3, [r7, #12]
 80e10e8:	681b      	ldr	r3, [r3, #0]
 80e10ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80e10ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e10f2:	2b00      	cmp	r3, #0
 80e10f4:	d009      	beq.n	80e110a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80e10f6:	68fb      	ldr	r3, [r7, #12]
 80e10f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e10fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80e1100:	68fb      	ldr	r3, [r7, #12]
 80e1102:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80e1106:	2301      	movs	r3, #1
 80e1108:	e026      	b.n	80e1158 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80e110a:	68fb      	ldr	r3, [r7, #12]
 80e110c:	681b      	ldr	r3, [r3, #0]
 80e110e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80e1112:	0c1b      	lsrs	r3, r3, #16
 80e1114:	f003 031f 	and.w	r3, r3, #31
 80e1118:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80e111a:	697b      	ldr	r3, [r7, #20]
 80e111c:	687a      	ldr	r2, [r7, #4]
 80e111e:	68b9      	ldr	r1, [r7, #8]
 80e1120:	68f8      	ldr	r0, [r7, #12]
 80e1122:	f000 fb8b 	bl	80e183c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80e1126:	68fb      	ldr	r3, [r7, #12]
 80e1128:	681b      	ldr	r3, [r3, #0]
 80e112a:	2101      	movs	r1, #1
 80e112c:	697a      	ldr	r2, [r7, #20]
 80e112e:	fa01 f202 	lsl.w	r2, r1, r2
 80e1132:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80e1136:	2201      	movs	r2, #1
 80e1138:	697b      	ldr	r3, [r7, #20]
 80e113a:	409a      	lsls	r2, r3
 80e113c:	68fb      	ldr	r3, [r7, #12]
 80e113e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80e1142:	2300      	movs	r3, #0
 80e1144:	e008      	b.n	80e1158 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80e1146:	68fb      	ldr	r3, [r7, #12]
 80e1148:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e114c:	f043 0208 	orr.w	r2, r3, #8
 80e1150:	68fb      	ldr	r3, [r7, #12]
 80e1152:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1156:	2301      	movs	r3, #1
  }
}
 80e1158:	4618      	mov	r0, r3
 80e115a:	3718      	adds	r7, #24
 80e115c:	46bd      	mov	sp, r7
 80e115e:	bd80      	pop	{r7, pc}

080e1160 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80e1160:	b480      	push	{r7}
 80e1162:	b08b      	sub	sp, #44	; 0x2c
 80e1164:	af00      	add	r7, sp, #0
 80e1166:	60f8      	str	r0, [r7, #12]
 80e1168:	60b9      	str	r1, [r7, #8]
 80e116a:	607a      	str	r2, [r7, #4]
 80e116c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80e116e:	2300      	movs	r3, #0
 80e1170:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80e1172:	68fb      	ldr	r3, [r7, #12]
 80e1174:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e1178:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80e117a:	7efb      	ldrb	r3, [r7, #27]
 80e117c:	2b02      	cmp	r3, #2
 80e117e:	f040 814b 	bne.w	80e1418 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80e1182:	68bb      	ldr	r3, [r7, #8]
 80e1184:	2b40      	cmp	r3, #64	; 0x40
 80e1186:	d14d      	bne.n	80e1224 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80e1188:	68fb      	ldr	r3, [r7, #12]
 80e118a:	681b      	ldr	r3, [r3, #0]
 80e118c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e1190:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e1194:	2b00      	cmp	r3, #0
 80e1196:	d109      	bne.n	80e11ac <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e1198:	68fb      	ldr	r3, [r7, #12]
 80e119a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e119e:	f043 0220 	orr.w	r2, r3, #32
 80e11a2:	68fb      	ldr	r3, [r7, #12]
 80e11a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e11a8:	2301      	movs	r3, #1
 80e11aa:	e13e      	b.n	80e142a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80e11ac:	68fb      	ldr	r3, [r7, #12]
 80e11ae:	681b      	ldr	r3, [r3, #0]
 80e11b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e11b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e11b8:	2b00      	cmp	r3, #0
 80e11ba:	d109      	bne.n	80e11d0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80e11bc:	68fb      	ldr	r3, [r7, #12]
 80e11be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e11c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80e11c6:	68fb      	ldr	r3, [r7, #12]
 80e11c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e11cc:	2301      	movs	r3, #1
 80e11ce:	e12c      	b.n	80e142a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80e11d0:	68fb      	ldr	r3, [r7, #12]
 80e11d2:	681b      	ldr	r3, [r3, #0]
 80e11d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e11d8:	0e1b      	lsrs	r3, r3, #24
 80e11da:	f003 0301 	and.w	r3, r3, #1
 80e11de:	2b01      	cmp	r3, #1
 80e11e0:	d10b      	bne.n	80e11fa <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80e11e2:	68fb      	ldr	r3, [r7, #12]
 80e11e4:	681b      	ldr	r3, [r3, #0]
 80e11e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e11ea:	0fdb      	lsrs	r3, r3, #31
 80e11ec:	f003 0301 	and.w	r3, r3, #1
 80e11f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80e11f4:	d101      	bne.n	80e11fa <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80e11f6:	2301      	movs	r3, #1
 80e11f8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80e11fa:	68fb      	ldr	r3, [r7, #12]
 80e11fc:	681b      	ldr	r3, [r3, #0]
 80e11fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e1202:	0a1b      	lsrs	r3, r3, #8
 80e1204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e1208:	69fa      	ldr	r2, [r7, #28]
 80e120a:	4413      	add	r3, r2
 80e120c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80e120e:	68fb      	ldr	r3, [r7, #12]
 80e1210:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80e1212:	68fb      	ldr	r3, [r7, #12]
 80e1214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e1216:	69f9      	ldr	r1, [r7, #28]
 80e1218:	fb01 f303 	mul.w	r3, r1, r3
 80e121c:	009b      	lsls	r3, r3, #2
 80e121e:	4413      	add	r3, r2
 80e1220:	627b      	str	r3, [r7, #36]	; 0x24
 80e1222:	e069      	b.n	80e12f8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80e1224:	68bb      	ldr	r3, [r7, #8]
 80e1226:	2b41      	cmp	r3, #65	; 0x41
 80e1228:	d14d      	bne.n	80e12c6 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80e122a:	68fb      	ldr	r3, [r7, #12]
 80e122c:	681b      	ldr	r3, [r3, #0]
 80e122e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e1232:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e1236:	2b00      	cmp	r3, #0
 80e1238:	d109      	bne.n	80e124e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e123a:	68fb      	ldr	r3, [r7, #12]
 80e123c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1240:	f043 0220 	orr.w	r2, r3, #32
 80e1244:	68fb      	ldr	r3, [r7, #12]
 80e1246:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e124a:	2301      	movs	r3, #1
 80e124c:	e0ed      	b.n	80e142a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80e124e:	68fb      	ldr	r3, [r7, #12]
 80e1250:	681b      	ldr	r3, [r3, #0]
 80e1252:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80e1256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e125a:	2b00      	cmp	r3, #0
 80e125c:	d109      	bne.n	80e1272 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80e125e:	68fb      	ldr	r3, [r7, #12]
 80e1260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e1264:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80e1268:	68fb      	ldr	r3, [r7, #12]
 80e126a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e126e:	2301      	movs	r3, #1
 80e1270:	e0db      	b.n	80e142a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80e1272:	68fb      	ldr	r3, [r7, #12]
 80e1274:	681b      	ldr	r3, [r3, #0]
 80e1276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80e127a:	0e1b      	lsrs	r3, r3, #24
 80e127c:	f003 0301 	and.w	r3, r3, #1
 80e1280:	2b01      	cmp	r3, #1
 80e1282:	d10b      	bne.n	80e129c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80e1284:	68fb      	ldr	r3, [r7, #12]
 80e1286:	681b      	ldr	r3, [r3, #0]
 80e1288:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e128c:	0fdb      	lsrs	r3, r3, #31
 80e128e:	f003 0301 	and.w	r3, r3, #1
 80e1292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80e1296:	d101      	bne.n	80e129c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80e1298:	2301      	movs	r3, #1
 80e129a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80e129c:	68fb      	ldr	r3, [r7, #12]
 80e129e:	681b      	ldr	r3, [r3, #0]
 80e12a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80e12a4:	0a1b      	lsrs	r3, r3, #8
 80e12a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e12aa:	69fa      	ldr	r2, [r7, #28]
 80e12ac:	4413      	add	r3, r2
 80e12ae:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80e12b0:	68fb      	ldr	r3, [r7, #12]
 80e12b2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80e12b4:	68fb      	ldr	r3, [r7, #12]
 80e12b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e12b8:	69f9      	ldr	r1, [r7, #28]
 80e12ba:	fb01 f303 	mul.w	r3, r1, r3
 80e12be:	009b      	lsls	r3, r3, #2
 80e12c0:	4413      	add	r3, r2
 80e12c2:	627b      	str	r3, [r7, #36]	; 0x24
 80e12c4:	e018      	b.n	80e12f8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80e12c6:	68fb      	ldr	r3, [r7, #12]
 80e12c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e12ca:	68ba      	ldr	r2, [r7, #8]
 80e12cc:	429a      	cmp	r2, r3
 80e12ce:	d309      	bcc.n	80e12e4 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e12d0:	68fb      	ldr	r3, [r7, #12]
 80e12d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e12d6:	f043 0220 	orr.w	r2, r3, #32
 80e12da:	68fb      	ldr	r3, [r7, #12]
 80e12dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80e12e0:	2301      	movs	r3, #1
 80e12e2:	e0a2      	b.n	80e142a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80e12e4:	68fb      	ldr	r3, [r7, #12]
 80e12e6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80e12e8:	68fb      	ldr	r3, [r7, #12]
 80e12ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e12ec:	68b9      	ldr	r1, [r7, #8]
 80e12ee:	fb01 f303 	mul.w	r3, r1, r3
 80e12f2:	009b      	lsls	r3, r3, #2
 80e12f4:	4413      	add	r3, r2
 80e12f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80e12f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e12fa:	681b      	ldr	r3, [r3, #0]
 80e12fc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80e1300:	687b      	ldr	r3, [r7, #4]
 80e1302:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80e1304:	687b      	ldr	r3, [r7, #4]
 80e1306:	685b      	ldr	r3, [r3, #4]
 80e1308:	2b00      	cmp	r3, #0
 80e130a:	d107      	bne.n	80e131c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80e130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e130e:	681b      	ldr	r3, [r3, #0]
 80e1310:	0c9b      	lsrs	r3, r3, #18
 80e1312:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80e1316:	687b      	ldr	r3, [r7, #4]
 80e1318:	601a      	str	r2, [r3, #0]
 80e131a:	e005      	b.n	80e1328 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80e131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e131e:	681b      	ldr	r3, [r3, #0]
 80e1320:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80e1324:	687b      	ldr	r3, [r7, #4]
 80e1326:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80e1328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e132a:	681b      	ldr	r3, [r3, #0]
 80e132c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80e1330:	687b      	ldr	r3, [r7, #4]
 80e1332:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80e1334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1336:	681b      	ldr	r3, [r3, #0]
 80e1338:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80e133c:	687b      	ldr	r3, [r7, #4]
 80e133e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80e1340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1342:	3304      	adds	r3, #4
 80e1344:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80e1346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1348:	681b      	ldr	r3, [r3, #0]
 80e134a:	b29a      	uxth	r2, r3
 80e134c:	687b      	ldr	r3, [r7, #4]
 80e134e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80e1350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1352:	681b      	ldr	r3, [r3, #0]
 80e1354:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80e1358:	687b      	ldr	r3, [r7, #4]
 80e135a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80e135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e135e:	681b      	ldr	r3, [r3, #0]
 80e1360:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80e1364:	687b      	ldr	r3, [r7, #4]
 80e1366:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80e1368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e136a:	681b      	ldr	r3, [r3, #0]
 80e136c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80e1370:	687b      	ldr	r3, [r7, #4]
 80e1372:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80e1374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1376:	681b      	ldr	r3, [r3, #0]
 80e1378:	0e1b      	lsrs	r3, r3, #24
 80e137a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e137e:	687b      	ldr	r3, [r7, #4]
 80e1380:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80e1382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1384:	681b      	ldr	r3, [r3, #0]
 80e1386:	0fda      	lsrs	r2, r3, #31
 80e1388:	687b      	ldr	r3, [r7, #4]
 80e138a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80e138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e138e:	3304      	adds	r3, #4
 80e1390:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80e1392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1394:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80e1396:	2300      	movs	r3, #0
 80e1398:	623b      	str	r3, [r7, #32]
 80e139a:	e00a      	b.n	80e13b2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80e139c:	697a      	ldr	r2, [r7, #20]
 80e139e:	6a3b      	ldr	r3, [r7, #32]
 80e13a0:	441a      	add	r2, r3
 80e13a2:	6839      	ldr	r1, [r7, #0]
 80e13a4:	6a3b      	ldr	r3, [r7, #32]
 80e13a6:	440b      	add	r3, r1
 80e13a8:	7812      	ldrb	r2, [r2, #0]
 80e13aa:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80e13ac:	6a3b      	ldr	r3, [r7, #32]
 80e13ae:	3301      	adds	r3, #1
 80e13b0:	623b      	str	r3, [r7, #32]
 80e13b2:	687b      	ldr	r3, [r7, #4]
 80e13b4:	68db      	ldr	r3, [r3, #12]
 80e13b6:	0c1b      	lsrs	r3, r3, #16
 80e13b8:	4a1f      	ldr	r2, [pc, #124]	; (80e1438 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80e13ba:	5cd3      	ldrb	r3, [r2, r3]
 80e13bc:	461a      	mov	r2, r3
 80e13be:	6a3b      	ldr	r3, [r7, #32]
 80e13c0:	4293      	cmp	r3, r2
 80e13c2:	d3eb      	bcc.n	80e139c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80e13c4:	68bb      	ldr	r3, [r7, #8]
 80e13c6:	2b40      	cmp	r3, #64	; 0x40
 80e13c8:	d105      	bne.n	80e13d6 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80e13ca:	68fb      	ldr	r3, [r7, #12]
 80e13cc:	681b      	ldr	r3, [r3, #0]
 80e13ce:	69fa      	ldr	r2, [r7, #28]
 80e13d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80e13d4:	e01e      	b.n	80e1414 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80e13d6:	68bb      	ldr	r3, [r7, #8]
 80e13d8:	2b41      	cmp	r3, #65	; 0x41
 80e13da:	d105      	bne.n	80e13e8 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80e13dc:	68fb      	ldr	r3, [r7, #12]
 80e13de:	681b      	ldr	r3, [r3, #0]
 80e13e0:	69fa      	ldr	r2, [r7, #28]
 80e13e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80e13e6:	e015      	b.n	80e1414 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80e13e8:	68bb      	ldr	r3, [r7, #8]
 80e13ea:	2b1f      	cmp	r3, #31
 80e13ec:	d808      	bhi.n	80e1400 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80e13ee:	68fb      	ldr	r3, [r7, #12]
 80e13f0:	681b      	ldr	r3, [r3, #0]
 80e13f2:	2101      	movs	r1, #1
 80e13f4:	68ba      	ldr	r2, [r7, #8]
 80e13f6:	fa01 f202 	lsl.w	r2, r1, r2
 80e13fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80e13fe:	e009      	b.n	80e1414 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80e1400:	68bb      	ldr	r3, [r7, #8]
 80e1402:	f003 021f 	and.w	r2, r3, #31
 80e1406:	68fb      	ldr	r3, [r7, #12]
 80e1408:	681b      	ldr	r3, [r3, #0]
 80e140a:	2101      	movs	r1, #1
 80e140c:	fa01 f202 	lsl.w	r2, r1, r2
 80e1410:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80e1414:	2300      	movs	r3, #0
 80e1416:	e008      	b.n	80e142a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80e1418:	68fb      	ldr	r3, [r7, #12]
 80e141a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e141e:	f043 0208 	orr.w	r2, r3, #8
 80e1422:	68fb      	ldr	r3, [r7, #12]
 80e1424:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1428:	2301      	movs	r3, #1
  }
}
 80e142a:	4618      	mov	r0, r3
 80e142c:	372c      	adds	r7, #44	; 0x2c
 80e142e:	46bd      	mov	sp, r7
 80e1430:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1434:	4770      	bx	lr
 80e1436:	bf00      	nop
 80e1438:	080e3c98 	.word	0x080e3c98

080e143c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80e143c:	b480      	push	{r7}
 80e143e:	b087      	sub	sp, #28
 80e1440:	af00      	add	r7, sp, #0
 80e1442:	60f8      	str	r0, [r7, #12]
 80e1444:	60b9      	str	r1, [r7, #8]
 80e1446:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80e1448:	68fb      	ldr	r3, [r7, #12]
 80e144a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80e144e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80e1450:	7dfb      	ldrb	r3, [r7, #23]
 80e1452:	2b01      	cmp	r3, #1
 80e1454:	d002      	beq.n	80e145c <HAL_FDCAN_ActivateNotification+0x20>
 80e1456:	7dfb      	ldrb	r3, [r7, #23]
 80e1458:	2b02      	cmp	r3, #2
 80e145a:	d155      	bne.n	80e1508 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80e145c:	68fb      	ldr	r3, [r7, #12]
 80e145e:	681b      	ldr	r3, [r3, #0]
 80e1460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80e1462:	68bb      	ldr	r3, [r7, #8]
 80e1464:	4013      	ands	r3, r2
 80e1466:	2b00      	cmp	r3, #0
 80e1468:	d108      	bne.n	80e147c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80e146a:	68fb      	ldr	r3, [r7, #12]
 80e146c:	681b      	ldr	r3, [r3, #0]
 80e146e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e1470:	68fb      	ldr	r3, [r7, #12]
 80e1472:	681b      	ldr	r3, [r3, #0]
 80e1474:	f042 0201 	orr.w	r2, r2, #1
 80e1478:	65da      	str	r2, [r3, #92]	; 0x5c
 80e147a:	e014      	b.n	80e14a6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80e147c:	68fb      	ldr	r3, [r7, #12]
 80e147e:	681b      	ldr	r3, [r3, #0]
 80e1480:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80e1482:	68bb      	ldr	r3, [r7, #8]
 80e1484:	4013      	ands	r3, r2
 80e1486:	68ba      	ldr	r2, [r7, #8]
 80e1488:	429a      	cmp	r2, r3
 80e148a:	d108      	bne.n	80e149e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80e148c:	68fb      	ldr	r3, [r7, #12]
 80e148e:	681b      	ldr	r3, [r3, #0]
 80e1490:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80e1492:	68fb      	ldr	r3, [r7, #12]
 80e1494:	681b      	ldr	r3, [r3, #0]
 80e1496:	f042 0202 	orr.w	r2, r2, #2
 80e149a:	65da      	str	r2, [r3, #92]	; 0x5c
 80e149c:	e003      	b.n	80e14a6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80e149e:	68fb      	ldr	r3, [r7, #12]
 80e14a0:	681b      	ldr	r3, [r3, #0]
 80e14a2:	2203      	movs	r2, #3
 80e14a4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80e14a6:	68bb      	ldr	r3, [r7, #8]
 80e14a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80e14ac:	2b00      	cmp	r3, #0
 80e14ae:	d009      	beq.n	80e14c4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80e14b0:	68fb      	ldr	r3, [r7, #12]
 80e14b2:	681b      	ldr	r3, [r3, #0]
 80e14b4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80e14b8:	68fb      	ldr	r3, [r7, #12]
 80e14ba:	681b      	ldr	r3, [r3, #0]
 80e14bc:	687a      	ldr	r2, [r7, #4]
 80e14be:	430a      	orrs	r2, r1
 80e14c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80e14c4:	68bb      	ldr	r3, [r7, #8]
 80e14c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80e14ca:	2b00      	cmp	r3, #0
 80e14cc:	d009      	beq.n	80e14e2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80e14ce:	68fb      	ldr	r3, [r7, #12]
 80e14d0:	681b      	ldr	r3, [r3, #0]
 80e14d2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80e14d6:	68fb      	ldr	r3, [r7, #12]
 80e14d8:	681b      	ldr	r3, [r3, #0]
 80e14da:	687a      	ldr	r2, [r7, #4]
 80e14dc:	430a      	orrs	r2, r1
 80e14de:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80e14e2:	68fb      	ldr	r3, [r7, #12]
 80e14e4:	681b      	ldr	r3, [r3, #0]
 80e14e6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80e14e8:	68ba      	ldr	r2, [r7, #8]
 80e14ea:	4b0f      	ldr	r3, [pc, #60]	; (80e1528 <HAL_FDCAN_ActivateNotification+0xec>)
 80e14ec:	4013      	ands	r3, r2
 80e14ee:	68fa      	ldr	r2, [r7, #12]
 80e14f0:	6812      	ldr	r2, [r2, #0]
 80e14f2:	430b      	orrs	r3, r1
 80e14f4:	6553      	str	r3, [r2, #84]	; 0x54
 80e14f6:	4b0d      	ldr	r3, [pc, #52]	; (80e152c <HAL_FDCAN_ActivateNotification+0xf0>)
 80e14f8:	695a      	ldr	r2, [r3, #20]
 80e14fa:	68bb      	ldr	r3, [r7, #8]
 80e14fc:	0f9b      	lsrs	r3, r3, #30
 80e14fe:	490b      	ldr	r1, [pc, #44]	; (80e152c <HAL_FDCAN_ActivateNotification+0xf0>)
 80e1500:	4313      	orrs	r3, r2
 80e1502:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80e1504:	2300      	movs	r3, #0
 80e1506:	e008      	b.n	80e151a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80e1508:	68fb      	ldr	r3, [r7, #12]
 80e150a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e150e:	f043 0202 	orr.w	r2, r3, #2
 80e1512:	68fb      	ldr	r3, [r7, #12]
 80e1514:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80e1518:	2301      	movs	r3, #1
  }
}
 80e151a:	4618      	mov	r0, r3
 80e151c:	371c      	adds	r7, #28
 80e151e:	46bd      	mov	sp, r7
 80e1520:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1524:	4770      	bx	lr
 80e1526:	bf00      	nop
 80e1528:	3fcfffff 	.word	0x3fcfffff
 80e152c:	4000a800 	.word	0x4000a800

080e1530 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80e1530:	b480      	push	{r7}
 80e1532:	b085      	sub	sp, #20
 80e1534:	af00      	add	r7, sp, #0
 80e1536:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80e1538:	687b      	ldr	r3, [r7, #4]
 80e153a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e153c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80e153e:	687b      	ldr	r3, [r7, #4]
 80e1540:	681b      	ldr	r3, [r3, #0]
 80e1542:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e1546:	4ba7      	ldr	r3, [pc, #668]	; (80e17e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1548:	4013      	ands	r3, r2
 80e154a:	68ba      	ldr	r2, [r7, #8]
 80e154c:	0091      	lsls	r1, r2, #2
 80e154e:	687a      	ldr	r2, [r7, #4]
 80e1550:	6812      	ldr	r2, [r2, #0]
 80e1552:	430b      	orrs	r3, r1
 80e1554:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80e1558:	687b      	ldr	r3, [r7, #4]
 80e155a:	681b      	ldr	r3, [r3, #0]
 80e155c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80e1560:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80e1564:	687b      	ldr	r3, [r7, #4]
 80e1566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e1568:	041a      	lsls	r2, r3, #16
 80e156a:	687b      	ldr	r3, [r7, #4]
 80e156c:	681b      	ldr	r3, [r3, #0]
 80e156e:	430a      	orrs	r2, r1
 80e1570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80e1574:	687b      	ldr	r3, [r7, #4]
 80e1576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e1578:	68ba      	ldr	r2, [r7, #8]
 80e157a:	4413      	add	r3, r2
 80e157c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80e157e:	687b      	ldr	r3, [r7, #4]
 80e1580:	681b      	ldr	r3, [r3, #0]
 80e1582:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80e1586:	4b97      	ldr	r3, [pc, #604]	; (80e17e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1588:	4013      	ands	r3, r2
 80e158a:	68ba      	ldr	r2, [r7, #8]
 80e158c:	0091      	lsls	r1, r2, #2
 80e158e:	687a      	ldr	r2, [r7, #4]
 80e1590:	6812      	ldr	r2, [r2, #0]
 80e1592:	430b      	orrs	r3, r1
 80e1594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80e1598:	687b      	ldr	r3, [r7, #4]
 80e159a:	681b      	ldr	r3, [r3, #0]
 80e159c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e15a0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e15a4:	687b      	ldr	r3, [r7, #4]
 80e15a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e15a8:	041a      	lsls	r2, r3, #16
 80e15aa:	687b      	ldr	r3, [r7, #4]
 80e15ac:	681b      	ldr	r3, [r3, #0]
 80e15ae:	430a      	orrs	r2, r1
 80e15b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80e15b4:	687b      	ldr	r3, [r7, #4]
 80e15b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e15b8:	005b      	lsls	r3, r3, #1
 80e15ba:	68ba      	ldr	r2, [r7, #8]
 80e15bc:	4413      	add	r3, r2
 80e15be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80e15c0:	687b      	ldr	r3, [r7, #4]
 80e15c2:	681b      	ldr	r3, [r3, #0]
 80e15c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80e15c8:	4b86      	ldr	r3, [pc, #536]	; (80e17e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e15ca:	4013      	ands	r3, r2
 80e15cc:	68ba      	ldr	r2, [r7, #8]
 80e15ce:	0091      	lsls	r1, r2, #2
 80e15d0:	687a      	ldr	r2, [r7, #4]
 80e15d2:	6812      	ldr	r2, [r2, #0]
 80e15d4:	430b      	orrs	r3, r1
 80e15d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80e15da:	687b      	ldr	r3, [r7, #4]
 80e15dc:	681b      	ldr	r3, [r3, #0]
 80e15de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e15e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e15e6:	687b      	ldr	r3, [r7, #4]
 80e15e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e15ea:	041a      	lsls	r2, r3, #16
 80e15ec:	687b      	ldr	r3, [r7, #4]
 80e15ee:	681b      	ldr	r3, [r3, #0]
 80e15f0:	430a      	orrs	r2, r1
 80e15f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80e15f6:	687b      	ldr	r3, [r7, #4]
 80e15f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e15fa:	687a      	ldr	r2, [r7, #4]
 80e15fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80e15fe:	fb02 f303 	mul.w	r3, r2, r3
 80e1602:	68ba      	ldr	r2, [r7, #8]
 80e1604:	4413      	add	r3, r2
 80e1606:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80e1608:	687b      	ldr	r3, [r7, #4]
 80e160a:	681b      	ldr	r3, [r3, #0]
 80e160c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80e1610:	4b74      	ldr	r3, [pc, #464]	; (80e17e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1612:	4013      	ands	r3, r2
 80e1614:	68ba      	ldr	r2, [r7, #8]
 80e1616:	0091      	lsls	r1, r2, #2
 80e1618:	687a      	ldr	r2, [r7, #4]
 80e161a:	6812      	ldr	r2, [r2, #0]
 80e161c:	430b      	orrs	r3, r1
 80e161e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80e1622:	687b      	ldr	r3, [r7, #4]
 80e1624:	681b      	ldr	r3, [r3, #0]
 80e1626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e162a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80e162e:	687b      	ldr	r3, [r7, #4]
 80e1630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e1632:	041a      	lsls	r2, r3, #16
 80e1634:	687b      	ldr	r3, [r7, #4]
 80e1636:	681b      	ldr	r3, [r3, #0]
 80e1638:	430a      	orrs	r2, r1
 80e163a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80e163e:	687b      	ldr	r3, [r7, #4]
 80e1640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e1642:	687a      	ldr	r2, [r7, #4]
 80e1644:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80e1646:	fb02 f303 	mul.w	r3, r2, r3
 80e164a:	68ba      	ldr	r2, [r7, #8]
 80e164c:	4413      	add	r3, r2
 80e164e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80e1650:	687b      	ldr	r3, [r7, #4]
 80e1652:	681b      	ldr	r3, [r3, #0]
 80e1654:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80e1658:	4b62      	ldr	r3, [pc, #392]	; (80e17e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e165a:	4013      	ands	r3, r2
 80e165c:	68ba      	ldr	r2, [r7, #8]
 80e165e:	0091      	lsls	r1, r2, #2
 80e1660:	687a      	ldr	r2, [r7, #4]
 80e1662:	6812      	ldr	r2, [r2, #0]
 80e1664:	430b      	orrs	r3, r1
 80e1666:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80e166a:	687b      	ldr	r3, [r7, #4]
 80e166c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e166e:	687a      	ldr	r2, [r7, #4]
 80e1670:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80e1672:	fb02 f303 	mul.w	r3, r2, r3
 80e1676:	68ba      	ldr	r2, [r7, #8]
 80e1678:	4413      	add	r3, r2
 80e167a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80e167c:	687b      	ldr	r3, [r7, #4]
 80e167e:	681b      	ldr	r3, [r3, #0]
 80e1680:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80e1684:	4b57      	ldr	r3, [pc, #348]	; (80e17e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e1686:	4013      	ands	r3, r2
 80e1688:	68ba      	ldr	r2, [r7, #8]
 80e168a:	0091      	lsls	r1, r2, #2
 80e168c:	687a      	ldr	r2, [r7, #4]
 80e168e:	6812      	ldr	r2, [r2, #0]
 80e1690:	430b      	orrs	r3, r1
 80e1692:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80e1696:	687b      	ldr	r3, [r7, #4]
 80e1698:	681b      	ldr	r3, [r3, #0]
 80e169a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80e169e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80e16a2:	687b      	ldr	r3, [r7, #4]
 80e16a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e16a6:	041a      	lsls	r2, r3, #16
 80e16a8:	687b      	ldr	r3, [r7, #4]
 80e16aa:	681b      	ldr	r3, [r3, #0]
 80e16ac:	430a      	orrs	r2, r1
 80e16ae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80e16b2:	687b      	ldr	r3, [r7, #4]
 80e16b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e16b6:	005b      	lsls	r3, r3, #1
 80e16b8:	68ba      	ldr	r2, [r7, #8]
 80e16ba:	4413      	add	r3, r2
 80e16bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80e16be:	687b      	ldr	r3, [r7, #4]
 80e16c0:	681b      	ldr	r3, [r3, #0]
 80e16c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80e16c6:	4b47      	ldr	r3, [pc, #284]	; (80e17e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80e16c8:	4013      	ands	r3, r2
 80e16ca:	68ba      	ldr	r2, [r7, #8]
 80e16cc:	0091      	lsls	r1, r2, #2
 80e16ce:	687a      	ldr	r2, [r7, #4]
 80e16d0:	6812      	ldr	r2, [r2, #0]
 80e16d2:	430b      	orrs	r3, r1
 80e16d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80e16d8:	687b      	ldr	r3, [r7, #4]
 80e16da:	681b      	ldr	r3, [r3, #0]
 80e16dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e16e0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80e16e4:	687b      	ldr	r3, [r7, #4]
 80e16e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e16e8:	041a      	lsls	r2, r3, #16
 80e16ea:	687b      	ldr	r3, [r7, #4]
 80e16ec:	681b      	ldr	r3, [r3, #0]
 80e16ee:	430a      	orrs	r2, r1
 80e16f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80e16f4:	687b      	ldr	r3, [r7, #4]
 80e16f6:	681b      	ldr	r3, [r3, #0]
 80e16f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80e16fc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80e1700:	687b      	ldr	r3, [r7, #4]
 80e1702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e1704:	061a      	lsls	r2, r3, #24
 80e1706:	687b      	ldr	r3, [r7, #4]
 80e1708:	681b      	ldr	r3, [r3, #0]
 80e170a:	430a      	orrs	r2, r1
 80e170c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80e1710:	687b      	ldr	r3, [r7, #4]
 80e1712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80e1714:	4b34      	ldr	r3, [pc, #208]	; (80e17e8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80e1716:	4413      	add	r3, r2
 80e1718:	009a      	lsls	r2, r3, #2
 80e171a:	687b      	ldr	r3, [r7, #4]
 80e171c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80e171e:	687b      	ldr	r3, [r7, #4]
 80e1720:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80e1722:	687b      	ldr	r3, [r7, #4]
 80e1724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e1726:	009b      	lsls	r3, r3, #2
 80e1728:	441a      	add	r2, r3
 80e172a:	687b      	ldr	r3, [r7, #4]
 80e172c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80e172e:	687b      	ldr	r3, [r7, #4]
 80e1730:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e1732:	687b      	ldr	r3, [r7, #4]
 80e1734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e1736:	00db      	lsls	r3, r3, #3
 80e1738:	441a      	add	r2, r3
 80e173a:	687b      	ldr	r3, [r7, #4]
 80e173c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80e173e:	687b      	ldr	r3, [r7, #4]
 80e1740:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80e1742:	687b      	ldr	r3, [r7, #4]
 80e1744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e1746:	6879      	ldr	r1, [r7, #4]
 80e1748:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80e174a:	fb01 f303 	mul.w	r3, r1, r3
 80e174e:	009b      	lsls	r3, r3, #2
 80e1750:	441a      	add	r2, r3
 80e1752:	687b      	ldr	r3, [r7, #4]
 80e1754:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80e1756:	687b      	ldr	r3, [r7, #4]
 80e1758:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80e175a:	687b      	ldr	r3, [r7, #4]
 80e175c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e175e:	6879      	ldr	r1, [r7, #4]
 80e1760:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80e1762:	fb01 f303 	mul.w	r3, r1, r3
 80e1766:	009b      	lsls	r3, r3, #2
 80e1768:	441a      	add	r2, r3
 80e176a:	687b      	ldr	r3, [r7, #4]
 80e176c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80e176e:	687b      	ldr	r3, [r7, #4]
 80e1770:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80e1772:	687b      	ldr	r3, [r7, #4]
 80e1774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e1776:	6879      	ldr	r1, [r7, #4]
 80e1778:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80e177a:	fb01 f303 	mul.w	r3, r1, r3
 80e177e:	009b      	lsls	r3, r3, #2
 80e1780:	441a      	add	r2, r3
 80e1782:	687b      	ldr	r3, [r7, #4]
 80e1784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80e1788:	687b      	ldr	r3, [r7, #4]
 80e178a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80e178e:	687b      	ldr	r3, [r7, #4]
 80e1790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e1792:	00db      	lsls	r3, r3, #3
 80e1794:	441a      	add	r2, r3
 80e1796:	687b      	ldr	r3, [r7, #4]
 80e1798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80e179c:	687b      	ldr	r3, [r7, #4]
 80e179e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e17a2:	687b      	ldr	r3, [r7, #4]
 80e17a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e17a6:	6879      	ldr	r1, [r7, #4]
 80e17a8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80e17aa:	fb01 f303 	mul.w	r3, r1, r3
 80e17ae:	009b      	lsls	r3, r3, #2
 80e17b0:	441a      	add	r2, r3
 80e17b2:	687b      	ldr	r3, [r7, #4]
 80e17b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80e17b8:	687b      	ldr	r3, [r7, #4]
 80e17ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80e17be:	687b      	ldr	r3, [r7, #4]
 80e17c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e17c2:	6879      	ldr	r1, [r7, #4]
 80e17c4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80e17c6:	fb01 f303 	mul.w	r3, r1, r3
 80e17ca:	009b      	lsls	r3, r3, #2
 80e17cc:	441a      	add	r2, r3
 80e17ce:	687b      	ldr	r3, [r7, #4]
 80e17d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80e17d4:	687b      	ldr	r3, [r7, #4]
 80e17d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e17da:	4a04      	ldr	r2, [pc, #16]	; (80e17ec <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80e17dc:	4293      	cmp	r3, r2
 80e17de:	d915      	bls.n	80e180c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80e17e0:	e006      	b.n	80e17f0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80e17e2:	bf00      	nop
 80e17e4:	ffff0003 	.word	0xffff0003
 80e17e8:	10002b00 	.word	0x10002b00
 80e17ec:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80e17f0:	687b      	ldr	r3, [r7, #4]
 80e17f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e17f6:	f043 0220 	orr.w	r2, r3, #32
 80e17fa:	687b      	ldr	r3, [r7, #4]
 80e17fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80e1800:	687b      	ldr	r3, [r7, #4]
 80e1802:	2203      	movs	r2, #3
 80e1804:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80e1808:	2301      	movs	r3, #1
 80e180a:	e010      	b.n	80e182e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80e180c:	687b      	ldr	r3, [r7, #4]
 80e180e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80e1810:	60fb      	str	r3, [r7, #12]
 80e1812:	e005      	b.n	80e1820 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80e1814:	68fb      	ldr	r3, [r7, #12]
 80e1816:	2200      	movs	r2, #0
 80e1818:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80e181a:	68fb      	ldr	r3, [r7, #12]
 80e181c:	3304      	adds	r3, #4
 80e181e:	60fb      	str	r3, [r7, #12]
 80e1820:	687b      	ldr	r3, [r7, #4]
 80e1822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e1826:	68fa      	ldr	r2, [r7, #12]
 80e1828:	429a      	cmp	r2, r3
 80e182a:	d3f3      	bcc.n	80e1814 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80e182c:	2300      	movs	r3, #0
}
 80e182e:	4618      	mov	r0, r3
 80e1830:	3714      	adds	r7, #20
 80e1832:	46bd      	mov	sp, r7
 80e1834:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1838:	4770      	bx	lr
 80e183a:	bf00      	nop

080e183c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80e183c:	b480      	push	{r7}
 80e183e:	b089      	sub	sp, #36	; 0x24
 80e1840:	af00      	add	r7, sp, #0
 80e1842:	60f8      	str	r0, [r7, #12]
 80e1844:	60b9      	str	r1, [r7, #8]
 80e1846:	607a      	str	r2, [r7, #4]
 80e1848:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80e184a:	68bb      	ldr	r3, [r7, #8]
 80e184c:	685b      	ldr	r3, [r3, #4]
 80e184e:	2b00      	cmp	r3, #0
 80e1850:	d10a      	bne.n	80e1868 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e1852:	68bb      	ldr	r3, [r7, #8]
 80e1854:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80e1856:	68bb      	ldr	r3, [r7, #8]
 80e1858:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80e185a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80e185c:	68bb      	ldr	r3, [r7, #8]
 80e185e:	681b      	ldr	r3, [r3, #0]
 80e1860:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e1862:	4313      	orrs	r3, r2
 80e1864:	61fb      	str	r3, [r7, #28]
 80e1866:	e00a      	b.n	80e187e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e1868:	68bb      	ldr	r3, [r7, #8]
 80e186a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80e186c:	68bb      	ldr	r3, [r7, #8]
 80e186e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80e1870:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80e1872:	68bb      	ldr	r3, [r7, #8]
 80e1874:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80e1876:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80e1878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80e187c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e187e:	68bb      	ldr	r3, [r7, #8]
 80e1880:	6a1b      	ldr	r3, [r3, #32]
 80e1882:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80e1884:	68bb      	ldr	r3, [r7, #8]
 80e1886:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e1888:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80e188a:	68bb      	ldr	r3, [r7, #8]
 80e188c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80e188e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80e1890:	68bb      	ldr	r3, [r7, #8]
 80e1892:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80e1894:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80e1896:	68bb      	ldr	r3, [r7, #8]
 80e1898:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80e189a:	4313      	orrs	r3, r2
 80e189c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80e189e:	68fb      	ldr	r3, [r7, #12]
 80e18a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80e18a4:	68fb      	ldr	r3, [r7, #12]
 80e18a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e18a8:	6839      	ldr	r1, [r7, #0]
 80e18aa:	fb01 f303 	mul.w	r3, r1, r3
 80e18ae:	009b      	lsls	r3, r3, #2
 80e18b0:	4413      	add	r3, r2
 80e18b2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80e18b4:	69bb      	ldr	r3, [r7, #24]
 80e18b6:	69fa      	ldr	r2, [r7, #28]
 80e18b8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80e18ba:	69bb      	ldr	r3, [r7, #24]
 80e18bc:	3304      	adds	r3, #4
 80e18be:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80e18c0:	69bb      	ldr	r3, [r7, #24]
 80e18c2:	693a      	ldr	r2, [r7, #16]
 80e18c4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80e18c6:	69bb      	ldr	r3, [r7, #24]
 80e18c8:	3304      	adds	r3, #4
 80e18ca:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80e18cc:	2300      	movs	r3, #0
 80e18ce:	617b      	str	r3, [r7, #20]
 80e18d0:	e020      	b.n	80e1914 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e18d2:	697b      	ldr	r3, [r7, #20]
 80e18d4:	3303      	adds	r3, #3
 80e18d6:	687a      	ldr	r2, [r7, #4]
 80e18d8:	4413      	add	r3, r2
 80e18da:	781b      	ldrb	r3, [r3, #0]
 80e18dc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80e18de:	697b      	ldr	r3, [r7, #20]
 80e18e0:	3302      	adds	r3, #2
 80e18e2:	6879      	ldr	r1, [r7, #4]
 80e18e4:	440b      	add	r3, r1
 80e18e6:	781b      	ldrb	r3, [r3, #0]
 80e18e8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e18ea:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80e18ec:	697b      	ldr	r3, [r7, #20]
 80e18ee:	3301      	adds	r3, #1
 80e18f0:	6879      	ldr	r1, [r7, #4]
 80e18f2:	440b      	add	r3, r1
 80e18f4:	781b      	ldrb	r3, [r3, #0]
 80e18f6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80e18f8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80e18fa:	6879      	ldr	r1, [r7, #4]
 80e18fc:	697a      	ldr	r2, [r7, #20]
 80e18fe:	440a      	add	r2, r1
 80e1900:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80e1902:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80e1904:	69bb      	ldr	r3, [r7, #24]
 80e1906:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80e1908:	69bb      	ldr	r3, [r7, #24]
 80e190a:	3304      	adds	r3, #4
 80e190c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80e190e:	697b      	ldr	r3, [r7, #20]
 80e1910:	3304      	adds	r3, #4
 80e1912:	617b      	str	r3, [r7, #20]
 80e1914:	68bb      	ldr	r3, [r7, #8]
 80e1916:	68db      	ldr	r3, [r3, #12]
 80e1918:	0c1b      	lsrs	r3, r3, #16
 80e191a:	4a06      	ldr	r2, [pc, #24]	; (80e1934 <FDCAN_CopyMessageToRAM+0xf8>)
 80e191c:	5cd3      	ldrb	r3, [r2, r3]
 80e191e:	461a      	mov	r2, r3
 80e1920:	697b      	ldr	r3, [r7, #20]
 80e1922:	4293      	cmp	r3, r2
 80e1924:	d3d5      	bcc.n	80e18d2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80e1926:	bf00      	nop
 80e1928:	bf00      	nop
 80e192a:	3724      	adds	r7, #36	; 0x24
 80e192c:	46bd      	mov	sp, r7
 80e192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1932:	4770      	bx	lr
 80e1934:	080e3c98 	.word	0x080e3c98

080e1938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80e1938:	b480      	push	{r7}
 80e193a:	b089      	sub	sp, #36	; 0x24
 80e193c:	af00      	add	r7, sp, #0
 80e193e:	6078      	str	r0, [r7, #4]
 80e1940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80e1942:	2300      	movs	r3, #0
 80e1944:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80e1946:	4b86      	ldr	r3, [pc, #536]	; (80e1b60 <HAL_GPIO_Init+0x228>)
 80e1948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80e194a:	e18c      	b.n	80e1c66 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80e194c:	683b      	ldr	r3, [r7, #0]
 80e194e:	681a      	ldr	r2, [r3, #0]
 80e1950:	2101      	movs	r1, #1
 80e1952:	69fb      	ldr	r3, [r7, #28]
 80e1954:	fa01 f303 	lsl.w	r3, r1, r3
 80e1958:	4013      	ands	r3, r2
 80e195a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80e195c:	693b      	ldr	r3, [r7, #16]
 80e195e:	2b00      	cmp	r3, #0
 80e1960:	f000 817e 	beq.w	80e1c60 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80e1964:	683b      	ldr	r3, [r7, #0]
 80e1966:	685b      	ldr	r3, [r3, #4]
 80e1968:	f003 0303 	and.w	r3, r3, #3
 80e196c:	2b01      	cmp	r3, #1
 80e196e:	d005      	beq.n	80e197c <HAL_GPIO_Init+0x44>
 80e1970:	683b      	ldr	r3, [r7, #0]
 80e1972:	685b      	ldr	r3, [r3, #4]
 80e1974:	f003 0303 	and.w	r3, r3, #3
 80e1978:	2b02      	cmp	r3, #2
 80e197a:	d130      	bne.n	80e19de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80e197c:	687b      	ldr	r3, [r7, #4]
 80e197e:	689b      	ldr	r3, [r3, #8]
 80e1980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80e1982:	69fb      	ldr	r3, [r7, #28]
 80e1984:	005b      	lsls	r3, r3, #1
 80e1986:	2203      	movs	r2, #3
 80e1988:	fa02 f303 	lsl.w	r3, r2, r3
 80e198c:	43db      	mvns	r3, r3
 80e198e:	69ba      	ldr	r2, [r7, #24]
 80e1990:	4013      	ands	r3, r2
 80e1992:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80e1994:	683b      	ldr	r3, [r7, #0]
 80e1996:	68da      	ldr	r2, [r3, #12]
 80e1998:	69fb      	ldr	r3, [r7, #28]
 80e199a:	005b      	lsls	r3, r3, #1
 80e199c:	fa02 f303 	lsl.w	r3, r2, r3
 80e19a0:	69ba      	ldr	r2, [r7, #24]
 80e19a2:	4313      	orrs	r3, r2
 80e19a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80e19a6:	687b      	ldr	r3, [r7, #4]
 80e19a8:	69ba      	ldr	r2, [r7, #24]
 80e19aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80e19ac:	687b      	ldr	r3, [r7, #4]
 80e19ae:	685b      	ldr	r3, [r3, #4]
 80e19b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80e19b2:	2201      	movs	r2, #1
 80e19b4:	69fb      	ldr	r3, [r7, #28]
 80e19b6:	fa02 f303 	lsl.w	r3, r2, r3
 80e19ba:	43db      	mvns	r3, r3
 80e19bc:	69ba      	ldr	r2, [r7, #24]
 80e19be:	4013      	ands	r3, r2
 80e19c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80e19c2:	683b      	ldr	r3, [r7, #0]
 80e19c4:	685b      	ldr	r3, [r3, #4]
 80e19c6:	091b      	lsrs	r3, r3, #4
 80e19c8:	f003 0201 	and.w	r2, r3, #1
 80e19cc:	69fb      	ldr	r3, [r7, #28]
 80e19ce:	fa02 f303 	lsl.w	r3, r2, r3
 80e19d2:	69ba      	ldr	r2, [r7, #24]
 80e19d4:	4313      	orrs	r3, r2
 80e19d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80e19d8:	687b      	ldr	r3, [r7, #4]
 80e19da:	69ba      	ldr	r2, [r7, #24]
 80e19dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80e19de:	683b      	ldr	r3, [r7, #0]
 80e19e0:	685b      	ldr	r3, [r3, #4]
 80e19e2:	f003 0303 	and.w	r3, r3, #3
 80e19e6:	2b03      	cmp	r3, #3
 80e19e8:	d017      	beq.n	80e1a1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80e19ea:	687b      	ldr	r3, [r7, #4]
 80e19ec:	68db      	ldr	r3, [r3, #12]
 80e19ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80e19f0:	69fb      	ldr	r3, [r7, #28]
 80e19f2:	005b      	lsls	r3, r3, #1
 80e19f4:	2203      	movs	r2, #3
 80e19f6:	fa02 f303 	lsl.w	r3, r2, r3
 80e19fa:	43db      	mvns	r3, r3
 80e19fc:	69ba      	ldr	r2, [r7, #24]
 80e19fe:	4013      	ands	r3, r2
 80e1a00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80e1a02:	683b      	ldr	r3, [r7, #0]
 80e1a04:	689a      	ldr	r2, [r3, #8]
 80e1a06:	69fb      	ldr	r3, [r7, #28]
 80e1a08:	005b      	lsls	r3, r3, #1
 80e1a0a:	fa02 f303 	lsl.w	r3, r2, r3
 80e1a0e:	69ba      	ldr	r2, [r7, #24]
 80e1a10:	4313      	orrs	r3, r2
 80e1a12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80e1a14:	687b      	ldr	r3, [r7, #4]
 80e1a16:	69ba      	ldr	r2, [r7, #24]
 80e1a18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80e1a1a:	683b      	ldr	r3, [r7, #0]
 80e1a1c:	685b      	ldr	r3, [r3, #4]
 80e1a1e:	f003 0303 	and.w	r3, r3, #3
 80e1a22:	2b02      	cmp	r3, #2
 80e1a24:	d123      	bne.n	80e1a6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80e1a26:	69fb      	ldr	r3, [r7, #28]
 80e1a28:	08da      	lsrs	r2, r3, #3
 80e1a2a:	687b      	ldr	r3, [r7, #4]
 80e1a2c:	3208      	adds	r2, #8
 80e1a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80e1a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80e1a34:	69fb      	ldr	r3, [r7, #28]
 80e1a36:	f003 0307 	and.w	r3, r3, #7
 80e1a3a:	009b      	lsls	r3, r3, #2
 80e1a3c:	220f      	movs	r2, #15
 80e1a3e:	fa02 f303 	lsl.w	r3, r2, r3
 80e1a42:	43db      	mvns	r3, r3
 80e1a44:	69ba      	ldr	r2, [r7, #24]
 80e1a46:	4013      	ands	r3, r2
 80e1a48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80e1a4a:	683b      	ldr	r3, [r7, #0]
 80e1a4c:	691a      	ldr	r2, [r3, #16]
 80e1a4e:	69fb      	ldr	r3, [r7, #28]
 80e1a50:	f003 0307 	and.w	r3, r3, #7
 80e1a54:	009b      	lsls	r3, r3, #2
 80e1a56:	fa02 f303 	lsl.w	r3, r2, r3
 80e1a5a:	69ba      	ldr	r2, [r7, #24]
 80e1a5c:	4313      	orrs	r3, r2
 80e1a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80e1a60:	69fb      	ldr	r3, [r7, #28]
 80e1a62:	08da      	lsrs	r2, r3, #3
 80e1a64:	687b      	ldr	r3, [r7, #4]
 80e1a66:	3208      	adds	r2, #8
 80e1a68:	69b9      	ldr	r1, [r7, #24]
 80e1a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80e1a6e:	687b      	ldr	r3, [r7, #4]
 80e1a70:	681b      	ldr	r3, [r3, #0]
 80e1a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80e1a74:	69fb      	ldr	r3, [r7, #28]
 80e1a76:	005b      	lsls	r3, r3, #1
 80e1a78:	2203      	movs	r2, #3
 80e1a7a:	fa02 f303 	lsl.w	r3, r2, r3
 80e1a7e:	43db      	mvns	r3, r3
 80e1a80:	69ba      	ldr	r2, [r7, #24]
 80e1a82:	4013      	ands	r3, r2
 80e1a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80e1a86:	683b      	ldr	r3, [r7, #0]
 80e1a88:	685b      	ldr	r3, [r3, #4]
 80e1a8a:	f003 0203 	and.w	r2, r3, #3
 80e1a8e:	69fb      	ldr	r3, [r7, #28]
 80e1a90:	005b      	lsls	r3, r3, #1
 80e1a92:	fa02 f303 	lsl.w	r3, r2, r3
 80e1a96:	69ba      	ldr	r2, [r7, #24]
 80e1a98:	4313      	orrs	r3, r2
 80e1a9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80e1a9c:	687b      	ldr	r3, [r7, #4]
 80e1a9e:	69ba      	ldr	r2, [r7, #24]
 80e1aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80e1aa2:	683b      	ldr	r3, [r7, #0]
 80e1aa4:	685b      	ldr	r3, [r3, #4]
 80e1aa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80e1aaa:	2b00      	cmp	r3, #0
 80e1aac:	f000 80d8 	beq.w	80e1c60 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80e1ab0:	4b2c      	ldr	r3, [pc, #176]	; (80e1b64 <HAL_GPIO_Init+0x22c>)
 80e1ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e1ab6:	4a2b      	ldr	r2, [pc, #172]	; (80e1b64 <HAL_GPIO_Init+0x22c>)
 80e1ab8:	f043 0302 	orr.w	r3, r3, #2
 80e1abc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80e1ac0:	4b28      	ldr	r3, [pc, #160]	; (80e1b64 <HAL_GPIO_Init+0x22c>)
 80e1ac2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80e1ac6:	f003 0302 	and.w	r3, r3, #2
 80e1aca:	60fb      	str	r3, [r7, #12]
 80e1acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80e1ace:	4a26      	ldr	r2, [pc, #152]	; (80e1b68 <HAL_GPIO_Init+0x230>)
 80e1ad0:	69fb      	ldr	r3, [r7, #28]
 80e1ad2:	089b      	lsrs	r3, r3, #2
 80e1ad4:	3302      	adds	r3, #2
 80e1ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80e1ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80e1adc:	69fb      	ldr	r3, [r7, #28]
 80e1ade:	f003 0303 	and.w	r3, r3, #3
 80e1ae2:	009b      	lsls	r3, r3, #2
 80e1ae4:	220f      	movs	r2, #15
 80e1ae6:	fa02 f303 	lsl.w	r3, r2, r3
 80e1aea:	43db      	mvns	r3, r3
 80e1aec:	69ba      	ldr	r2, [r7, #24]
 80e1aee:	4013      	ands	r3, r2
 80e1af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80e1af2:	687b      	ldr	r3, [r7, #4]
 80e1af4:	4a1d      	ldr	r2, [pc, #116]	; (80e1b6c <HAL_GPIO_Init+0x234>)
 80e1af6:	4293      	cmp	r3, r2
 80e1af8:	d04a      	beq.n	80e1b90 <HAL_GPIO_Init+0x258>
 80e1afa:	687b      	ldr	r3, [r7, #4]
 80e1afc:	4a1c      	ldr	r2, [pc, #112]	; (80e1b70 <HAL_GPIO_Init+0x238>)
 80e1afe:	4293      	cmp	r3, r2
 80e1b00:	d02b      	beq.n	80e1b5a <HAL_GPIO_Init+0x222>
 80e1b02:	687b      	ldr	r3, [r7, #4]
 80e1b04:	4a1b      	ldr	r2, [pc, #108]	; (80e1b74 <HAL_GPIO_Init+0x23c>)
 80e1b06:	4293      	cmp	r3, r2
 80e1b08:	d025      	beq.n	80e1b56 <HAL_GPIO_Init+0x21e>
 80e1b0a:	687b      	ldr	r3, [r7, #4]
 80e1b0c:	4a1a      	ldr	r2, [pc, #104]	; (80e1b78 <HAL_GPIO_Init+0x240>)
 80e1b0e:	4293      	cmp	r3, r2
 80e1b10:	d01f      	beq.n	80e1b52 <HAL_GPIO_Init+0x21a>
 80e1b12:	687b      	ldr	r3, [r7, #4]
 80e1b14:	4a19      	ldr	r2, [pc, #100]	; (80e1b7c <HAL_GPIO_Init+0x244>)
 80e1b16:	4293      	cmp	r3, r2
 80e1b18:	d019      	beq.n	80e1b4e <HAL_GPIO_Init+0x216>
 80e1b1a:	687b      	ldr	r3, [r7, #4]
 80e1b1c:	4a18      	ldr	r2, [pc, #96]	; (80e1b80 <HAL_GPIO_Init+0x248>)
 80e1b1e:	4293      	cmp	r3, r2
 80e1b20:	d013      	beq.n	80e1b4a <HAL_GPIO_Init+0x212>
 80e1b22:	687b      	ldr	r3, [r7, #4]
 80e1b24:	4a17      	ldr	r2, [pc, #92]	; (80e1b84 <HAL_GPIO_Init+0x24c>)
 80e1b26:	4293      	cmp	r3, r2
 80e1b28:	d00d      	beq.n	80e1b46 <HAL_GPIO_Init+0x20e>
 80e1b2a:	687b      	ldr	r3, [r7, #4]
 80e1b2c:	4a16      	ldr	r2, [pc, #88]	; (80e1b88 <HAL_GPIO_Init+0x250>)
 80e1b2e:	4293      	cmp	r3, r2
 80e1b30:	d007      	beq.n	80e1b42 <HAL_GPIO_Init+0x20a>
 80e1b32:	687b      	ldr	r3, [r7, #4]
 80e1b34:	4a15      	ldr	r2, [pc, #84]	; (80e1b8c <HAL_GPIO_Init+0x254>)
 80e1b36:	4293      	cmp	r3, r2
 80e1b38:	d101      	bne.n	80e1b3e <HAL_GPIO_Init+0x206>
 80e1b3a:	2309      	movs	r3, #9
 80e1b3c:	e029      	b.n	80e1b92 <HAL_GPIO_Init+0x25a>
 80e1b3e:	230a      	movs	r3, #10
 80e1b40:	e027      	b.n	80e1b92 <HAL_GPIO_Init+0x25a>
 80e1b42:	2307      	movs	r3, #7
 80e1b44:	e025      	b.n	80e1b92 <HAL_GPIO_Init+0x25a>
 80e1b46:	2306      	movs	r3, #6
 80e1b48:	e023      	b.n	80e1b92 <HAL_GPIO_Init+0x25a>
 80e1b4a:	2305      	movs	r3, #5
 80e1b4c:	e021      	b.n	80e1b92 <HAL_GPIO_Init+0x25a>
 80e1b4e:	2304      	movs	r3, #4
 80e1b50:	e01f      	b.n	80e1b92 <HAL_GPIO_Init+0x25a>
 80e1b52:	2303      	movs	r3, #3
 80e1b54:	e01d      	b.n	80e1b92 <HAL_GPIO_Init+0x25a>
 80e1b56:	2302      	movs	r3, #2
 80e1b58:	e01b      	b.n	80e1b92 <HAL_GPIO_Init+0x25a>
 80e1b5a:	2301      	movs	r3, #1
 80e1b5c:	e019      	b.n	80e1b92 <HAL_GPIO_Init+0x25a>
 80e1b5e:	bf00      	nop
 80e1b60:	58000080 	.word	0x58000080
 80e1b64:	58024400 	.word	0x58024400
 80e1b68:	58000400 	.word	0x58000400
 80e1b6c:	58020000 	.word	0x58020000
 80e1b70:	58020400 	.word	0x58020400
 80e1b74:	58020800 	.word	0x58020800
 80e1b78:	58020c00 	.word	0x58020c00
 80e1b7c:	58021000 	.word	0x58021000
 80e1b80:	58021400 	.word	0x58021400
 80e1b84:	58021800 	.word	0x58021800
 80e1b88:	58021c00 	.word	0x58021c00
 80e1b8c:	58022400 	.word	0x58022400
 80e1b90:	2300      	movs	r3, #0
 80e1b92:	69fa      	ldr	r2, [r7, #28]
 80e1b94:	f002 0203 	and.w	r2, r2, #3
 80e1b98:	0092      	lsls	r2, r2, #2
 80e1b9a:	4093      	lsls	r3, r2
 80e1b9c:	69ba      	ldr	r2, [r7, #24]
 80e1b9e:	4313      	orrs	r3, r2
 80e1ba0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80e1ba2:	4938      	ldr	r1, [pc, #224]	; (80e1c84 <HAL_GPIO_Init+0x34c>)
 80e1ba4:	69fb      	ldr	r3, [r7, #28]
 80e1ba6:	089b      	lsrs	r3, r3, #2
 80e1ba8:	3302      	adds	r3, #2
 80e1baa:	69ba      	ldr	r2, [r7, #24]
 80e1bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80e1bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80e1bb4:	681b      	ldr	r3, [r3, #0]
 80e1bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e1bb8:	693b      	ldr	r3, [r7, #16]
 80e1bba:	43db      	mvns	r3, r3
 80e1bbc:	69ba      	ldr	r2, [r7, #24]
 80e1bbe:	4013      	ands	r3, r2
 80e1bc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80e1bc2:	683b      	ldr	r3, [r7, #0]
 80e1bc4:	685b      	ldr	r3, [r3, #4]
 80e1bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80e1bca:	2b00      	cmp	r3, #0
 80e1bcc:	d003      	beq.n	80e1bd6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80e1bce:	69ba      	ldr	r2, [r7, #24]
 80e1bd0:	693b      	ldr	r3, [r7, #16]
 80e1bd2:	4313      	orrs	r3, r2
 80e1bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80e1bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80e1bda:	69bb      	ldr	r3, [r7, #24]
 80e1bdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80e1bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80e1be2:	685b      	ldr	r3, [r3, #4]
 80e1be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e1be6:	693b      	ldr	r3, [r7, #16]
 80e1be8:	43db      	mvns	r3, r3
 80e1bea:	69ba      	ldr	r2, [r7, #24]
 80e1bec:	4013      	ands	r3, r2
 80e1bee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80e1bf0:	683b      	ldr	r3, [r7, #0]
 80e1bf2:	685b      	ldr	r3, [r3, #4]
 80e1bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e1bf8:	2b00      	cmp	r3, #0
 80e1bfa:	d003      	beq.n	80e1c04 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80e1bfc:	69ba      	ldr	r2, [r7, #24]
 80e1bfe:	693b      	ldr	r3, [r7, #16]
 80e1c00:	4313      	orrs	r3, r2
 80e1c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80e1c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80e1c08:	69bb      	ldr	r3, [r7, #24]
 80e1c0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80e1c0c:	697b      	ldr	r3, [r7, #20]
 80e1c0e:	685b      	ldr	r3, [r3, #4]
 80e1c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e1c12:	693b      	ldr	r3, [r7, #16]
 80e1c14:	43db      	mvns	r3, r3
 80e1c16:	69ba      	ldr	r2, [r7, #24]
 80e1c18:	4013      	ands	r3, r2
 80e1c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80e1c1c:	683b      	ldr	r3, [r7, #0]
 80e1c1e:	685b      	ldr	r3, [r3, #4]
 80e1c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e1c24:	2b00      	cmp	r3, #0
 80e1c26:	d003      	beq.n	80e1c30 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80e1c28:	69ba      	ldr	r2, [r7, #24]
 80e1c2a:	693b      	ldr	r3, [r7, #16]
 80e1c2c:	4313      	orrs	r3, r2
 80e1c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80e1c30:	697b      	ldr	r3, [r7, #20]
 80e1c32:	69ba      	ldr	r2, [r7, #24]
 80e1c34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80e1c36:	697b      	ldr	r3, [r7, #20]
 80e1c38:	681b      	ldr	r3, [r3, #0]
 80e1c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80e1c3c:	693b      	ldr	r3, [r7, #16]
 80e1c3e:	43db      	mvns	r3, r3
 80e1c40:	69ba      	ldr	r2, [r7, #24]
 80e1c42:	4013      	ands	r3, r2
 80e1c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80e1c46:	683b      	ldr	r3, [r7, #0]
 80e1c48:	685b      	ldr	r3, [r3, #4]
 80e1c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80e1c4e:	2b00      	cmp	r3, #0
 80e1c50:	d003      	beq.n	80e1c5a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80e1c52:	69ba      	ldr	r2, [r7, #24]
 80e1c54:	693b      	ldr	r3, [r7, #16]
 80e1c56:	4313      	orrs	r3, r2
 80e1c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80e1c5a:	697b      	ldr	r3, [r7, #20]
 80e1c5c:	69ba      	ldr	r2, [r7, #24]
 80e1c5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80e1c60:	69fb      	ldr	r3, [r7, #28]
 80e1c62:	3301      	adds	r3, #1
 80e1c64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80e1c66:	683b      	ldr	r3, [r7, #0]
 80e1c68:	681a      	ldr	r2, [r3, #0]
 80e1c6a:	69fb      	ldr	r3, [r7, #28]
 80e1c6c:	fa22 f303 	lsr.w	r3, r2, r3
 80e1c70:	2b00      	cmp	r3, #0
 80e1c72:	f47f ae6b 	bne.w	80e194c <HAL_GPIO_Init+0x14>
  }
}
 80e1c76:	bf00      	nop
 80e1c78:	bf00      	nop
 80e1c7a:	3724      	adds	r7, #36	; 0x24
 80e1c7c:	46bd      	mov	sp, r7
 80e1c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1c82:	4770      	bx	lr
 80e1c84:	58000400 	.word	0x58000400

080e1c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80e1c88:	b480      	push	{r7}
 80e1c8a:	b083      	sub	sp, #12
 80e1c8c:	af00      	add	r7, sp, #0
 80e1c8e:	6078      	str	r0, [r7, #4]
 80e1c90:	460b      	mov	r3, r1
 80e1c92:	807b      	strh	r3, [r7, #2]
 80e1c94:	4613      	mov	r3, r2
 80e1c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80e1c98:	787b      	ldrb	r3, [r7, #1]
 80e1c9a:	2b00      	cmp	r3, #0
 80e1c9c:	d003      	beq.n	80e1ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80e1c9e:	887a      	ldrh	r2, [r7, #2]
 80e1ca0:	687b      	ldr	r3, [r7, #4]
 80e1ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80e1ca4:	e003      	b.n	80e1cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80e1ca6:	887b      	ldrh	r3, [r7, #2]
 80e1ca8:	041a      	lsls	r2, r3, #16
 80e1caa:	687b      	ldr	r3, [r7, #4]
 80e1cac:	619a      	str	r2, [r3, #24]
}
 80e1cae:	bf00      	nop
 80e1cb0:	370c      	adds	r7, #12
 80e1cb2:	46bd      	mov	sp, r7
 80e1cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e1cb8:	4770      	bx	lr
	...

080e1cbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80e1cbc:	b580      	push	{r7, lr}
 80e1cbe:	b084      	sub	sp, #16
 80e1cc0:	af00      	add	r7, sp, #0
 80e1cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80e1cc4:	4b19      	ldr	r3, [pc, #100]	; (80e1d2c <HAL_PWREx_ConfigSupply+0x70>)
 80e1cc6:	68db      	ldr	r3, [r3, #12]
 80e1cc8:	f003 0304 	and.w	r3, r3, #4
 80e1ccc:	2b04      	cmp	r3, #4
 80e1cce:	d00a      	beq.n	80e1ce6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80e1cd0:	4b16      	ldr	r3, [pc, #88]	; (80e1d2c <HAL_PWREx_ConfigSupply+0x70>)
 80e1cd2:	68db      	ldr	r3, [r3, #12]
 80e1cd4:	f003 0307 	and.w	r3, r3, #7
 80e1cd8:	687a      	ldr	r2, [r7, #4]
 80e1cda:	429a      	cmp	r2, r3
 80e1cdc:	d001      	beq.n	80e1ce2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80e1cde:	2301      	movs	r3, #1
 80e1ce0:	e01f      	b.n	80e1d22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80e1ce2:	2300      	movs	r3, #0
 80e1ce4:	e01d      	b.n	80e1d22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80e1ce6:	4b11      	ldr	r3, [pc, #68]	; (80e1d2c <HAL_PWREx_ConfigSupply+0x70>)
 80e1ce8:	68db      	ldr	r3, [r3, #12]
 80e1cea:	f023 0207 	bic.w	r2, r3, #7
 80e1cee:	490f      	ldr	r1, [pc, #60]	; (80e1d2c <HAL_PWREx_ConfigSupply+0x70>)
 80e1cf0:	687b      	ldr	r3, [r7, #4]
 80e1cf2:	4313      	orrs	r3, r2
 80e1cf4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80e1cf6:	f7fe fedf 	bl	80e0ab8 <HAL_GetTick>
 80e1cfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80e1cfc:	e009      	b.n	80e1d12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80e1cfe:	f7fe fedb 	bl	80e0ab8 <HAL_GetTick>
 80e1d02:	4602      	mov	r2, r0
 80e1d04:	68fb      	ldr	r3, [r7, #12]
 80e1d06:	1ad3      	subs	r3, r2, r3
 80e1d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80e1d0c:	d901      	bls.n	80e1d12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80e1d0e:	2301      	movs	r3, #1
 80e1d10:	e007      	b.n	80e1d22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80e1d12:	4b06      	ldr	r3, [pc, #24]	; (80e1d2c <HAL_PWREx_ConfigSupply+0x70>)
 80e1d14:	685b      	ldr	r3, [r3, #4]
 80e1d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e1d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e1d1e:	d1ee      	bne.n	80e1cfe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80e1d20:	2300      	movs	r3, #0
}
 80e1d22:	4618      	mov	r0, r3
 80e1d24:	3710      	adds	r7, #16
 80e1d26:	46bd      	mov	sp, r7
 80e1d28:	bd80      	pop	{r7, pc}
 80e1d2a:	bf00      	nop
 80e1d2c:	58024800 	.word	0x58024800

080e1d30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80e1d30:	b580      	push	{r7, lr}
 80e1d32:	b08c      	sub	sp, #48	; 0x30
 80e1d34:	af00      	add	r7, sp, #0
 80e1d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80e1d38:	687b      	ldr	r3, [r7, #4]
 80e1d3a:	2b00      	cmp	r3, #0
 80e1d3c:	d101      	bne.n	80e1d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80e1d3e:	2301      	movs	r3, #1
 80e1d40:	e39d      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80e1d42:	687b      	ldr	r3, [r7, #4]
 80e1d44:	681b      	ldr	r3, [r3, #0]
 80e1d46:	f003 0301 	and.w	r3, r3, #1
 80e1d4a:	2b00      	cmp	r3, #0
 80e1d4c:	f000 8087 	beq.w	80e1e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e1d50:	4b88      	ldr	r3, [pc, #544]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1d52:	691b      	ldr	r3, [r3, #16]
 80e1d54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e1d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e1d5a:	4b86      	ldr	r3, [pc, #536]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e1d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80e1d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80e1d62:	2b10      	cmp	r3, #16
 80e1d64:	d007      	beq.n	80e1d76 <HAL_RCC_OscConfig+0x46>
 80e1d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80e1d68:	2b18      	cmp	r3, #24
 80e1d6a:	d110      	bne.n	80e1d8e <HAL_RCC_OscConfig+0x5e>
 80e1d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80e1d6e:	f003 0303 	and.w	r3, r3, #3
 80e1d72:	2b02      	cmp	r3, #2
 80e1d74:	d10b      	bne.n	80e1d8e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80e1d76:	4b7f      	ldr	r3, [pc, #508]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1d78:	681b      	ldr	r3, [r3, #0]
 80e1d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e1d7e:	2b00      	cmp	r3, #0
 80e1d80:	d06c      	beq.n	80e1e5c <HAL_RCC_OscConfig+0x12c>
 80e1d82:	687b      	ldr	r3, [r7, #4]
 80e1d84:	685b      	ldr	r3, [r3, #4]
 80e1d86:	2b00      	cmp	r3, #0
 80e1d88:	d168      	bne.n	80e1e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80e1d8a:	2301      	movs	r3, #1
 80e1d8c:	e377      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80e1d8e:	687b      	ldr	r3, [r7, #4]
 80e1d90:	685b      	ldr	r3, [r3, #4]
 80e1d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e1d96:	d106      	bne.n	80e1da6 <HAL_RCC_OscConfig+0x76>
 80e1d98:	4b76      	ldr	r3, [pc, #472]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1d9a:	681b      	ldr	r3, [r3, #0]
 80e1d9c:	4a75      	ldr	r2, [pc, #468]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e1da2:	6013      	str	r3, [r2, #0]
 80e1da4:	e02e      	b.n	80e1e04 <HAL_RCC_OscConfig+0xd4>
 80e1da6:	687b      	ldr	r3, [r7, #4]
 80e1da8:	685b      	ldr	r3, [r3, #4]
 80e1daa:	2b00      	cmp	r3, #0
 80e1dac:	d10c      	bne.n	80e1dc8 <HAL_RCC_OscConfig+0x98>
 80e1dae:	4b71      	ldr	r3, [pc, #452]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1db0:	681b      	ldr	r3, [r3, #0]
 80e1db2:	4a70      	ldr	r2, [pc, #448]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e1db8:	6013      	str	r3, [r2, #0]
 80e1dba:	4b6e      	ldr	r3, [pc, #440]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1dbc:	681b      	ldr	r3, [r3, #0]
 80e1dbe:	4a6d      	ldr	r2, [pc, #436]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e1dc4:	6013      	str	r3, [r2, #0]
 80e1dc6:	e01d      	b.n	80e1e04 <HAL_RCC_OscConfig+0xd4>
 80e1dc8:	687b      	ldr	r3, [r7, #4]
 80e1dca:	685b      	ldr	r3, [r3, #4]
 80e1dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e1dd0:	d10c      	bne.n	80e1dec <HAL_RCC_OscConfig+0xbc>
 80e1dd2:	4b68      	ldr	r3, [pc, #416]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1dd4:	681b      	ldr	r3, [r3, #0]
 80e1dd6:	4a67      	ldr	r2, [pc, #412]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80e1ddc:	6013      	str	r3, [r2, #0]
 80e1dde:	4b65      	ldr	r3, [pc, #404]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1de0:	681b      	ldr	r3, [r3, #0]
 80e1de2:	4a64      	ldr	r2, [pc, #400]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e1de8:	6013      	str	r3, [r2, #0]
 80e1dea:	e00b      	b.n	80e1e04 <HAL_RCC_OscConfig+0xd4>
 80e1dec:	4b61      	ldr	r3, [pc, #388]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1dee:	681b      	ldr	r3, [r3, #0]
 80e1df0:	4a60      	ldr	r2, [pc, #384]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e1df6:	6013      	str	r3, [r2, #0]
 80e1df8:	4b5e      	ldr	r3, [pc, #376]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1dfa:	681b      	ldr	r3, [r3, #0]
 80e1dfc:	4a5d      	ldr	r2, [pc, #372]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80e1e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80e1e04:	687b      	ldr	r3, [r7, #4]
 80e1e06:	685b      	ldr	r3, [r3, #4]
 80e1e08:	2b00      	cmp	r3, #0
 80e1e0a:	d013      	beq.n	80e1e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e1e0c:	f7fe fe54 	bl	80e0ab8 <HAL_GetTick>
 80e1e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e1e12:	e008      	b.n	80e1e26 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80e1e14:	f7fe fe50 	bl	80e0ab8 <HAL_GetTick>
 80e1e18:	4602      	mov	r2, r0
 80e1e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1e1c:	1ad3      	subs	r3, r2, r3
 80e1e1e:	2b64      	cmp	r3, #100	; 0x64
 80e1e20:	d901      	bls.n	80e1e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80e1e22:	2303      	movs	r3, #3
 80e1e24:	e32b      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e1e26:	4b53      	ldr	r3, [pc, #332]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1e28:	681b      	ldr	r3, [r3, #0]
 80e1e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e1e2e:	2b00      	cmp	r3, #0
 80e1e30:	d0f0      	beq.n	80e1e14 <HAL_RCC_OscConfig+0xe4>
 80e1e32:	e014      	b.n	80e1e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e1e34:	f7fe fe40 	bl	80e0ab8 <HAL_GetTick>
 80e1e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80e1e3a:	e008      	b.n	80e1e4e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80e1e3c:	f7fe fe3c 	bl	80e0ab8 <HAL_GetTick>
 80e1e40:	4602      	mov	r2, r0
 80e1e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1e44:	1ad3      	subs	r3, r2, r3
 80e1e46:	2b64      	cmp	r3, #100	; 0x64
 80e1e48:	d901      	bls.n	80e1e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80e1e4a:	2303      	movs	r3, #3
 80e1e4c:	e317      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80e1e4e:	4b49      	ldr	r3, [pc, #292]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1e50:	681b      	ldr	r3, [r3, #0]
 80e1e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e1e56:	2b00      	cmp	r3, #0
 80e1e58:	d1f0      	bne.n	80e1e3c <HAL_RCC_OscConfig+0x10c>
 80e1e5a:	e000      	b.n	80e1e5e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80e1e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80e1e5e:	687b      	ldr	r3, [r7, #4]
 80e1e60:	681b      	ldr	r3, [r3, #0]
 80e1e62:	f003 0302 	and.w	r3, r3, #2
 80e1e66:	2b00      	cmp	r3, #0
 80e1e68:	f000 808c 	beq.w	80e1f84 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e1e6c:	4b41      	ldr	r3, [pc, #260]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1e6e:	691b      	ldr	r3, [r3, #16]
 80e1e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e1e74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e1e76:	4b3f      	ldr	r3, [pc, #252]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e1e7a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80e1e7c:	6a3b      	ldr	r3, [r7, #32]
 80e1e7e:	2b00      	cmp	r3, #0
 80e1e80:	d007      	beq.n	80e1e92 <HAL_RCC_OscConfig+0x162>
 80e1e82:	6a3b      	ldr	r3, [r7, #32]
 80e1e84:	2b18      	cmp	r3, #24
 80e1e86:	d137      	bne.n	80e1ef8 <HAL_RCC_OscConfig+0x1c8>
 80e1e88:	69fb      	ldr	r3, [r7, #28]
 80e1e8a:	f003 0303 	and.w	r3, r3, #3
 80e1e8e:	2b00      	cmp	r3, #0
 80e1e90:	d132      	bne.n	80e1ef8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80e1e92:	4b38      	ldr	r3, [pc, #224]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1e94:	681b      	ldr	r3, [r3, #0]
 80e1e96:	f003 0304 	and.w	r3, r3, #4
 80e1e9a:	2b00      	cmp	r3, #0
 80e1e9c:	d005      	beq.n	80e1eaa <HAL_RCC_OscConfig+0x17a>
 80e1e9e:	687b      	ldr	r3, [r7, #4]
 80e1ea0:	68db      	ldr	r3, [r3, #12]
 80e1ea2:	2b00      	cmp	r3, #0
 80e1ea4:	d101      	bne.n	80e1eaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80e1ea6:	2301      	movs	r3, #1
 80e1ea8:	e2e9      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80e1eaa:	4b32      	ldr	r3, [pc, #200]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1eac:	681b      	ldr	r3, [r3, #0]
 80e1eae:	f023 0219 	bic.w	r2, r3, #25
 80e1eb2:	687b      	ldr	r3, [r7, #4]
 80e1eb4:	68db      	ldr	r3, [r3, #12]
 80e1eb6:	492f      	ldr	r1, [pc, #188]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1eb8:	4313      	orrs	r3, r2
 80e1eba:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80e1ebc:	f7fe fdfc 	bl	80e0ab8 <HAL_GetTick>
 80e1ec0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e1ec2:	e008      	b.n	80e1ed6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e1ec4:	f7fe fdf8 	bl	80e0ab8 <HAL_GetTick>
 80e1ec8:	4602      	mov	r2, r0
 80e1eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1ecc:	1ad3      	subs	r3, r2, r3
 80e1ece:	2b02      	cmp	r3, #2
 80e1ed0:	d901      	bls.n	80e1ed6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80e1ed2:	2303      	movs	r3, #3
 80e1ed4:	e2d3      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e1ed6:	4b27      	ldr	r3, [pc, #156]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1ed8:	681b      	ldr	r3, [r3, #0]
 80e1eda:	f003 0304 	and.w	r3, r3, #4
 80e1ede:	2b00      	cmp	r3, #0
 80e1ee0:	d0f0      	beq.n	80e1ec4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80e1ee2:	4b24      	ldr	r3, [pc, #144]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1ee4:	685b      	ldr	r3, [r3, #4]
 80e1ee6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80e1eea:	687b      	ldr	r3, [r7, #4]
 80e1eec:	691b      	ldr	r3, [r3, #16]
 80e1eee:	061b      	lsls	r3, r3, #24
 80e1ef0:	4920      	ldr	r1, [pc, #128]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1ef2:	4313      	orrs	r3, r2
 80e1ef4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80e1ef6:	e045      	b.n	80e1f84 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80e1ef8:	687b      	ldr	r3, [r7, #4]
 80e1efa:	68db      	ldr	r3, [r3, #12]
 80e1efc:	2b00      	cmp	r3, #0
 80e1efe:	d026      	beq.n	80e1f4e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80e1f00:	4b1c      	ldr	r3, [pc, #112]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1f02:	681b      	ldr	r3, [r3, #0]
 80e1f04:	f023 0219 	bic.w	r2, r3, #25
 80e1f08:	687b      	ldr	r3, [r7, #4]
 80e1f0a:	68db      	ldr	r3, [r3, #12]
 80e1f0c:	4919      	ldr	r1, [pc, #100]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1f0e:	4313      	orrs	r3, r2
 80e1f10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e1f12:	f7fe fdd1 	bl	80e0ab8 <HAL_GetTick>
 80e1f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e1f18:	e008      	b.n	80e1f2c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e1f1a:	f7fe fdcd 	bl	80e0ab8 <HAL_GetTick>
 80e1f1e:	4602      	mov	r2, r0
 80e1f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1f22:	1ad3      	subs	r3, r2, r3
 80e1f24:	2b02      	cmp	r3, #2
 80e1f26:	d901      	bls.n	80e1f2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80e1f28:	2303      	movs	r3, #3
 80e1f2a:	e2a8      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e1f2c:	4b11      	ldr	r3, [pc, #68]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1f2e:	681b      	ldr	r3, [r3, #0]
 80e1f30:	f003 0304 	and.w	r3, r3, #4
 80e1f34:	2b00      	cmp	r3, #0
 80e1f36:	d0f0      	beq.n	80e1f1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80e1f38:	4b0e      	ldr	r3, [pc, #56]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1f3a:	685b      	ldr	r3, [r3, #4]
 80e1f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80e1f40:	687b      	ldr	r3, [r7, #4]
 80e1f42:	691b      	ldr	r3, [r3, #16]
 80e1f44:	061b      	lsls	r3, r3, #24
 80e1f46:	490b      	ldr	r1, [pc, #44]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1f48:	4313      	orrs	r3, r2
 80e1f4a:	604b      	str	r3, [r1, #4]
 80e1f4c:	e01a      	b.n	80e1f84 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80e1f4e:	4b09      	ldr	r3, [pc, #36]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1f50:	681b      	ldr	r3, [r3, #0]
 80e1f52:	4a08      	ldr	r2, [pc, #32]	; (80e1f74 <HAL_RCC_OscConfig+0x244>)
 80e1f54:	f023 0301 	bic.w	r3, r3, #1
 80e1f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e1f5a:	f7fe fdad 	bl	80e0ab8 <HAL_GetTick>
 80e1f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80e1f60:	e00a      	b.n	80e1f78 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80e1f62:	f7fe fda9 	bl	80e0ab8 <HAL_GetTick>
 80e1f66:	4602      	mov	r2, r0
 80e1f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e1f6a:	1ad3      	subs	r3, r2, r3
 80e1f6c:	2b02      	cmp	r3, #2
 80e1f6e:	d903      	bls.n	80e1f78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80e1f70:	2303      	movs	r3, #3
 80e1f72:	e284      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
 80e1f74:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80e1f78:	4b96      	ldr	r3, [pc, #600]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e1f7a:	681b      	ldr	r3, [r3, #0]
 80e1f7c:	f003 0304 	and.w	r3, r3, #4
 80e1f80:	2b00      	cmp	r3, #0
 80e1f82:	d1ee      	bne.n	80e1f62 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80e1f84:	687b      	ldr	r3, [r7, #4]
 80e1f86:	681b      	ldr	r3, [r3, #0]
 80e1f88:	f003 0310 	and.w	r3, r3, #16
 80e1f8c:	2b00      	cmp	r3, #0
 80e1f8e:	d06a      	beq.n	80e2066 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80e1f90:	4b90      	ldr	r3, [pc, #576]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e1f92:	691b      	ldr	r3, [r3, #16]
 80e1f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e1f98:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80e1f9a:	4b8e      	ldr	r3, [pc, #568]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e1f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e1f9e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80e1fa0:	69bb      	ldr	r3, [r7, #24]
 80e1fa2:	2b08      	cmp	r3, #8
 80e1fa4:	d007      	beq.n	80e1fb6 <HAL_RCC_OscConfig+0x286>
 80e1fa6:	69bb      	ldr	r3, [r7, #24]
 80e1fa8:	2b18      	cmp	r3, #24
 80e1faa:	d11b      	bne.n	80e1fe4 <HAL_RCC_OscConfig+0x2b4>
 80e1fac:	697b      	ldr	r3, [r7, #20]
 80e1fae:	f003 0303 	and.w	r3, r3, #3
 80e1fb2:	2b01      	cmp	r3, #1
 80e1fb4:	d116      	bne.n	80e1fe4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80e1fb6:	4b87      	ldr	r3, [pc, #540]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e1fb8:	681b      	ldr	r3, [r3, #0]
 80e1fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e1fbe:	2b00      	cmp	r3, #0
 80e1fc0:	d005      	beq.n	80e1fce <HAL_RCC_OscConfig+0x29e>
 80e1fc2:	687b      	ldr	r3, [r7, #4]
 80e1fc4:	69db      	ldr	r3, [r3, #28]
 80e1fc6:	2b80      	cmp	r3, #128	; 0x80
 80e1fc8:	d001      	beq.n	80e1fce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80e1fca:	2301      	movs	r3, #1
 80e1fcc:	e257      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80e1fce:	4b81      	ldr	r3, [pc, #516]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e1fd0:	68db      	ldr	r3, [r3, #12]
 80e1fd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80e1fd6:	687b      	ldr	r3, [r7, #4]
 80e1fd8:	6a1b      	ldr	r3, [r3, #32]
 80e1fda:	061b      	lsls	r3, r3, #24
 80e1fdc:	497d      	ldr	r1, [pc, #500]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e1fde:	4313      	orrs	r3, r2
 80e1fe0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80e1fe2:	e040      	b.n	80e2066 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80e1fe4:	687b      	ldr	r3, [r7, #4]
 80e1fe6:	69db      	ldr	r3, [r3, #28]
 80e1fe8:	2b00      	cmp	r3, #0
 80e1fea:	d023      	beq.n	80e2034 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80e1fec:	4b79      	ldr	r3, [pc, #484]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e1fee:	681b      	ldr	r3, [r3, #0]
 80e1ff0:	4a78      	ldr	r2, [pc, #480]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e1ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80e1ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e1ff8:	f7fe fd5e 	bl	80e0ab8 <HAL_GetTick>
 80e1ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e1ffe:	e008      	b.n	80e2012 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80e2000:	f7fe fd5a 	bl	80e0ab8 <HAL_GetTick>
 80e2004:	4602      	mov	r2, r0
 80e2006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2008:	1ad3      	subs	r3, r2, r3
 80e200a:	2b02      	cmp	r3, #2
 80e200c:	d901      	bls.n	80e2012 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80e200e:	2303      	movs	r3, #3
 80e2010:	e235      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e2012:	4b70      	ldr	r3, [pc, #448]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e2014:	681b      	ldr	r3, [r3, #0]
 80e2016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e201a:	2b00      	cmp	r3, #0
 80e201c:	d0f0      	beq.n	80e2000 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80e201e:	4b6d      	ldr	r3, [pc, #436]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e2020:	68db      	ldr	r3, [r3, #12]
 80e2022:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80e2026:	687b      	ldr	r3, [r7, #4]
 80e2028:	6a1b      	ldr	r3, [r3, #32]
 80e202a:	061b      	lsls	r3, r3, #24
 80e202c:	4969      	ldr	r1, [pc, #420]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e202e:	4313      	orrs	r3, r2
 80e2030:	60cb      	str	r3, [r1, #12]
 80e2032:	e018      	b.n	80e2066 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80e2034:	4b67      	ldr	r3, [pc, #412]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e2036:	681b      	ldr	r3, [r3, #0]
 80e2038:	4a66      	ldr	r2, [pc, #408]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e203a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80e203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2040:	f7fe fd3a 	bl	80e0ab8 <HAL_GetTick>
 80e2044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80e2046:	e008      	b.n	80e205a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80e2048:	f7fe fd36 	bl	80e0ab8 <HAL_GetTick>
 80e204c:	4602      	mov	r2, r0
 80e204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2050:	1ad3      	subs	r3, r2, r3
 80e2052:	2b02      	cmp	r3, #2
 80e2054:	d901      	bls.n	80e205a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80e2056:	2303      	movs	r3, #3
 80e2058:	e211      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80e205a:	4b5e      	ldr	r3, [pc, #376]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e205c:	681b      	ldr	r3, [r3, #0]
 80e205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2062:	2b00      	cmp	r3, #0
 80e2064:	d1f0      	bne.n	80e2048 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80e2066:	687b      	ldr	r3, [r7, #4]
 80e2068:	681b      	ldr	r3, [r3, #0]
 80e206a:	f003 0308 	and.w	r3, r3, #8
 80e206e:	2b00      	cmp	r3, #0
 80e2070:	d036      	beq.n	80e20e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80e2072:	687b      	ldr	r3, [r7, #4]
 80e2074:	695b      	ldr	r3, [r3, #20]
 80e2076:	2b00      	cmp	r3, #0
 80e2078:	d019      	beq.n	80e20ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80e207a:	4b56      	ldr	r3, [pc, #344]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e207c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e207e:	4a55      	ldr	r2, [pc, #340]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e2080:	f043 0301 	orr.w	r3, r3, #1
 80e2084:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e2086:	f7fe fd17 	bl	80e0ab8 <HAL_GetTick>
 80e208a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80e208c:	e008      	b.n	80e20a0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80e208e:	f7fe fd13 	bl	80e0ab8 <HAL_GetTick>
 80e2092:	4602      	mov	r2, r0
 80e2094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2096:	1ad3      	subs	r3, r2, r3
 80e2098:	2b02      	cmp	r3, #2
 80e209a:	d901      	bls.n	80e20a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80e209c:	2303      	movs	r3, #3
 80e209e:	e1ee      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80e20a0:	4b4c      	ldr	r3, [pc, #304]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e20a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e20a4:	f003 0302 	and.w	r3, r3, #2
 80e20a8:	2b00      	cmp	r3, #0
 80e20aa:	d0f0      	beq.n	80e208e <HAL_RCC_OscConfig+0x35e>
 80e20ac:	e018      	b.n	80e20e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80e20ae:	4b49      	ldr	r3, [pc, #292]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e20b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e20b2:	4a48      	ldr	r2, [pc, #288]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e20b4:	f023 0301 	bic.w	r3, r3, #1
 80e20b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e20ba:	f7fe fcfd 	bl	80e0ab8 <HAL_GetTick>
 80e20be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80e20c0:	e008      	b.n	80e20d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80e20c2:	f7fe fcf9 	bl	80e0ab8 <HAL_GetTick>
 80e20c6:	4602      	mov	r2, r0
 80e20c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e20ca:	1ad3      	subs	r3, r2, r3
 80e20cc:	2b02      	cmp	r3, #2
 80e20ce:	d901      	bls.n	80e20d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80e20d0:	2303      	movs	r3, #3
 80e20d2:	e1d4      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80e20d4:	4b3f      	ldr	r3, [pc, #252]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e20d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e20d8:	f003 0302 	and.w	r3, r3, #2
 80e20dc:	2b00      	cmp	r3, #0
 80e20de:	d1f0      	bne.n	80e20c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80e20e0:	687b      	ldr	r3, [r7, #4]
 80e20e2:	681b      	ldr	r3, [r3, #0]
 80e20e4:	f003 0320 	and.w	r3, r3, #32
 80e20e8:	2b00      	cmp	r3, #0
 80e20ea:	d036      	beq.n	80e215a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80e20ec:	687b      	ldr	r3, [r7, #4]
 80e20ee:	699b      	ldr	r3, [r3, #24]
 80e20f0:	2b00      	cmp	r3, #0
 80e20f2:	d019      	beq.n	80e2128 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80e20f4:	4b37      	ldr	r3, [pc, #220]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e20f6:	681b      	ldr	r3, [r3, #0]
 80e20f8:	4a36      	ldr	r2, [pc, #216]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e20fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80e20fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80e2100:	f7fe fcda 	bl	80e0ab8 <HAL_GetTick>
 80e2104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80e2106:	e008      	b.n	80e211a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80e2108:	f7fe fcd6 	bl	80e0ab8 <HAL_GetTick>
 80e210c:	4602      	mov	r2, r0
 80e210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2110:	1ad3      	subs	r3, r2, r3
 80e2112:	2b02      	cmp	r3, #2
 80e2114:	d901      	bls.n	80e211a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80e2116:	2303      	movs	r3, #3
 80e2118:	e1b1      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80e211a:	4b2e      	ldr	r3, [pc, #184]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e211c:	681b      	ldr	r3, [r3, #0]
 80e211e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e2122:	2b00      	cmp	r3, #0
 80e2124:	d0f0      	beq.n	80e2108 <HAL_RCC_OscConfig+0x3d8>
 80e2126:	e018      	b.n	80e215a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80e2128:	4b2a      	ldr	r3, [pc, #168]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e212a:	681b      	ldr	r3, [r3, #0]
 80e212c:	4a29      	ldr	r2, [pc, #164]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e212e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80e2132:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80e2134:	f7fe fcc0 	bl	80e0ab8 <HAL_GetTick>
 80e2138:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80e213a:	e008      	b.n	80e214e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80e213c:	f7fe fcbc 	bl	80e0ab8 <HAL_GetTick>
 80e2140:	4602      	mov	r2, r0
 80e2142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2144:	1ad3      	subs	r3, r2, r3
 80e2146:	2b02      	cmp	r3, #2
 80e2148:	d901      	bls.n	80e214e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80e214a:	2303      	movs	r3, #3
 80e214c:	e197      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80e214e:	4b21      	ldr	r3, [pc, #132]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e2150:	681b      	ldr	r3, [r3, #0]
 80e2152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e2156:	2b00      	cmp	r3, #0
 80e2158:	d1f0      	bne.n	80e213c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80e215a:	687b      	ldr	r3, [r7, #4]
 80e215c:	681b      	ldr	r3, [r3, #0]
 80e215e:	f003 0304 	and.w	r3, r3, #4
 80e2162:	2b00      	cmp	r3, #0
 80e2164:	f000 8086 	beq.w	80e2274 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80e2168:	4b1b      	ldr	r3, [pc, #108]	; (80e21d8 <HAL_RCC_OscConfig+0x4a8>)
 80e216a:	681b      	ldr	r3, [r3, #0]
 80e216c:	4a1a      	ldr	r2, [pc, #104]	; (80e21d8 <HAL_RCC_OscConfig+0x4a8>)
 80e216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e2172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80e2174:	f7fe fca0 	bl	80e0ab8 <HAL_GetTick>
 80e2178:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e217a:	e008      	b.n	80e218e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80e217c:	f7fe fc9c 	bl	80e0ab8 <HAL_GetTick>
 80e2180:	4602      	mov	r2, r0
 80e2182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e2184:	1ad3      	subs	r3, r2, r3
 80e2186:	2b64      	cmp	r3, #100	; 0x64
 80e2188:	d901      	bls.n	80e218e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80e218a:	2303      	movs	r3, #3
 80e218c:	e177      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e218e:	4b12      	ldr	r3, [pc, #72]	; (80e21d8 <HAL_RCC_OscConfig+0x4a8>)
 80e2190:	681b      	ldr	r3, [r3, #0]
 80e2192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2196:	2b00      	cmp	r3, #0
 80e2198:	d0f0      	beq.n	80e217c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80e219a:	687b      	ldr	r3, [r7, #4]
 80e219c:	689b      	ldr	r3, [r3, #8]
 80e219e:	2b01      	cmp	r3, #1
 80e21a0:	d106      	bne.n	80e21b0 <HAL_RCC_OscConfig+0x480>
 80e21a2:	4b0c      	ldr	r3, [pc, #48]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e21a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e21a6:	4a0b      	ldr	r2, [pc, #44]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e21a8:	f043 0301 	orr.w	r3, r3, #1
 80e21ac:	6713      	str	r3, [r2, #112]	; 0x70
 80e21ae:	e032      	b.n	80e2216 <HAL_RCC_OscConfig+0x4e6>
 80e21b0:	687b      	ldr	r3, [r7, #4]
 80e21b2:	689b      	ldr	r3, [r3, #8]
 80e21b4:	2b00      	cmp	r3, #0
 80e21b6:	d111      	bne.n	80e21dc <HAL_RCC_OscConfig+0x4ac>
 80e21b8:	4b06      	ldr	r3, [pc, #24]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e21ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e21bc:	4a05      	ldr	r2, [pc, #20]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e21be:	f023 0301 	bic.w	r3, r3, #1
 80e21c2:	6713      	str	r3, [r2, #112]	; 0x70
 80e21c4:	4b03      	ldr	r3, [pc, #12]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e21c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e21c8:	4a02      	ldr	r2, [pc, #8]	; (80e21d4 <HAL_RCC_OscConfig+0x4a4>)
 80e21ca:	f023 0304 	bic.w	r3, r3, #4
 80e21ce:	6713      	str	r3, [r2, #112]	; 0x70
 80e21d0:	e021      	b.n	80e2216 <HAL_RCC_OscConfig+0x4e6>
 80e21d2:	bf00      	nop
 80e21d4:	58024400 	.word	0x58024400
 80e21d8:	58024800 	.word	0x58024800
 80e21dc:	687b      	ldr	r3, [r7, #4]
 80e21de:	689b      	ldr	r3, [r3, #8]
 80e21e0:	2b05      	cmp	r3, #5
 80e21e2:	d10c      	bne.n	80e21fe <HAL_RCC_OscConfig+0x4ce>
 80e21e4:	4b83      	ldr	r3, [pc, #524]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e21e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e21e8:	4a82      	ldr	r2, [pc, #520]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e21ea:	f043 0304 	orr.w	r3, r3, #4
 80e21ee:	6713      	str	r3, [r2, #112]	; 0x70
 80e21f0:	4b80      	ldr	r3, [pc, #512]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e21f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e21f4:	4a7f      	ldr	r2, [pc, #508]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e21f6:	f043 0301 	orr.w	r3, r3, #1
 80e21fa:	6713      	str	r3, [r2, #112]	; 0x70
 80e21fc:	e00b      	b.n	80e2216 <HAL_RCC_OscConfig+0x4e6>
 80e21fe:	4b7d      	ldr	r3, [pc, #500]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2202:	4a7c      	ldr	r2, [pc, #496]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2204:	f023 0301 	bic.w	r3, r3, #1
 80e2208:	6713      	str	r3, [r2, #112]	; 0x70
 80e220a:	4b7a      	ldr	r3, [pc, #488]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e220e:	4a79      	ldr	r2, [pc, #484]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2210:	f023 0304 	bic.w	r3, r3, #4
 80e2214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80e2216:	687b      	ldr	r3, [r7, #4]
 80e2218:	689b      	ldr	r3, [r3, #8]
 80e221a:	2b00      	cmp	r3, #0
 80e221c:	d015      	beq.n	80e224a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e221e:	f7fe fc4b 	bl	80e0ab8 <HAL_GetTick>
 80e2222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e2224:	e00a      	b.n	80e223c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80e2226:	f7fe fc47 	bl	80e0ab8 <HAL_GetTick>
 80e222a:	4602      	mov	r2, r0
 80e222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e222e:	1ad3      	subs	r3, r2, r3
 80e2230:	f241 3288 	movw	r2, #5000	; 0x1388
 80e2234:	4293      	cmp	r3, r2
 80e2236:	d901      	bls.n	80e223c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80e2238:	2303      	movs	r3, #3
 80e223a:	e120      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e223c:	4b6d      	ldr	r3, [pc, #436]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e2240:	f003 0302 	and.w	r3, r3, #2
 80e2244:	2b00      	cmp	r3, #0
 80e2246:	d0ee      	beq.n	80e2226 <HAL_RCC_OscConfig+0x4f6>
 80e2248:	e014      	b.n	80e2274 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e224a:	f7fe fc35 	bl	80e0ab8 <HAL_GetTick>
 80e224e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80e2250:	e00a      	b.n	80e2268 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80e2252:	f7fe fc31 	bl	80e0ab8 <HAL_GetTick>
 80e2256:	4602      	mov	r2, r0
 80e2258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e225a:	1ad3      	subs	r3, r2, r3
 80e225c:	f241 3288 	movw	r2, #5000	; 0x1388
 80e2260:	4293      	cmp	r3, r2
 80e2262:	d901      	bls.n	80e2268 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80e2264:	2303      	movs	r3, #3
 80e2266:	e10a      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80e2268:	4b62      	ldr	r3, [pc, #392]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e226c:	f003 0302 	and.w	r3, r3, #2
 80e2270:	2b00      	cmp	r3, #0
 80e2272:	d1ee      	bne.n	80e2252 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80e2274:	687b      	ldr	r3, [r7, #4]
 80e2276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e2278:	2b00      	cmp	r3, #0
 80e227a:	f000 80ff 	beq.w	80e247c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80e227e:	4b5d      	ldr	r3, [pc, #372]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2280:	691b      	ldr	r3, [r3, #16]
 80e2282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e2286:	2b18      	cmp	r3, #24
 80e2288:	f000 80ba 	beq.w	80e2400 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80e228c:	687b      	ldr	r3, [r7, #4]
 80e228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e2290:	2b02      	cmp	r3, #2
 80e2292:	f040 8095 	bne.w	80e23c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80e2296:	4b57      	ldr	r3, [pc, #348]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2298:	681b      	ldr	r3, [r3, #0]
 80e229a:	4a56      	ldr	r2, [pc, #344]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e229c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80e22a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e22a2:	f7fe fc09 	bl	80e0ab8 <HAL_GetTick>
 80e22a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e22a8:	e008      	b.n	80e22bc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e22aa:	f7fe fc05 	bl	80e0ab8 <HAL_GetTick>
 80e22ae:	4602      	mov	r2, r0
 80e22b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e22b2:	1ad3      	subs	r3, r2, r3
 80e22b4:	2b02      	cmp	r3, #2
 80e22b6:	d901      	bls.n	80e22bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80e22b8:	2303      	movs	r3, #3
 80e22ba:	e0e0      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e22bc:	4b4d      	ldr	r3, [pc, #308]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e22be:	681b      	ldr	r3, [r3, #0]
 80e22c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e22c4:	2b00      	cmp	r3, #0
 80e22c6:	d1f0      	bne.n	80e22aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80e22c8:	4b4a      	ldr	r3, [pc, #296]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e22ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80e22cc:	4b4a      	ldr	r3, [pc, #296]	; (80e23f8 <HAL_RCC_OscConfig+0x6c8>)
 80e22ce:	4013      	ands	r3, r2
 80e22d0:	687a      	ldr	r2, [r7, #4]
 80e22d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80e22d4:	687a      	ldr	r2, [r7, #4]
 80e22d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80e22d8:	0112      	lsls	r2, r2, #4
 80e22da:	430a      	orrs	r2, r1
 80e22dc:	4945      	ldr	r1, [pc, #276]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e22de:	4313      	orrs	r3, r2
 80e22e0:	628b      	str	r3, [r1, #40]	; 0x28
 80e22e2:	687b      	ldr	r3, [r7, #4]
 80e22e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e22e6:	3b01      	subs	r3, #1
 80e22e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e22ec:	687b      	ldr	r3, [r7, #4]
 80e22ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e22f0:	3b01      	subs	r3, #1
 80e22f2:	025b      	lsls	r3, r3, #9
 80e22f4:	b29b      	uxth	r3, r3
 80e22f6:	431a      	orrs	r2, r3
 80e22f8:	687b      	ldr	r3, [r7, #4]
 80e22fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e22fc:	3b01      	subs	r3, #1
 80e22fe:	041b      	lsls	r3, r3, #16
 80e2300:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e2304:	431a      	orrs	r2, r3
 80e2306:	687b      	ldr	r3, [r7, #4]
 80e2308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e230a:	3b01      	subs	r3, #1
 80e230c:	061b      	lsls	r3, r3, #24
 80e230e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e2312:	4938      	ldr	r1, [pc, #224]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2314:	4313      	orrs	r3, r2
 80e2316:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80e2318:	4b36      	ldr	r3, [pc, #216]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e231c:	4a35      	ldr	r2, [pc, #212]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e231e:	f023 0301 	bic.w	r3, r3, #1
 80e2322:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80e2324:	4b33      	ldr	r3, [pc, #204]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80e2328:	4b34      	ldr	r3, [pc, #208]	; (80e23fc <HAL_RCC_OscConfig+0x6cc>)
 80e232a:	4013      	ands	r3, r2
 80e232c:	687a      	ldr	r2, [r7, #4]
 80e232e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80e2330:	00d2      	lsls	r2, r2, #3
 80e2332:	4930      	ldr	r1, [pc, #192]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2334:	4313      	orrs	r3, r2
 80e2336:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80e2338:	4b2e      	ldr	r3, [pc, #184]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e233c:	f023 020c 	bic.w	r2, r3, #12
 80e2340:	687b      	ldr	r3, [r7, #4]
 80e2342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80e2344:	492b      	ldr	r1, [pc, #172]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2346:	4313      	orrs	r3, r2
 80e2348:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80e234a:	4b2a      	ldr	r3, [pc, #168]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e234e:	f023 0202 	bic.w	r2, r3, #2
 80e2352:	687b      	ldr	r3, [r7, #4]
 80e2354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e2356:	4927      	ldr	r1, [pc, #156]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2358:	4313      	orrs	r3, r2
 80e235a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80e235c:	4b25      	ldr	r3, [pc, #148]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2360:	4a24      	ldr	r2, [pc, #144]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e2366:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2368:	4b22      	ldr	r3, [pc, #136]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e236c:	4a21      	ldr	r2, [pc, #132]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e236e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80e2374:	4b1f      	ldr	r3, [pc, #124]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2378:	4a1e      	ldr	r2, [pc, #120]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e237a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80e237e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80e2380:	4b1c      	ldr	r3, [pc, #112]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2384:	4a1b      	ldr	r2, [pc, #108]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2386:	f043 0301 	orr.w	r3, r3, #1
 80e238a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80e238c:	4b19      	ldr	r3, [pc, #100]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e238e:	681b      	ldr	r3, [r3, #0]
 80e2390:	4a18      	ldr	r2, [pc, #96]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e2392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80e2396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e2398:	f7fe fb8e 	bl	80e0ab8 <HAL_GetTick>
 80e239c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e239e:	e008      	b.n	80e23b2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e23a0:	f7fe fb8a 	bl	80e0ab8 <HAL_GetTick>
 80e23a4:	4602      	mov	r2, r0
 80e23a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e23a8:	1ad3      	subs	r3, r2, r3
 80e23aa:	2b02      	cmp	r3, #2
 80e23ac:	d901      	bls.n	80e23b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80e23ae:	2303      	movs	r3, #3
 80e23b0:	e065      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e23b2:	4b10      	ldr	r3, [pc, #64]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e23b4:	681b      	ldr	r3, [r3, #0]
 80e23b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e23ba:	2b00      	cmp	r3, #0
 80e23bc:	d0f0      	beq.n	80e23a0 <HAL_RCC_OscConfig+0x670>
 80e23be:	e05d      	b.n	80e247c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80e23c0:	4b0c      	ldr	r3, [pc, #48]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e23c2:	681b      	ldr	r3, [r3, #0]
 80e23c4:	4a0b      	ldr	r2, [pc, #44]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e23c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80e23ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e23cc:	f7fe fb74 	bl	80e0ab8 <HAL_GetTick>
 80e23d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e23d2:	e008      	b.n	80e23e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80e23d4:	f7fe fb70 	bl	80e0ab8 <HAL_GetTick>
 80e23d8:	4602      	mov	r2, r0
 80e23da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80e23dc:	1ad3      	subs	r3, r2, r3
 80e23de:	2b02      	cmp	r3, #2
 80e23e0:	d901      	bls.n	80e23e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80e23e2:	2303      	movs	r3, #3
 80e23e4:	e04b      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80e23e6:	4b03      	ldr	r3, [pc, #12]	; (80e23f4 <HAL_RCC_OscConfig+0x6c4>)
 80e23e8:	681b      	ldr	r3, [r3, #0]
 80e23ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e23ee:	2b00      	cmp	r3, #0
 80e23f0:	d1f0      	bne.n	80e23d4 <HAL_RCC_OscConfig+0x6a4>
 80e23f2:	e043      	b.n	80e247c <HAL_RCC_OscConfig+0x74c>
 80e23f4:	58024400 	.word	0x58024400
 80e23f8:	fffffc0c 	.word	0xfffffc0c
 80e23fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80e2400:	4b21      	ldr	r3, [pc, #132]	; (80e2488 <HAL_RCC_OscConfig+0x758>)
 80e2402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e2404:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80e2406:	4b20      	ldr	r3, [pc, #128]	; (80e2488 <HAL_RCC_OscConfig+0x758>)
 80e2408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e240a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80e240c:	687b      	ldr	r3, [r7, #4]
 80e240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80e2410:	2b01      	cmp	r3, #1
 80e2412:	d031      	beq.n	80e2478 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80e2414:	693b      	ldr	r3, [r7, #16]
 80e2416:	f003 0203 	and.w	r2, r3, #3
 80e241a:	687b      	ldr	r3, [r7, #4]
 80e241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80e241e:	429a      	cmp	r2, r3
 80e2420:	d12a      	bne.n	80e2478 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80e2422:	693b      	ldr	r3, [r7, #16]
 80e2424:	091b      	lsrs	r3, r3, #4
 80e2426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80e242a:	687b      	ldr	r3, [r7, #4]
 80e242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80e242e:	429a      	cmp	r2, r3
 80e2430:	d122      	bne.n	80e2478 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80e2432:	68fb      	ldr	r3, [r7, #12]
 80e2434:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e2438:	687b      	ldr	r3, [r7, #4]
 80e243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e243c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80e243e:	429a      	cmp	r2, r3
 80e2440:	d11a      	bne.n	80e2478 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80e2442:	68fb      	ldr	r3, [r7, #12]
 80e2444:	0a5b      	lsrs	r3, r3, #9
 80e2446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e244a:	687b      	ldr	r3, [r7, #4]
 80e244c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e244e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80e2450:	429a      	cmp	r2, r3
 80e2452:	d111      	bne.n	80e2478 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80e2454:	68fb      	ldr	r3, [r7, #12]
 80e2456:	0c1b      	lsrs	r3, r3, #16
 80e2458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e245c:	687b      	ldr	r3, [r7, #4]
 80e245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80e2460:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80e2462:	429a      	cmp	r2, r3
 80e2464:	d108      	bne.n	80e2478 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80e2466:	68fb      	ldr	r3, [r7, #12]
 80e2468:	0e1b      	lsrs	r3, r3, #24
 80e246a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80e246e:	687b      	ldr	r3, [r7, #4]
 80e2470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80e2472:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80e2474:	429a      	cmp	r2, r3
 80e2476:	d001      	beq.n	80e247c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80e2478:	2301      	movs	r3, #1
 80e247a:	e000      	b.n	80e247e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80e247c:	2300      	movs	r3, #0
}
 80e247e:	4618      	mov	r0, r3
 80e2480:	3730      	adds	r7, #48	; 0x30
 80e2482:	46bd      	mov	sp, r7
 80e2484:	bd80      	pop	{r7, pc}
 80e2486:	bf00      	nop
 80e2488:	58024400 	.word	0x58024400

080e248c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80e248c:	b580      	push	{r7, lr}
 80e248e:	b086      	sub	sp, #24
 80e2490:	af00      	add	r7, sp, #0
 80e2492:	6078      	str	r0, [r7, #4]
 80e2494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80e2496:	687b      	ldr	r3, [r7, #4]
 80e2498:	2b00      	cmp	r3, #0
 80e249a:	d101      	bne.n	80e24a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80e249c:	2301      	movs	r3, #1
 80e249e:	e19c      	b.n	80e27da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80e24a0:	4b8a      	ldr	r3, [pc, #552]	; (80e26cc <HAL_RCC_ClockConfig+0x240>)
 80e24a2:	681b      	ldr	r3, [r3, #0]
 80e24a4:	f003 030f 	and.w	r3, r3, #15
 80e24a8:	683a      	ldr	r2, [r7, #0]
 80e24aa:	429a      	cmp	r2, r3
 80e24ac:	d910      	bls.n	80e24d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80e24ae:	4b87      	ldr	r3, [pc, #540]	; (80e26cc <HAL_RCC_ClockConfig+0x240>)
 80e24b0:	681b      	ldr	r3, [r3, #0]
 80e24b2:	f023 020f 	bic.w	r2, r3, #15
 80e24b6:	4985      	ldr	r1, [pc, #532]	; (80e26cc <HAL_RCC_ClockConfig+0x240>)
 80e24b8:	683b      	ldr	r3, [r7, #0]
 80e24ba:	4313      	orrs	r3, r2
 80e24bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80e24be:	4b83      	ldr	r3, [pc, #524]	; (80e26cc <HAL_RCC_ClockConfig+0x240>)
 80e24c0:	681b      	ldr	r3, [r3, #0]
 80e24c2:	f003 030f 	and.w	r3, r3, #15
 80e24c6:	683a      	ldr	r2, [r7, #0]
 80e24c8:	429a      	cmp	r2, r3
 80e24ca:	d001      	beq.n	80e24d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80e24cc:	2301      	movs	r3, #1
 80e24ce:	e184      	b.n	80e27da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80e24d0:	687b      	ldr	r3, [r7, #4]
 80e24d2:	681b      	ldr	r3, [r3, #0]
 80e24d4:	f003 0304 	and.w	r3, r3, #4
 80e24d8:	2b00      	cmp	r3, #0
 80e24da:	d010      	beq.n	80e24fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80e24dc:	687b      	ldr	r3, [r7, #4]
 80e24de:	691a      	ldr	r2, [r3, #16]
 80e24e0:	4b7b      	ldr	r3, [pc, #492]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e24e2:	699b      	ldr	r3, [r3, #24]
 80e24e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e24e8:	429a      	cmp	r2, r3
 80e24ea:	d908      	bls.n	80e24fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80e24ec:	4b78      	ldr	r3, [pc, #480]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e24ee:	699b      	ldr	r3, [r3, #24]
 80e24f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e24f4:	687b      	ldr	r3, [r7, #4]
 80e24f6:	691b      	ldr	r3, [r3, #16]
 80e24f8:	4975      	ldr	r1, [pc, #468]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e24fa:	4313      	orrs	r3, r2
 80e24fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80e24fe:	687b      	ldr	r3, [r7, #4]
 80e2500:	681b      	ldr	r3, [r3, #0]
 80e2502:	f003 0308 	and.w	r3, r3, #8
 80e2506:	2b00      	cmp	r3, #0
 80e2508:	d010      	beq.n	80e252c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80e250a:	687b      	ldr	r3, [r7, #4]
 80e250c:	695a      	ldr	r2, [r3, #20]
 80e250e:	4b70      	ldr	r3, [pc, #448]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e2510:	69db      	ldr	r3, [r3, #28]
 80e2512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e2516:	429a      	cmp	r2, r3
 80e2518:	d908      	bls.n	80e252c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80e251a:	4b6d      	ldr	r3, [pc, #436]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e251c:	69db      	ldr	r3, [r3, #28]
 80e251e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e2522:	687b      	ldr	r3, [r7, #4]
 80e2524:	695b      	ldr	r3, [r3, #20]
 80e2526:	496a      	ldr	r1, [pc, #424]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e2528:	4313      	orrs	r3, r2
 80e252a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80e252c:	687b      	ldr	r3, [r7, #4]
 80e252e:	681b      	ldr	r3, [r3, #0]
 80e2530:	f003 0310 	and.w	r3, r3, #16
 80e2534:	2b00      	cmp	r3, #0
 80e2536:	d010      	beq.n	80e255a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80e2538:	687b      	ldr	r3, [r7, #4]
 80e253a:	699a      	ldr	r2, [r3, #24]
 80e253c:	4b64      	ldr	r3, [pc, #400]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e253e:	69db      	ldr	r3, [r3, #28]
 80e2540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80e2544:	429a      	cmp	r2, r3
 80e2546:	d908      	bls.n	80e255a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80e2548:	4b61      	ldr	r3, [pc, #388]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e254a:	69db      	ldr	r3, [r3, #28]
 80e254c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80e2550:	687b      	ldr	r3, [r7, #4]
 80e2552:	699b      	ldr	r3, [r3, #24]
 80e2554:	495e      	ldr	r1, [pc, #376]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e2556:	4313      	orrs	r3, r2
 80e2558:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80e255a:	687b      	ldr	r3, [r7, #4]
 80e255c:	681b      	ldr	r3, [r3, #0]
 80e255e:	f003 0320 	and.w	r3, r3, #32
 80e2562:	2b00      	cmp	r3, #0
 80e2564:	d010      	beq.n	80e2588 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80e2566:	687b      	ldr	r3, [r7, #4]
 80e2568:	69da      	ldr	r2, [r3, #28]
 80e256a:	4b59      	ldr	r3, [pc, #356]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e256c:	6a1b      	ldr	r3, [r3, #32]
 80e256e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e2572:	429a      	cmp	r2, r3
 80e2574:	d908      	bls.n	80e2588 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80e2576:	4b56      	ldr	r3, [pc, #344]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e2578:	6a1b      	ldr	r3, [r3, #32]
 80e257a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e257e:	687b      	ldr	r3, [r7, #4]
 80e2580:	69db      	ldr	r3, [r3, #28]
 80e2582:	4953      	ldr	r1, [pc, #332]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e2584:	4313      	orrs	r3, r2
 80e2586:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80e2588:	687b      	ldr	r3, [r7, #4]
 80e258a:	681b      	ldr	r3, [r3, #0]
 80e258c:	f003 0302 	and.w	r3, r3, #2
 80e2590:	2b00      	cmp	r3, #0
 80e2592:	d010      	beq.n	80e25b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80e2594:	687b      	ldr	r3, [r7, #4]
 80e2596:	68da      	ldr	r2, [r3, #12]
 80e2598:	4b4d      	ldr	r3, [pc, #308]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e259a:	699b      	ldr	r3, [r3, #24]
 80e259c:	f003 030f 	and.w	r3, r3, #15
 80e25a0:	429a      	cmp	r2, r3
 80e25a2:	d908      	bls.n	80e25b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80e25a4:	4b4a      	ldr	r3, [pc, #296]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e25a6:	699b      	ldr	r3, [r3, #24]
 80e25a8:	f023 020f 	bic.w	r2, r3, #15
 80e25ac:	687b      	ldr	r3, [r7, #4]
 80e25ae:	68db      	ldr	r3, [r3, #12]
 80e25b0:	4947      	ldr	r1, [pc, #284]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e25b2:	4313      	orrs	r3, r2
 80e25b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80e25b6:	687b      	ldr	r3, [r7, #4]
 80e25b8:	681b      	ldr	r3, [r3, #0]
 80e25ba:	f003 0301 	and.w	r3, r3, #1
 80e25be:	2b00      	cmp	r3, #0
 80e25c0:	d055      	beq.n	80e266e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80e25c2:	4b43      	ldr	r3, [pc, #268]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e25c4:	699b      	ldr	r3, [r3, #24]
 80e25c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80e25ca:	687b      	ldr	r3, [r7, #4]
 80e25cc:	689b      	ldr	r3, [r3, #8]
 80e25ce:	4940      	ldr	r1, [pc, #256]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e25d0:	4313      	orrs	r3, r2
 80e25d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80e25d4:	687b      	ldr	r3, [r7, #4]
 80e25d6:	685b      	ldr	r3, [r3, #4]
 80e25d8:	2b02      	cmp	r3, #2
 80e25da:	d107      	bne.n	80e25ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80e25dc:	4b3c      	ldr	r3, [pc, #240]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e25de:	681b      	ldr	r3, [r3, #0]
 80e25e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e25e4:	2b00      	cmp	r3, #0
 80e25e6:	d121      	bne.n	80e262c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e25e8:	2301      	movs	r3, #1
 80e25ea:	e0f6      	b.n	80e27da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80e25ec:	687b      	ldr	r3, [r7, #4]
 80e25ee:	685b      	ldr	r3, [r3, #4]
 80e25f0:	2b03      	cmp	r3, #3
 80e25f2:	d107      	bne.n	80e2604 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80e25f4:	4b36      	ldr	r3, [pc, #216]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e25f6:	681b      	ldr	r3, [r3, #0]
 80e25f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e25fc:	2b00      	cmp	r3, #0
 80e25fe:	d115      	bne.n	80e262c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e2600:	2301      	movs	r3, #1
 80e2602:	e0ea      	b.n	80e27da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80e2604:	687b      	ldr	r3, [r7, #4]
 80e2606:	685b      	ldr	r3, [r3, #4]
 80e2608:	2b01      	cmp	r3, #1
 80e260a:	d107      	bne.n	80e261c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80e260c:	4b30      	ldr	r3, [pc, #192]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e260e:	681b      	ldr	r3, [r3, #0]
 80e2610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2614:	2b00      	cmp	r3, #0
 80e2616:	d109      	bne.n	80e262c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e2618:	2301      	movs	r3, #1
 80e261a:	e0de      	b.n	80e27da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80e261c:	4b2c      	ldr	r3, [pc, #176]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e261e:	681b      	ldr	r3, [r3, #0]
 80e2620:	f003 0304 	and.w	r3, r3, #4
 80e2624:	2b00      	cmp	r3, #0
 80e2626:	d101      	bne.n	80e262c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80e2628:	2301      	movs	r3, #1
 80e262a:	e0d6      	b.n	80e27da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80e262c:	4b28      	ldr	r3, [pc, #160]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e262e:	691b      	ldr	r3, [r3, #16]
 80e2630:	f023 0207 	bic.w	r2, r3, #7
 80e2634:	687b      	ldr	r3, [r7, #4]
 80e2636:	685b      	ldr	r3, [r3, #4]
 80e2638:	4925      	ldr	r1, [pc, #148]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e263a:	4313      	orrs	r3, r2
 80e263c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80e263e:	f7fe fa3b 	bl	80e0ab8 <HAL_GetTick>
 80e2642:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80e2644:	e00a      	b.n	80e265c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80e2646:	f7fe fa37 	bl	80e0ab8 <HAL_GetTick>
 80e264a:	4602      	mov	r2, r0
 80e264c:	697b      	ldr	r3, [r7, #20]
 80e264e:	1ad3      	subs	r3, r2, r3
 80e2650:	f241 3288 	movw	r2, #5000	; 0x1388
 80e2654:	4293      	cmp	r3, r2
 80e2656:	d901      	bls.n	80e265c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80e2658:	2303      	movs	r3, #3
 80e265a:	e0be      	b.n	80e27da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80e265c:	4b1c      	ldr	r3, [pc, #112]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e265e:	691b      	ldr	r3, [r3, #16]
 80e2660:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80e2664:	687b      	ldr	r3, [r7, #4]
 80e2666:	685b      	ldr	r3, [r3, #4]
 80e2668:	00db      	lsls	r3, r3, #3
 80e266a:	429a      	cmp	r2, r3
 80e266c:	d1eb      	bne.n	80e2646 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80e266e:	687b      	ldr	r3, [r7, #4]
 80e2670:	681b      	ldr	r3, [r3, #0]
 80e2672:	f003 0302 	and.w	r3, r3, #2
 80e2676:	2b00      	cmp	r3, #0
 80e2678:	d010      	beq.n	80e269c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80e267a:	687b      	ldr	r3, [r7, #4]
 80e267c:	68da      	ldr	r2, [r3, #12]
 80e267e:	4b14      	ldr	r3, [pc, #80]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e2680:	699b      	ldr	r3, [r3, #24]
 80e2682:	f003 030f 	and.w	r3, r3, #15
 80e2686:	429a      	cmp	r2, r3
 80e2688:	d208      	bcs.n	80e269c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80e268a:	4b11      	ldr	r3, [pc, #68]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e268c:	699b      	ldr	r3, [r3, #24]
 80e268e:	f023 020f 	bic.w	r2, r3, #15
 80e2692:	687b      	ldr	r3, [r7, #4]
 80e2694:	68db      	ldr	r3, [r3, #12]
 80e2696:	490e      	ldr	r1, [pc, #56]	; (80e26d0 <HAL_RCC_ClockConfig+0x244>)
 80e2698:	4313      	orrs	r3, r2
 80e269a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80e269c:	4b0b      	ldr	r3, [pc, #44]	; (80e26cc <HAL_RCC_ClockConfig+0x240>)
 80e269e:	681b      	ldr	r3, [r3, #0]
 80e26a0:	f003 030f 	and.w	r3, r3, #15
 80e26a4:	683a      	ldr	r2, [r7, #0]
 80e26a6:	429a      	cmp	r2, r3
 80e26a8:	d214      	bcs.n	80e26d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80e26aa:	4b08      	ldr	r3, [pc, #32]	; (80e26cc <HAL_RCC_ClockConfig+0x240>)
 80e26ac:	681b      	ldr	r3, [r3, #0]
 80e26ae:	f023 020f 	bic.w	r2, r3, #15
 80e26b2:	4906      	ldr	r1, [pc, #24]	; (80e26cc <HAL_RCC_ClockConfig+0x240>)
 80e26b4:	683b      	ldr	r3, [r7, #0]
 80e26b6:	4313      	orrs	r3, r2
 80e26b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80e26ba:	4b04      	ldr	r3, [pc, #16]	; (80e26cc <HAL_RCC_ClockConfig+0x240>)
 80e26bc:	681b      	ldr	r3, [r3, #0]
 80e26be:	f003 030f 	and.w	r3, r3, #15
 80e26c2:	683a      	ldr	r2, [r7, #0]
 80e26c4:	429a      	cmp	r2, r3
 80e26c6:	d005      	beq.n	80e26d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80e26c8:	2301      	movs	r3, #1
 80e26ca:	e086      	b.n	80e27da <HAL_RCC_ClockConfig+0x34e>
 80e26cc:	52002000 	.word	0x52002000
 80e26d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80e26d4:	687b      	ldr	r3, [r7, #4]
 80e26d6:	681b      	ldr	r3, [r3, #0]
 80e26d8:	f003 0304 	and.w	r3, r3, #4
 80e26dc:	2b00      	cmp	r3, #0
 80e26de:	d010      	beq.n	80e2702 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80e26e0:	687b      	ldr	r3, [r7, #4]
 80e26e2:	691a      	ldr	r2, [r3, #16]
 80e26e4:	4b3f      	ldr	r3, [pc, #252]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e26e6:	699b      	ldr	r3, [r3, #24]
 80e26e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e26ec:	429a      	cmp	r2, r3
 80e26ee:	d208      	bcs.n	80e2702 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80e26f0:	4b3c      	ldr	r3, [pc, #240]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e26f2:	699b      	ldr	r3, [r3, #24]
 80e26f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e26f8:	687b      	ldr	r3, [r7, #4]
 80e26fa:	691b      	ldr	r3, [r3, #16]
 80e26fc:	4939      	ldr	r1, [pc, #228]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e26fe:	4313      	orrs	r3, r2
 80e2700:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80e2702:	687b      	ldr	r3, [r7, #4]
 80e2704:	681b      	ldr	r3, [r3, #0]
 80e2706:	f003 0308 	and.w	r3, r3, #8
 80e270a:	2b00      	cmp	r3, #0
 80e270c:	d010      	beq.n	80e2730 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80e270e:	687b      	ldr	r3, [r7, #4]
 80e2710:	695a      	ldr	r2, [r3, #20]
 80e2712:	4b34      	ldr	r3, [pc, #208]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e2714:	69db      	ldr	r3, [r3, #28]
 80e2716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e271a:	429a      	cmp	r2, r3
 80e271c:	d208      	bcs.n	80e2730 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80e271e:	4b31      	ldr	r3, [pc, #196]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e2720:	69db      	ldr	r3, [r3, #28]
 80e2722:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e2726:	687b      	ldr	r3, [r7, #4]
 80e2728:	695b      	ldr	r3, [r3, #20]
 80e272a:	492e      	ldr	r1, [pc, #184]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e272c:	4313      	orrs	r3, r2
 80e272e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80e2730:	687b      	ldr	r3, [r7, #4]
 80e2732:	681b      	ldr	r3, [r3, #0]
 80e2734:	f003 0310 	and.w	r3, r3, #16
 80e2738:	2b00      	cmp	r3, #0
 80e273a:	d010      	beq.n	80e275e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80e273c:	687b      	ldr	r3, [r7, #4]
 80e273e:	699a      	ldr	r2, [r3, #24]
 80e2740:	4b28      	ldr	r3, [pc, #160]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e2742:	69db      	ldr	r3, [r3, #28]
 80e2744:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80e2748:	429a      	cmp	r2, r3
 80e274a:	d208      	bcs.n	80e275e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80e274c:	4b25      	ldr	r3, [pc, #148]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e274e:	69db      	ldr	r3, [r3, #28]
 80e2750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80e2754:	687b      	ldr	r3, [r7, #4]
 80e2756:	699b      	ldr	r3, [r3, #24]
 80e2758:	4922      	ldr	r1, [pc, #136]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e275a:	4313      	orrs	r3, r2
 80e275c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80e275e:	687b      	ldr	r3, [r7, #4]
 80e2760:	681b      	ldr	r3, [r3, #0]
 80e2762:	f003 0320 	and.w	r3, r3, #32
 80e2766:	2b00      	cmp	r3, #0
 80e2768:	d010      	beq.n	80e278c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80e276a:	687b      	ldr	r3, [r7, #4]
 80e276c:	69da      	ldr	r2, [r3, #28]
 80e276e:	4b1d      	ldr	r3, [pc, #116]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e2770:	6a1b      	ldr	r3, [r3, #32]
 80e2772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80e2776:	429a      	cmp	r2, r3
 80e2778:	d208      	bcs.n	80e278c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80e277a:	4b1a      	ldr	r3, [pc, #104]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e277c:	6a1b      	ldr	r3, [r3, #32]
 80e277e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80e2782:	687b      	ldr	r3, [r7, #4]
 80e2784:	69db      	ldr	r3, [r3, #28]
 80e2786:	4917      	ldr	r1, [pc, #92]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e2788:	4313      	orrs	r3, r2
 80e278a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80e278c:	f000 f834 	bl	80e27f8 <HAL_RCC_GetSysClockFreq>
 80e2790:	4602      	mov	r2, r0
 80e2792:	4b14      	ldr	r3, [pc, #80]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e2794:	699b      	ldr	r3, [r3, #24]
 80e2796:	0a1b      	lsrs	r3, r3, #8
 80e2798:	f003 030f 	and.w	r3, r3, #15
 80e279c:	4912      	ldr	r1, [pc, #72]	; (80e27e8 <HAL_RCC_ClockConfig+0x35c>)
 80e279e:	5ccb      	ldrb	r3, [r1, r3]
 80e27a0:	f003 031f 	and.w	r3, r3, #31
 80e27a4:	fa22 f303 	lsr.w	r3, r2, r3
 80e27a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80e27aa:	4b0e      	ldr	r3, [pc, #56]	; (80e27e4 <HAL_RCC_ClockConfig+0x358>)
 80e27ac:	699b      	ldr	r3, [r3, #24]
 80e27ae:	f003 030f 	and.w	r3, r3, #15
 80e27b2:	4a0d      	ldr	r2, [pc, #52]	; (80e27e8 <HAL_RCC_ClockConfig+0x35c>)
 80e27b4:	5cd3      	ldrb	r3, [r2, r3]
 80e27b6:	f003 031f 	and.w	r3, r3, #31
 80e27ba:	693a      	ldr	r2, [r7, #16]
 80e27bc:	fa22 f303 	lsr.w	r3, r2, r3
 80e27c0:	4a0a      	ldr	r2, [pc, #40]	; (80e27ec <HAL_RCC_ClockConfig+0x360>)
 80e27c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80e27c4:	4a0a      	ldr	r2, [pc, #40]	; (80e27f0 <HAL_RCC_ClockConfig+0x364>)
 80e27c6:	693b      	ldr	r3, [r7, #16]
 80e27c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80e27ca:	4b0a      	ldr	r3, [pc, #40]	; (80e27f4 <HAL_RCC_ClockConfig+0x368>)
 80e27cc:	681b      	ldr	r3, [r3, #0]
 80e27ce:	4618      	mov	r0, r3
 80e27d0:	f7fe f928 	bl	80e0a24 <HAL_InitTick>
 80e27d4:	4603      	mov	r3, r0
 80e27d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80e27d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80e27da:	4618      	mov	r0, r3
 80e27dc:	3718      	adds	r7, #24
 80e27de:	46bd      	mov	sp, r7
 80e27e0:	bd80      	pop	{r7, pc}
 80e27e2:	bf00      	nop
 80e27e4:	58024400 	.word	0x58024400
 80e27e8:	080e3c88 	.word	0x080e3c88
 80e27ec:	24000004 	.word	0x24000004
 80e27f0:	24000000 	.word	0x24000000
 80e27f4:	24000008 	.word	0x24000008

080e27f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80e27f8:	b480      	push	{r7}
 80e27fa:	b089      	sub	sp, #36	; 0x24
 80e27fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80e27fe:	4bb3      	ldr	r3, [pc, #716]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2800:	691b      	ldr	r3, [r3, #16]
 80e2802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80e2806:	2b18      	cmp	r3, #24
 80e2808:	f200 8155 	bhi.w	80e2ab6 <HAL_RCC_GetSysClockFreq+0x2be>
 80e280c:	a201      	add	r2, pc, #4	; (adr r2, 80e2814 <HAL_RCC_GetSysClockFreq+0x1c>)
 80e280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e2812:	bf00      	nop
 80e2814:	080e2879 	.word	0x080e2879
 80e2818:	080e2ab7 	.word	0x080e2ab7
 80e281c:	080e2ab7 	.word	0x080e2ab7
 80e2820:	080e2ab7 	.word	0x080e2ab7
 80e2824:	080e2ab7 	.word	0x080e2ab7
 80e2828:	080e2ab7 	.word	0x080e2ab7
 80e282c:	080e2ab7 	.word	0x080e2ab7
 80e2830:	080e2ab7 	.word	0x080e2ab7
 80e2834:	080e289f 	.word	0x080e289f
 80e2838:	080e2ab7 	.word	0x080e2ab7
 80e283c:	080e2ab7 	.word	0x080e2ab7
 80e2840:	080e2ab7 	.word	0x080e2ab7
 80e2844:	080e2ab7 	.word	0x080e2ab7
 80e2848:	080e2ab7 	.word	0x080e2ab7
 80e284c:	080e2ab7 	.word	0x080e2ab7
 80e2850:	080e2ab7 	.word	0x080e2ab7
 80e2854:	080e28a5 	.word	0x080e28a5
 80e2858:	080e2ab7 	.word	0x080e2ab7
 80e285c:	080e2ab7 	.word	0x080e2ab7
 80e2860:	080e2ab7 	.word	0x080e2ab7
 80e2864:	080e2ab7 	.word	0x080e2ab7
 80e2868:	080e2ab7 	.word	0x080e2ab7
 80e286c:	080e2ab7 	.word	0x080e2ab7
 80e2870:	080e2ab7 	.word	0x080e2ab7
 80e2874:	080e28ab 	.word	0x080e28ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80e2878:	4b94      	ldr	r3, [pc, #592]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e287a:	681b      	ldr	r3, [r3, #0]
 80e287c:	f003 0320 	and.w	r3, r3, #32
 80e2880:	2b00      	cmp	r3, #0
 80e2882:	d009      	beq.n	80e2898 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80e2884:	4b91      	ldr	r3, [pc, #580]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2886:	681b      	ldr	r3, [r3, #0]
 80e2888:	08db      	lsrs	r3, r3, #3
 80e288a:	f003 0303 	and.w	r3, r3, #3
 80e288e:	4a90      	ldr	r2, [pc, #576]	; (80e2ad0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e2890:	fa22 f303 	lsr.w	r3, r2, r3
 80e2894:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80e2896:	e111      	b.n	80e2abc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80e2898:	4b8d      	ldr	r3, [pc, #564]	; (80e2ad0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e289a:	61bb      	str	r3, [r7, #24]
    break;
 80e289c:	e10e      	b.n	80e2abc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80e289e:	4b8d      	ldr	r3, [pc, #564]	; (80e2ad4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80e28a0:	61bb      	str	r3, [r7, #24]
    break;
 80e28a2:	e10b      	b.n	80e2abc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80e28a4:	4b8c      	ldr	r3, [pc, #560]	; (80e2ad8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80e28a6:	61bb      	str	r3, [r7, #24]
    break;
 80e28a8:	e108      	b.n	80e2abc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80e28aa:	4b88      	ldr	r3, [pc, #544]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e28ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e28ae:	f003 0303 	and.w	r3, r3, #3
 80e28b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80e28b4:	4b85      	ldr	r3, [pc, #532]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e28b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e28b8:	091b      	lsrs	r3, r3, #4
 80e28ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80e28be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80e28c0:	4b82      	ldr	r3, [pc, #520]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e28c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e28c4:	f003 0301 	and.w	r3, r3, #1
 80e28c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80e28ca:	4b80      	ldr	r3, [pc, #512]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e28cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80e28ce:	08db      	lsrs	r3, r3, #3
 80e28d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80e28d4:	68fa      	ldr	r2, [r7, #12]
 80e28d6:	fb02 f303 	mul.w	r3, r2, r3
 80e28da:	ee07 3a90 	vmov	s15, r3
 80e28de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e28e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80e28e6:	693b      	ldr	r3, [r7, #16]
 80e28e8:	2b00      	cmp	r3, #0
 80e28ea:	f000 80e1 	beq.w	80e2ab0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80e28ee:	697b      	ldr	r3, [r7, #20]
 80e28f0:	2b02      	cmp	r3, #2
 80e28f2:	f000 8083 	beq.w	80e29fc <HAL_RCC_GetSysClockFreq+0x204>
 80e28f6:	697b      	ldr	r3, [r7, #20]
 80e28f8:	2b02      	cmp	r3, #2
 80e28fa:	f200 80a1 	bhi.w	80e2a40 <HAL_RCC_GetSysClockFreq+0x248>
 80e28fe:	697b      	ldr	r3, [r7, #20]
 80e2900:	2b00      	cmp	r3, #0
 80e2902:	d003      	beq.n	80e290c <HAL_RCC_GetSysClockFreq+0x114>
 80e2904:	697b      	ldr	r3, [r7, #20]
 80e2906:	2b01      	cmp	r3, #1
 80e2908:	d056      	beq.n	80e29b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80e290a:	e099      	b.n	80e2a40 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80e290c:	4b6f      	ldr	r3, [pc, #444]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e290e:	681b      	ldr	r3, [r3, #0]
 80e2910:	f003 0320 	and.w	r3, r3, #32
 80e2914:	2b00      	cmp	r3, #0
 80e2916:	d02d      	beq.n	80e2974 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80e2918:	4b6c      	ldr	r3, [pc, #432]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e291a:	681b      	ldr	r3, [r3, #0]
 80e291c:	08db      	lsrs	r3, r3, #3
 80e291e:	f003 0303 	and.w	r3, r3, #3
 80e2922:	4a6b      	ldr	r2, [pc, #428]	; (80e2ad0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80e2924:	fa22 f303 	lsr.w	r3, r2, r3
 80e2928:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e292a:	687b      	ldr	r3, [r7, #4]
 80e292c:	ee07 3a90 	vmov	s15, r3
 80e2930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2934:	693b      	ldr	r3, [r7, #16]
 80e2936:	ee07 3a90 	vmov	s15, r3
 80e293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e293e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e2942:	4b62      	ldr	r3, [pc, #392]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e294a:	ee07 3a90 	vmov	s15, r3
 80e294e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2952:	ed97 6a02 	vldr	s12, [r7, #8]
 80e2956:	eddf 5a61 	vldr	s11, [pc, #388]	; 80e2adc <HAL_RCC_GetSysClockFreq+0x2e4>
 80e295a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e295e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e2962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e2966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e296e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80e2972:	e087      	b.n	80e2a84 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e2974:	693b      	ldr	r3, [r7, #16]
 80e2976:	ee07 3a90 	vmov	s15, r3
 80e297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e297e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80e2ae0 <HAL_RCC_GetSysClockFreq+0x2e8>
 80e2982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e2986:	4b51      	ldr	r3, [pc, #324]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e298a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e298e:	ee07 3a90 	vmov	s15, r3
 80e2992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2996:	ed97 6a02 	vldr	s12, [r7, #8]
 80e299a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80e2adc <HAL_RCC_GetSysClockFreq+0x2e4>
 80e299e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e29a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e29a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e29aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e29ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e29b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e29b6:	e065      	b.n	80e2a84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e29b8:	693b      	ldr	r3, [r7, #16]
 80e29ba:	ee07 3a90 	vmov	s15, r3
 80e29be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e29c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80e2ae4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80e29c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e29ca:	4b40      	ldr	r3, [pc, #256]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e29cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e29ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e29d2:	ee07 3a90 	vmov	s15, r3
 80e29d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e29da:	ed97 6a02 	vldr	s12, [r7, #8]
 80e29de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80e2adc <HAL_RCC_GetSysClockFreq+0x2e4>
 80e29e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e29e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e29ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e29ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e29f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e29f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e29fa:	e043      	b.n	80e2a84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e29fc:	693b      	ldr	r3, [r7, #16]
 80e29fe:	ee07 3a90 	vmov	s15, r3
 80e2a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e2a06:	eddf 6a38 	vldr	s13, [pc, #224]	; 80e2ae8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80e2a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e2a0e:	4b2f      	ldr	r3, [pc, #188]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e2a16:	ee07 3a90 	vmov	s15, r3
 80e2a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 80e2a22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80e2adc <HAL_RCC_GetSysClockFreq+0x2e4>
 80e2a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e2a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e2a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e2a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e2a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e2a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e2a3e:	e021      	b.n	80e2a84 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80e2a40:	693b      	ldr	r3, [r7, #16]
 80e2a42:	ee07 3a90 	vmov	s15, r3
 80e2a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80e2a4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80e2ae4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80e2a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80e2a52:	4b1e      	ldr	r3, [pc, #120]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80e2a5a:	ee07 3a90 	vmov	s15, r3
 80e2a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80e2a62:	ed97 6a02 	vldr	s12, [r7, #8]
 80e2a66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80e2adc <HAL_RCC_GetSysClockFreq+0x2e4>
 80e2a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80e2a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80e2a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80e2a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80e2a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 80e2a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80e2a82:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80e2a84:	4b11      	ldr	r3, [pc, #68]	; (80e2acc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80e2a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80e2a88:	0a5b      	lsrs	r3, r3, #9
 80e2a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80e2a8e:	3301      	adds	r3, #1
 80e2a90:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80e2a92:	683b      	ldr	r3, [r7, #0]
 80e2a94:	ee07 3a90 	vmov	s15, r3
 80e2a98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80e2a9c:	edd7 6a07 	vldr	s13, [r7, #28]
 80e2aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80e2aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80e2aa8:	ee17 3a90 	vmov	r3, s15
 80e2aac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80e2aae:	e005      	b.n	80e2abc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80e2ab0:	2300      	movs	r3, #0
 80e2ab2:	61bb      	str	r3, [r7, #24]
    break;
 80e2ab4:	e002      	b.n	80e2abc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80e2ab6:	4b07      	ldr	r3, [pc, #28]	; (80e2ad4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80e2ab8:	61bb      	str	r3, [r7, #24]
    break;
 80e2aba:	bf00      	nop
  }

  return sysclockfreq;
 80e2abc:	69bb      	ldr	r3, [r7, #24]
}
 80e2abe:	4618      	mov	r0, r3
 80e2ac0:	3724      	adds	r7, #36	; 0x24
 80e2ac2:	46bd      	mov	sp, r7
 80e2ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e2ac8:	4770      	bx	lr
 80e2aca:	bf00      	nop
 80e2acc:	58024400 	.word	0x58024400
 80e2ad0:	03d09000 	.word	0x03d09000
 80e2ad4:	003d0900 	.word	0x003d0900
 80e2ad8:	017d7840 	.word	0x017d7840
 80e2adc:	46000000 	.word	0x46000000
 80e2ae0:	4c742400 	.word	0x4c742400
 80e2ae4:	4a742400 	.word	0x4a742400
 80e2ae8:	4bbebc20 	.word	0x4bbebc20

080e2aec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80e2aec:	b580      	push	{r7, lr}
 80e2aee:	b086      	sub	sp, #24
 80e2af0:	af00      	add	r7, sp, #0
 80e2af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80e2af4:	2300      	movs	r3, #0
 80e2af6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80e2af8:	2300      	movs	r3, #0
 80e2afa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80e2afc:	687b      	ldr	r3, [r7, #4]
 80e2afe:	681b      	ldr	r3, [r3, #0]
 80e2b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e2b04:	2b00      	cmp	r3, #0
 80e2b06:	d03f      	beq.n	80e2b88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80e2b08:	687b      	ldr	r3, [r7, #4]
 80e2b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e2b0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e2b10:	d02a      	beq.n	80e2b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80e2b12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e2b16:	d824      	bhi.n	80e2b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80e2b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e2b1c:	d018      	beq.n	80e2b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80e2b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e2b22:	d81e      	bhi.n	80e2b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80e2b24:	2b00      	cmp	r3, #0
 80e2b26:	d003      	beq.n	80e2b30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80e2b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80e2b2c:	d007      	beq.n	80e2b3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80e2b2e:	e018      	b.n	80e2b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2b30:	4ba4      	ldr	r3, [pc, #656]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2b34:	4aa3      	ldr	r2, [pc, #652]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e2b3c:	e015      	b.n	80e2b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e2b3e:	687b      	ldr	r3, [r7, #4]
 80e2b40:	3304      	adds	r3, #4
 80e2b42:	2102      	movs	r1, #2
 80e2b44:	4618      	mov	r0, r3
 80e2b46:	f000 fecb 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e2b4a:	4603      	mov	r3, r0
 80e2b4c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e2b4e:	e00c      	b.n	80e2b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e2b50:	687b      	ldr	r3, [r7, #4]
 80e2b52:	3324      	adds	r3, #36	; 0x24
 80e2b54:	2102      	movs	r1, #2
 80e2b56:	4618      	mov	r0, r3
 80e2b58:	f000 ff74 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e2b5c:	4603      	mov	r3, r0
 80e2b5e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80e2b60:	e003      	b.n	80e2b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e2b62:	2301      	movs	r3, #1
 80e2b64:	75fb      	strb	r3, [r7, #23]
      break;
 80e2b66:	e000      	b.n	80e2b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80e2b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e2b6a:	7dfb      	ldrb	r3, [r7, #23]
 80e2b6c:	2b00      	cmp	r3, #0
 80e2b6e:	d109      	bne.n	80e2b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80e2b70:	4b94      	ldr	r3, [pc, #592]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e2b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80e2b78:	687b      	ldr	r3, [r7, #4]
 80e2b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80e2b7c:	4991      	ldr	r1, [pc, #580]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2b7e:	4313      	orrs	r3, r2
 80e2b80:	650b      	str	r3, [r1, #80]	; 0x50
 80e2b82:	e001      	b.n	80e2b88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e2b84:	7dfb      	ldrb	r3, [r7, #23]
 80e2b86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80e2b88:	687b      	ldr	r3, [r7, #4]
 80e2b8a:	681b      	ldr	r3, [r3, #0]
 80e2b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e2b90:	2b00      	cmp	r3, #0
 80e2b92:	d03d      	beq.n	80e2c10 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80e2b94:	687b      	ldr	r3, [r7, #4]
 80e2b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e2b98:	2b04      	cmp	r3, #4
 80e2b9a:	d826      	bhi.n	80e2bea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80e2b9c:	a201      	add	r2, pc, #4	; (adr r2, 80e2ba4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80e2b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e2ba2:	bf00      	nop
 80e2ba4:	080e2bb9 	.word	0x080e2bb9
 80e2ba8:	080e2bc7 	.word	0x080e2bc7
 80e2bac:	080e2bd9 	.word	0x080e2bd9
 80e2bb0:	080e2bf1 	.word	0x080e2bf1
 80e2bb4:	080e2bf1 	.word	0x080e2bf1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2bb8:	4b82      	ldr	r3, [pc, #520]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2bbc:	4a81      	ldr	r2, [pc, #516]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e2bc4:	e015      	b.n	80e2bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e2bc6:	687b      	ldr	r3, [r7, #4]
 80e2bc8:	3304      	adds	r3, #4
 80e2bca:	2100      	movs	r1, #0
 80e2bcc:	4618      	mov	r0, r3
 80e2bce:	f000 fe87 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e2bd2:	4603      	mov	r3, r0
 80e2bd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e2bd6:	e00c      	b.n	80e2bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e2bd8:	687b      	ldr	r3, [r7, #4]
 80e2bda:	3324      	adds	r3, #36	; 0x24
 80e2bdc:	2100      	movs	r1, #0
 80e2bde:	4618      	mov	r0, r3
 80e2be0:	f000 ff30 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e2be4:	4603      	mov	r3, r0
 80e2be6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e2be8:	e003      	b.n	80e2bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e2bea:	2301      	movs	r3, #1
 80e2bec:	75fb      	strb	r3, [r7, #23]
      break;
 80e2bee:	e000      	b.n	80e2bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80e2bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e2bf2:	7dfb      	ldrb	r3, [r7, #23]
 80e2bf4:	2b00      	cmp	r3, #0
 80e2bf6:	d109      	bne.n	80e2c0c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80e2bf8:	4b72      	ldr	r3, [pc, #456]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e2bfc:	f023 0207 	bic.w	r2, r3, #7
 80e2c00:	687b      	ldr	r3, [r7, #4]
 80e2c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e2c04:	496f      	ldr	r1, [pc, #444]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2c06:	4313      	orrs	r3, r2
 80e2c08:	650b      	str	r3, [r1, #80]	; 0x50
 80e2c0a:	e001      	b.n	80e2c10 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e2c0c:	7dfb      	ldrb	r3, [r7, #23]
 80e2c0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80e2c10:	687b      	ldr	r3, [r7, #4]
 80e2c12:	681b      	ldr	r3, [r3, #0]
 80e2c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80e2c18:	2b00      	cmp	r3, #0
 80e2c1a:	d051      	beq.n	80e2cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80e2c1c:	687b      	ldr	r3, [r7, #4]
 80e2c1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e2c22:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80e2c26:	d036      	beq.n	80e2c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80e2c28:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80e2c2c:	d830      	bhi.n	80e2c90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e2c2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80e2c32:	d032      	beq.n	80e2c9a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80e2c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80e2c38:	d82a      	bhi.n	80e2c90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e2c3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80e2c3e:	d02e      	beq.n	80e2c9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80e2c40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80e2c44:	d824      	bhi.n	80e2c90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e2c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80e2c4a:	d018      	beq.n	80e2c7e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80e2c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80e2c50:	d81e      	bhi.n	80e2c90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80e2c52:	2b00      	cmp	r3, #0
 80e2c54:	d003      	beq.n	80e2c5e <HAL_RCCEx_PeriphCLKConfig+0x172>
 80e2c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e2c5a:	d007      	beq.n	80e2c6c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80e2c5c:	e018      	b.n	80e2c90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2c5e:	4b59      	ldr	r3, [pc, #356]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2c62:	4a58      	ldr	r2, [pc, #352]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2c68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e2c6a:	e019      	b.n	80e2ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e2c6c:	687b      	ldr	r3, [r7, #4]
 80e2c6e:	3304      	adds	r3, #4
 80e2c70:	2100      	movs	r1, #0
 80e2c72:	4618      	mov	r0, r3
 80e2c74:	f000 fe34 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e2c78:	4603      	mov	r3, r0
 80e2c7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80e2c7c:	e010      	b.n	80e2ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e2c7e:	687b      	ldr	r3, [r7, #4]
 80e2c80:	3324      	adds	r3, #36	; 0x24
 80e2c82:	2100      	movs	r1, #0
 80e2c84:	4618      	mov	r0, r3
 80e2c86:	f000 fedd 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e2c8a:	4603      	mov	r3, r0
 80e2c8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e2c8e:	e007      	b.n	80e2ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80e2c90:	2301      	movs	r3, #1
 80e2c92:	75fb      	strb	r3, [r7, #23]
      break;
 80e2c94:	e004      	b.n	80e2ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e2c96:	bf00      	nop
 80e2c98:	e002      	b.n	80e2ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e2c9a:	bf00      	nop
 80e2c9c:	e000      	b.n	80e2ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80e2c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e2ca0:	7dfb      	ldrb	r3, [r7, #23]
 80e2ca2:	2b00      	cmp	r3, #0
 80e2ca4:	d10a      	bne.n	80e2cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80e2ca6:	4b47      	ldr	r3, [pc, #284]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e2caa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80e2cae:	687b      	ldr	r3, [r7, #4]
 80e2cb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80e2cb4:	4943      	ldr	r1, [pc, #268]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2cb6:	4313      	orrs	r3, r2
 80e2cb8:	658b      	str	r3, [r1, #88]	; 0x58
 80e2cba:	e001      	b.n	80e2cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e2cbc:	7dfb      	ldrb	r3, [r7, #23]
 80e2cbe:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80e2cc0:	687b      	ldr	r3, [r7, #4]
 80e2cc2:	681b      	ldr	r3, [r3, #0]
 80e2cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80e2cc8:	2b00      	cmp	r3, #0
 80e2cca:	d051      	beq.n	80e2d70 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80e2ccc:	687b      	ldr	r3, [r7, #4]
 80e2cce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e2cd2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80e2cd6:	d036      	beq.n	80e2d46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80e2cd8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80e2cdc:	d830      	bhi.n	80e2d40 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e2cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80e2ce2:	d032      	beq.n	80e2d4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80e2ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80e2ce8:	d82a      	bhi.n	80e2d40 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e2cea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80e2cee:	d02e      	beq.n	80e2d4e <HAL_RCCEx_PeriphCLKConfig+0x262>
 80e2cf0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80e2cf4:	d824      	bhi.n	80e2d40 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e2cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80e2cfa:	d018      	beq.n	80e2d2e <HAL_RCCEx_PeriphCLKConfig+0x242>
 80e2cfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80e2d00:	d81e      	bhi.n	80e2d40 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80e2d02:	2b00      	cmp	r3, #0
 80e2d04:	d003      	beq.n	80e2d0e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80e2d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80e2d0a:	d007      	beq.n	80e2d1c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80e2d0c:	e018      	b.n	80e2d40 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2d0e:	4b2d      	ldr	r3, [pc, #180]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2d12:	4a2c      	ldr	r2, [pc, #176]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2d18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e2d1a:	e019      	b.n	80e2d50 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e2d1c:	687b      	ldr	r3, [r7, #4]
 80e2d1e:	3304      	adds	r3, #4
 80e2d20:	2100      	movs	r1, #0
 80e2d22:	4618      	mov	r0, r3
 80e2d24:	f000 fddc 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e2d28:	4603      	mov	r3, r0
 80e2d2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80e2d2c:	e010      	b.n	80e2d50 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80e2d2e:	687b      	ldr	r3, [r7, #4]
 80e2d30:	3324      	adds	r3, #36	; 0x24
 80e2d32:	2100      	movs	r1, #0
 80e2d34:	4618      	mov	r0, r3
 80e2d36:	f000 fe85 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e2d3a:	4603      	mov	r3, r0
 80e2d3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80e2d3e:	e007      	b.n	80e2d50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80e2d40:	2301      	movs	r3, #1
 80e2d42:	75fb      	strb	r3, [r7, #23]
      break;
 80e2d44:	e004      	b.n	80e2d50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e2d46:	bf00      	nop
 80e2d48:	e002      	b.n	80e2d50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e2d4a:	bf00      	nop
 80e2d4c:	e000      	b.n	80e2d50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80e2d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e2d50:	7dfb      	ldrb	r3, [r7, #23]
 80e2d52:	2b00      	cmp	r3, #0
 80e2d54:	d10a      	bne.n	80e2d6c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80e2d56:	4b1b      	ldr	r3, [pc, #108]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e2d5a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80e2d5e:	687b      	ldr	r3, [r7, #4]
 80e2d60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80e2d64:	4917      	ldr	r1, [pc, #92]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2d66:	4313      	orrs	r3, r2
 80e2d68:	658b      	str	r3, [r1, #88]	; 0x58
 80e2d6a:	e001      	b.n	80e2d70 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e2d6c:	7dfb      	ldrb	r3, [r7, #23]
 80e2d6e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80e2d70:	687b      	ldr	r3, [r7, #4]
 80e2d72:	681b      	ldr	r3, [r3, #0]
 80e2d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80e2d78:	2b00      	cmp	r3, #0
 80e2d7a:	d035      	beq.n	80e2de8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80e2d7c:	687b      	ldr	r3, [r7, #4]
 80e2d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e2d80:	2b30      	cmp	r3, #48	; 0x30
 80e2d82:	d01c      	beq.n	80e2dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80e2d84:	2b30      	cmp	r3, #48	; 0x30
 80e2d86:	d817      	bhi.n	80e2db8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80e2d88:	2b20      	cmp	r3, #32
 80e2d8a:	d00c      	beq.n	80e2da6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80e2d8c:	2b20      	cmp	r3, #32
 80e2d8e:	d813      	bhi.n	80e2db8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80e2d90:	2b00      	cmp	r3, #0
 80e2d92:	d019      	beq.n	80e2dc8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80e2d94:	2b10      	cmp	r3, #16
 80e2d96:	d10f      	bne.n	80e2db8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2d98:	4b0a      	ldr	r3, [pc, #40]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2d9c:	4a09      	ldr	r2, [pc, #36]	; (80e2dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80e2d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2da2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80e2da4:	e011      	b.n	80e2dca <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e2da6:	687b      	ldr	r3, [r7, #4]
 80e2da8:	3304      	adds	r3, #4
 80e2daa:	2102      	movs	r1, #2
 80e2dac:	4618      	mov	r0, r3
 80e2dae:	f000 fd97 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e2db2:	4603      	mov	r3, r0
 80e2db4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80e2db6:	e008      	b.n	80e2dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80e2db8:	2301      	movs	r3, #1
 80e2dba:	75fb      	strb	r3, [r7, #23]
      break;
 80e2dbc:	e005      	b.n	80e2dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80e2dbe:	bf00      	nop
 80e2dc0:	e003      	b.n	80e2dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80e2dc2:	bf00      	nop
 80e2dc4:	58024400 	.word	0x58024400
      break;
 80e2dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e2dca:	7dfb      	ldrb	r3, [r7, #23]
 80e2dcc:	2b00      	cmp	r3, #0
 80e2dce:	d109      	bne.n	80e2de4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80e2dd0:	4ba3      	ldr	r3, [pc, #652]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e2dd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80e2dd8:	687b      	ldr	r3, [r7, #4]
 80e2dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80e2ddc:	49a0      	ldr	r1, [pc, #640]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2dde:	4313      	orrs	r3, r2
 80e2de0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e2de2:	e001      	b.n	80e2de8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e2de4:	7dfb      	ldrb	r3, [r7, #23]
 80e2de6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80e2de8:	687b      	ldr	r3, [r7, #4]
 80e2dea:	681b      	ldr	r3, [r3, #0]
 80e2dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80e2df0:	2b00      	cmp	r3, #0
 80e2df2:	d047      	beq.n	80e2e84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80e2df4:	687b      	ldr	r3, [r7, #4]
 80e2df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e2df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e2dfc:	d030      	beq.n	80e2e60 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80e2dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e2e02:	d82a      	bhi.n	80e2e5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e2e04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80e2e08:	d02c      	beq.n	80e2e64 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80e2e0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80e2e0e:	d824      	bhi.n	80e2e5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e2e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e2e14:	d018      	beq.n	80e2e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80e2e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e2e1a:	d81e      	bhi.n	80e2e5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80e2e1c:	2b00      	cmp	r3, #0
 80e2e1e:	d003      	beq.n	80e2e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80e2e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e2e24:	d007      	beq.n	80e2e36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80e2e26:	e018      	b.n	80e2e5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2e28:	4b8d      	ldr	r3, [pc, #564]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2e2c:	4a8c      	ldr	r2, [pc, #560]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2e32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e2e34:	e017      	b.n	80e2e66 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e2e36:	687b      	ldr	r3, [r7, #4]
 80e2e38:	3304      	adds	r3, #4
 80e2e3a:	2100      	movs	r1, #0
 80e2e3c:	4618      	mov	r0, r3
 80e2e3e:	f000 fd4f 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e2e42:	4603      	mov	r3, r0
 80e2e44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e2e46:	e00e      	b.n	80e2e66 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80e2e48:	687b      	ldr	r3, [r7, #4]
 80e2e4a:	3324      	adds	r3, #36	; 0x24
 80e2e4c:	2100      	movs	r1, #0
 80e2e4e:	4618      	mov	r0, r3
 80e2e50:	f000 fdf8 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e2e54:	4603      	mov	r3, r0
 80e2e56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80e2e58:	e005      	b.n	80e2e66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e2e5a:	2301      	movs	r3, #1
 80e2e5c:	75fb      	strb	r3, [r7, #23]
      break;
 80e2e5e:	e002      	b.n	80e2e66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80e2e60:	bf00      	nop
 80e2e62:	e000      	b.n	80e2e66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80e2e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e2e66:	7dfb      	ldrb	r3, [r7, #23]
 80e2e68:	2b00      	cmp	r3, #0
 80e2e6a:	d109      	bne.n	80e2e80 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80e2e6c:	4b7c      	ldr	r3, [pc, #496]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e2e70:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80e2e74:	687b      	ldr	r3, [r7, #4]
 80e2e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e2e78:	4979      	ldr	r1, [pc, #484]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2e7a:	4313      	orrs	r3, r2
 80e2e7c:	650b      	str	r3, [r1, #80]	; 0x50
 80e2e7e:	e001      	b.n	80e2e84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e2e80:	7dfb      	ldrb	r3, [r7, #23]
 80e2e82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80e2e84:	687b      	ldr	r3, [r7, #4]
 80e2e86:	681b      	ldr	r3, [r3, #0]
 80e2e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80e2e8c:	2b00      	cmp	r3, #0
 80e2e8e:	d049      	beq.n	80e2f24 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80e2e90:	687b      	ldr	r3, [r7, #4]
 80e2e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e2e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e2e98:	d02e      	beq.n	80e2ef8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80e2e9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80e2e9e:	d828      	bhi.n	80e2ef2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e2ea0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80e2ea4:	d02a      	beq.n	80e2efc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80e2ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80e2eaa:	d822      	bhi.n	80e2ef2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e2eac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80e2eb0:	d026      	beq.n	80e2f00 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80e2eb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80e2eb6:	d81c      	bhi.n	80e2ef2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e2eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e2ebc:	d010      	beq.n	80e2ee0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80e2ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e2ec2:	d816      	bhi.n	80e2ef2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80e2ec4:	2b00      	cmp	r3, #0
 80e2ec6:	d01d      	beq.n	80e2f04 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80e2ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e2ecc:	d111      	bne.n	80e2ef2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e2ece:	687b      	ldr	r3, [r7, #4]
 80e2ed0:	3304      	adds	r3, #4
 80e2ed2:	2101      	movs	r1, #1
 80e2ed4:	4618      	mov	r0, r3
 80e2ed6:	f000 fd03 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e2eda:	4603      	mov	r3, r0
 80e2edc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80e2ede:	e012      	b.n	80e2f06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e2ee0:	687b      	ldr	r3, [r7, #4]
 80e2ee2:	3324      	adds	r3, #36	; 0x24
 80e2ee4:	2101      	movs	r1, #1
 80e2ee6:	4618      	mov	r0, r3
 80e2ee8:	f000 fdac 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e2eec:	4603      	mov	r3, r0
 80e2eee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80e2ef0:	e009      	b.n	80e2f06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e2ef2:	2301      	movs	r3, #1
 80e2ef4:	75fb      	strb	r3, [r7, #23]
      break;
 80e2ef6:	e006      	b.n	80e2f06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e2ef8:	bf00      	nop
 80e2efa:	e004      	b.n	80e2f06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e2efc:	bf00      	nop
 80e2efe:	e002      	b.n	80e2f06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e2f00:	bf00      	nop
 80e2f02:	e000      	b.n	80e2f06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80e2f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e2f06:	7dfb      	ldrb	r3, [r7, #23]
 80e2f08:	2b00      	cmp	r3, #0
 80e2f0a:	d109      	bne.n	80e2f20 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80e2f0c:	4b54      	ldr	r3, [pc, #336]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e2f10:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80e2f14:	687b      	ldr	r3, [r7, #4]
 80e2f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80e2f18:	4951      	ldr	r1, [pc, #324]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2f1a:	4313      	orrs	r3, r2
 80e2f1c:	650b      	str	r3, [r1, #80]	; 0x50
 80e2f1e:	e001      	b.n	80e2f24 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e2f20:	7dfb      	ldrb	r3, [r7, #23]
 80e2f22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80e2f24:	687b      	ldr	r3, [r7, #4]
 80e2f26:	681b      	ldr	r3, [r3, #0]
 80e2f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80e2f2c:	2b00      	cmp	r3, #0
 80e2f2e:	d04b      	beq.n	80e2fc8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80e2f30:	687b      	ldr	r3, [r7, #4]
 80e2f32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80e2f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e2f3a:	d02e      	beq.n	80e2f9a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80e2f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e2f40:	d828      	bhi.n	80e2f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e2f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e2f46:	d02a      	beq.n	80e2f9e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80e2f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e2f4c:	d822      	bhi.n	80e2f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e2f4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e2f52:	d026      	beq.n	80e2fa2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80e2f54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e2f58:	d81c      	bhi.n	80e2f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e2f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e2f5e:	d010      	beq.n	80e2f82 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80e2f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e2f64:	d816      	bhi.n	80e2f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80e2f66:	2b00      	cmp	r3, #0
 80e2f68:	d01d      	beq.n	80e2fa6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80e2f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e2f6e:	d111      	bne.n	80e2f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e2f70:	687b      	ldr	r3, [r7, #4]
 80e2f72:	3304      	adds	r3, #4
 80e2f74:	2101      	movs	r1, #1
 80e2f76:	4618      	mov	r0, r3
 80e2f78:	f000 fcb2 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e2f7c:	4603      	mov	r3, r0
 80e2f7e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80e2f80:	e012      	b.n	80e2fa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e2f82:	687b      	ldr	r3, [r7, #4]
 80e2f84:	3324      	adds	r3, #36	; 0x24
 80e2f86:	2101      	movs	r1, #1
 80e2f88:	4618      	mov	r0, r3
 80e2f8a:	f000 fd5b 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e2f8e:	4603      	mov	r3, r0
 80e2f90:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80e2f92:	e009      	b.n	80e2fa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80e2f94:	2301      	movs	r3, #1
 80e2f96:	75fb      	strb	r3, [r7, #23]
      break;
 80e2f98:	e006      	b.n	80e2fa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e2f9a:	bf00      	nop
 80e2f9c:	e004      	b.n	80e2fa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e2f9e:	bf00      	nop
 80e2fa0:	e002      	b.n	80e2fa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e2fa2:	bf00      	nop
 80e2fa4:	e000      	b.n	80e2fa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80e2fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e2fa8:	7dfb      	ldrb	r3, [r7, #23]
 80e2faa:	2b00      	cmp	r3, #0
 80e2fac:	d10a      	bne.n	80e2fc4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80e2fae:	4b2c      	ldr	r3, [pc, #176]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e2fb2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80e2fb6:	687b      	ldr	r3, [r7, #4]
 80e2fb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80e2fbc:	4928      	ldr	r1, [pc, #160]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2fbe:	4313      	orrs	r3, r2
 80e2fc0:	658b      	str	r3, [r1, #88]	; 0x58
 80e2fc2:	e001      	b.n	80e2fc8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e2fc4:	7dfb      	ldrb	r3, [r7, #23]
 80e2fc6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80e2fc8:	687b      	ldr	r3, [r7, #4]
 80e2fca:	681b      	ldr	r3, [r3, #0]
 80e2fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80e2fd0:	2b00      	cmp	r3, #0
 80e2fd2:	d02f      	beq.n	80e3034 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80e2fd4:	687b      	ldr	r3, [r7, #4]
 80e2fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e2fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e2fdc:	d00e      	beq.n	80e2ffc <HAL_RCCEx_PeriphCLKConfig+0x510>
 80e2fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e2fe2:	d814      	bhi.n	80e300e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80e2fe4:	2b00      	cmp	r3, #0
 80e2fe6:	d015      	beq.n	80e3014 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80e2fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e2fec:	d10f      	bne.n	80e300e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e2fee:	4b1c      	ldr	r3, [pc, #112]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e2ff2:	4a1b      	ldr	r2, [pc, #108]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e2ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e2ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80e2ffa:	e00c      	b.n	80e3016 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e2ffc:	687b      	ldr	r3, [r7, #4]
 80e2ffe:	3304      	adds	r3, #4
 80e3000:	2101      	movs	r1, #1
 80e3002:	4618      	mov	r0, r3
 80e3004:	f000 fc6c 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e3008:	4603      	mov	r3, r0
 80e300a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80e300c:	e003      	b.n	80e3016 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e300e:	2301      	movs	r3, #1
 80e3010:	75fb      	strb	r3, [r7, #23]
      break;
 80e3012:	e000      	b.n	80e3016 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80e3014:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3016:	7dfb      	ldrb	r3, [r7, #23]
 80e3018:	2b00      	cmp	r3, #0
 80e301a:	d109      	bne.n	80e3030 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80e301c:	4b10      	ldr	r3, [pc, #64]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e301e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3020:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80e3024:	687b      	ldr	r3, [r7, #4]
 80e3026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80e3028:	490d      	ldr	r1, [pc, #52]	; (80e3060 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80e302a:	4313      	orrs	r3, r2
 80e302c:	650b      	str	r3, [r1, #80]	; 0x50
 80e302e:	e001      	b.n	80e3034 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3030:	7dfb      	ldrb	r3, [r7, #23]
 80e3032:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80e3034:	687b      	ldr	r3, [r7, #4]
 80e3036:	681b      	ldr	r3, [r3, #0]
 80e3038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80e303c:	2b00      	cmp	r3, #0
 80e303e:	d034      	beq.n	80e30aa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80e3040:	687b      	ldr	r3, [r7, #4]
 80e3042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e3044:	2b03      	cmp	r3, #3
 80e3046:	d81d      	bhi.n	80e3084 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80e3048:	a201      	add	r2, pc, #4	; (adr r2, 80e3050 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80e304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e304e:	bf00      	nop
 80e3050:	080e308b 	.word	0x080e308b
 80e3054:	080e3065 	.word	0x080e3065
 80e3058:	080e3073 	.word	0x080e3073
 80e305c:	080e308b 	.word	0x080e308b
 80e3060:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e3064:	4bb1      	ldr	r3, [pc, #708]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3068:	4ab0      	ldr	r2, [pc, #704]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e306a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e306e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80e3070:	e00c      	b.n	80e308c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e3072:	687b      	ldr	r3, [r7, #4]
 80e3074:	3304      	adds	r3, #4
 80e3076:	2102      	movs	r1, #2
 80e3078:	4618      	mov	r0, r3
 80e307a:	f000 fc31 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e307e:	4603      	mov	r3, r0
 80e3080:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80e3082:	e003      	b.n	80e308c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80e3084:	2301      	movs	r3, #1
 80e3086:	75fb      	strb	r3, [r7, #23]
      break;
 80e3088:	e000      	b.n	80e308c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80e308a:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e308c:	7dfb      	ldrb	r3, [r7, #23]
 80e308e:	2b00      	cmp	r3, #0
 80e3090:	d109      	bne.n	80e30a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80e3092:	4ba6      	ldr	r3, [pc, #664]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3096:	f023 0203 	bic.w	r2, r3, #3
 80e309a:	687b      	ldr	r3, [r7, #4]
 80e309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80e309e:	49a3      	ldr	r1, [pc, #652]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e30a0:	4313      	orrs	r3, r2
 80e30a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e30a4:	e001      	b.n	80e30aa <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e30a6:	7dfb      	ldrb	r3, [r7, #23]
 80e30a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80e30aa:	687b      	ldr	r3, [r7, #4]
 80e30ac:	681b      	ldr	r3, [r3, #0]
 80e30ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80e30b2:	2b00      	cmp	r3, #0
 80e30b4:	f000 8086 	beq.w	80e31c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80e30b8:	4b9d      	ldr	r3, [pc, #628]	; (80e3330 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e30ba:	681b      	ldr	r3, [r3, #0]
 80e30bc:	4a9c      	ldr	r2, [pc, #624]	; (80e3330 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e30be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e30c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80e30c4:	f7fd fcf8 	bl	80e0ab8 <HAL_GetTick>
 80e30c8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e30ca:	e009      	b.n	80e30e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80e30cc:	f7fd fcf4 	bl	80e0ab8 <HAL_GetTick>
 80e30d0:	4602      	mov	r2, r0
 80e30d2:	693b      	ldr	r3, [r7, #16]
 80e30d4:	1ad3      	subs	r3, r2, r3
 80e30d6:	2b64      	cmp	r3, #100	; 0x64
 80e30d8:	d902      	bls.n	80e30e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80e30da:	2303      	movs	r3, #3
 80e30dc:	75fb      	strb	r3, [r7, #23]
        break;
 80e30de:	e005      	b.n	80e30ec <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80e30e0:	4b93      	ldr	r3, [pc, #588]	; (80e3330 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80e30e2:	681b      	ldr	r3, [r3, #0]
 80e30e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80e30e8:	2b00      	cmp	r3, #0
 80e30ea:	d0ef      	beq.n	80e30cc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80e30ec:	7dfb      	ldrb	r3, [r7, #23]
 80e30ee:	2b00      	cmp	r3, #0
 80e30f0:	d166      	bne.n	80e31c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80e30f2:	4b8e      	ldr	r3, [pc, #568]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e30f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e30f6:	687b      	ldr	r3, [r7, #4]
 80e30f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e30fc:	4053      	eors	r3, r2
 80e30fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80e3102:	2b00      	cmp	r3, #0
 80e3104:	d013      	beq.n	80e312e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80e3106:	4b89      	ldr	r3, [pc, #548]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e310a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80e310e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80e3110:	4b86      	ldr	r3, [pc, #536]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3114:	4a85      	ldr	r2, [pc, #532]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80e311a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80e311c:	4b83      	ldr	r3, [pc, #524]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e3120:	4a82      	ldr	r2, [pc, #520]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80e3126:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80e3128:	4a80      	ldr	r2, [pc, #512]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e312a:	68fb      	ldr	r3, [r7, #12]
 80e312c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80e312e:	687b      	ldr	r3, [r7, #4]
 80e3130:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e3138:	d115      	bne.n	80e3166 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80e313a:	f7fd fcbd 	bl	80e0ab8 <HAL_GetTick>
 80e313e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e3140:	e00b      	b.n	80e315a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80e3142:	f7fd fcb9 	bl	80e0ab8 <HAL_GetTick>
 80e3146:	4602      	mov	r2, r0
 80e3148:	693b      	ldr	r3, [r7, #16]
 80e314a:	1ad3      	subs	r3, r2, r3
 80e314c:	f241 3288 	movw	r2, #5000	; 0x1388
 80e3150:	4293      	cmp	r3, r2
 80e3152:	d902      	bls.n	80e315a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80e3154:	2303      	movs	r3, #3
 80e3156:	75fb      	strb	r3, [r7, #23]
            break;
 80e3158:	e005      	b.n	80e3166 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80e315a:	4b74      	ldr	r3, [pc, #464]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e315e:	f003 0302 	and.w	r3, r3, #2
 80e3162:	2b00      	cmp	r3, #0
 80e3164:	d0ed      	beq.n	80e3142 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80e3166:	7dfb      	ldrb	r3, [r7, #23]
 80e3168:	2b00      	cmp	r3, #0
 80e316a:	d126      	bne.n	80e31ba <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80e316c:	687b      	ldr	r3, [r7, #4]
 80e316e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e3172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80e3176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e317a:	d10d      	bne.n	80e3198 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80e317c:	4b6b      	ldr	r3, [pc, #428]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e317e:	691b      	ldr	r3, [r3, #16]
 80e3180:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80e3184:	687b      	ldr	r3, [r7, #4]
 80e3186:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e318a:	0919      	lsrs	r1, r3, #4
 80e318c:	4b69      	ldr	r3, [pc, #420]	; (80e3334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80e318e:	400b      	ands	r3, r1
 80e3190:	4966      	ldr	r1, [pc, #408]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e3192:	4313      	orrs	r3, r2
 80e3194:	610b      	str	r3, [r1, #16]
 80e3196:	e005      	b.n	80e31a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80e3198:	4b64      	ldr	r3, [pc, #400]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e319a:	691b      	ldr	r3, [r3, #16]
 80e319c:	4a63      	ldr	r2, [pc, #396]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e319e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80e31a2:	6113      	str	r3, [r2, #16]
 80e31a4:	4b61      	ldr	r3, [pc, #388]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e31a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80e31a8:	687b      	ldr	r3, [r7, #4]
 80e31aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80e31ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80e31b2:	495e      	ldr	r1, [pc, #376]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e31b4:	4313      	orrs	r3, r2
 80e31b6:	670b      	str	r3, [r1, #112]	; 0x70
 80e31b8:	e004      	b.n	80e31c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80e31ba:	7dfb      	ldrb	r3, [r7, #23]
 80e31bc:	75bb      	strb	r3, [r7, #22]
 80e31be:	e001      	b.n	80e31c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e31c0:	7dfb      	ldrb	r3, [r7, #23]
 80e31c2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80e31c4:	687b      	ldr	r3, [r7, #4]
 80e31c6:	681b      	ldr	r3, [r3, #0]
 80e31c8:	f003 0301 	and.w	r3, r3, #1
 80e31cc:	2b00      	cmp	r3, #0
 80e31ce:	d07e      	beq.n	80e32ce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80e31d0:	687b      	ldr	r3, [r7, #4]
 80e31d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e31d4:	2b28      	cmp	r3, #40	; 0x28
 80e31d6:	d867      	bhi.n	80e32a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80e31d8:	a201      	add	r2, pc, #4	; (adr r2, 80e31e0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80e31da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e31de:	bf00      	nop
 80e31e0:	080e32af 	.word	0x080e32af
 80e31e4:	080e32a9 	.word	0x080e32a9
 80e31e8:	080e32a9 	.word	0x080e32a9
 80e31ec:	080e32a9 	.word	0x080e32a9
 80e31f0:	080e32a9 	.word	0x080e32a9
 80e31f4:	080e32a9 	.word	0x080e32a9
 80e31f8:	080e32a9 	.word	0x080e32a9
 80e31fc:	080e32a9 	.word	0x080e32a9
 80e3200:	080e3285 	.word	0x080e3285
 80e3204:	080e32a9 	.word	0x080e32a9
 80e3208:	080e32a9 	.word	0x080e32a9
 80e320c:	080e32a9 	.word	0x080e32a9
 80e3210:	080e32a9 	.word	0x080e32a9
 80e3214:	080e32a9 	.word	0x080e32a9
 80e3218:	080e32a9 	.word	0x080e32a9
 80e321c:	080e32a9 	.word	0x080e32a9
 80e3220:	080e3297 	.word	0x080e3297
 80e3224:	080e32a9 	.word	0x080e32a9
 80e3228:	080e32a9 	.word	0x080e32a9
 80e322c:	080e32a9 	.word	0x080e32a9
 80e3230:	080e32a9 	.word	0x080e32a9
 80e3234:	080e32a9 	.word	0x080e32a9
 80e3238:	080e32a9 	.word	0x080e32a9
 80e323c:	080e32a9 	.word	0x080e32a9
 80e3240:	080e32af 	.word	0x080e32af
 80e3244:	080e32a9 	.word	0x080e32a9
 80e3248:	080e32a9 	.word	0x080e32a9
 80e324c:	080e32a9 	.word	0x080e32a9
 80e3250:	080e32a9 	.word	0x080e32a9
 80e3254:	080e32a9 	.word	0x080e32a9
 80e3258:	080e32a9 	.word	0x080e32a9
 80e325c:	080e32a9 	.word	0x080e32a9
 80e3260:	080e32af 	.word	0x080e32af
 80e3264:	080e32a9 	.word	0x080e32a9
 80e3268:	080e32a9 	.word	0x080e32a9
 80e326c:	080e32a9 	.word	0x080e32a9
 80e3270:	080e32a9 	.word	0x080e32a9
 80e3274:	080e32a9 	.word	0x080e32a9
 80e3278:	080e32a9 	.word	0x080e32a9
 80e327c:	080e32a9 	.word	0x080e32a9
 80e3280:	080e32af 	.word	0x080e32af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3284:	687b      	ldr	r3, [r7, #4]
 80e3286:	3304      	adds	r3, #4
 80e3288:	2101      	movs	r1, #1
 80e328a:	4618      	mov	r0, r3
 80e328c:	f000 fb28 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e3290:	4603      	mov	r3, r0
 80e3292:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80e3294:	e00c      	b.n	80e32b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e3296:	687b      	ldr	r3, [r7, #4]
 80e3298:	3324      	adds	r3, #36	; 0x24
 80e329a:	2101      	movs	r1, #1
 80e329c:	4618      	mov	r0, r3
 80e329e:	f000 fbd1 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e32a2:	4603      	mov	r3, r0
 80e32a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80e32a6:	e003      	b.n	80e32b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e32a8:	2301      	movs	r3, #1
 80e32aa:	75fb      	strb	r3, [r7, #23]
      break;
 80e32ac:	e000      	b.n	80e32b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80e32ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e32b0:	7dfb      	ldrb	r3, [r7, #23]
 80e32b2:	2b00      	cmp	r3, #0
 80e32b4:	d109      	bne.n	80e32ca <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80e32b6:	4b1d      	ldr	r3, [pc, #116]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e32b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e32ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80e32be:	687b      	ldr	r3, [r7, #4]
 80e32c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80e32c2:	491a      	ldr	r1, [pc, #104]	; (80e332c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80e32c4:	4313      	orrs	r3, r2
 80e32c6:	654b      	str	r3, [r1, #84]	; 0x54
 80e32c8:	e001      	b.n	80e32ce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e32ca:	7dfb      	ldrb	r3, [r7, #23]
 80e32cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80e32ce:	687b      	ldr	r3, [r7, #4]
 80e32d0:	681b      	ldr	r3, [r3, #0]
 80e32d2:	f003 0302 	and.w	r3, r3, #2
 80e32d6:	2b00      	cmp	r3, #0
 80e32d8:	d03e      	beq.n	80e3358 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80e32da:	687b      	ldr	r3, [r7, #4]
 80e32dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e32de:	2b05      	cmp	r3, #5
 80e32e0:	d820      	bhi.n	80e3324 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80e32e2:	a201      	add	r2, pc, #4	; (adr r2, 80e32e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80e32e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e32e8:	080e3339 	.word	0x080e3339
 80e32ec:	080e3301 	.word	0x080e3301
 80e32f0:	080e3313 	.word	0x080e3313
 80e32f4:	080e3339 	.word	0x080e3339
 80e32f8:	080e3339 	.word	0x080e3339
 80e32fc:	080e3339 	.word	0x080e3339
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e3300:	687b      	ldr	r3, [r7, #4]
 80e3302:	3304      	adds	r3, #4
 80e3304:	2101      	movs	r1, #1
 80e3306:	4618      	mov	r0, r3
 80e3308:	f000 faea 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e330c:	4603      	mov	r3, r0
 80e330e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80e3310:	e013      	b.n	80e333a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e3312:	687b      	ldr	r3, [r7, #4]
 80e3314:	3324      	adds	r3, #36	; 0x24
 80e3316:	2101      	movs	r1, #1
 80e3318:	4618      	mov	r0, r3
 80e331a:	f000 fb93 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e331e:	4603      	mov	r3, r0
 80e3320:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80e3322:	e00a      	b.n	80e333a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3324:	2301      	movs	r3, #1
 80e3326:	75fb      	strb	r3, [r7, #23]
      break;
 80e3328:	e007      	b.n	80e333a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80e332a:	bf00      	nop
 80e332c:	58024400 	.word	0x58024400
 80e3330:	58024800 	.word	0x58024800
 80e3334:	00ffffcf 	.word	0x00ffffcf
      break;
 80e3338:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e333a:	7dfb      	ldrb	r3, [r7, #23]
 80e333c:	2b00      	cmp	r3, #0
 80e333e:	d109      	bne.n	80e3354 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80e3340:	4b9f      	ldr	r3, [pc, #636]	; (80e35c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3344:	f023 0207 	bic.w	r2, r3, #7
 80e3348:	687b      	ldr	r3, [r7, #4]
 80e334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80e334c:	499c      	ldr	r1, [pc, #624]	; (80e35c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e334e:	4313      	orrs	r3, r2
 80e3350:	654b      	str	r3, [r1, #84]	; 0x54
 80e3352:	e001      	b.n	80e3358 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3354:	7dfb      	ldrb	r3, [r7, #23]
 80e3356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80e3358:	687b      	ldr	r3, [r7, #4]
 80e335a:	681b      	ldr	r3, [r3, #0]
 80e335c:	f003 0304 	and.w	r3, r3, #4
 80e3360:	2b00      	cmp	r3, #0
 80e3362:	d039      	beq.n	80e33d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80e3364:	687b      	ldr	r3, [r7, #4]
 80e3366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80e336a:	2b05      	cmp	r3, #5
 80e336c:	d820      	bhi.n	80e33b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80e336e:	a201      	add	r2, pc, #4	; (adr r2, 80e3374 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80e3370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80e3374:	080e33b7 	.word	0x080e33b7
 80e3378:	080e338d 	.word	0x080e338d
 80e337c:	080e339f 	.word	0x080e339f
 80e3380:	080e33b7 	.word	0x080e33b7
 80e3384:	080e33b7 	.word	0x080e33b7
 80e3388:	080e33b7 	.word	0x080e33b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80e338c:	687b      	ldr	r3, [r7, #4]
 80e338e:	3304      	adds	r3, #4
 80e3390:	2101      	movs	r1, #1
 80e3392:	4618      	mov	r0, r3
 80e3394:	f000 faa4 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e3398:	4603      	mov	r3, r0
 80e339a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80e339c:	e00c      	b.n	80e33b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e339e:	687b      	ldr	r3, [r7, #4]
 80e33a0:	3324      	adds	r3, #36	; 0x24
 80e33a2:	2101      	movs	r1, #1
 80e33a4:	4618      	mov	r0, r3
 80e33a6:	f000 fb4d 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e33aa:	4603      	mov	r3, r0
 80e33ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80e33ae:	e003      	b.n	80e33b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e33b0:	2301      	movs	r3, #1
 80e33b2:	75fb      	strb	r3, [r7, #23]
      break;
 80e33b4:	e000      	b.n	80e33b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80e33b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e33b8:	7dfb      	ldrb	r3, [r7, #23]
 80e33ba:	2b00      	cmp	r3, #0
 80e33bc:	d10a      	bne.n	80e33d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80e33be:	4b80      	ldr	r3, [pc, #512]	; (80e35c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e33c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e33c2:	f023 0207 	bic.w	r2, r3, #7
 80e33c6:	687b      	ldr	r3, [r7, #4]
 80e33c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80e33cc:	497c      	ldr	r1, [pc, #496]	; (80e35c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e33ce:	4313      	orrs	r3, r2
 80e33d0:	658b      	str	r3, [r1, #88]	; 0x58
 80e33d2:	e001      	b.n	80e33d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e33d4:	7dfb      	ldrb	r3, [r7, #23]
 80e33d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80e33d8:	687b      	ldr	r3, [r7, #4]
 80e33da:	681b      	ldr	r3, [r3, #0]
 80e33dc:	f003 0320 	and.w	r3, r3, #32
 80e33e0:	2b00      	cmp	r3, #0
 80e33e2:	d04b      	beq.n	80e347c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80e33e4:	687b      	ldr	r3, [r7, #4]
 80e33e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e33ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e33ee:	d02e      	beq.n	80e344e <HAL_RCCEx_PeriphCLKConfig+0x962>
 80e33f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80e33f4:	d828      	bhi.n	80e3448 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e33f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e33fa:	d02a      	beq.n	80e3452 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80e33fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80e3400:	d822      	bhi.n	80e3448 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e3402:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e3406:	d026      	beq.n	80e3456 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80e3408:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80e340c:	d81c      	bhi.n	80e3448 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e340e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3412:	d010      	beq.n	80e3436 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80e3414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80e3418:	d816      	bhi.n	80e3448 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80e341a:	2b00      	cmp	r3, #0
 80e341c:	d01d      	beq.n	80e345a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80e341e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80e3422:	d111      	bne.n	80e3448 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3424:	687b      	ldr	r3, [r7, #4]
 80e3426:	3304      	adds	r3, #4
 80e3428:	2100      	movs	r1, #0
 80e342a:	4618      	mov	r0, r3
 80e342c:	f000 fa58 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e3430:	4603      	mov	r3, r0
 80e3432:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80e3434:	e012      	b.n	80e345c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e3436:	687b      	ldr	r3, [r7, #4]
 80e3438:	3324      	adds	r3, #36	; 0x24
 80e343a:	2102      	movs	r1, #2
 80e343c:	4618      	mov	r0, r3
 80e343e:	f000 fb01 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e3442:	4603      	mov	r3, r0
 80e3444:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80e3446:	e009      	b.n	80e345c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3448:	2301      	movs	r3, #1
 80e344a:	75fb      	strb	r3, [r7, #23]
      break;
 80e344c:	e006      	b.n	80e345c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e344e:	bf00      	nop
 80e3450:	e004      	b.n	80e345c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e3452:	bf00      	nop
 80e3454:	e002      	b.n	80e345c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e3456:	bf00      	nop
 80e3458:	e000      	b.n	80e345c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80e345a:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e345c:	7dfb      	ldrb	r3, [r7, #23]
 80e345e:	2b00      	cmp	r3, #0
 80e3460:	d10a      	bne.n	80e3478 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80e3462:	4b57      	ldr	r3, [pc, #348]	; (80e35c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e3466:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80e346a:	687b      	ldr	r3, [r7, #4]
 80e346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80e3470:	4953      	ldr	r1, [pc, #332]	; (80e35c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3472:	4313      	orrs	r3, r2
 80e3474:	654b      	str	r3, [r1, #84]	; 0x54
 80e3476:	e001      	b.n	80e347c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3478:	7dfb      	ldrb	r3, [r7, #23]
 80e347a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80e347c:	687b      	ldr	r3, [r7, #4]
 80e347e:	681b      	ldr	r3, [r3, #0]
 80e3480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80e3484:	2b00      	cmp	r3, #0
 80e3486:	d04b      	beq.n	80e3520 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80e3488:	687b      	ldr	r3, [r7, #4]
 80e348a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80e348e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80e3492:	d02e      	beq.n	80e34f2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80e3494:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80e3498:	d828      	bhi.n	80e34ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e349e:	d02a      	beq.n	80e34f6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80e34a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e34a4:	d822      	bhi.n	80e34ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e34a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80e34aa:	d026      	beq.n	80e34fa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80e34ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80e34b0:	d81c      	bhi.n	80e34ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e34b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80e34b6:	d010      	beq.n	80e34da <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80e34b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80e34bc:	d816      	bhi.n	80e34ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80e34be:	2b00      	cmp	r3, #0
 80e34c0:	d01d      	beq.n	80e34fe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80e34c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80e34c6:	d111      	bne.n	80e34ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e34c8:	687b      	ldr	r3, [r7, #4]
 80e34ca:	3304      	adds	r3, #4
 80e34cc:	2100      	movs	r1, #0
 80e34ce:	4618      	mov	r0, r3
 80e34d0:	f000 fa06 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e34d4:	4603      	mov	r3, r0
 80e34d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80e34d8:	e012      	b.n	80e3500 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e34da:	687b      	ldr	r3, [r7, #4]
 80e34dc:	3324      	adds	r3, #36	; 0x24
 80e34de:	2102      	movs	r1, #2
 80e34e0:	4618      	mov	r0, r3
 80e34e2:	f000 faaf 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e34e6:	4603      	mov	r3, r0
 80e34e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80e34ea:	e009      	b.n	80e3500 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e34ec:	2301      	movs	r3, #1
 80e34ee:	75fb      	strb	r3, [r7, #23]
      break;
 80e34f0:	e006      	b.n	80e3500 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e34f2:	bf00      	nop
 80e34f4:	e004      	b.n	80e3500 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e34f6:	bf00      	nop
 80e34f8:	e002      	b.n	80e3500 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e34fa:	bf00      	nop
 80e34fc:	e000      	b.n	80e3500 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80e34fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3500:	7dfb      	ldrb	r3, [r7, #23]
 80e3502:	2b00      	cmp	r3, #0
 80e3504:	d10a      	bne.n	80e351c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80e3506:	4b2e      	ldr	r3, [pc, #184]	; (80e35c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e350a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80e350e:	687b      	ldr	r3, [r7, #4]
 80e3510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80e3514:	492a      	ldr	r1, [pc, #168]	; (80e35c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e3516:	4313      	orrs	r3, r2
 80e3518:	658b      	str	r3, [r1, #88]	; 0x58
 80e351a:	e001      	b.n	80e3520 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e351c:	7dfb      	ldrb	r3, [r7, #23]
 80e351e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80e3520:	687b      	ldr	r3, [r7, #4]
 80e3522:	681b      	ldr	r3, [r3, #0]
 80e3524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80e3528:	2b00      	cmp	r3, #0
 80e352a:	d04d      	beq.n	80e35c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80e352c:	687b      	ldr	r3, [r7, #4]
 80e352e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80e3532:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80e3536:	d02e      	beq.n	80e3596 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80e3538:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80e353c:	d828      	bhi.n	80e3590 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e353e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80e3542:	d02a      	beq.n	80e359a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80e3544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80e3548:	d822      	bhi.n	80e3590 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e354a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80e354e:	d026      	beq.n	80e359e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80e3550:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80e3554:	d81c      	bhi.n	80e3590 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e3556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e355a:	d010      	beq.n	80e357e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80e355c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80e3560:	d816      	bhi.n	80e3590 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80e3562:	2b00      	cmp	r3, #0
 80e3564:	d01d      	beq.n	80e35a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80e3566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80e356a:	d111      	bne.n	80e3590 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e356c:	687b      	ldr	r3, [r7, #4]
 80e356e:	3304      	adds	r3, #4
 80e3570:	2100      	movs	r1, #0
 80e3572:	4618      	mov	r0, r3
 80e3574:	f000 f9b4 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e3578:	4603      	mov	r3, r0
 80e357a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80e357c:	e012      	b.n	80e35a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e357e:	687b      	ldr	r3, [r7, #4]
 80e3580:	3324      	adds	r3, #36	; 0x24
 80e3582:	2102      	movs	r1, #2
 80e3584:	4618      	mov	r0, r3
 80e3586:	f000 fa5d 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e358a:	4603      	mov	r3, r0
 80e358c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80e358e:	e009      	b.n	80e35a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3590:	2301      	movs	r3, #1
 80e3592:	75fb      	strb	r3, [r7, #23]
      break;
 80e3594:	e006      	b.n	80e35a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e3596:	bf00      	nop
 80e3598:	e004      	b.n	80e35a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e359a:	bf00      	nop
 80e359c:	e002      	b.n	80e35a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e359e:	bf00      	nop
 80e35a0:	e000      	b.n	80e35a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80e35a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e35a4:	7dfb      	ldrb	r3, [r7, #23]
 80e35a6:	2b00      	cmp	r3, #0
 80e35a8:	d10c      	bne.n	80e35c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80e35aa:	4b05      	ldr	r3, [pc, #20]	; (80e35c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e35ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e35ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80e35b2:	687b      	ldr	r3, [r7, #4]
 80e35b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80e35b8:	4901      	ldr	r1, [pc, #4]	; (80e35c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80e35ba:	4313      	orrs	r3, r2
 80e35bc:	658b      	str	r3, [r1, #88]	; 0x58
 80e35be:	e003      	b.n	80e35c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80e35c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e35c4:	7dfb      	ldrb	r3, [r7, #23]
 80e35c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80e35c8:	687b      	ldr	r3, [r7, #4]
 80e35ca:	681b      	ldr	r3, [r3, #0]
 80e35cc:	f003 0308 	and.w	r3, r3, #8
 80e35d0:	2b00      	cmp	r3, #0
 80e35d2:	d018      	beq.n	80e3606 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80e35d4:	687b      	ldr	r3, [r7, #4]
 80e35d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80e35d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80e35dc:	d10a      	bne.n	80e35f4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80e35de:	687b      	ldr	r3, [r7, #4]
 80e35e0:	3324      	adds	r3, #36	; 0x24
 80e35e2:	2102      	movs	r1, #2
 80e35e4:	4618      	mov	r0, r3
 80e35e6:	f000 fa2d 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e35ea:	4603      	mov	r3, r0
 80e35ec:	2b00      	cmp	r3, #0
 80e35ee:	d001      	beq.n	80e35f4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80e35f0:	2301      	movs	r3, #1
 80e35f2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80e35f4:	4b8a      	ldr	r3, [pc, #552]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e35f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e35f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80e35fc:	687b      	ldr	r3, [r7, #4]
 80e35fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80e3600:	4987      	ldr	r1, [pc, #540]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3602:	4313      	orrs	r3, r2
 80e3604:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80e3606:	687b      	ldr	r3, [r7, #4]
 80e3608:	681b      	ldr	r3, [r3, #0]
 80e360a:	f003 0310 	and.w	r3, r3, #16
 80e360e:	2b00      	cmp	r3, #0
 80e3610:	d01a      	beq.n	80e3648 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80e3612:	687b      	ldr	r3, [r7, #4]
 80e3614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e3618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e361c:	d10a      	bne.n	80e3634 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80e361e:	687b      	ldr	r3, [r7, #4]
 80e3620:	3324      	adds	r3, #36	; 0x24
 80e3622:	2102      	movs	r1, #2
 80e3624:	4618      	mov	r0, r3
 80e3626:	f000 fa0d 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e362a:	4603      	mov	r3, r0
 80e362c:	2b00      	cmp	r3, #0
 80e362e:	d001      	beq.n	80e3634 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80e3630:	2301      	movs	r3, #1
 80e3632:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80e3634:	4b7a      	ldr	r3, [pc, #488]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e3638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80e363c:	687b      	ldr	r3, [r7, #4]
 80e363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80e3642:	4977      	ldr	r1, [pc, #476]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3644:	4313      	orrs	r3, r2
 80e3646:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80e3648:	687b      	ldr	r3, [r7, #4]
 80e364a:	681b      	ldr	r3, [r3, #0]
 80e364c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80e3650:	2b00      	cmp	r3, #0
 80e3652:	d034      	beq.n	80e36be <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80e3654:	687b      	ldr	r3, [r7, #4]
 80e3656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e365a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e365e:	d01d      	beq.n	80e369c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80e3660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80e3664:	d817      	bhi.n	80e3696 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80e3666:	2b00      	cmp	r3, #0
 80e3668:	d003      	beq.n	80e3672 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80e366a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e366e:	d009      	beq.n	80e3684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80e3670:	e011      	b.n	80e3696 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80e3672:	687b      	ldr	r3, [r7, #4]
 80e3674:	3304      	adds	r3, #4
 80e3676:	2100      	movs	r1, #0
 80e3678:	4618      	mov	r0, r3
 80e367a:	f000 f931 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e367e:	4603      	mov	r3, r0
 80e3680:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80e3682:	e00c      	b.n	80e369e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80e3684:	687b      	ldr	r3, [r7, #4]
 80e3686:	3324      	adds	r3, #36	; 0x24
 80e3688:	2102      	movs	r1, #2
 80e368a:	4618      	mov	r0, r3
 80e368c:	f000 f9da 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e3690:	4603      	mov	r3, r0
 80e3692:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80e3694:	e003      	b.n	80e369e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e3696:	2301      	movs	r3, #1
 80e3698:	75fb      	strb	r3, [r7, #23]
      break;
 80e369a:	e000      	b.n	80e369e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80e369c:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e369e:	7dfb      	ldrb	r3, [r7, #23]
 80e36a0:	2b00      	cmp	r3, #0
 80e36a2:	d10a      	bne.n	80e36ba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80e36a4:	4b5e      	ldr	r3, [pc, #376]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e36a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80e36a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80e36ac:	687b      	ldr	r3, [r7, #4]
 80e36ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80e36b2:	495b      	ldr	r1, [pc, #364]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e36b4:	4313      	orrs	r3, r2
 80e36b6:	658b      	str	r3, [r1, #88]	; 0x58
 80e36b8:	e001      	b.n	80e36be <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e36ba:	7dfb      	ldrb	r3, [r7, #23]
 80e36bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80e36be:	687b      	ldr	r3, [r7, #4]
 80e36c0:	681b      	ldr	r3, [r3, #0]
 80e36c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80e36c6:	2b00      	cmp	r3, #0
 80e36c8:	d033      	beq.n	80e3732 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80e36ca:	687b      	ldr	r3, [r7, #4]
 80e36cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80e36d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e36d4:	d01c      	beq.n	80e3710 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80e36d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80e36da:	d816      	bhi.n	80e370a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80e36dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80e36e0:	d003      	beq.n	80e36ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80e36e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80e36e6:	d007      	beq.n	80e36f8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80e36e8:	e00f      	b.n	80e370a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e36ea:	4b4d      	ldr	r3, [pc, #308]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e36ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e36ee:	4a4c      	ldr	r2, [pc, #304]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e36f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e36f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80e36f6:	e00c      	b.n	80e3712 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80e36f8:	687b      	ldr	r3, [r7, #4]
 80e36fa:	3324      	adds	r3, #36	; 0x24
 80e36fc:	2101      	movs	r1, #1
 80e36fe:	4618      	mov	r0, r3
 80e3700:	f000 f9a0 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e3704:	4603      	mov	r3, r0
 80e3706:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80e3708:	e003      	b.n	80e3712 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e370a:	2301      	movs	r3, #1
 80e370c:	75fb      	strb	r3, [r7, #23]
      break;
 80e370e:	e000      	b.n	80e3712 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80e3710:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3712:	7dfb      	ldrb	r3, [r7, #23]
 80e3714:	2b00      	cmp	r3, #0
 80e3716:	d10a      	bne.n	80e372e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80e3718:	4b41      	ldr	r3, [pc, #260]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e371c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80e3720:	687b      	ldr	r3, [r7, #4]
 80e3722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80e3726:	493e      	ldr	r1, [pc, #248]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3728:	4313      	orrs	r3, r2
 80e372a:	654b      	str	r3, [r1, #84]	; 0x54
 80e372c:	e001      	b.n	80e3732 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e372e:	7dfb      	ldrb	r3, [r7, #23]
 80e3730:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80e3732:	687b      	ldr	r3, [r7, #4]
 80e3734:	681b      	ldr	r3, [r3, #0]
 80e3736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80e373a:	2b00      	cmp	r3, #0
 80e373c:	d029      	beq.n	80e3792 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80e373e:	687b      	ldr	r3, [r7, #4]
 80e3740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3742:	2b00      	cmp	r3, #0
 80e3744:	d003      	beq.n	80e374e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80e3746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80e374a:	d007      	beq.n	80e375c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80e374c:	e00f      	b.n	80e376e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e374e:	4b34      	ldr	r3, [pc, #208]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3752:	4a33      	ldr	r2, [pc, #204]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e3758:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80e375a:	e00b      	b.n	80e3774 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80e375c:	687b      	ldr	r3, [r7, #4]
 80e375e:	3304      	adds	r3, #4
 80e3760:	2102      	movs	r1, #2
 80e3762:	4618      	mov	r0, r3
 80e3764:	f000 f8bc 	bl	80e38e0 <RCCEx_PLL2_Config>
 80e3768:	4603      	mov	r3, r0
 80e376a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80e376c:	e002      	b.n	80e3774 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80e376e:	2301      	movs	r3, #1
 80e3770:	75fb      	strb	r3, [r7, #23]
      break;
 80e3772:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3774:	7dfb      	ldrb	r3, [r7, #23]
 80e3776:	2b00      	cmp	r3, #0
 80e3778:	d109      	bne.n	80e378e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80e377a:	4b29      	ldr	r3, [pc, #164]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e377e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80e3782:	687b      	ldr	r3, [r7, #4]
 80e3784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3786:	4926      	ldr	r1, [pc, #152]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3788:	4313      	orrs	r3, r2
 80e378a:	64cb      	str	r3, [r1, #76]	; 0x4c
 80e378c:	e001      	b.n	80e3792 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e378e:	7dfb      	ldrb	r3, [r7, #23]
 80e3790:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80e3792:	687b      	ldr	r3, [r7, #4]
 80e3794:	681b      	ldr	r3, [r3, #0]
 80e3796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e379a:	2b00      	cmp	r3, #0
 80e379c:	d00a      	beq.n	80e37b4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80e379e:	687b      	ldr	r3, [r7, #4]
 80e37a0:	3324      	adds	r3, #36	; 0x24
 80e37a2:	2102      	movs	r1, #2
 80e37a4:	4618      	mov	r0, r3
 80e37a6:	f000 f94d 	bl	80e3a44 <RCCEx_PLL3_Config>
 80e37aa:	4603      	mov	r3, r0
 80e37ac:	2b00      	cmp	r3, #0
 80e37ae:	d001      	beq.n	80e37b4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80e37b0:	2301      	movs	r3, #1
 80e37b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80e37b4:	687b      	ldr	r3, [r7, #4]
 80e37b6:	681b      	ldr	r3, [r3, #0]
 80e37b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80e37bc:	2b00      	cmp	r3, #0
 80e37be:	d033      	beq.n	80e3828 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80e37c0:	687b      	ldr	r3, [r7, #4]
 80e37c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80e37c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e37c8:	d017      	beq.n	80e37fa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80e37ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80e37ce:	d811      	bhi.n	80e37f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80e37d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80e37d4:	d013      	beq.n	80e37fe <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80e37d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80e37da:	d80b      	bhi.n	80e37f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80e37dc:	2b00      	cmp	r3, #0
 80e37de:	d010      	beq.n	80e3802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80e37e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80e37e4:	d106      	bne.n	80e37f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80e37e6:	4b0e      	ldr	r3, [pc, #56]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e37e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e37ea:	4a0d      	ldr	r2, [pc, #52]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e37ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80e37f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80e37f2:	e007      	b.n	80e3804 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80e37f4:	2301      	movs	r3, #1
 80e37f6:	75fb      	strb	r3, [r7, #23]
      break;
 80e37f8:	e004      	b.n	80e3804 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e37fa:	bf00      	nop
 80e37fc:	e002      	b.n	80e3804 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e37fe:	bf00      	nop
 80e3800:	e000      	b.n	80e3804 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80e3802:	bf00      	nop
    }

    if(ret == HAL_OK)
 80e3804:	7dfb      	ldrb	r3, [r7, #23]
 80e3806:	2b00      	cmp	r3, #0
 80e3808:	d10c      	bne.n	80e3824 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80e380a:	4b05      	ldr	r3, [pc, #20]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e380e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80e3812:	687b      	ldr	r3, [r7, #4]
 80e3814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80e3816:	4902      	ldr	r1, [pc, #8]	; (80e3820 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80e3818:	4313      	orrs	r3, r2
 80e381a:	654b      	str	r3, [r1, #84]	; 0x54
 80e381c:	e004      	b.n	80e3828 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80e381e:	bf00      	nop
 80e3820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80e3824:	7dfb      	ldrb	r3, [r7, #23]
 80e3826:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80e3828:	687b      	ldr	r3, [r7, #4]
 80e382a:	681b      	ldr	r3, [r3, #0]
 80e382c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80e3830:	2b00      	cmp	r3, #0
 80e3832:	d008      	beq.n	80e3846 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80e3834:	4b29      	ldr	r3, [pc, #164]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3838:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80e383c:	687b      	ldr	r3, [r7, #4]
 80e383e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80e3840:	4926      	ldr	r1, [pc, #152]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3842:	4313      	orrs	r3, r2
 80e3844:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80e3846:	687b      	ldr	r3, [r7, #4]
 80e3848:	681b      	ldr	r3, [r3, #0]
 80e384a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80e384e:	2b00      	cmp	r3, #0
 80e3850:	d008      	beq.n	80e3864 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80e3852:	4b22      	ldr	r3, [pc, #136]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e3856:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80e385a:	687b      	ldr	r3, [r7, #4]
 80e385c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80e385e:	491f      	ldr	r1, [pc, #124]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3860:	4313      	orrs	r3, r2
 80e3862:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80e3864:	687b      	ldr	r3, [r7, #4]
 80e3866:	681b      	ldr	r3, [r3, #0]
 80e3868:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80e386c:	2b00      	cmp	r3, #0
 80e386e:	d00d      	beq.n	80e388c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80e3870:	4b1a      	ldr	r3, [pc, #104]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3872:	691b      	ldr	r3, [r3, #16]
 80e3874:	4a19      	ldr	r2, [pc, #100]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3876:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80e387a:	6113      	str	r3, [r2, #16]
 80e387c:	4b17      	ldr	r3, [pc, #92]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e387e:	691a      	ldr	r2, [r3, #16]
 80e3880:	687b      	ldr	r3, [r7, #4]
 80e3882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80e3886:	4915      	ldr	r1, [pc, #84]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3888:	4313      	orrs	r3, r2
 80e388a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80e388c:	687b      	ldr	r3, [r7, #4]
 80e388e:	681b      	ldr	r3, [r3, #0]
 80e3890:	2b00      	cmp	r3, #0
 80e3892:	da08      	bge.n	80e38a6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80e3894:	4b11      	ldr	r3, [pc, #68]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e3896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80e3898:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80e389c:	687b      	ldr	r3, [r7, #4]
 80e389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80e38a0:	490e      	ldr	r1, [pc, #56]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e38a2:	4313      	orrs	r3, r2
 80e38a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80e38a6:	687b      	ldr	r3, [r7, #4]
 80e38a8:	681b      	ldr	r3, [r3, #0]
 80e38aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80e38ae:	2b00      	cmp	r3, #0
 80e38b0:	d009      	beq.n	80e38c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80e38b2:	4b0a      	ldr	r3, [pc, #40]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e38b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80e38b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80e38ba:	687b      	ldr	r3, [r7, #4]
 80e38bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80e38c0:	4906      	ldr	r1, [pc, #24]	; (80e38dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80e38c2:	4313      	orrs	r3, r2
 80e38c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80e38c6:	7dbb      	ldrb	r3, [r7, #22]
 80e38c8:	2b00      	cmp	r3, #0
 80e38ca:	d101      	bne.n	80e38d0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80e38cc:	2300      	movs	r3, #0
 80e38ce:	e000      	b.n	80e38d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80e38d0:	2301      	movs	r3, #1
}
 80e38d2:	4618      	mov	r0, r3
 80e38d4:	3718      	adds	r7, #24
 80e38d6:	46bd      	mov	sp, r7
 80e38d8:	bd80      	pop	{r7, pc}
 80e38da:	bf00      	nop
 80e38dc:	58024400 	.word	0x58024400

080e38e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80e38e0:	b580      	push	{r7, lr}
 80e38e2:	b084      	sub	sp, #16
 80e38e4:	af00      	add	r7, sp, #0
 80e38e6:	6078      	str	r0, [r7, #4]
 80e38e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80e38ea:	2300      	movs	r3, #0
 80e38ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80e38ee:	4b53      	ldr	r3, [pc, #332]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e38f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e38f2:	f003 0303 	and.w	r3, r3, #3
 80e38f6:	2b03      	cmp	r3, #3
 80e38f8:	d101      	bne.n	80e38fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80e38fa:	2301      	movs	r3, #1
 80e38fc:	e099      	b.n	80e3a32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80e38fe:	4b4f      	ldr	r3, [pc, #316]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e3900:	681b      	ldr	r3, [r3, #0]
 80e3902:	4a4e      	ldr	r2, [pc, #312]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e3904:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80e3908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e390a:	f7fd f8d5 	bl	80e0ab8 <HAL_GetTick>
 80e390e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80e3910:	e008      	b.n	80e3924 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80e3912:	f7fd f8d1 	bl	80e0ab8 <HAL_GetTick>
 80e3916:	4602      	mov	r2, r0
 80e3918:	68bb      	ldr	r3, [r7, #8]
 80e391a:	1ad3      	subs	r3, r2, r3
 80e391c:	2b02      	cmp	r3, #2
 80e391e:	d901      	bls.n	80e3924 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80e3920:	2303      	movs	r3, #3
 80e3922:	e086      	b.n	80e3a32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80e3924:	4b45      	ldr	r3, [pc, #276]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e3926:	681b      	ldr	r3, [r3, #0]
 80e3928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e392c:	2b00      	cmp	r3, #0
 80e392e:	d1f0      	bne.n	80e3912 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80e3930:	4b42      	ldr	r3, [pc, #264]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e3932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e3934:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80e3938:	687b      	ldr	r3, [r7, #4]
 80e393a:	681b      	ldr	r3, [r3, #0]
 80e393c:	031b      	lsls	r3, r3, #12
 80e393e:	493f      	ldr	r1, [pc, #252]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e3940:	4313      	orrs	r3, r2
 80e3942:	628b      	str	r3, [r1, #40]	; 0x28
 80e3944:	687b      	ldr	r3, [r7, #4]
 80e3946:	685b      	ldr	r3, [r3, #4]
 80e3948:	3b01      	subs	r3, #1
 80e394a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e394e:	687b      	ldr	r3, [r7, #4]
 80e3950:	689b      	ldr	r3, [r3, #8]
 80e3952:	3b01      	subs	r3, #1
 80e3954:	025b      	lsls	r3, r3, #9
 80e3956:	b29b      	uxth	r3, r3
 80e3958:	431a      	orrs	r2, r3
 80e395a:	687b      	ldr	r3, [r7, #4]
 80e395c:	68db      	ldr	r3, [r3, #12]
 80e395e:	3b01      	subs	r3, #1
 80e3960:	041b      	lsls	r3, r3, #16
 80e3962:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e3966:	431a      	orrs	r2, r3
 80e3968:	687b      	ldr	r3, [r7, #4]
 80e396a:	691b      	ldr	r3, [r3, #16]
 80e396c:	3b01      	subs	r3, #1
 80e396e:	061b      	lsls	r3, r3, #24
 80e3970:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e3974:	4931      	ldr	r1, [pc, #196]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e3976:	4313      	orrs	r3, r2
 80e3978:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80e397a:	4b30      	ldr	r3, [pc, #192]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e397e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80e3982:	687b      	ldr	r3, [r7, #4]
 80e3984:	695b      	ldr	r3, [r3, #20]
 80e3986:	492d      	ldr	r1, [pc, #180]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e3988:	4313      	orrs	r3, r2
 80e398a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80e398c:	4b2b      	ldr	r3, [pc, #172]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3990:	f023 0220 	bic.w	r2, r3, #32
 80e3994:	687b      	ldr	r3, [r7, #4]
 80e3996:	699b      	ldr	r3, [r3, #24]
 80e3998:	4928      	ldr	r1, [pc, #160]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e399a:	4313      	orrs	r3, r2
 80e399c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80e399e:	4b27      	ldr	r3, [pc, #156]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e39a2:	4a26      	ldr	r2, [pc, #152]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39a4:	f023 0310 	bic.w	r3, r3, #16
 80e39a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80e39aa:	4b24      	ldr	r3, [pc, #144]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80e39ae:	4b24      	ldr	r3, [pc, #144]	; (80e3a40 <RCCEx_PLL2_Config+0x160>)
 80e39b0:	4013      	ands	r3, r2
 80e39b2:	687a      	ldr	r2, [r7, #4]
 80e39b4:	69d2      	ldr	r2, [r2, #28]
 80e39b6:	00d2      	lsls	r2, r2, #3
 80e39b8:	4920      	ldr	r1, [pc, #128]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39ba:	4313      	orrs	r3, r2
 80e39bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80e39be:	4b1f      	ldr	r3, [pc, #124]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e39c2:	4a1e      	ldr	r2, [pc, #120]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39c4:	f043 0310 	orr.w	r3, r3, #16
 80e39c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80e39ca:	683b      	ldr	r3, [r7, #0]
 80e39cc:	2b00      	cmp	r3, #0
 80e39ce:	d106      	bne.n	80e39de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80e39d0:	4b1a      	ldr	r3, [pc, #104]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e39d4:	4a19      	ldr	r2, [pc, #100]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80e39da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e39dc:	e00f      	b.n	80e39fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80e39de:	683b      	ldr	r3, [r7, #0]
 80e39e0:	2b01      	cmp	r3, #1
 80e39e2:	d106      	bne.n	80e39f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80e39e4:	4b15      	ldr	r3, [pc, #84]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e39e8:	4a14      	ldr	r2, [pc, #80]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80e39ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e39f0:	e005      	b.n	80e39fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80e39f2:	4b12      	ldr	r3, [pc, #72]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e39f6:	4a11      	ldr	r2, [pc, #68]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e39f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80e39fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80e39fe:	4b0f      	ldr	r3, [pc, #60]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e3a00:	681b      	ldr	r3, [r3, #0]
 80e3a02:	4a0e      	ldr	r2, [pc, #56]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e3a04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80e3a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e3a0a:	f7fd f855 	bl	80e0ab8 <HAL_GetTick>
 80e3a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80e3a10:	e008      	b.n	80e3a24 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80e3a12:	f7fd f851 	bl	80e0ab8 <HAL_GetTick>
 80e3a16:	4602      	mov	r2, r0
 80e3a18:	68bb      	ldr	r3, [r7, #8]
 80e3a1a:	1ad3      	subs	r3, r2, r3
 80e3a1c:	2b02      	cmp	r3, #2
 80e3a1e:	d901      	bls.n	80e3a24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80e3a20:	2303      	movs	r3, #3
 80e3a22:	e006      	b.n	80e3a32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80e3a24:	4b05      	ldr	r3, [pc, #20]	; (80e3a3c <RCCEx_PLL2_Config+0x15c>)
 80e3a26:	681b      	ldr	r3, [r3, #0]
 80e3a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80e3a2c:	2b00      	cmp	r3, #0
 80e3a2e:	d0f0      	beq.n	80e3a12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80e3a30:	7bfb      	ldrb	r3, [r7, #15]
}
 80e3a32:	4618      	mov	r0, r3
 80e3a34:	3710      	adds	r7, #16
 80e3a36:	46bd      	mov	sp, r7
 80e3a38:	bd80      	pop	{r7, pc}
 80e3a3a:	bf00      	nop
 80e3a3c:	58024400 	.word	0x58024400
 80e3a40:	ffff0007 	.word	0xffff0007

080e3a44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80e3a44:	b580      	push	{r7, lr}
 80e3a46:	b084      	sub	sp, #16
 80e3a48:	af00      	add	r7, sp, #0
 80e3a4a:	6078      	str	r0, [r7, #4]
 80e3a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80e3a4e:	2300      	movs	r3, #0
 80e3a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80e3a52:	4b53      	ldr	r3, [pc, #332]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e3a56:	f003 0303 	and.w	r3, r3, #3
 80e3a5a:	2b03      	cmp	r3, #3
 80e3a5c:	d101      	bne.n	80e3a62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80e3a5e:	2301      	movs	r3, #1
 80e3a60:	e099      	b.n	80e3b96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80e3a62:	4b4f      	ldr	r3, [pc, #316]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3a64:	681b      	ldr	r3, [r3, #0]
 80e3a66:	4a4e      	ldr	r2, [pc, #312]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80e3a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e3a6e:	f7fd f823 	bl	80e0ab8 <HAL_GetTick>
 80e3a72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80e3a74:	e008      	b.n	80e3a88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80e3a76:	f7fd f81f 	bl	80e0ab8 <HAL_GetTick>
 80e3a7a:	4602      	mov	r2, r0
 80e3a7c:	68bb      	ldr	r3, [r7, #8]
 80e3a7e:	1ad3      	subs	r3, r2, r3
 80e3a80:	2b02      	cmp	r3, #2
 80e3a82:	d901      	bls.n	80e3a88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80e3a84:	2303      	movs	r3, #3
 80e3a86:	e086      	b.n	80e3b96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80e3a88:	4b45      	ldr	r3, [pc, #276]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3a8a:	681b      	ldr	r3, [r3, #0]
 80e3a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e3a90:	2b00      	cmp	r3, #0
 80e3a92:	d1f0      	bne.n	80e3a76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80e3a94:	4b42      	ldr	r3, [pc, #264]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80e3a98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80e3a9c:	687b      	ldr	r3, [r7, #4]
 80e3a9e:	681b      	ldr	r3, [r3, #0]
 80e3aa0:	051b      	lsls	r3, r3, #20
 80e3aa2:	493f      	ldr	r1, [pc, #252]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3aa4:	4313      	orrs	r3, r2
 80e3aa6:	628b      	str	r3, [r1, #40]	; 0x28
 80e3aa8:	687b      	ldr	r3, [r7, #4]
 80e3aaa:	685b      	ldr	r3, [r3, #4]
 80e3aac:	3b01      	subs	r3, #1
 80e3aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80e3ab2:	687b      	ldr	r3, [r7, #4]
 80e3ab4:	689b      	ldr	r3, [r3, #8]
 80e3ab6:	3b01      	subs	r3, #1
 80e3ab8:	025b      	lsls	r3, r3, #9
 80e3aba:	b29b      	uxth	r3, r3
 80e3abc:	431a      	orrs	r2, r3
 80e3abe:	687b      	ldr	r3, [r7, #4]
 80e3ac0:	68db      	ldr	r3, [r3, #12]
 80e3ac2:	3b01      	subs	r3, #1
 80e3ac4:	041b      	lsls	r3, r3, #16
 80e3ac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80e3aca:	431a      	orrs	r2, r3
 80e3acc:	687b      	ldr	r3, [r7, #4]
 80e3ace:	691b      	ldr	r3, [r3, #16]
 80e3ad0:	3b01      	subs	r3, #1
 80e3ad2:	061b      	lsls	r3, r3, #24
 80e3ad4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80e3ad8:	4931      	ldr	r1, [pc, #196]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3ada:	4313      	orrs	r3, r2
 80e3adc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80e3ade:	4b30      	ldr	r3, [pc, #192]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80e3ae6:	687b      	ldr	r3, [r7, #4]
 80e3ae8:	695b      	ldr	r3, [r3, #20]
 80e3aea:	492d      	ldr	r1, [pc, #180]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3aec:	4313      	orrs	r3, r2
 80e3aee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80e3af0:	4b2b      	ldr	r3, [pc, #172]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3af4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80e3af8:	687b      	ldr	r3, [r7, #4]
 80e3afa:	699b      	ldr	r3, [r3, #24]
 80e3afc:	4928      	ldr	r1, [pc, #160]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3afe:	4313      	orrs	r3, r2
 80e3b00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80e3b02:	4b27      	ldr	r3, [pc, #156]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3b06:	4a26      	ldr	r2, [pc, #152]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80e3b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80e3b0e:	4b24      	ldr	r3, [pc, #144]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80e3b12:	4b24      	ldr	r3, [pc, #144]	; (80e3ba4 <RCCEx_PLL3_Config+0x160>)
 80e3b14:	4013      	ands	r3, r2
 80e3b16:	687a      	ldr	r2, [r7, #4]
 80e3b18:	69d2      	ldr	r2, [r2, #28]
 80e3b1a:	00d2      	lsls	r2, r2, #3
 80e3b1c:	4920      	ldr	r1, [pc, #128]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b1e:	4313      	orrs	r3, r2
 80e3b20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80e3b22:	4b1f      	ldr	r3, [pc, #124]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3b26:	4a1e      	ldr	r2, [pc, #120]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80e3b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80e3b2e:	683b      	ldr	r3, [r7, #0]
 80e3b30:	2b00      	cmp	r3, #0
 80e3b32:	d106      	bne.n	80e3b42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80e3b34:	4b1a      	ldr	r3, [pc, #104]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3b38:	4a19      	ldr	r2, [pc, #100]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80e3b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e3b40:	e00f      	b.n	80e3b62 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80e3b42:	683b      	ldr	r3, [r7, #0]
 80e3b44:	2b01      	cmp	r3, #1
 80e3b46:	d106      	bne.n	80e3b56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80e3b48:	4b15      	ldr	r3, [pc, #84]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3b4c:	4a14      	ldr	r2, [pc, #80]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80e3b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 80e3b54:	e005      	b.n	80e3b62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80e3b56:	4b12      	ldr	r3, [pc, #72]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80e3b5a:	4a11      	ldr	r2, [pc, #68]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80e3b60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80e3b62:	4b0f      	ldr	r3, [pc, #60]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b64:	681b      	ldr	r3, [r3, #0]
 80e3b66:	4a0e      	ldr	r2, [pc, #56]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80e3b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80e3b6e:	f7fc ffa3 	bl	80e0ab8 <HAL_GetTick>
 80e3b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80e3b74:	e008      	b.n	80e3b88 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80e3b76:	f7fc ff9f 	bl	80e0ab8 <HAL_GetTick>
 80e3b7a:	4602      	mov	r2, r0
 80e3b7c:	68bb      	ldr	r3, [r7, #8]
 80e3b7e:	1ad3      	subs	r3, r2, r3
 80e3b80:	2b02      	cmp	r3, #2
 80e3b82:	d901      	bls.n	80e3b88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80e3b84:	2303      	movs	r3, #3
 80e3b86:	e006      	b.n	80e3b96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80e3b88:	4b05      	ldr	r3, [pc, #20]	; (80e3ba0 <RCCEx_PLL3_Config+0x15c>)
 80e3b8a:	681b      	ldr	r3, [r3, #0]
 80e3b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80e3b90:	2b00      	cmp	r3, #0
 80e3b92:	d0f0      	beq.n	80e3b76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80e3b94:	7bfb      	ldrb	r3, [r7, #15]
}
 80e3b96:	4618      	mov	r0, r3
 80e3b98:	3710      	adds	r7, #16
 80e3b9a:	46bd      	mov	sp, r7
 80e3b9c:	bd80      	pop	{r7, pc}
 80e3b9e:	bf00      	nop
 80e3ba0:	58024400 	.word	0x58024400
 80e3ba4:	ffff0007 	.word	0xffff0007

080e3ba8 <__libc_init_array>:
 80e3ba8:	b570      	push	{r4, r5, r6, lr}
 80e3baa:	4d0d      	ldr	r5, [pc, #52]	; (80e3be0 <__libc_init_array+0x38>)
 80e3bac:	4c0d      	ldr	r4, [pc, #52]	; (80e3be4 <__libc_init_array+0x3c>)
 80e3bae:	1b64      	subs	r4, r4, r5
 80e3bb0:	10a4      	asrs	r4, r4, #2
 80e3bb2:	2600      	movs	r6, #0
 80e3bb4:	42a6      	cmp	r6, r4
 80e3bb6:	d109      	bne.n	80e3bcc <__libc_init_array+0x24>
 80e3bb8:	4d0b      	ldr	r5, [pc, #44]	; (80e3be8 <__libc_init_array+0x40>)
 80e3bba:	4c0c      	ldr	r4, [pc, #48]	; (80e3bec <__libc_init_array+0x44>)
 80e3bbc:	f000 f82e 	bl	80e3c1c <_init>
 80e3bc0:	1b64      	subs	r4, r4, r5
 80e3bc2:	10a4      	asrs	r4, r4, #2
 80e3bc4:	2600      	movs	r6, #0
 80e3bc6:	42a6      	cmp	r6, r4
 80e3bc8:	d105      	bne.n	80e3bd6 <__libc_init_array+0x2e>
 80e3bca:	bd70      	pop	{r4, r5, r6, pc}
 80e3bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 80e3bd0:	4798      	blx	r3
 80e3bd2:	3601      	adds	r6, #1
 80e3bd4:	e7ee      	b.n	80e3bb4 <__libc_init_array+0xc>
 80e3bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 80e3bda:	4798      	blx	r3
 80e3bdc:	3601      	adds	r6, #1
 80e3bde:	e7f2      	b.n	80e3bc6 <__libc_init_array+0x1e>
 80e3be0:	080e3ca8 	.word	0x080e3ca8
 80e3be4:	080e3ca8 	.word	0x080e3ca8
 80e3be8:	080e3ca8 	.word	0x080e3ca8
 80e3bec:	080e3cac 	.word	0x080e3cac

080e3bf0 <memcpy>:
 80e3bf0:	440a      	add	r2, r1
 80e3bf2:	4291      	cmp	r1, r2
 80e3bf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80e3bf8:	d100      	bne.n	80e3bfc <memcpy+0xc>
 80e3bfa:	4770      	bx	lr
 80e3bfc:	b510      	push	{r4, lr}
 80e3bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 80e3c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 80e3c06:	4291      	cmp	r1, r2
 80e3c08:	d1f9      	bne.n	80e3bfe <memcpy+0xe>
 80e3c0a:	bd10      	pop	{r4, pc}

080e3c0c <memset>:
 80e3c0c:	4402      	add	r2, r0
 80e3c0e:	4603      	mov	r3, r0
 80e3c10:	4293      	cmp	r3, r2
 80e3c12:	d100      	bne.n	80e3c16 <memset+0xa>
 80e3c14:	4770      	bx	lr
 80e3c16:	f803 1b01 	strb.w	r1, [r3], #1
 80e3c1a:	e7f9      	b.n	80e3c10 <memset+0x4>

080e3c1c <_init>:
 80e3c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80e3c1e:	bf00      	nop
 80e3c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80e3c22:	bc08      	pop	{r3}
 80e3c24:	469e      	mov	lr, r3
 80e3c26:	4770      	bx	lr

080e3c28 <_fini>:
 80e3c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80e3c2a:	bf00      	nop
 80e3c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80e3c2e:	bc08      	pop	{r3}
 80e3c30:	469e      	mov	lr, r3
 80e3c32:	4770      	bx	lr
